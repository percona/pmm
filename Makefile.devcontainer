# Devcontainer Makefile.

include Makefile.include

release-dev-managed:              ## Build pmm-managed
	make -C managed release-dev

release-dev-agent:                ## Build pmm-agent
	make -C agent release-dev

# used by host Makefile
_bash:
	/bin/bash

PMM_RELEASE_PATH ?= ./bin

run-managed:                      ## Replace pmm-managed from build, restart and tail logs
	supervisorctl stop pmm-managed
	cp $(PMM_RELEASE_PATH)/pmm-managed /usr/sbin/pmm-managed
	supervisorctl start pmm-managed &
	supervisorctl tail -f pmm-managed

run-agent:                        ## Replace pmm-agent from build and restart
	supervisorctl stop pmm-agent
	cp $(PMM_RELEASE_PATH)/pmm-agent /usr/sbin/pmm-agent
	supervisorctl start pmm-agent

run: release-dev-agent run-agent release-dev-managed run-managed       ## Run pmm-managed and pmm-agent

# TODO https://jira.percona.com/browse/PMM-3484, see maincover_test.go
# run-race-cover: install-race    ## Run pmm-managed with race detector and collect coverage information.
# 	go test -coverpkg="github.com/percona/pmm/managed/..." \
# 			-tags maincover \
# 			$(PMM_LD_FLAGS) \
# 			-race -c -o bin/pmm-managed.test
# 	bin/pmm-managed.test -test.coverprofile=cover.out -test.run=TestMainCover $(RUN_FLAGS)

psql:                           ## Open database for the pmm-managed instance in psql shell.
	env PGPASSWORD=pmm-managed psql -U pmm-managed pmm-managed

psql-test:                      ## Open database used in unit tests in psql shell.
	env psql -U postgres pmm-managed-dev

dlv/attach:						## Attache Delve to `pmm-managed`
	dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient attach $(shell pgrep pmm-managed)
