// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type chatSessionTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *chatSessionTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("chat_sessions").
func (v *chatSessionTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *chatSessionTableType) Columns() []string {
	return []string{
		"id",
		"user_id",
		"title",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *chatSessionTableType) NewStruct() reform.Struct {
	return new(ChatSession)
}

// NewRecord makes a new record for that table.
func (v *chatSessionTableType) NewRecord() reform.Record {
	return new(ChatSession)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *chatSessionTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ChatSessionTable represents chat_sessions view or table in SQL database.
var ChatSessionTable = &chatSessionTableType{
	s: parse.StructInfo{
		Type:    "ChatSession",
		SQLName: "chat_sessions",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "UserID", Type: "string", Column: "user_id"},
			{Name: "Title", Type: "string", Column: "title"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(ChatSession).Values(),
}

// String returns a string representation of this struct or record.
func (s ChatSession) String() string {
	res := make([]string, 5)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "UserID: " + reform.Inspect(s.UserID, true)
	res[2] = "Title: " + reform.Inspect(s.Title, true)
	res[3] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[4] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ChatSession) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.UserID,
		s.Title,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ChatSession) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.UserID,
		&s.Title,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *ChatSession) View() reform.View {
	return ChatSessionTable
}

// Table returns Table object for that record.
func (s *ChatSession) Table() reform.Table {
	return ChatSessionTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatSession) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatSession) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ChatSession) HasPK() bool {
	return s.ID != ChatSessionTable.z[ChatSessionTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ChatSession) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ChatSessionTable
	_ reform.Struct = (*ChatSession)(nil)
	_ reform.Table  = ChatSessionTable
	_ reform.Record = (*ChatSession)(nil)
	_ fmt.Stringer  = (*ChatSession)(nil)
)

type chatMessageTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *chatMessageTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("chat_messages").
func (v *chatMessageTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *chatMessageTableType) Columns() []string {
	return []string{
		"id",
		"session_id",
		"role",
		"content",
		"tool_calls",
		"tool_executions",
		"approval_request",
		"created_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *chatMessageTableType) NewStruct() reform.Struct {
	return new(ChatMessage)
}

// NewRecord makes a new record for that table.
func (v *chatMessageTableType) NewRecord() reform.Record {
	return new(ChatMessage)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *chatMessageTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ChatMessageTable represents chat_messages view or table in SQL database.
var ChatMessageTable = &chatMessageTableType{
	s: parse.StructInfo{
		Type:    "ChatMessage",
		SQLName: "chat_messages",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "SessionID", Type: "string", Column: "session_id"},
			{Name: "Role", Type: "string", Column: "role"},
			{Name: "Content", Type: "string", Column: "content"},
			{Name: "ToolCalls", Type: "*ToolCallsField", Column: "tool_calls"},
			{Name: "ToolExecutions", Type: "*ToolExecutionsField", Column: "tool_executions"},
			{Name: "ApprovalRequest", Type: "*ApprovalRequestField", Column: "approval_request"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(ChatMessage).Values(),
}

// String returns a string representation of this struct or record.
func (s ChatMessage) String() string {
	res := make([]string, 8)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "SessionID: " + reform.Inspect(s.SessionID, true)
	res[2] = "Role: " + reform.Inspect(s.Role, true)
	res[3] = "Content: " + reform.Inspect(s.Content, true)
	res[4] = "ToolCalls: " + reform.Inspect(s.ToolCalls, true)
	res[5] = "ToolExecutions: " + reform.Inspect(s.ToolExecutions, true)
	res[6] = "ApprovalRequest: " + reform.Inspect(s.ApprovalRequest, true)
	res[7] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ChatMessage) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.SessionID,
		s.Role,
		s.Content,
		s.ToolCalls,
		s.ToolExecutions,
		s.ApprovalRequest,
		s.CreatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ChatMessage) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.SessionID,
		&s.Role,
		&s.Content,
		&s.ToolCalls,
		&s.ToolExecutions,
		&s.ApprovalRequest,
		&s.CreatedAt,
	}
}

// View returns View object for that struct.
func (s *ChatMessage) View() reform.View {
	return ChatMessageTable
}

// Table returns Table object for that record.
func (s *ChatMessage) Table() reform.Table {
	return ChatMessageTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatMessage) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatMessage) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ChatMessage) HasPK() bool {
	return s.ID != ChatMessageTable.z[ChatMessageTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ChatMessage) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ChatMessageTable
	_ reform.Struct = (*ChatMessage)(nil)
	_ reform.Table  = ChatMessageTable
	_ reform.Record = (*ChatMessage)(nil)
	_ fmt.Stringer  = (*ChatMessage)(nil)
)

type chatAttachmentTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *chatAttachmentTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("chat_attachments").
func (v *chatAttachmentTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *chatAttachmentTableType) Columns() []string {
	return []string{
		"id",
		"message_id",
		"filename",
		"mime_type",
		"size",
		"content",
		"created_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *chatAttachmentTableType) NewStruct() reform.Struct {
	return new(ChatAttachment)
}

// NewRecord makes a new record for that table.
func (v *chatAttachmentTableType) NewRecord() reform.Record {
	return new(ChatAttachment)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *chatAttachmentTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ChatAttachmentTable represents chat_attachments view or table in SQL database.
var ChatAttachmentTable = &chatAttachmentTableType{
	s: parse.StructInfo{
		Type:    "ChatAttachment",
		SQLName: "chat_attachments",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "MessageID", Type: "string", Column: "message_id"},
			{Name: "Filename", Type: "string", Column: "filename"},
			{Name: "MimeType", Type: "string", Column: "mime_type"},
			{Name: "Size", Type: "int64", Column: "size"},
			{Name: "Content", Type: "string", Column: "content"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(ChatAttachment).Values(),
}

// String returns a string representation of this struct or record.
func (s ChatAttachment) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "MessageID: " + reform.Inspect(s.MessageID, true)
	res[2] = "Filename: " + reform.Inspect(s.Filename, true)
	res[3] = "MimeType: " + reform.Inspect(s.MimeType, true)
	res[4] = "Size: " + reform.Inspect(s.Size, true)
	res[5] = "Content: " + reform.Inspect(s.Content, true)
	res[6] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ChatAttachment) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.MessageID,
		s.Filename,
		s.MimeType,
		s.Size,
		s.Content,
		s.CreatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ChatAttachment) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.MessageID,
		&s.Filename,
		&s.MimeType,
		&s.Size,
		&s.Content,
		&s.CreatedAt,
	}
}

// View returns View object for that struct.
func (s *ChatAttachment) View() reform.View {
	return ChatAttachmentTable
}

// Table returns Table object for that record.
func (s *ChatAttachment) Table() reform.Table {
	return ChatAttachmentTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatAttachment) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ChatAttachment) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ChatAttachment) HasPK() bool {
	return s.ID != ChatAttachmentTable.z[ChatAttachmentTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ChatAttachment) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ChatAttachmentTable
	_ reform.Struct = (*ChatAttachment)(nil)
	_ reform.Table  = ChatAttachmentTable
	_ reform.Record = (*ChatAttachment)(nil)
	_ fmt.Stringer  = (*ChatAttachment)(nil)
)

func init() {
	parse.AssertUpToDate(&ChatSessionTable.s, new(ChatSession))
	parse.AssertUpToDate(&ChatMessageTable.s, new(ChatMessage))
	parse.AssertUpToDate(&ChatAttachmentTable.s, new(ChatAttachment))
}
