// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListTeamsReader is a Reader for the ListTeams structure.
type ListTeamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTeamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTeamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListTeamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTeamsOK creates a ListTeamsOK with default headers values
func NewListTeamsOK() *ListTeamsOK {
	return &ListTeamsOK{}
}

/*
ListTeamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListTeamsOK struct {
	Payload *ListTeamsOKBody
}

func (o *ListTeamsOK) Error() string {
	return fmt.Sprintf("[POST /v1/team/list][%d] listTeamsOk  %+v", 200, o.Payload)
}

func (o *ListTeamsOK) GetPayload() *ListTeamsOKBody {
	return o.Payload
}

func (o *ListTeamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTeamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTeamsDefault creates a ListTeamsDefault with default headers values
func NewListTeamsDefault(code int) *ListTeamsDefault {
	return &ListTeamsDefault{
		_statusCode: code,
	}
}

/*
ListTeamsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListTeamsDefault struct {
	_statusCode int

	Payload *ListTeamsDefaultBody
}

// Code gets the status code for the list teams default response
func (o *ListTeamsDefault) Code() int {
	return o._statusCode
}

func (o *ListTeamsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/team/list][%d] ListTeams default  %+v", o._statusCode, o.Payload)
}

func (o *ListTeamsDefault) GetPayload() *ListTeamsDefaultBody {
	return o.Payload
}

func (o *ListTeamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTeamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListTeamsDefaultBody list teams default body
swagger:model ListTeamsDefaultBody
*/
type ListTeamsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListTeamsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list teams default body
func (o *ListTeamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTeamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTeams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTeams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list teams default body based on the context it is used
func (o *ListTeamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTeamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTeams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTeams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTeamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTeamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListTeamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTeamsDefaultBodyDetailsItems0 list teams default body details items0
swagger:model ListTeamsDefaultBodyDetailsItems0
*/
type ListTeamsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list teams default body details items0
func (o *ListTeamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list teams default body details items0 based on context it is used
func (o *ListTeamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTeamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTeamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListTeamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTeamsOKBody list teams OK body
swagger:model ListTeamsOKBody
*/
type ListTeamsOKBody struct {
	// teams
	Teams []*ListTeamsOKBodyTeamsItems0 `json:"teams"`
}

// Validate validates this list teams OK body
func (o *ListTeamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTeamsOKBody) validateTeams(formats strfmt.Registry) error {
	if swag.IsZero(o.Teams) { // not required
		return nil
	}

	for i := 0; i < len(o.Teams); i++ {
		if swag.IsZero(o.Teams[i]) { // not required
			continue
		}

		if o.Teams[i] != nil {
			if err := o.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTeamsOk" + "." + "teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTeamsOk" + "." + "teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list teams OK body based on the context it is used
func (o *ListTeamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTeams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTeamsOKBody) contextValidateTeams(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Teams); i++ {
		if o.Teams[i] != nil {
			if err := o.Teams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTeamsOk" + "." + "teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTeamsOk" + "." + "teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTeamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTeamsOKBody) UnmarshalBinary(b []byte) error {
	var res ListTeamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTeamsOKBodyTeamsItems0 list teams OK body teams items0
swagger:model ListTeamsOKBodyTeamsItems0
*/
type ListTeamsOKBodyTeamsItems0 struct {
	// team id
	TeamID int64 `json:"team_id,omitempty"`

	// List of role IDs assigned to the team.
	RoleIds []int64 `json:"role_ids"`
}

// Validate validates this list teams OK body teams items0
func (o *ListTeamsOKBodyTeamsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list teams OK body teams items0 based on context it is used
func (o *ListTeamsOKBodyTeamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTeamsOKBodyTeamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTeamsOKBodyTeamsItems0) UnmarshalBinary(b []byte) error {
	var res ListTeamsOKBodyTeamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
