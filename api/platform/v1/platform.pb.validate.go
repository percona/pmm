// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/v1/platform.proto

package platformv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectRequestMultiError,
// or nil if none found.
func (m *ConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServerName()) < 1 {
		err := ConnectRequestValidationError{
			field:  "ServerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for PersonalAccessToken

	if len(errors) > 0 {
		return ConnectRequestMultiError(errors)
	}

	return nil
}

// ConnectRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectRequestMultiError) AllErrors() []error { return m }

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectResponseMultiError, or nil if none found.
func (m *ConnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectResponseMultiError(errors)
	}

	return nil
}

// ConnectResponseMultiError is an error wrapping multiple validation errors
// returned by ConnectResponse.ValidateAll() if the designated constraints
// aren't met.
type ConnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectResponseMultiError) AllErrors() []error { return m }

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}

// Validate checks the field values on DisconnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisconnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisconnectRequestMultiError, or nil if none found.
func (m *DisconnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Force

	if len(errors) > 0 {
		return DisconnectRequestMultiError(errors)
	}

	return nil
}

// DisconnectRequestMultiError is an error wrapping multiple validation errors
// returned by DisconnectRequest.ValidateAll() if the designated constraints
// aren't met.
type DisconnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectRequestMultiError) AllErrors() []error { return m }

// DisconnectRequestValidationError is the validation error returned by
// DisconnectRequest.Validate if the designated constraints aren't met.
type DisconnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectRequestValidationError) ErrorName() string {
	return "DisconnectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisconnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectRequestValidationError{}

// Validate checks the field values on DisconnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisconnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisconnectResponseMultiError, or nil if none found.
func (m *DisconnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisconnectResponseMultiError(errors)
	}

	return nil
}

// DisconnectResponseMultiError is an error wrapping multiple validation errors
// returned by DisconnectResponse.ValidateAll() if the designated constraints
// aren't met.
type DisconnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectResponseMultiError) AllErrors() []error { return m }

// DisconnectResponseValidationError is the validation error returned by
// DisconnectResponse.Validate if the designated constraints aren't met.
type DisconnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectResponseValidationError) ErrorName() string {
	return "DisconnectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisconnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectResponseValidationError{}

// Validate checks the field values on SearchOrganizationTicketsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchOrganizationTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationTicketsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchOrganizationTicketsRequestMultiError, or nil if none found.
func (m *SearchOrganizationTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchOrganizationTicketsRequestMultiError(errors)
	}

	return nil
}

// SearchOrganizationTicketsRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchOrganizationTicketsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchOrganizationTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationTicketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationTicketsRequestMultiError) AllErrors() []error { return m }

// SearchOrganizationTicketsRequestValidationError is the validation error
// returned by SearchOrganizationTicketsRequest.Validate if the designated
// constraints aren't met.
type SearchOrganizationTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationTicketsRequestValidationError) ErrorName() string {
	return "SearchOrganizationTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationTicketsRequestValidationError{}

// Validate checks the field values on SearchOrganizationTicketsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchOrganizationTicketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationTicketsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchOrganizationTicketsResponseMultiError, or nil if none found.
func (m *SearchOrganizationTicketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationTicketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTickets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchOrganizationTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchOrganizationTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchOrganizationTicketsResponseValidationError{
					field:  fmt.Sprintf("Tickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchOrganizationTicketsResponseMultiError(errors)
	}

	return nil
}

// SearchOrganizationTicketsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SearchOrganizationTicketsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchOrganizationTicketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationTicketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationTicketsResponseMultiError) AllErrors() []error { return m }

// SearchOrganizationTicketsResponseValidationError is the validation error
// returned by SearchOrganizationTicketsResponse.Validate if the designated
// constraints aren't met.
type SearchOrganizationTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationTicketsResponseValidationError) ErrorName() string {
	return "SearchOrganizationTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationTicketsResponseValidationError{}

// Validate checks the field values on OrganizationTicket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationTicket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationTicket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationTicketMultiError, or nil if none found.
func (m *OrganizationTicket) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationTicket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for ShortDescription

	// no validation rules for Priority

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationTicketValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationTicketValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationTicketValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Department

	// no validation rules for Requester

	// no validation rules for TaskType

	// no validation rules for Url

	if len(errors) > 0 {
		return OrganizationTicketMultiError(errors)
	}

	return nil
}

// OrganizationTicketMultiError is an error wrapping multiple validation errors
// returned by OrganizationTicket.ValidateAll() if the designated constraints
// aren't met.
type OrganizationTicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationTicketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationTicketMultiError) AllErrors() []error { return m }

// OrganizationTicketValidationError is the validation error returned by
// OrganizationTicket.Validate if the designated constraints aren't met.
type OrganizationTicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationTicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationTicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationTicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationTicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationTicketValidationError) ErrorName() string {
	return "OrganizationTicketValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationTicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationTicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationTicketValidationError{}

// Validate checks the field values on SearchOrganizationEntitlementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchOrganizationEntitlementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationEntitlementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchOrganizationEntitlementsRequestMultiError, or nil if none found.
func (m *SearchOrganizationEntitlementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationEntitlementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchOrganizationEntitlementsRequestMultiError(errors)
	}

	return nil
}

// SearchOrganizationEntitlementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchOrganizationEntitlementsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchOrganizationEntitlementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationEntitlementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationEntitlementsRequestMultiError) AllErrors() []error { return m }

// SearchOrganizationEntitlementsRequestValidationError is the validation error
// returned by SearchOrganizationEntitlementsRequest.Validate if the
// designated constraints aren't met.
type SearchOrganizationEntitlementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationEntitlementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationEntitlementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationEntitlementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationEntitlementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationEntitlementsRequestValidationError) ErrorName() string {
	return "SearchOrganizationEntitlementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationEntitlementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationEntitlementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationEntitlementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationEntitlementsRequestValidationError{}

// Validate checks the field values on SearchOrganizationEntitlementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchOrganizationEntitlementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchOrganizationEntitlementsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SearchOrganizationEntitlementsResponseMultiError, or nil if none found.
func (m *SearchOrganizationEntitlementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationEntitlementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntitlements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchOrganizationEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchOrganizationEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchOrganizationEntitlementsResponseValidationError{
					field:  fmt.Sprintf("Entitlements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchOrganizationEntitlementsResponseMultiError(errors)
	}

	return nil
}

// SearchOrganizationEntitlementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchOrganizationEntitlementsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchOrganizationEntitlementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationEntitlementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationEntitlementsResponseMultiError) AllErrors() []error { return m }

// SearchOrganizationEntitlementsResponseValidationError is the validation
// error returned by SearchOrganizationEntitlementsResponse.Validate if the
// designated constraints aren't met.
type SearchOrganizationEntitlementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationEntitlementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationEntitlementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationEntitlementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationEntitlementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationEntitlementsResponseValidationError) ErrorName() string {
	return "SearchOrganizationEntitlementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationEntitlementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationEntitlementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationEntitlementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationEntitlementsResponseValidationError{}

// Validate checks the field values on OrganizationEntitlement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationEntitlement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationEntitlement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationEntitlementMultiError, or nil if none found.
func (m *OrganizationEntitlement) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationEntitlement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Name

	// no validation rules for Summary

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationEntitlementValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationEntitlementValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlatform()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "Platform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationEntitlementValidationError{
					field:  "Platform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlatform()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationEntitlementValidationError{
				field:  "Platform",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Tier != nil {
		// no validation rules for Tier
	}

	if m.TotalUnits != nil {
		// no validation rules for TotalUnits
	}

	if m.UnlimitedUnits != nil {
		// no validation rules for UnlimitedUnits
	}

	if m.SupportLevel != nil {
		// no validation rules for SupportLevel
	}

	if len(errors) > 0 {
		return OrganizationEntitlementMultiError(errors)
	}

	return nil
}

// OrganizationEntitlementMultiError is an error wrapping multiple validation
// errors returned by OrganizationEntitlement.ValidateAll() if the designated
// constraints aren't met.
type OrganizationEntitlementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationEntitlementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationEntitlementMultiError) AllErrors() []error { return m }

// OrganizationEntitlementValidationError is the validation error returned by
// OrganizationEntitlement.Validate if the designated constraints aren't met.
type OrganizationEntitlementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationEntitlementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationEntitlementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationEntitlementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationEntitlementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationEntitlementValidationError) ErrorName() string {
	return "OrganizationEntitlementValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationEntitlementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationEntitlement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationEntitlementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationEntitlementValidationError{}

// Validate checks the field values on GetContactInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContactInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContactInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContactInformationRequestMultiError, or nil if none found.
func (m *GetContactInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContactInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetContactInformationRequestMultiError(errors)
	}

	return nil
}

// GetContactInformationRequestMultiError is an error wrapping multiple
// validation errors returned by GetContactInformationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetContactInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContactInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContactInformationRequestMultiError) AllErrors() []error { return m }

// GetContactInformationRequestValidationError is the validation error returned
// by GetContactInformationRequest.Validate if the designated constraints
// aren't met.
type GetContactInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContactInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContactInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContactInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContactInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContactInformationRequestValidationError) ErrorName() string {
	return "GetContactInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContactInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContactInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContactInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContactInformationRequestValidationError{}

// Validate checks the field values on GetContactInformationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContactInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContactInformationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetContactInformationResponseMultiError, or nil if none found.
func (m *GetContactInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContactInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomerSuccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContactInformationResponseValidationError{
					field:  "CustomerSuccess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContactInformationResponseValidationError{
					field:  "CustomerSuccess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerSuccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContactInformationResponseValidationError{
				field:  "CustomerSuccess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewTicketUrl

	if len(errors) > 0 {
		return GetContactInformationResponseMultiError(errors)
	}

	return nil
}

// GetContactInformationResponseMultiError is an error wrapping multiple
// validation errors returned by GetContactInformationResponse.ValidateAll()
// if the designated constraints aren't met.
type GetContactInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContactInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContactInformationResponseMultiError) AllErrors() []error { return m }

// GetContactInformationResponseValidationError is the validation error
// returned by GetContactInformationResponse.Validate if the designated
// constraints aren't met.
type GetContactInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContactInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContactInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContactInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContactInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContactInformationResponseValidationError) ErrorName() string {
	return "GetContactInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContactInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContactInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContactInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContactInformationResponseValidationError{}

// Validate checks the field values on ServerInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServerInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerInfoRequestMultiError, or nil if none found.
func (m *ServerInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServerInfoRequestMultiError(errors)
	}

	return nil
}

// ServerInfoRequestMultiError is an error wrapping multiple validation errors
// returned by ServerInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type ServerInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerInfoRequestMultiError) AllErrors() []error { return m }

// ServerInfoRequestValidationError is the validation error returned by
// ServerInfoRequest.Validate if the designated constraints aren't met.
type ServerInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerInfoRequestValidationError) ErrorName() string {
	return "ServerInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerInfoRequestValidationError{}

// Validate checks the field values on ServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerInfoResponseMultiError, or nil if none found.
func (m *ServerInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmServerName

	// no validation rules for PmmServerId

	// no validation rules for PmmServerTelemetryId

	// no validation rules for ConnectedToPortal

	if len(errors) > 0 {
		return ServerInfoResponseMultiError(errors)
	}

	return nil
}

// ServerInfoResponseMultiError is an error wrapping multiple validation errors
// returned by ServerInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type ServerInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerInfoResponseMultiError) AllErrors() []error { return m }

// ServerInfoResponseValidationError is the validation error returned by
// ServerInfoResponse.Validate if the designated constraints aren't met.
type ServerInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerInfoResponseValidationError) ErrorName() string {
	return "ServerInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerInfoResponseValidationError{}

// Validate checks the field values on UserStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStatusRequestMultiError, or nil if none found.
func (m *UserStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserStatusRequestMultiError(errors)
	}

	return nil
}

// UserStatusRequestMultiError is an error wrapping multiple validation errors
// returned by UserStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type UserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStatusRequestMultiError) AllErrors() []error { return m }

// UserStatusRequestValidationError is the validation error returned by
// UserStatusRequest.Validate if the designated constraints aren't met.
type UserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStatusRequestValidationError) ErrorName() string {
	return "UserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStatusRequestValidationError{}

// Validate checks the field values on UserStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStatusResponseMultiError, or nil if none found.
func (m *UserStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsPlatformUser

	if len(errors) > 0 {
		return UserStatusResponseMultiError(errors)
	}

	return nil
}

// UserStatusResponseMultiError is an error wrapping multiple validation errors
// returned by UserStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type UserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStatusResponseMultiError) AllErrors() []error { return m }

// UserStatusResponseValidationError is the validation error returned by
// UserStatusResponse.Validate if the designated constraints aren't met.
type UserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStatusResponseValidationError) ErrorName() string {
	return "UserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStatusResponseValidationError{}

// Validate checks the field values on OrganizationEntitlement_Platform with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OrganizationEntitlement_Platform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationEntitlement_Platform with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrganizationEntitlement_PlatformMultiError, or nil if none found.
func (m *OrganizationEntitlement_Platform) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationEntitlement_Platform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.SecurityAdvisor != nil {
		// no validation rules for SecurityAdvisor
	}

	if m.ConfigAdvisor != nil {
		// no validation rules for ConfigAdvisor
	}

	if len(errors) > 0 {
		return OrganizationEntitlement_PlatformMultiError(errors)
	}

	return nil
}

// OrganizationEntitlement_PlatformMultiError is an error wrapping multiple
// validation errors returned by
// OrganizationEntitlement_Platform.ValidateAll() if the designated
// constraints aren't met.
type OrganizationEntitlement_PlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationEntitlement_PlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationEntitlement_PlatformMultiError) AllErrors() []error { return m }

// OrganizationEntitlement_PlatformValidationError is the validation error
// returned by OrganizationEntitlement_Platform.Validate if the designated
// constraints aren't met.
type OrganizationEntitlement_PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationEntitlement_PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationEntitlement_PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationEntitlement_PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationEntitlement_PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationEntitlement_PlatformValidationError) ErrorName() string {
	return "OrganizationEntitlement_PlatformValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationEntitlement_PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationEntitlement_Platform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationEntitlement_PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationEntitlement_PlatformValidationError{}

// Validate checks the field values on
// GetContactInformationResponse_CustomerSuccess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetContactInformationResponse_CustomerSuccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetContactInformationResponse_CustomerSuccess with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetContactInformationResponse_CustomerSuccessMultiError, or nil if none found.
func (m *GetContactInformationResponse_CustomerSuccess) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContactInformationResponse_CustomerSuccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return GetContactInformationResponse_CustomerSuccessMultiError(errors)
	}

	return nil
}

// GetContactInformationResponse_CustomerSuccessMultiError is an error wrapping
// multiple validation errors returned by
// GetContactInformationResponse_CustomerSuccess.ValidateAll() if the
// designated constraints aren't met.
type GetContactInformationResponse_CustomerSuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContactInformationResponse_CustomerSuccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContactInformationResponse_CustomerSuccessMultiError) AllErrors() []error { return m }

// GetContactInformationResponse_CustomerSuccessValidationError is the
// validation error returned by
// GetContactInformationResponse_CustomerSuccess.Validate if the designated
// constraints aren't met.
type GetContactInformationResponse_CustomerSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContactInformationResponse_CustomerSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContactInformationResponse_CustomerSuccessValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetContactInformationResponse_CustomerSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContactInformationResponse_CustomerSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContactInformationResponse_CustomerSuccessValidationError) ErrorName() string {
	return "GetContactInformationResponse_CustomerSuccessValidationError"
}

// Error satisfies the builtin error interface
func (e GetContactInformationResponse_CustomerSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContactInformationResponse_CustomerSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContactInformationResponse_CustomerSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContactInformationResponse_CustomerSuccessValidationError{}
