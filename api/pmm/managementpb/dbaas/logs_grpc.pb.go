// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: managementpb/dbaas/logs.proto

package dbaasv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsAPIClient is the client API for LogsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsAPIClient interface {
	// GetLogs gets all logs from db cluster.
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type logsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsAPIClient(cc grpc.ClientConnInterface) LogsAPIClient {
	return &logsAPIClient{cc}
}

func (c *logsAPIClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.LogsAPI/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsAPIServer is the server API for LogsAPI service.
// All implementations must embed UnimplementedLogsAPIServer
// for forward compatibility
type LogsAPIServer interface {
	// GetLogs gets all logs from db cluster.
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	mustEmbedUnimplementedLogsAPIServer()
}

// UnimplementedLogsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLogsAPIServer struct{}

func (UnimplementedLogsAPIServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogsAPIServer) mustEmbedUnimplementedLogsAPIServer() {}

// UnsafeLogsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsAPIServer will
// result in compilation errors.
type UnsafeLogsAPIServer interface {
	mustEmbedUnimplementedLogsAPIServer()
}

func RegisterLogsAPIServer(s grpc.ServiceRegistrar, srv LogsAPIServer) {
	s.RegisterService(&LogsAPI_ServiceDesc, srv)
}

func _LogsAPI_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsAPIServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.LogsAPI/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsAPIServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsAPI_ServiceDesc is the grpc.ServiceDesc for LogsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbaas.v1beta1.LogsAPI",
	HandlerType: (*LogsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogsAPI_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/dbaas/logs.proto",
}
