// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: managementpb/ia/alerts.proto

package iav1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertsClient is the client API for Alerts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertsClient interface {
	// ListAlerts returns a list of all Alerts.
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	// ToggleAlerts allows to switch alerts state between silenced and unsilenced.
	ToggleAlerts(ctx context.Context, in *ToggleAlertsRequest, opts ...grpc.CallOption) (*ToggleAlertsResponse, error)
}

type alertsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertsClient(cc grpc.ClientConnInterface) AlertsClient {
	return &alertsClient{cc}
}

func (c *alertsClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/ia.v1beta1.Alerts/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsClient) ToggleAlerts(ctx context.Context, in *ToggleAlertsRequest, opts ...grpc.CallOption) (*ToggleAlertsResponse, error) {
	out := new(ToggleAlertsResponse)
	err := c.cc.Invoke(ctx, "/ia.v1beta1.Alerts/ToggleAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertsServer is the server API for Alerts service.
// All implementations must embed UnimplementedAlertsServer
// for forward compatibility
type AlertsServer interface {
	// ListAlerts returns a list of all Alerts.
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	// ToggleAlerts allows to switch alerts state between silenced and unsilenced.
	ToggleAlerts(context.Context, *ToggleAlertsRequest) (*ToggleAlertsResponse, error)
	mustEmbedUnimplementedAlertsServer()
}

// UnimplementedAlertsServer must be embedded to have forward compatible implementations.
type UnimplementedAlertsServer struct{}

func (UnimplementedAlertsServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}

func (UnimplementedAlertsServer) ToggleAlerts(context.Context, *ToggleAlertsRequest) (*ToggleAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAlerts not implemented")
}
func (UnimplementedAlertsServer) mustEmbedUnimplementedAlertsServer() {}

// UnsafeAlertsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertsServer will
// result in compilation errors.
type UnsafeAlertsServer interface {
	mustEmbedUnimplementedAlertsServer()
}

func RegisterAlertsServer(s grpc.ServiceRegistrar, srv AlertsServer) {
	s.RegisterService(&Alerts_ServiceDesc, srv)
}

func _Alerts_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ia.v1beta1.Alerts/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerts_ToggleAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServer).ToggleAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ia.v1beta1.Alerts/ToggleAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServer).ToggleAlerts(ctx, req.(*ToggleAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alerts_ServiceDesc is the grpc.ServiceDesc for Alerts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alerts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ia.v1beta1.Alerts",
	HandlerType: (*AlertsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlerts",
			Handler:    _Alerts_ListAlerts_Handler,
		},
		{
			MethodName: "ToggleAlerts",
			Handler:    _Alerts_ToggleAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/ia/alerts.proto",
}
