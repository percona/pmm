// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: qanpb/metrics_names.proto

package qanv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsNamesClient is the client API for MetricsNames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsNamesClient interface {
	// GetMetricsNames gets map of metrics names.
	GetMetricsNames(ctx context.Context, in *MetricsNamesRequest, opts ...grpc.CallOption) (*MetricsNamesReply, error)
}

type metricsNamesClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsNamesClient(cc grpc.ClientConnInterface) MetricsNamesClient {
	return &metricsNamesClient{cc}
}

func (c *metricsNamesClient) GetMetricsNames(ctx context.Context, in *MetricsNamesRequest, opts ...grpc.CallOption) (*MetricsNamesReply, error) {
	out := new(MetricsNamesReply)
	err := c.cc.Invoke(ctx, "/qan.v1beta1.MetricsNames/GetMetricsNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsNamesServer is the server API for MetricsNames service.
// All implementations must embed UnimplementedMetricsNamesServer
// for forward compatibility
type MetricsNamesServer interface {
	// GetMetricsNames gets map of metrics names.
	GetMetricsNames(context.Context, *MetricsNamesRequest) (*MetricsNamesReply, error)
	mustEmbedUnimplementedMetricsNamesServer()
}

// UnimplementedMetricsNamesServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsNamesServer struct{}

func (UnimplementedMetricsNamesServer) GetMetricsNames(context.Context, *MetricsNamesRequest) (*MetricsNamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsNames not implemented")
}
func (UnimplementedMetricsNamesServer) mustEmbedUnimplementedMetricsNamesServer() {}

// UnsafeMetricsNamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsNamesServer will
// result in compilation errors.
type UnsafeMetricsNamesServer interface {
	mustEmbedUnimplementedMetricsNamesServer()
}

func RegisterMetricsNamesServer(s grpc.ServiceRegistrar, srv MetricsNamesServer) {
	s.RegisterService(&MetricsNames_ServiceDesc, srv)
}

func _MetricsNames_GetMetricsNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsNamesServer).GetMetricsNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.v1beta1.MetricsNames/GetMetricsNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsNamesServer).GetMetricsNames(ctx, req.(*MetricsNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsNames_ServiceDesc is the grpc.ServiceDesc for MetricsNames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsNames_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qan.v1beta1.MetricsNames",
	HandlerType: (*MetricsNamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsNames",
			Handler:    _MetricsNames_GetMetricsNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qanpb/metrics_names.proto",
}
