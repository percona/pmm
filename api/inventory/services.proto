syntax = "proto3";

package inventory;

option go_package = "inventory";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventory/host.proto";

// MySQLService represents MySQL-compatible Service configuration.
message MySQLService {
  // Unique Service identifier.
  string id = 1;
  // Unique user-defined Service name.
  string name = 2;
  // Host Node information where this Service runs.
  HostNodeInfo host_node_info = 3;
  // MySQL access address (DNS name or IP address).
  string address = 4;
  // MySQL access port.
  uint32 port = 5;
  // MySQL access UNIX socket path.
  string unix_socket = 6;
}

message ListServicesRequest {
  // string node_id = 1;

}

message ListServicesResponse {
  repeated MySQLService mysql = 1;
}

message GetServiceRequest {
  // Unique Service identifier.
  string id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetServiceResponse {
  oneof service {
    MySQLService mysql = 1;
  }
}

message AddMySQLServiceRequest {
  reserved 1; // id
  // Unique user-defined Service name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Host Node information where this Service runs.
  HostNodeInfo host_node_info = 3 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // MySQL access address (DNS name or IP address).
  string address = 4;
  // MySQL access port.
  uint32 port = 5;
  // MySQL access UNIX socket path.
  string unix_socket = 6;
}

message AddMySQLServiceResponse {
  MySQLService mysql = 1;
}

message ChangeMySQLServiceRequest {
  // Unique Service identifier.
  string id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Unique user-defined Service name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message ChangeMySQLServiceResponse {
  MySQLService mysql = 1;
}

message RemoveServiceRequest {
  string id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message RemoveServiceResponse {}

// Services service provides public methods for managing Services.
service Services {
  // ListServices returns a list of all Services.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      post: "/v0/inventory/Services/List"
      body: "*"
    };
  }
  // GetService returns a single Service by ID.
  rpc GetService(GetServiceRequest) returns (GetServiceResponse) {
    option (google.api.http) = {
      post: "/v0/inventory/Services/Get"
      body: "*"
    };
  }
  // AddMySQLService adds MySQL Service.
  rpc AddMySQLService(AddMySQLServiceRequest) returns (AddMySQLServiceResponse) {
    option (google.api.http) = {
      post: "/v0/inventory/Services/AddMySQL"
      body: "*"
    };
  }
  // ChangeMySQLService changes MySQL Service.
  rpc ChangeMySQLService(ChangeMySQLServiceRequest) returns (ChangeMySQLServiceResponse) {
    option (google.api.http) = {
      post: "/v0/inventory/Services/ChangeMySQL"
      body: "*"
    };
  }
  // RemoveService removes Service without any Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {
      post: "/v0/inventory/Services/Remove"
      body: "*"
    };
  }
}
