// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory/v1/agents.proto

package inventoryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PMMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PMMAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PMMAgent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PMMAgentMultiError, or nil
// if none found.
func (m *PMMAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *PMMAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for RunsOnNodeId

	// no validation rules for CustomLabels

	// no validation rules for Connected

	// no validation rules for ProcessExecPath

	if len(errors) > 0 {
		return PMMAgentMultiError(errors)
	}

	return nil
}

// PMMAgentMultiError is an error wrapping multiple validation errors returned
// by PMMAgent.ValidateAll() if the designated constraints aren't met.
type PMMAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PMMAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PMMAgentMultiError) AllErrors() []error { return m }

// PMMAgentValidationError is the validation error returned by
// PMMAgent.Validate if the designated constraints aren't met.
type PMMAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PMMAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PMMAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PMMAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PMMAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PMMAgentValidationError) ErrorName() string { return "PMMAgentValidationError" }

// Error satisfies the builtin error interface
func (e PMMAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPMMAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PMMAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PMMAgentValidationError{}

// Validate checks the field values on VMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VMAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VMAgentMultiError, or nil if none found.
func (m *VMAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *VMAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for ListenPort

	if len(errors) > 0 {
		return VMAgentMultiError(errors)
	}

	return nil
}

// VMAgentMultiError is an error wrapping multiple validation errors returned
// by VMAgent.ValidateAll() if the designated constraints aren't met.
type VMAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VMAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VMAgentMultiError) AllErrors() []error { return m }

// VMAgentValidationError is the validation error returned by VMAgent.Validate
// if the designated constraints aren't met.
type VMAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VMAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VMAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VMAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VMAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VMAgentValidationError) ErrorName() string { return "VMAgentValidationError" }

// Error satisfies the builtin error interface
func (e VMAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVMAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VMAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VMAgentValidationError{}

// Validate checks the field values on NodeExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeExporterMultiError, or
// nil if none found.
func (m *NodeExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return NodeExporterMultiError(errors)
	}

	return nil
}

// NodeExporterMultiError is an error wrapping multiple validation errors
// returned by NodeExporter.ValidateAll() if the designated constraints aren't met.
type NodeExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeExporterMultiError) AllErrors() []error { return m }

// NodeExporterValidationError is the validation error returned by
// NodeExporter.Validate if the designated constraints aren't met.
type NodeExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeExporterValidationError) ErrorName() string { return "NodeExporterValidationError" }

// Error satisfies the builtin error interface
func (e NodeExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeExporterValidationError{}

// Validate checks the field values on MySQLdExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySQLdExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySQLdExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MySQLdExporterMultiError,
// or nil if none found.
func (m *MySQLdExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *MySQLdExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for TablestatsGroupTableLimit

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for TablestatsGroupDisabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return MySQLdExporterMultiError(errors)
	}

	return nil
}

// MySQLdExporterMultiError is an error wrapping multiple validation errors
// returned by MySQLdExporter.ValidateAll() if the designated constraints
// aren't met.
type MySQLdExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySQLdExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySQLdExporterMultiError) AllErrors() []error { return m }

// MySQLdExporterValidationError is the validation error returned by
// MySQLdExporter.Validate if the designated constraints aren't met.
type MySQLdExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLdExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLdExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLdExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLdExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLdExporterValidationError) ErrorName() string { return "MySQLdExporterValidationError" }

// Error satisfies the builtin error interface
func (e MySQLdExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQLdExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLdExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLdExporterValidationError{}

// Validate checks the field values on MongoDBExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MongoDBExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MongoDBExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MongoDBExporterMultiError, or nil if none found.
func (m *MongoDBExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *MongoDBExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for CollectionsLimit

	// no validation rules for EnableAllCollectors

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return MongoDBExporterMultiError(errors)
	}

	return nil
}

// MongoDBExporterMultiError is an error wrapping multiple validation errors
// returned by MongoDBExporter.ValidateAll() if the designated constraints
// aren't met.
type MongoDBExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoDBExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoDBExporterMultiError) AllErrors() []error { return m }

// MongoDBExporterValidationError is the validation error returned by
// MongoDBExporter.Validate if the designated constraints aren't met.
type MongoDBExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBExporterValidationError) ErrorName() string { return "MongoDBExporterValidationError" }

// Error satisfies the builtin error interface
func (e MongoDBExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDBExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBExporterValidationError{}

// Validate checks the field values on PostgresExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostgresExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresExporterMultiError, or nil if none found.
func (m *PostgresExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return PostgresExporterMultiError(errors)
	}

	return nil
}

// PostgresExporterMultiError is an error wrapping multiple validation errors
// returned by PostgresExporter.ValidateAll() if the designated constraints
// aren't met.
type PostgresExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresExporterMultiError) AllErrors() []error { return m }

// PostgresExporterValidationError is the validation error returned by
// PostgresExporter.Validate if the designated constraints aren't met.
type PostgresExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresExporterValidationError) ErrorName() string { return "PostgresExporterValidationError" }

// Error satisfies the builtin error interface
func (e PostgresExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresExporterValidationError{}

// Validate checks the field values on ProxySQLExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProxySQLExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxySQLExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxySQLExporterMultiError, or nil if none found.
func (m *ProxySQLExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxySQLExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return ProxySQLExporterMultiError(errors)
	}

	return nil
}

// ProxySQLExporterMultiError is an error wrapping multiple validation errors
// returned by ProxySQLExporter.ValidateAll() if the designated constraints
// aren't met.
type ProxySQLExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxySQLExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxySQLExporterMultiError) AllErrors() []error { return m }

// ProxySQLExporterValidationError is the validation error returned by
// ProxySQLExporter.Validate if the designated constraints aren't met.
type ProxySQLExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxySQLExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxySQLExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxySQLExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxySQLExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxySQLExporterValidationError) ErrorName() string { return "ProxySQLExporterValidationError" }

// Error satisfies the builtin error interface
func (e ProxySQLExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxySQLExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxySQLExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxySQLExporterValidationError{}

// Validate checks the field values on QANMySQLPerfSchemaAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMySQLPerfSchemaAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMySQLPerfSchemaAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMySQLPerfSchemaAgentMultiError, or nil if none found.
func (m *QANMySQLPerfSchemaAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMySQLPerfSchemaAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMySQLPerfSchemaAgentMultiError(errors)
	}

	return nil
}

// QANMySQLPerfSchemaAgentMultiError is an error wrapping multiple validation
// errors returned by QANMySQLPerfSchemaAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMySQLPerfSchemaAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMySQLPerfSchemaAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMySQLPerfSchemaAgentMultiError) AllErrors() []error { return m }

// QANMySQLPerfSchemaAgentValidationError is the validation error returned by
// QANMySQLPerfSchemaAgent.Validate if the designated constraints aren't met.
type QANMySQLPerfSchemaAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMySQLPerfSchemaAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMySQLPerfSchemaAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMySQLPerfSchemaAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMySQLPerfSchemaAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMySQLPerfSchemaAgentValidationError) ErrorName() string {
	return "QANMySQLPerfSchemaAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMySQLPerfSchemaAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMySQLPerfSchemaAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMySQLPerfSchemaAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMySQLPerfSchemaAgentValidationError{}

// Validate checks the field values on QANMySQLSlowlogAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMySQLSlowlogAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMySQLSlowlogAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMySQLSlowlogAgentMultiError, or nil if none found.
func (m *QANMySQLSlowlogAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMySQLSlowlogAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for MaxSlowlogFileSize

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMySQLSlowlogAgentMultiError(errors)
	}

	return nil
}

// QANMySQLSlowlogAgentMultiError is an error wrapping multiple validation
// errors returned by QANMySQLSlowlogAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMySQLSlowlogAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMySQLSlowlogAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMySQLSlowlogAgentMultiError) AllErrors() []error { return m }

// QANMySQLSlowlogAgentValidationError is the validation error returned by
// QANMySQLSlowlogAgent.Validate if the designated constraints aren't met.
type QANMySQLSlowlogAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMySQLSlowlogAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMySQLSlowlogAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMySQLSlowlogAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMySQLSlowlogAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMySQLSlowlogAgentValidationError) ErrorName() string {
	return "QANMySQLSlowlogAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMySQLSlowlogAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMySQLSlowlogAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMySQLSlowlogAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMySQLSlowlogAgentValidationError{}

// Validate checks the field values on QANMongoDBProfilerAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMongoDBProfilerAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMongoDBProfilerAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMongoDBProfilerAgentMultiError, or nil if none found.
func (m *QANMongoDBProfilerAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMongoDBProfilerAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for MaxQueryLength

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMongoDBProfilerAgentMultiError(errors)
	}

	return nil
}

// QANMongoDBProfilerAgentMultiError is an error wrapping multiple validation
// errors returned by QANMongoDBProfilerAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMongoDBProfilerAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMongoDBProfilerAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMongoDBProfilerAgentMultiError) AllErrors() []error { return m }

// QANMongoDBProfilerAgentValidationError is the validation error returned by
// QANMongoDBProfilerAgent.Validate if the designated constraints aren't met.
type QANMongoDBProfilerAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMongoDBProfilerAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMongoDBProfilerAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMongoDBProfilerAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMongoDBProfilerAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMongoDBProfilerAgentValidationError) ErrorName() string {
	return "QANMongoDBProfilerAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMongoDBProfilerAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMongoDBProfilerAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMongoDBProfilerAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMongoDBProfilerAgentValidationError{}

// Validate checks the field values on QANPostgreSQLPgStatementsAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANPostgreSQLPgStatementsAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANPostgreSQLPgStatementsAgent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QANPostgreSQLPgStatementsAgentMultiError, or nil if none found.
func (m *QANPostgreSQLPgStatementsAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANPostgreSQLPgStatementsAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANPostgreSQLPgStatementsAgentMultiError(errors)
	}

	return nil
}

// QANPostgreSQLPgStatementsAgentMultiError is an error wrapping multiple
// validation errors returned by QANPostgreSQLPgStatementsAgent.ValidateAll()
// if the designated constraints aren't met.
type QANPostgreSQLPgStatementsAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANPostgreSQLPgStatementsAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANPostgreSQLPgStatementsAgentMultiError) AllErrors() []error { return m }

// QANPostgreSQLPgStatementsAgentValidationError is the validation error
// returned by QANPostgreSQLPgStatementsAgent.Validate if the designated
// constraints aren't met.
type QANPostgreSQLPgStatementsAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANPostgreSQLPgStatementsAgentValidationError) ErrorName() string {
	return "QANPostgreSQLPgStatementsAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANPostgreSQLPgStatementsAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANPostgreSQLPgStatementsAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANPostgreSQLPgStatementsAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANPostgreSQLPgStatementsAgentValidationError{}

// Validate checks the field values on QANPostgreSQLPgStatMonitorAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANPostgreSQLPgStatMonitorAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANPostgreSQLPgStatMonitorAgent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QANPostgreSQLPgStatMonitorAgentMultiError, or nil if none found.
func (m *QANPostgreSQLPgStatMonitorAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANPostgreSQLPgStatMonitorAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANPostgreSQLPgStatMonitorAgentMultiError(errors)
	}

	return nil
}

// QANPostgreSQLPgStatMonitorAgentMultiError is an error wrapping multiple
// validation errors returned by QANPostgreSQLPgStatMonitorAgent.ValidateAll()
// if the designated constraints aren't met.
type QANPostgreSQLPgStatMonitorAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANPostgreSQLPgStatMonitorAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANPostgreSQLPgStatMonitorAgentMultiError) AllErrors() []error { return m }

// QANPostgreSQLPgStatMonitorAgentValidationError is the validation error
// returned by QANPostgreSQLPgStatMonitorAgent.Validate if the designated
// constraints aren't met.
type QANPostgreSQLPgStatMonitorAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) ErrorName() string {
	return "QANPostgreSQLPgStatMonitorAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANPostgreSQLPgStatMonitorAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANPostgreSQLPgStatMonitorAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANPostgreSQLPgStatMonitorAgentValidationError{}

// Validate checks the field values on RDSExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RDSExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RDSExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RDSExporterMultiError, or
// nil if none found.
func (m *RDSExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *RDSExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for NodeId

	// no validation rules for AwsAccessKey

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for BasicMetricsDisabled

	// no validation rules for EnhancedMetricsDisabled

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	if len(errors) > 0 {
		return RDSExporterMultiError(errors)
	}

	return nil
}

// RDSExporterMultiError is an error wrapping multiple validation errors
// returned by RDSExporter.ValidateAll() if the designated constraints aren't met.
type RDSExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RDSExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RDSExporterMultiError) AllErrors() []error { return m }

// RDSExporterValidationError is the validation error returned by
// RDSExporter.Validate if the designated constraints aren't met.
type RDSExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RDSExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RDSExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RDSExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RDSExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RDSExporterValidationError) ErrorName() string { return "RDSExporterValidationError" }

// Error satisfies the builtin error interface
func (e RDSExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRDSExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RDSExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RDSExporterValidationError{}

// Validate checks the field values on ExternalExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExternalExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalExporterMultiError, or nil if none found.
func (m *ExternalExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for RunsOnNodeId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Scheme

	// no validation rules for MetricsPath

	// no validation rules for CustomLabels

	// no validation rules for ListenPort

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	if len(errors) > 0 {
		return ExternalExporterMultiError(errors)
	}

	return nil
}

// ExternalExporterMultiError is an error wrapping multiple validation errors
// returned by ExternalExporter.ValidateAll() if the designated constraints
// aren't met.
type ExternalExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalExporterMultiError) AllErrors() []error { return m }

// ExternalExporterValidationError is the validation error returned by
// ExternalExporter.Validate if the designated constraints aren't met.
type ExternalExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalExporterValidationError) ErrorName() string { return "ExternalExporterValidationError" }

// Error satisfies the builtin error interface
func (e ExternalExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalExporterValidationError{}

// Validate checks the field values on AzureDatabaseExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AzureDatabaseExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AzureDatabaseExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AzureDatabaseExporterMultiError, or nil if none found.
func (m *AzureDatabaseExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *AzureDatabaseExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for NodeId

	// no validation rules for AzureDatabaseSubscriptionId

	// no validation rules for AzureDatabaseResourceType

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AzureDatabaseExporterMultiError(errors)
	}

	return nil
}

// AzureDatabaseExporterMultiError is an error wrapping multiple validation
// errors returned by AzureDatabaseExporter.ValidateAll() if the designated
// constraints aren't met.
type AzureDatabaseExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureDatabaseExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureDatabaseExporterMultiError) AllErrors() []error { return m }

// AzureDatabaseExporterValidationError is the validation error returned by
// AzureDatabaseExporter.Validate if the designated constraints aren't met.
type AzureDatabaseExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureDatabaseExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureDatabaseExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureDatabaseExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureDatabaseExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureDatabaseExporterValidationError) ErrorName() string {
	return "AzureDatabaseExporterValidationError"
}

// Error satisfies the builtin error interface
func (e AzureDatabaseExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzureDatabaseExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureDatabaseExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureDatabaseExporterValidationError{}

// Validate checks the field values on ChangeCommonAgentParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeCommonAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeCommonAgentParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeCommonAgentParamsMultiError, or nil if none found.
func (m *ChangeCommonAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeCommonAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Disable

	// no validation rules for CustomLabels

	// no validation rules for RemoveCustomLabels

	// no validation rules for EnablePushMetrics

	// no validation rules for DisablePushMetrics

	if len(errors) > 0 {
		return ChangeCommonAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeCommonAgentParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeCommonAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeCommonAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeCommonAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeCommonAgentParamsMultiError) AllErrors() []error { return m }

// ChangeCommonAgentParamsValidationError is the validation error returned by
// ChangeCommonAgentParams.Validate if the designated constraints aren't met.
type ChangeCommonAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCommonAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCommonAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCommonAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCommonAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCommonAgentParamsValidationError) ErrorName() string {
	return "ChangeCommonAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCommonAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCommonAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCommonAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCommonAgentParamsValidationError{}

// Validate checks the field values on ListAgentsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsRequestMultiError, or nil if none found.
func (m *ListAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for NodeId

	// no validation rules for ServiceId

	// no validation rules for AgentType

	if len(errors) > 0 {
		return ListAgentsRequestMultiError(errors)
	}

	return nil
}

// ListAgentsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsRequestMultiError) AllErrors() []error { return m }

// ListAgentsRequestValidationError is the validation error returned by
// ListAgentsRequest.Validate if the designated constraints aren't met.
type ListAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsRequestValidationError) ErrorName() string {
	return "ListAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsRequestValidationError{}

// Validate checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsResponseMultiError, or nil if none found.
func (m *ListAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPmmAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PmmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PmmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("PmmAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVmAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("VmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("VmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("VmAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNodeExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("NodeExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("NodeExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("NodeExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMysqldExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MysqldExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MysqldExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("MysqldExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMongodbExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MongodbExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MongodbExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("MongodbExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPostgresExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PostgresExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PostgresExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("PostgresExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProxysqlExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMysqlPerfschemaAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMysqlSlowlogAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMongodbProfilerAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanPostgresqlPgstatementsAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanPostgresqlPgstatmonitorAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExternalExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ExternalExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ExternalExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("ExternalExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRdsExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("RdsExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("RdsExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("RdsExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAzureDatabaseExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAgentsResponseMultiError(errors)
	}

	return nil
}

// ListAgentsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAgentsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsResponseMultiError) AllErrors() []error { return m }

// ListAgentsResponseValidationError is the validation error returned by
// ListAgentsResponse.Validate if the designated constraints aren't met.
type ListAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsResponseValidationError) ErrorName() string {
	return "ListAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsResponseValidationError{}

// Validate checks the field values on GetAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentRequestMultiError, or nil if none found.
func (m *GetAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := GetAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAgentRequestMultiError(errors)
	}

	return nil
}

// GetAgentRequestMultiError is an error wrapping multiple validation errors
// returned by GetAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentRequestMultiError) AllErrors() []error { return m }

// GetAgentRequestValidationError is the validation error returned by
// GetAgentRequest.Validate if the designated constraints aren't met.
type GetAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentRequestValidationError) ErrorName() string { return "GetAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentRequestValidationError{}

// Validate checks the field values on GetAgentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentResponseMultiError, or nil if none found.
func (m *GetAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *GetAgentResponse_PmmAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_Vmagent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVmagent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "Vmagent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "Vmagent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVmagent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "Vmagent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_NodeExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_MysqldExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_MongodbExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_PostgresExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_ProxysqlExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMysqlPerfschemaAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMysqlSlowlogAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMongodbProfilerAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_ExternalExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_RdsExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_AzureDatabaseExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAgentResponseMultiError(errors)
	}

	return nil
}

// GetAgentResponseMultiError is an error wrapping multiple validation errors
// returned by GetAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentResponseMultiError) AllErrors() []error { return m }

// GetAgentResponseValidationError is the validation error returned by
// GetAgentResponse.Validate if the designated constraints aren't met.
type GetAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentResponseValidationError) ErrorName() string { return "GetAgentResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentResponseValidationError{}

// Validate checks the field values on GetAgentLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentLogsRequestMultiError, or nil if none found.
func (m *GetAgentLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := GetAgentLogsRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAgentLogsRequestMultiError(errors)
	}

	return nil
}

// GetAgentLogsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAgentLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAgentLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentLogsRequestMultiError) AllErrors() []error { return m }

// GetAgentLogsRequestValidationError is the validation error returned by
// GetAgentLogsRequest.Validate if the designated constraints aren't met.
type GetAgentLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentLogsRequestValidationError) ErrorName() string {
	return "GetAgentLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentLogsRequestValidationError{}

// Validate checks the field values on GetAgentLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentLogsResponseMultiError, or nil if none found.
func (m *GetAgentLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentConfigLogLinesCount

	if len(errors) > 0 {
		return GetAgentLogsResponseMultiError(errors)
	}

	return nil
}

// GetAgentLogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAgentLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAgentLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentLogsResponseMultiError) AllErrors() []error { return m }

// GetAgentLogsResponseValidationError is the validation error returned by
// GetAgentLogsResponse.Validate if the designated constraints aren't met.
type GetAgentLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentLogsResponseValidationError) ErrorName() string {
	return "GetAgentLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentLogsResponseValidationError{}

// Validate checks the field values on AddPMMAgentParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPMMAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPMMAgentParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPMMAgentParamsMultiError, or nil if none found.
func (m *AddPMMAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPMMAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRunsOnNodeId()) < 1 {
		err := AddPMMAgentParamsValidationError{
			field:  "RunsOnNodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddPMMAgentParamsMultiError(errors)
	}

	return nil
}

// AddPMMAgentParamsMultiError is an error wrapping multiple validation errors
// returned by AddPMMAgentParams.ValidateAll() if the designated constraints
// aren't met.
type AddPMMAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPMMAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPMMAgentParamsMultiError) AllErrors() []error { return m }

// AddPMMAgentParamsValidationError is the validation error returned by
// AddPMMAgentParams.Validate if the designated constraints aren't met.
type AddPMMAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPMMAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPMMAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPMMAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPMMAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPMMAgentParamsValidationError) ErrorName() string {
	return "AddPMMAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddPMMAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPMMAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPMMAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPMMAgentParamsValidationError{}

// Validate checks the field values on AddAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentRequestMultiError, or nil if none found.
func (m *AddAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Exporter.(type) {
	case *AddAgentRequest_PmmAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_NodeExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_MysqldExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_MongodbExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_PostgresExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_ProxysqlExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_ExternalExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_RdsExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_AzureDatabaseExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMysqlPerfschemaAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMysqlSlowlogAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMongodbProfilerAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddAgentRequestMultiError(errors)
	}

	return nil
}

// AddAgentRequestMultiError is an error wrapping multiple validation errors
// returned by AddAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentRequestMultiError) AllErrors() []error { return m }

// AddAgentRequestValidationError is the validation error returned by
// AddAgentRequest.Validate if the designated constraints aren't met.
type AddAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentRequestValidationError) ErrorName() string { return "AddAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentRequestValidationError{}

// Validate checks the field values on AddAgentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentResponseMultiError, or nil if none found.
func (m *AddAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableCount

	switch v := m.Exporter.(type) {
	case *AddAgentResponse_PmmAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_NodeExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_MysqldExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_MongodbExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_PostgresExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_ProxysqlExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_ExternalExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_RdsExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_AzureDatabaseExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMysqlPerfschemaAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMysqlSlowlogAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMongodbProfilerAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Exporter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddAgentResponseMultiError(errors)
	}

	return nil
}

// AddAgentResponseMultiError is an error wrapping multiple validation errors
// returned by AddAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentResponseMultiError) AllErrors() []error { return m }

// AddAgentResponseValidationError is the validation error returned by
// AddAgentResponse.Validate if the designated constraints aren't met.
type AddAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentResponseValidationError) ErrorName() string { return "AddAgentResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentResponseValidationError{}

// Validate checks the field values on AddNodeExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNodeExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNodeExporterParamsMultiError, or nil if none found.
func (m *AddNodeExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddNodeExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddNodeExporterParamsMultiError(errors)
	}

	return nil
}

// AddNodeExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddNodeExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddNodeExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeExporterParamsMultiError) AllErrors() []error { return m }

// AddNodeExporterParamsValidationError is the validation error returned by
// AddNodeExporterParams.Validate if the designated constraints aren't met.
type AddNodeExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeExporterParamsValidationError) ErrorName() string {
	return "AddNodeExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddNodeExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeExporterParamsValidationError{}

// Validate checks the field values on ChangeNodeExporterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNodeExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNodeExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNodeExporterRequestMultiError, or nil if none found.
func (m *ChangeNodeExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNodeExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeNodeExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeNodeExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeNodeExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeNodeExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeNodeExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeNodeExporterRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeNodeExporterRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangeNodeExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNodeExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNodeExporterRequestMultiError) AllErrors() []error { return m }

// ChangeNodeExporterRequestValidationError is the validation error returned by
// ChangeNodeExporterRequest.Validate if the designated constraints aren't met.
type ChangeNodeExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNodeExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNodeExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNodeExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNodeExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNodeExporterRequestValidationError) ErrorName() string {
	return "ChangeNodeExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNodeExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNodeExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNodeExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNodeExporterRequestValidationError{}

// Validate checks the field values on ChangeNodeExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNodeExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNodeExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNodeExporterResponseMultiError, or nil if none found.
func (m *ChangeNodeExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNodeExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNodeExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeNodeExporterResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeNodeExporterResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeNodeExporterResponseValidationError{
				field:  "NodeExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeNodeExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeNodeExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeNodeExporterResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeNodeExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNodeExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNodeExporterResponseMultiError) AllErrors() []error { return m }

// ChangeNodeExporterResponseValidationError is the validation error returned
// by ChangeNodeExporterResponse.Validate if the designated constraints aren't met.
type ChangeNodeExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNodeExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNodeExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNodeExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNodeExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNodeExporterResponseValidationError) ErrorName() string {
	return "ChangeNodeExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNodeExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNodeExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNodeExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNodeExporterResponseValidationError{}

// Validate checks the field values on AddMySQLdExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMySQLdExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMySQLdExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMySQLdExporterParamsMultiError, or nil if none found.
func (m *AddMySQLdExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMySQLdExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for TablestatsGroupTableLimit

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddMySQLdExporterParamsMultiError(errors)
	}

	return nil
}

// AddMySQLdExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddMySQLdExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddMySQLdExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMySQLdExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMySQLdExporterParamsMultiError) AllErrors() []error { return m }

// AddMySQLdExporterParamsValidationError is the validation error returned by
// AddMySQLdExporterParams.Validate if the designated constraints aren't met.
type AddMySQLdExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMySQLdExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMySQLdExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMySQLdExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMySQLdExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMySQLdExporterParamsValidationError) ErrorName() string {
	return "AddMySQLdExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMySQLdExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMySQLdExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMySQLdExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMySQLdExporterParamsValidationError{}

// Validate checks the field values on ChangeMySQLdExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMySQLdExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMySQLdExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMySQLdExporterRequestMultiError, or nil if none found.
func (m *ChangeMySQLdExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMySQLdExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeMySQLdExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMySQLdExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMySQLdExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMySQLdExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMySQLdExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeMySQLdExporterRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeMySQLdExporterRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeMySQLdExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMySQLdExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMySQLdExporterRequestMultiError) AllErrors() []error { return m }

// ChangeMySQLdExporterRequestValidationError is the validation error returned
// by ChangeMySQLdExporterRequest.Validate if the designated constraints
// aren't met.
type ChangeMySQLdExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMySQLdExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMySQLdExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMySQLdExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMySQLdExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMySQLdExporterRequestValidationError) ErrorName() string {
	return "ChangeMySQLdExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMySQLdExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMySQLdExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMySQLdExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMySQLdExporterRequestValidationError{}

// Validate checks the field values on ChangeMySQLdExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMySQLdExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMySQLdExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMySQLdExporterResponseMultiError, or nil if none found.
func (m *ChangeMySQLdExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMySQLdExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMysqldExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMySQLdExporterResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMySQLdExporterResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMySQLdExporterResponseValidationError{
				field:  "MysqldExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMySQLdExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeMySQLdExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeMySQLdExporterResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeMySQLdExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMySQLdExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMySQLdExporterResponseMultiError) AllErrors() []error { return m }

// ChangeMySQLdExporterResponseValidationError is the validation error returned
// by ChangeMySQLdExporterResponse.Validate if the designated constraints
// aren't met.
type ChangeMySQLdExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMySQLdExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMySQLdExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMySQLdExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMySQLdExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMySQLdExporterResponseValidationError) ErrorName() string {
	return "ChangeMySQLdExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMySQLdExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMySQLdExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMySQLdExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMySQLdExporterResponseValidationError{}

// Validate checks the field values on AddMongoDBExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMongoDBExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMongoDBExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMongoDBExporterParamsMultiError, or nil if none found.
func (m *AddMongoDBExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMongoDBExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddMongoDBExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddMongoDBExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCertificateKey

	// no validation rules for TlsCertificateKeyFilePassword

	// no validation rules for TlsCa

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AuthenticationMechanism

	// no validation rules for AuthenticationDatabase

	// no validation rules for AgentPassword

	// no validation rules for CollectionsLimit

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddMongoDBExporterParamsMultiError(errors)
	}

	return nil
}

// AddMongoDBExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddMongoDBExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddMongoDBExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMongoDBExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMongoDBExporterParamsMultiError) AllErrors() []error { return m }

// AddMongoDBExporterParamsValidationError is the validation error returned by
// AddMongoDBExporterParams.Validate if the designated constraints aren't met.
type AddMongoDBExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMongoDBExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMongoDBExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMongoDBExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMongoDBExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMongoDBExporterParamsValidationError) ErrorName() string {
	return "AddMongoDBExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMongoDBExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMongoDBExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMongoDBExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMongoDBExporterParamsValidationError{}

// Validate checks the field values on ChangeMongoDBExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMongoDBExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMongoDBExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMongoDBExporterRequestMultiError, or nil if none found.
func (m *ChangeMongoDBExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMongoDBExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeMongoDBExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMongoDBExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMongoDBExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMongoDBExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMongoDBExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeMongoDBExporterRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeMongoDBExporterRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeMongoDBExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMongoDBExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMongoDBExporterRequestMultiError) AllErrors() []error { return m }

// ChangeMongoDBExporterRequestValidationError is the validation error returned
// by ChangeMongoDBExporterRequest.Validate if the designated constraints
// aren't met.
type ChangeMongoDBExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMongoDBExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMongoDBExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMongoDBExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMongoDBExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMongoDBExporterRequestValidationError) ErrorName() string {
	return "ChangeMongoDBExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMongoDBExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMongoDBExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMongoDBExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMongoDBExporterRequestValidationError{}

// Validate checks the field values on ChangeMongoDBExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMongoDBExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMongoDBExporterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeMongoDBExporterResponseMultiError, or nil if none found.
func (m *ChangeMongoDBExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMongoDBExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMongodbExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMongoDBExporterResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMongoDBExporterResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMongoDBExporterResponseValidationError{
				field:  "MongodbExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMongoDBExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeMongoDBExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeMongoDBExporterResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeMongoDBExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMongoDBExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMongoDBExporterResponseMultiError) AllErrors() []error { return m }

// ChangeMongoDBExporterResponseValidationError is the validation error
// returned by ChangeMongoDBExporterResponse.Validate if the designated
// constraints aren't met.
type ChangeMongoDBExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMongoDBExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMongoDBExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMongoDBExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMongoDBExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMongoDBExporterResponseValidationError) ErrorName() string {
	return "ChangeMongoDBExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMongoDBExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMongoDBExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMongoDBExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMongoDBExporterResponseValidationError{}

// Validate checks the field values on AddPostgresExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostgresExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostgresExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostgresExporterParamsMultiError, or nil if none found.
func (m *AddPostgresExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostgresExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddPostgresExporterParamsMultiError(errors)
	}

	return nil
}

// AddPostgresExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddPostgresExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddPostgresExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostgresExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostgresExporterParamsMultiError) AllErrors() []error { return m }

// AddPostgresExporterParamsValidationError is the validation error returned by
// AddPostgresExporterParams.Validate if the designated constraints aren't met.
type AddPostgresExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostgresExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostgresExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostgresExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostgresExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostgresExporterParamsValidationError) ErrorName() string {
	return "AddPostgresExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostgresExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostgresExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostgresExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostgresExporterParamsValidationError{}

// Validate checks the field values on ChangePostgresExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePostgresExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePostgresExporterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangePostgresExporterRequestMultiError, or nil if none found.
func (m *ChangePostgresExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePostgresExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangePostgresExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePostgresExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePostgresExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePostgresExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePostgresExporterRequestMultiError(errors)
	}

	return nil
}

// ChangePostgresExporterRequestMultiError is an error wrapping multiple
// validation errors returned by ChangePostgresExporterRequest.ValidateAll()
// if the designated constraints aren't met.
type ChangePostgresExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePostgresExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePostgresExporterRequestMultiError) AllErrors() []error { return m }

// ChangePostgresExporterRequestValidationError is the validation error
// returned by ChangePostgresExporterRequest.Validate if the designated
// constraints aren't met.
type ChangePostgresExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePostgresExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePostgresExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePostgresExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePostgresExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePostgresExporterRequestValidationError) ErrorName() string {
	return "ChangePostgresExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePostgresExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePostgresExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePostgresExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePostgresExporterRequestValidationError{}

// Validate checks the field values on ChangePostgresExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePostgresExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePostgresExporterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangePostgresExporterResponseMultiError, or nil if none found.
func (m *ChangePostgresExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePostgresExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPostgresExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePostgresExporterResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePostgresExporterResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePostgresExporterResponseValidationError{
				field:  "PostgresExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePostgresExporterResponseMultiError(errors)
	}

	return nil
}

// ChangePostgresExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangePostgresExporterResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangePostgresExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePostgresExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePostgresExporterResponseMultiError) AllErrors() []error { return m }

// ChangePostgresExporterResponseValidationError is the validation error
// returned by ChangePostgresExporterResponse.Validate if the designated
// constraints aren't met.
type ChangePostgresExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePostgresExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePostgresExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePostgresExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePostgresExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePostgresExporterResponseValidationError) ErrorName() string {
	return "ChangePostgresExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePostgresExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePostgresExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePostgresExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePostgresExporterResponseValidationError{}

// Validate checks the field values on AddProxySQLExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProxySQLExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProxySQLExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProxySQLExporterParamsMultiError, or nil if none found.
func (m *AddProxySQLExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProxySQLExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddProxySQLExporterParamsMultiError(errors)
	}

	return nil
}

// AddProxySQLExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddProxySQLExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddProxySQLExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProxySQLExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProxySQLExporterParamsMultiError) AllErrors() []error { return m }

// AddProxySQLExporterParamsValidationError is the validation error returned by
// AddProxySQLExporterParams.Validate if the designated constraints aren't met.
type AddProxySQLExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProxySQLExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProxySQLExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProxySQLExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProxySQLExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProxySQLExporterParamsValidationError) ErrorName() string {
	return "AddProxySQLExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddProxySQLExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProxySQLExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProxySQLExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProxySQLExporterParamsValidationError{}

// Validate checks the field values on ChangeProxySQLExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeProxySQLExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeProxySQLExporterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeProxySQLExporterRequestMultiError, or nil if none found.
func (m *ChangeProxySQLExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeProxySQLExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeProxySQLExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeProxySQLExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeProxySQLExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeProxySQLExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeProxySQLExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeProxySQLExporterRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeProxySQLExporterRequest.ValidateAll()
// if the designated constraints aren't met.
type ChangeProxySQLExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeProxySQLExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeProxySQLExporterRequestMultiError) AllErrors() []error { return m }

// ChangeProxySQLExporterRequestValidationError is the validation error
// returned by ChangeProxySQLExporterRequest.Validate if the designated
// constraints aren't met.
type ChangeProxySQLExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeProxySQLExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeProxySQLExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeProxySQLExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeProxySQLExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeProxySQLExporterRequestValidationError) ErrorName() string {
	return "ChangeProxySQLExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeProxySQLExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeProxySQLExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeProxySQLExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeProxySQLExporterRequestValidationError{}

// Validate checks the field values on ChangeProxySQLExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeProxySQLExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeProxySQLExporterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeProxySQLExporterResponseMultiError, or nil if none found.
func (m *ChangeProxySQLExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeProxySQLExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProxysqlExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeProxySQLExporterResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeProxySQLExporterResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeProxySQLExporterResponseValidationError{
				field:  "ProxysqlExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeProxySQLExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeProxySQLExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeProxySQLExporterResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeProxySQLExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeProxySQLExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeProxySQLExporterResponseMultiError) AllErrors() []error { return m }

// ChangeProxySQLExporterResponseValidationError is the validation error
// returned by ChangeProxySQLExporterResponse.Validate if the designated
// constraints aren't met.
type ChangeProxySQLExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeProxySQLExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeProxySQLExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeProxySQLExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeProxySQLExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeProxySQLExporterResponseValidationError) ErrorName() string {
	return "ChangeProxySQLExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeProxySQLExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeProxySQLExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeProxySQLExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeProxySQLExporterResponseValidationError{}

// Validate checks the field values on AddQANMySQLPerfSchemaAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddQANMySQLPerfSchemaAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMySQLPerfSchemaAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMySQLPerfSchemaAgentParamsMultiError, or nil if none found.
func (m *AddQANMySQLPerfSchemaAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMySQLPerfSchemaAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMySQLPerfSchemaAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMySQLPerfSchemaAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// AddQANMySQLPerfSchemaAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANMySQLPerfSchemaAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMySQLPerfSchemaAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMySQLPerfSchemaAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMySQLPerfSchemaAgentParamsValidationError is the validation error
// returned by AddQANMySQLPerfSchemaAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMySQLPerfSchemaAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) ErrorName() string {
	return "AddQANMySQLPerfSchemaAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMySQLPerfSchemaAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMySQLPerfSchemaAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMySQLPerfSchemaAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMySQLPerfSchemaAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeQANMySQLPerfSchemaAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLPerfSchemaAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLPerfSchemaAgentRequestMultiError, or nil if none found.
func (m *ChangeQANMySQLPerfSchemaAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLPerfSchemaAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMySQLPerfSchemaAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLPerfSchemaAgentRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLPerfSchemaAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLPerfSchemaAgentRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMySQLPerfSchemaAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLPerfSchemaAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLPerfSchemaAgentRequestMultiError) AllErrors() []error { return m }

// ChangeQANMySQLPerfSchemaAgentRequestValidationError is the validation error
// returned by ChangeQANMySQLPerfSchemaAgentRequest.Validate if the designated
// constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) ErrorName() string {
	return "ChangeQANMySQLPerfSchemaAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLPerfSchemaAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLPerfSchemaAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLPerfSchemaAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLPerfSchemaAgentRequestValidationError{}

// Validate checks the field values on ChangeQANMySQLPerfSchemaAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeQANMySQLPerfSchemaAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLPerfSchemaAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLPerfSchemaAgentResponseMultiError, or nil if none found.
func (m *ChangeQANMySQLPerfSchemaAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLPerfSchemaAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLPerfSchemaAgentResponseValidationError{
				field:  "QanMysqlPerfschemaAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLPerfSchemaAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLPerfSchemaAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANMySQLPerfSchemaAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLPerfSchemaAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLPerfSchemaAgentResponseMultiError) AllErrors() []error { return m }

// ChangeQANMySQLPerfSchemaAgentResponseValidationError is the validation error
// returned by ChangeQANMySQLPerfSchemaAgentResponse.Validate if the
// designated constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) ErrorName() string {
	return "ChangeQANMySQLPerfSchemaAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLPerfSchemaAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLPerfSchemaAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLPerfSchemaAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLPerfSchemaAgentResponseValidationError{}

// Validate checks the field values on AddQANMySQLSlowlogAgentParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddQANMySQLSlowlogAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMySQLSlowlogAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMySQLSlowlogAgentParamsMultiError, or nil if none found.
func (m *AddQANMySQLSlowlogAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMySQLSlowlogAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for MaxSlowlogFileSize

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMySQLSlowlogAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMySQLSlowlogAgentParamsMultiError is an error wrapping multiple
// validation errors returned by AddQANMySQLSlowlogAgentParams.ValidateAll()
// if the designated constraints aren't met.
type AddQANMySQLSlowlogAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMySQLSlowlogAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMySQLSlowlogAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMySQLSlowlogAgentParamsValidationError is the validation error
// returned by AddQANMySQLSlowlogAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMySQLSlowlogAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMySQLSlowlogAgentParamsValidationError) ErrorName() string {
	return "AddQANMySQLSlowlogAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMySQLSlowlogAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMySQLSlowlogAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMySQLSlowlogAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMySQLSlowlogAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMySQLSlowlogAgentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeQANMySQLSlowlogAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLSlowlogAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLSlowlogAgentRequestMultiError, or nil if none found.
func (m *ChangeQANMySQLSlowlogAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLSlowlogAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMySQLSlowlogAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLSlowlogAgentRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLSlowlogAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLSlowlogAgentRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMySQLSlowlogAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLSlowlogAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLSlowlogAgentRequestMultiError) AllErrors() []error { return m }

// ChangeQANMySQLSlowlogAgentRequestValidationError is the validation error
// returned by ChangeQANMySQLSlowlogAgentRequest.Validate if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) ErrorName() string {
	return "ChangeQANMySQLSlowlogAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLSlowlogAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLSlowlogAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLSlowlogAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLSlowlogAgentRequestValidationError{}

// Validate checks the field values on ChangeQANMySQLSlowlogAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeQANMySQLSlowlogAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLSlowlogAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLSlowlogAgentResponseMultiError, or nil if none found.
func (m *ChangeQANMySQLSlowlogAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLSlowlogAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLSlowlogAgentResponseValidationError{
				field:  "QanMysqlSlowlogAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLSlowlogAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLSlowlogAgentResponseMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMySQLSlowlogAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLSlowlogAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLSlowlogAgentResponseMultiError) AllErrors() []error { return m }

// ChangeQANMySQLSlowlogAgentResponseValidationError is the validation error
// returned by ChangeQANMySQLSlowlogAgentResponse.Validate if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) ErrorName() string {
	return "ChangeQANMySQLSlowlogAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLSlowlogAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLSlowlogAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLSlowlogAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLSlowlogAgentResponseValidationError{}

// Validate checks the field values on AddQANMongoDBProfilerAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddQANMongoDBProfilerAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMongoDBProfilerAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMongoDBProfilerAgentParamsMultiError, or nil if none found.
func (m *AddQANMongoDBProfilerAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMongoDBProfilerAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMongoDBProfilerAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMongoDBProfilerAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCertificateKey

	// no validation rules for TlsCertificateKeyFilePassword

	// no validation rules for TlsCa

	// no validation rules for MaxQueryLength

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for AuthenticationMechanism

	// no validation rules for AuthenticationDatabase

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMongoDBProfilerAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMongoDBProfilerAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// AddQANMongoDBProfilerAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANMongoDBProfilerAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMongoDBProfilerAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMongoDBProfilerAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMongoDBProfilerAgentParamsValidationError is the validation error
// returned by AddQANMongoDBProfilerAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMongoDBProfilerAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMongoDBProfilerAgentParamsValidationError) ErrorName() string {
	return "AddQANMongoDBProfilerAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMongoDBProfilerAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMongoDBProfilerAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMongoDBProfilerAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMongoDBProfilerAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMongoDBProfilerAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeQANMongoDBProfilerAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMongoDBProfilerAgentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMongoDBProfilerAgentRequestMultiError, or nil if none found.
func (m *ChangeQANMongoDBProfilerAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMongoDBProfilerAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMongoDBProfilerAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMongoDBProfilerAgentRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMongoDBProfilerAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeQANMongoDBProfilerAgentRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMongoDBProfilerAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMongoDBProfilerAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMongoDBProfilerAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMongoDBProfilerAgentRequestMultiError) AllErrors() []error { return m }

// ChangeQANMongoDBProfilerAgentRequestValidationError is the validation error
// returned by ChangeQANMongoDBProfilerAgentRequest.Validate if the designated
// constraints aren't met.
type ChangeQANMongoDBProfilerAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) ErrorName() string {
	return "ChangeQANMongoDBProfilerAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMongoDBProfilerAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMongoDBProfilerAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMongoDBProfilerAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMongoDBProfilerAgentRequestValidationError{}

// Validate checks the field values on ChangeQANMongoDBProfilerAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeQANMongoDBProfilerAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMongoDBProfilerAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMongoDBProfilerAgentResponseMultiError, or nil if none found.
func (m *ChangeQANMongoDBProfilerAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMongoDBProfilerAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMongoDBProfilerAgentResponseValidationError{
				field:  "QanMongodbProfilerAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMongoDBProfilerAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeQANMongoDBProfilerAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANMongoDBProfilerAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMongoDBProfilerAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMongoDBProfilerAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMongoDBProfilerAgentResponseMultiError) AllErrors() []error { return m }

// ChangeQANMongoDBProfilerAgentResponseValidationError is the validation error
// returned by ChangeQANMongoDBProfilerAgentResponse.Validate if the
// designated constraints aren't met.
type ChangeQANMongoDBProfilerAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) ErrorName() string {
	return "ChangeQANMongoDBProfilerAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMongoDBProfilerAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMongoDBProfilerAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMongoDBProfilerAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMongoDBProfilerAgentResponseValidationError{}

// Validate checks the field values on AddQANPostgreSQLPgStatementsAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddQANPostgreSQLPgStatementsAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddQANPostgreSQLPgStatementsAgentParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddQANPostgreSQLPgStatementsAgentParamsMultiError, or nil if none found.
func (m *AddQANPostgreSQLPgStatementsAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANPostgreSQLPgStatementsAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANPostgreSQLPgStatementsAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANPostgreSQLPgStatementsAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// AddQANPostgreSQLPgStatementsAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANPostgreSQLPgStatementsAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANPostgreSQLPgStatementsAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANPostgreSQLPgStatementsAgentParamsMultiError) AllErrors() []error { return m }

// AddQANPostgreSQLPgStatementsAgentParamsValidationError is the validation
// error returned by AddQANPostgreSQLPgStatementsAgentParams.Validate if the
// designated constraints aren't met.
type AddQANPostgreSQLPgStatementsAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) ErrorName() string {
	return "AddQANPostgreSQLPgStatementsAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANPostgreSQLPgStatementsAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANPostgreSQLPgStatementsAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANPostgreSQLPgStatementsAgentParamsValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatementsAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatementsAgentRequestMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatementsAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatementsAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatementsAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatementsAgentRequestMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatementsAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatementsAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatementsAgentRequestMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatementsAgentRequestValidationError is the validation
// error returned by ChangeQANPostgreSQLPgStatementsAgentRequest.Validate if
// the designated constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatementsAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatementsAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatementsAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatementsAgentRequestValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatementsAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatementsAgentResponseMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatementsAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatementsAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatementsAgentResponseValidationError{
				field:  "QanPostgresqlPgstatementsAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatementsAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatementsAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatementsAgentResponse.ValidateAll() if the
// designated constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatementsAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatementsAgentResponseMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatementsAgentResponseValidationError is the
// validation error returned by
// ChangeQANPostgreSQLPgStatementsAgentResponse.Validate if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatementsAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatementsAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatementsAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatementsAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatementsAgentResponseValidationError{}

// Validate checks the field values on AddQANPostgreSQLPgStatMonitorAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddQANPostgreSQLPgStatMonitorAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddQANPostgreSQLPgStatMonitorAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AddQANPostgreSQLPgStatMonitorAgentParamsMultiError, or nil if none found.
func (m *AddQANPostgreSQLPgStatMonitorAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANPostgreSQLPgStatMonitorAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANPostgreSQLPgStatMonitorAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANPostgreSQLPgStatMonitorAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// AddQANPostgreSQLPgStatMonitorAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANPostgreSQLPgStatMonitorAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANPostgreSQLPgStatMonitorAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANPostgreSQLPgStatMonitorAgentParamsMultiError) AllErrors() []error { return m }

// AddQANPostgreSQLPgStatMonitorAgentParamsValidationError is the validation
// error returned by AddQANPostgreSQLPgStatMonitorAgentParams.Validate if the
// designated constraints aren't met.
type AddQANPostgreSQLPgStatMonitorAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) ErrorName() string {
	return "AddQANPostgreSQLPgStatMonitorAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANPostgreSQLPgStatMonitorAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatMonitorAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatMonitorAgentRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatMonitorAgentRequestMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError is the
// validation error returned by
// ChangeQANPostgreSQLPgStatMonitorAgentRequest.Validate if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatMonitorAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatMonitorAgentRequestValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatMonitorAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError{
				field:  "QanPostgresqlPgstatmonitorAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatMonitorAgentResponse.ValidateAll() if the
// designated constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatMonitorAgentResponseMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError is the
// validation error returned by
// ChangeQANPostgreSQLPgStatMonitorAgentResponse.Validate if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatMonitorAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatMonitorAgentResponseValidationError{}

// Validate checks the field values on AddRDSExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRDSExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRDSExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRDSExporterParamsMultiError, or nil if none found.
func (m *AddRDSExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRDSExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddRDSExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddRDSExporterParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AwsAccessKey

	// no validation rules for AwsSecretKey

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableBasicMetrics

	// no validation rules for DisableEnhancedMetrics

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddRDSExporterParamsMultiError(errors)
	}

	return nil
}

// AddRDSExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddRDSExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddRDSExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRDSExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRDSExporterParamsMultiError) AllErrors() []error { return m }

// AddRDSExporterParamsValidationError is the validation error returned by
// AddRDSExporterParams.Validate if the designated constraints aren't met.
type AddRDSExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRDSExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRDSExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRDSExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRDSExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRDSExporterParamsValidationError) ErrorName() string {
	return "AddRDSExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddRDSExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRDSExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRDSExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRDSExporterParamsValidationError{}

// Validate checks the field values on ChangeRDSExporterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRDSExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRDSExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRDSExporterRequestMultiError, or nil if none found.
func (m *ChangeRDSExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRDSExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeRDSExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeRDSExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeRDSExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeRDSExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeRDSExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeRDSExporterRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeRDSExporterRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeRDSExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRDSExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRDSExporterRequestMultiError) AllErrors() []error { return m }

// ChangeRDSExporterRequestValidationError is the validation error returned by
// ChangeRDSExporterRequest.Validate if the designated constraints aren't met.
type ChangeRDSExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRDSExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRDSExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRDSExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRDSExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRDSExporterRequestValidationError) ErrorName() string {
	return "ChangeRDSExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRDSExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRDSExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRDSExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRDSExporterRequestValidationError{}

// Validate checks the field values on ChangeRDSExporterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRDSExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRDSExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRDSExporterResponseMultiError, or nil if none found.
func (m *ChangeRDSExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRDSExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRdsExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeRDSExporterResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeRDSExporterResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeRDSExporterResponseValidationError{
				field:  "RdsExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeRDSExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeRDSExporterResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeRDSExporterResponse.ValidateAll() if the
// designated constraints aren't met.
type ChangeRDSExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRDSExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRDSExporterResponseMultiError) AllErrors() []error { return m }

// ChangeRDSExporterResponseValidationError is the validation error returned by
// ChangeRDSExporterResponse.Validate if the designated constraints aren't met.
type ChangeRDSExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRDSExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRDSExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRDSExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRDSExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRDSExporterResponseValidationError) ErrorName() string {
	return "ChangeRDSExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRDSExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRDSExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRDSExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRDSExporterResponseValidationError{}

// Validate checks the field values on AddExternalExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExternalExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExternalExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExternalExporterParamsMultiError, or nil if none found.
func (m *AddExternalExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExternalExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRunsOnNodeId()) < 1 {
		err := AddExternalExporterParamsValidationError{
			field:  "RunsOnNodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Scheme

	// no validation rules for MetricsPath

	if val := m.GetListenPort(); val <= 0 || val >= 65536 {
		err := AddExternalExporterParamsValidationError{
			field:  "ListenPort",
			reason: "value must be inside range (0, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for PushMetrics

	if len(errors) > 0 {
		return AddExternalExporterParamsMultiError(errors)
	}

	return nil
}

// AddExternalExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddExternalExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddExternalExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExternalExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExternalExporterParamsMultiError) AllErrors() []error { return m }

// AddExternalExporterParamsValidationError is the validation error returned by
// AddExternalExporterParams.Validate if the designated constraints aren't met.
type AddExternalExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExternalExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExternalExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExternalExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExternalExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExternalExporterParamsValidationError) ErrorName() string {
	return "AddExternalExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddExternalExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExternalExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExternalExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExternalExporterParamsValidationError{}

// Validate checks the field values on ChangeExternalExporterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeExternalExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeExternalExporterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeExternalExporterRequestMultiError, or nil if none found.
func (m *ChangeExternalExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeExternalExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeExternalExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeExternalExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeExternalExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeExternalExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeExternalExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeExternalExporterRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeExternalExporterRequest.ValidateAll()
// if the designated constraints aren't met.
type ChangeExternalExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeExternalExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeExternalExporterRequestMultiError) AllErrors() []error { return m }

// ChangeExternalExporterRequestValidationError is the validation error
// returned by ChangeExternalExporterRequest.Validate if the designated
// constraints aren't met.
type ChangeExternalExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeExternalExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeExternalExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeExternalExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeExternalExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeExternalExporterRequestValidationError) ErrorName() string {
	return "ChangeExternalExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeExternalExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeExternalExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeExternalExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeExternalExporterRequestValidationError{}

// Validate checks the field values on ChangeExternalExporterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeExternalExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeExternalExporterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeExternalExporterResponseMultiError, or nil if none found.
func (m *ChangeExternalExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeExternalExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExternalExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeExternalExporterResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeExternalExporterResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeExternalExporterResponseValidationError{
				field:  "ExternalExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeExternalExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeExternalExporterResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeExternalExporterResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeExternalExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeExternalExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeExternalExporterResponseMultiError) AllErrors() []error { return m }

// ChangeExternalExporterResponseValidationError is the validation error
// returned by ChangeExternalExporterResponse.Validate if the designated
// constraints aren't met.
type ChangeExternalExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeExternalExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeExternalExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeExternalExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeExternalExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeExternalExporterResponseValidationError) ErrorName() string {
	return "ChangeExternalExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeExternalExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeExternalExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeExternalExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeExternalExporterResponseValidationError{}

// Validate checks the field values on AddAzureDatabaseExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAzureDatabaseExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAzureDatabaseExporterParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddAzureDatabaseExporterParamsMultiError, or nil if none found.
func (m *AddAzureDatabaseExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAzureDatabaseExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AzureClientId

	// no validation rules for AzureClientSecret

	// no validation rules for AzureTenantId

	// no validation rules for AzureSubscriptionId

	// no validation rules for AzureResourceGroup

	if utf8.RuneCountInString(m.GetAzureDatabaseResourceType()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "AzureDatabaseResourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddAzureDatabaseExporterParamsMultiError(errors)
	}

	return nil
}

// AddAzureDatabaseExporterParamsMultiError is an error wrapping multiple
// validation errors returned by AddAzureDatabaseExporterParams.ValidateAll()
// if the designated constraints aren't met.
type AddAzureDatabaseExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAzureDatabaseExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAzureDatabaseExporterParamsMultiError) AllErrors() []error { return m }

// AddAzureDatabaseExporterParamsValidationError is the validation error
// returned by AddAzureDatabaseExporterParams.Validate if the designated
// constraints aren't met.
type AddAzureDatabaseExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAzureDatabaseExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAzureDatabaseExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAzureDatabaseExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAzureDatabaseExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAzureDatabaseExporterParamsValidationError) ErrorName() string {
	return "AddAzureDatabaseExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddAzureDatabaseExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAzureDatabaseExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAzureDatabaseExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAzureDatabaseExporterParamsValidationError{}

// Validate checks the field values on ChangeAzureDatabaseExporterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeAzureDatabaseExporterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAzureDatabaseExporterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeAzureDatabaseExporterRequestMultiError, or nil if none found.
func (m *ChangeAzureDatabaseExporterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAzureDatabaseExporterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeAzureDatabaseExporterRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeAzureDatabaseExporterRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeAzureDatabaseExporterRequestMultiError(errors)
	}

	return nil
}

// ChangeAzureDatabaseExporterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeAzureDatabaseExporterRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAzureDatabaseExporterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAzureDatabaseExporterRequestMultiError) AllErrors() []error { return m }

// ChangeAzureDatabaseExporterRequestValidationError is the validation error
// returned by ChangeAzureDatabaseExporterRequest.Validate if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAzureDatabaseExporterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAzureDatabaseExporterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAzureDatabaseExporterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAzureDatabaseExporterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAzureDatabaseExporterRequestValidationError) ErrorName() string {
	return "ChangeAzureDatabaseExporterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAzureDatabaseExporterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAzureDatabaseExporterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAzureDatabaseExporterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAzureDatabaseExporterRequestValidationError{}

// Validate checks the field values on ChangeAzureDatabaseExporterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeAzureDatabaseExporterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAzureDatabaseExporterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeAzureDatabaseExporterResponseMultiError, or nil if none found.
func (m *ChangeAzureDatabaseExporterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAzureDatabaseExporterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeAzureDatabaseExporterResponseValidationError{
				field:  "AzureDatabaseExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeAzureDatabaseExporterResponseMultiError(errors)
	}

	return nil
}

// ChangeAzureDatabaseExporterResponseMultiError is an error wrapping multiple
// validation errors returned by
// ChangeAzureDatabaseExporterResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAzureDatabaseExporterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAzureDatabaseExporterResponseMultiError) AllErrors() []error { return m }

// ChangeAzureDatabaseExporterResponseValidationError is the validation error
// returned by ChangeAzureDatabaseExporterResponse.Validate if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAzureDatabaseExporterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAzureDatabaseExporterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAzureDatabaseExporterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAzureDatabaseExporterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAzureDatabaseExporterResponseValidationError) ErrorName() string {
	return "ChangeAzureDatabaseExporterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAzureDatabaseExporterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAzureDatabaseExporterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAzureDatabaseExporterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAzureDatabaseExporterResponseValidationError{}

// Validate checks the field values on RemoveAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAgentRequestMultiError, or nil if none found.
func (m *RemoveAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := RemoveAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return RemoveAgentRequestMultiError(errors)
	}

	return nil
}

// RemoveAgentRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAgentRequestMultiError) AllErrors() []error { return m }

// RemoveAgentRequestValidationError is the validation error returned by
// RemoveAgentRequest.Validate if the designated constraints aren't met.
type RemoveAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAgentRequestValidationError) ErrorName() string {
	return "RemoveAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAgentRequestValidationError{}

// Validate checks the field values on RemoveAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAgentResponseMultiError, or nil if none found.
func (m *RemoveAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveAgentResponseMultiError(errors)
	}

	return nil
}

// RemoveAgentResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAgentResponseMultiError) AllErrors() []error { return m }

// RemoveAgentResponseValidationError is the validation error returned by
// RemoveAgentResponse.Validate if the designated constraints aren't met.
type RemoveAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAgentResponseValidationError) ErrorName() string {
	return "RemoveAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAgentResponseValidationError{}
