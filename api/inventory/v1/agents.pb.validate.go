// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory/v1/agents.proto

package inventoryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PMMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PMMAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PMMAgent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PMMAgentMultiError, or nil
// if none found.
func (m *PMMAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *PMMAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for RunsOnNodeId

	// no validation rules for CustomLabels

	// no validation rules for Connected

	// no validation rules for ProcessExecPath

	if len(errors) > 0 {
		return PMMAgentMultiError(errors)
	}

	return nil
}

// PMMAgentMultiError is an error wrapping multiple validation errors returned
// by PMMAgent.ValidateAll() if the designated constraints aren't met.
type PMMAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PMMAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PMMAgentMultiError) AllErrors() []error { return m }

// PMMAgentValidationError is the validation error returned by
// PMMAgent.Validate if the designated constraints aren't met.
type PMMAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PMMAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PMMAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PMMAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PMMAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PMMAgentValidationError) ErrorName() string { return "PMMAgentValidationError" }

// Error satisfies the builtin error interface
func (e PMMAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPMMAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PMMAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PMMAgentValidationError{}

// Validate checks the field values on VMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VMAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VMAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VMAgentMultiError, or nil if none found.
func (m *VMAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *VMAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for ListenPort

	if len(errors) > 0 {
		return VMAgentMultiError(errors)
	}

	return nil
}

// VMAgentMultiError is an error wrapping multiple validation errors returned
// by VMAgent.ValidateAll() if the designated constraints aren't met.
type VMAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VMAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VMAgentMultiError) AllErrors() []error { return m }

// VMAgentValidationError is the validation error returned by VMAgent.Validate
// if the designated constraints aren't met.
type VMAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VMAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VMAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VMAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VMAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VMAgentValidationError) ErrorName() string { return "VMAgentValidationError" }

// Error satisfies the builtin error interface
func (e VMAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVMAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VMAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VMAgentValidationError{}

// Validate checks the field values on NodeExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeExporterMultiError, or
// nil if none found.
func (m *NodeExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return NodeExporterMultiError(errors)
	}

	return nil
}

// NodeExporterMultiError is an error wrapping multiple validation errors
// returned by NodeExporter.ValidateAll() if the designated constraints aren't met.
type NodeExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeExporterMultiError) AllErrors() []error { return m }

// NodeExporterValidationError is the validation error returned by
// NodeExporter.Validate if the designated constraints aren't met.
type NodeExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeExporterValidationError) ErrorName() string { return "NodeExporterValidationError" }

// Error satisfies the builtin error interface
func (e NodeExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeExporterValidationError{}

// Validate checks the field values on MySQLdExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySQLdExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySQLdExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MySQLdExporterMultiError,
// or nil if none found.
func (m *MySQLdExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *MySQLdExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for TablestatsGroupTableLimit

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for TableCount

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for TablestatsGroupDisabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return MySQLdExporterMultiError(errors)
	}

	return nil
}

// MySQLdExporterMultiError is an error wrapping multiple validation errors
// returned by MySQLdExporter.ValidateAll() if the designated constraints
// aren't met.
type MySQLdExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySQLdExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySQLdExporterMultiError) AllErrors() []error { return m }

// MySQLdExporterValidationError is the validation error returned by
// MySQLdExporter.Validate if the designated constraints aren't met.
type MySQLdExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLdExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLdExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLdExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLdExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLdExporterValidationError) ErrorName() string { return "MySQLdExporterValidationError" }

// Error satisfies the builtin error interface
func (e MySQLdExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQLdExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLdExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLdExporterValidationError{}

// Validate checks the field values on MongoDBExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MongoDBExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MongoDBExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MongoDBExporterMultiError, or nil if none found.
func (m *MongoDBExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *MongoDBExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for CollectionsLimit

	// no validation rules for EnableAllCollectors

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return MongoDBExporterMultiError(errors)
	}

	return nil
}

// MongoDBExporterMultiError is an error wrapping multiple validation errors
// returned by MongoDBExporter.ValidateAll() if the designated constraints
// aren't met.
type MongoDBExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoDBExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoDBExporterMultiError) AllErrors() []error { return m }

// MongoDBExporterValidationError is the validation error returned by
// MongoDBExporter.Validate if the designated constraints aren't met.
type MongoDBExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBExporterValidationError) ErrorName() string { return "MongoDBExporterValidationError" }

// Error satisfies the builtin error interface
func (e MongoDBExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDBExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBExporterValidationError{}

// Validate checks the field values on PostgresExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostgresExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresExporterMultiError, or nil if none found.
func (m *PostgresExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return PostgresExporterMultiError(errors)
	}

	return nil
}

// PostgresExporterMultiError is an error wrapping multiple validation errors
// returned by PostgresExporter.ValidateAll() if the designated constraints
// aren't met.
type PostgresExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresExporterMultiError) AllErrors() []error { return m }

// PostgresExporterValidationError is the validation error returned by
// PostgresExporter.Validate if the designated constraints aren't met.
type PostgresExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresExporterValidationError) ErrorName() string { return "PostgresExporterValidationError" }

// Error satisfies the builtin error interface
func (e PostgresExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresExporterValidationError{}

// Validate checks the field values on ProxySQLExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProxySQLExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxySQLExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxySQLExporterMultiError, or nil if none found.
func (m *ProxySQLExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxySQLExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for PushMetricsEnabled

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return ProxySQLExporterMultiError(errors)
	}

	return nil
}

// ProxySQLExporterMultiError is an error wrapping multiple validation errors
// returned by ProxySQLExporter.ValidateAll() if the designated constraints
// aren't met.
type ProxySQLExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxySQLExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxySQLExporterMultiError) AllErrors() []error { return m }

// ProxySQLExporterValidationError is the validation error returned by
// ProxySQLExporter.Validate if the designated constraints aren't met.
type ProxySQLExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxySQLExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxySQLExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxySQLExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxySQLExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxySQLExporterValidationError) ErrorName() string { return "ProxySQLExporterValidationError" }

// Error satisfies the builtin error interface
func (e ProxySQLExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxySQLExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxySQLExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxySQLExporterValidationError{}

// Validate checks the field values on QANMySQLPerfSchemaAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMySQLPerfSchemaAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMySQLPerfSchemaAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMySQLPerfSchemaAgentMultiError, or nil if none found.
func (m *QANMySQLPerfSchemaAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMySQLPerfSchemaAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMySQLPerfSchemaAgentMultiError(errors)
	}

	return nil
}

// QANMySQLPerfSchemaAgentMultiError is an error wrapping multiple validation
// errors returned by QANMySQLPerfSchemaAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMySQLPerfSchemaAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMySQLPerfSchemaAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMySQLPerfSchemaAgentMultiError) AllErrors() []error { return m }

// QANMySQLPerfSchemaAgentValidationError is the validation error returned by
// QANMySQLPerfSchemaAgent.Validate if the designated constraints aren't met.
type QANMySQLPerfSchemaAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMySQLPerfSchemaAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMySQLPerfSchemaAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMySQLPerfSchemaAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMySQLPerfSchemaAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMySQLPerfSchemaAgentValidationError) ErrorName() string {
	return "QANMySQLPerfSchemaAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMySQLPerfSchemaAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMySQLPerfSchemaAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMySQLPerfSchemaAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMySQLPerfSchemaAgentValidationError{}

// Validate checks the field values on QANMySQLSlowlogAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMySQLSlowlogAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMySQLSlowlogAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMySQLSlowlogAgentMultiError, or nil if none found.
func (m *QANMySQLSlowlogAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMySQLSlowlogAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for MaxSlowlogFileSize

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMySQLSlowlogAgentMultiError(errors)
	}

	return nil
}

// QANMySQLSlowlogAgentMultiError is an error wrapping multiple validation
// errors returned by QANMySQLSlowlogAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMySQLSlowlogAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMySQLSlowlogAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMySQLSlowlogAgentMultiError) AllErrors() []error { return m }

// QANMySQLSlowlogAgentValidationError is the validation error returned by
// QANMySQLSlowlogAgent.Validate if the designated constraints aren't met.
type QANMySQLSlowlogAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMySQLSlowlogAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMySQLSlowlogAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMySQLSlowlogAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMySQLSlowlogAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMySQLSlowlogAgentValidationError) ErrorName() string {
	return "QANMySQLSlowlogAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMySQLSlowlogAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMySQLSlowlogAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMySQLSlowlogAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMySQLSlowlogAgentValidationError{}

// Validate checks the field values on QANMongoDBProfilerAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANMongoDBProfilerAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANMongoDBProfilerAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANMongoDBProfilerAgentMultiError, or nil if none found.
func (m *QANMongoDBProfilerAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANMongoDBProfilerAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for MaxQueryLength

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANMongoDBProfilerAgentMultiError(errors)
	}

	return nil
}

// QANMongoDBProfilerAgentMultiError is an error wrapping multiple validation
// errors returned by QANMongoDBProfilerAgent.ValidateAll() if the designated
// constraints aren't met.
type QANMongoDBProfilerAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANMongoDBProfilerAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANMongoDBProfilerAgentMultiError) AllErrors() []error { return m }

// QANMongoDBProfilerAgentValidationError is the validation error returned by
// QANMongoDBProfilerAgent.Validate if the designated constraints aren't met.
type QANMongoDBProfilerAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANMongoDBProfilerAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANMongoDBProfilerAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANMongoDBProfilerAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANMongoDBProfilerAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANMongoDBProfilerAgentValidationError) ErrorName() string {
	return "QANMongoDBProfilerAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANMongoDBProfilerAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANMongoDBProfilerAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANMongoDBProfilerAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANMongoDBProfilerAgentValidationError{}

// Validate checks the field values on QANPostgreSQLPgStatementsAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANPostgreSQLPgStatementsAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANPostgreSQLPgStatementsAgent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QANPostgreSQLPgStatementsAgentMultiError, or nil if none found.
func (m *QANPostgreSQLPgStatementsAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANPostgreSQLPgStatementsAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANPostgreSQLPgStatementsAgentMultiError(errors)
	}

	return nil
}

// QANPostgreSQLPgStatementsAgentMultiError is an error wrapping multiple
// validation errors returned by QANPostgreSQLPgStatementsAgent.ValidateAll()
// if the designated constraints aren't met.
type QANPostgreSQLPgStatementsAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANPostgreSQLPgStatementsAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANPostgreSQLPgStatementsAgentMultiError) AllErrors() []error { return m }

// QANPostgreSQLPgStatementsAgentValidationError is the validation error
// returned by QANPostgreSQLPgStatementsAgent.Validate if the designated
// constraints aren't met.
type QANPostgreSQLPgStatementsAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANPostgreSQLPgStatementsAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANPostgreSQLPgStatementsAgentValidationError) ErrorName() string {
	return "QANPostgreSQLPgStatementsAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANPostgreSQLPgStatementsAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANPostgreSQLPgStatementsAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANPostgreSQLPgStatementsAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANPostgreSQLPgStatementsAgentValidationError{}

// Validate checks the field values on QANPostgreSQLPgStatMonitorAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANPostgreSQLPgStatMonitorAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANPostgreSQLPgStatMonitorAgent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QANPostgreSQLPgStatMonitorAgentMultiError, or nil if none found.
func (m *QANPostgreSQLPgStatMonitorAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *QANPostgreSQLPgStatMonitorAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for QueryExamplesDisabled

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return QANPostgreSQLPgStatMonitorAgentMultiError(errors)
	}

	return nil
}

// QANPostgreSQLPgStatMonitorAgentMultiError is an error wrapping multiple
// validation errors returned by QANPostgreSQLPgStatMonitorAgent.ValidateAll()
// if the designated constraints aren't met.
type QANPostgreSQLPgStatMonitorAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANPostgreSQLPgStatMonitorAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANPostgreSQLPgStatMonitorAgentMultiError) AllErrors() []error { return m }

// QANPostgreSQLPgStatMonitorAgentValidationError is the validation error
// returned by QANPostgreSQLPgStatMonitorAgent.Validate if the designated
// constraints aren't met.
type QANPostgreSQLPgStatMonitorAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANPostgreSQLPgStatMonitorAgentValidationError) ErrorName() string {
	return "QANPostgreSQLPgStatMonitorAgentValidationError"
}

// Error satisfies the builtin error interface
func (e QANPostgreSQLPgStatMonitorAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANPostgreSQLPgStatMonitorAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANPostgreSQLPgStatMonitorAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANPostgreSQLPgStatMonitorAgentValidationError{}

// Validate checks the field values on RDSExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RDSExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RDSExporter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RDSExporterMultiError, or
// nil if none found.
func (m *RDSExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *RDSExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for NodeId

	// no validation rules for AwsAccessKey

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for BasicMetricsDisabled

	// no validation rules for EnhancedMetricsDisabled

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	if len(errors) > 0 {
		return RDSExporterMultiError(errors)
	}

	return nil
}

// RDSExporterMultiError is an error wrapping multiple validation errors
// returned by RDSExporter.ValidateAll() if the designated constraints aren't met.
type RDSExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RDSExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RDSExporterMultiError) AllErrors() []error { return m }

// RDSExporterValidationError is the validation error returned by
// RDSExporter.Validate if the designated constraints aren't met.
type RDSExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RDSExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RDSExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RDSExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RDSExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RDSExporterValidationError) ErrorName() string { return "RDSExporterValidationError" }

// Error satisfies the builtin error interface
func (e RDSExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRDSExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RDSExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RDSExporterValidationError{}

// Validate checks the field values on ExternalExporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExternalExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalExporterMultiError, or nil if none found.
func (m *ExternalExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for RunsOnNodeId

	// no validation rules for Disabled

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Scheme

	// no validation rules for MetricsPath

	// no validation rules for CustomLabels

	// no validation rules for ListenPort

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	if len(errors) > 0 {
		return ExternalExporterMultiError(errors)
	}

	return nil
}

// ExternalExporterMultiError is an error wrapping multiple validation errors
// returned by ExternalExporter.ValidateAll() if the designated constraints
// aren't met.
type ExternalExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalExporterMultiError) AllErrors() []error { return m }

// ExternalExporterValidationError is the validation error returned by
// ExternalExporter.Validate if the designated constraints aren't met.
type ExternalExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalExporterValidationError) ErrorName() string { return "ExternalExporterValidationError" }

// Error satisfies the builtin error interface
func (e ExternalExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalExporterValidationError{}

// Validate checks the field values on AzureDatabaseExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AzureDatabaseExporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AzureDatabaseExporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AzureDatabaseExporterMultiError, or nil if none found.
func (m *AzureDatabaseExporter) ValidateAll() error {
	return m.validate(true)
}

func (m *AzureDatabaseExporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for PmmAgentId

	// no validation rules for Disabled

	// no validation rules for NodeId

	// no validation rules for AzureDatabaseSubscriptionId

	// no validation rules for AzureDatabaseResourceType

	// no validation rules for CustomLabels

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for PushMetricsEnabled

	// no validation rules for ProcessExecPath

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AzureDatabaseExporterMultiError(errors)
	}

	return nil
}

// AzureDatabaseExporterMultiError is an error wrapping multiple validation
// errors returned by AzureDatabaseExporter.ValidateAll() if the designated
// constraints aren't met.
type AzureDatabaseExporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureDatabaseExporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureDatabaseExporterMultiError) AllErrors() []error { return m }

// AzureDatabaseExporterValidationError is the validation error returned by
// AzureDatabaseExporter.Validate if the designated constraints aren't met.
type AzureDatabaseExporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureDatabaseExporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureDatabaseExporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureDatabaseExporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureDatabaseExporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureDatabaseExporterValidationError) ErrorName() string {
	return "AzureDatabaseExporterValidationError"
}

// Error satisfies the builtin error interface
func (e AzureDatabaseExporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzureDatabaseExporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureDatabaseExporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureDatabaseExporterValidationError{}

// Validate checks the field values on ChangeCommonAgentParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeCommonAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeCommonAgentParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeCommonAgentParamsMultiError, or nil if none found.
func (m *ChangeCommonAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeCommonAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enable != nil {
		// no validation rules for Enable
	}

	if m.CustomLabels != nil {
		if all {
			switch v := interface{}(m.GetCustomLabels()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeCommonAgentParamsValidationError{
						field:  "CustomLabels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeCommonAgentParamsValidationError{
						field:  "CustomLabels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomLabels()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeCommonAgentParamsValidationError{
					field:  "CustomLabels",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if m.EnablePushMetrics != nil {
		// no validation rules for EnablePushMetrics
	}

	if len(errors) > 0 {
		return ChangeCommonAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeCommonAgentParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeCommonAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeCommonAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeCommonAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeCommonAgentParamsMultiError) AllErrors() []error { return m }

// ChangeCommonAgentParamsValidationError is the validation error returned by
// ChangeCommonAgentParams.Validate if the designated constraints aren't met.
type ChangeCommonAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCommonAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCommonAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCommonAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCommonAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCommonAgentParamsValidationError) ErrorName() string {
	return "ChangeCommonAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCommonAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCommonAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCommonAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCommonAgentParamsValidationError{}

// Validate checks the field values on ListAgentsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsRequestMultiError, or nil if none found.
func (m *ListAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for NodeId

	// no validation rules for ServiceId

	// no validation rules for AgentType

	if len(errors) > 0 {
		return ListAgentsRequestMultiError(errors)
	}

	return nil
}

// ListAgentsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsRequestMultiError) AllErrors() []error { return m }

// ListAgentsRequestValidationError is the validation error returned by
// ListAgentsRequest.Validate if the designated constraints aren't met.
type ListAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsRequestValidationError) ErrorName() string {
	return "ListAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsRequestValidationError{}

// Validate checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsResponseMultiError, or nil if none found.
func (m *ListAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPmmAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PmmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PmmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("PmmAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVmAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("VmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("VmAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("VmAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNodeExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("NodeExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("NodeExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("NodeExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMysqldExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MysqldExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MysqldExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("MysqldExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMongodbExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MongodbExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("MongodbExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("MongodbExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPostgresExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PostgresExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("PostgresExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("PostgresExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProxysqlExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("ProxysqlExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMysqlPerfschemaAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMysqlPerfschemaAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMysqlSlowlogAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMysqlSlowlogAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanMongodbProfilerAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanMongodbProfilerAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanPostgresqlPgstatementsAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanPostgresqlPgstatementsAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQanPostgresqlPgstatmonitorAgent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("QanPostgresqlPgstatmonitorAgent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExternalExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ExternalExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("ExternalExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("ExternalExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRdsExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("RdsExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("RdsExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("RdsExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAzureDatabaseExporter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentsResponseValidationError{
						field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentsResponseValidationError{
					field:  fmt.Sprintf("AzureDatabaseExporter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAgentsResponseMultiError(errors)
	}

	return nil
}

// ListAgentsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAgentsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsResponseMultiError) AllErrors() []error { return m }

// ListAgentsResponseValidationError is the validation error returned by
// ListAgentsResponse.Validate if the designated constraints aren't met.
type ListAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsResponseValidationError) ErrorName() string {
	return "ListAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsResponseValidationError{}

// Validate checks the field values on GetAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentRequestMultiError, or nil if none found.
func (m *GetAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := GetAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAgentRequestMultiError(errors)
	}

	return nil
}

// GetAgentRequestMultiError is an error wrapping multiple validation errors
// returned by GetAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentRequestMultiError) AllErrors() []error { return m }

// GetAgentRequestValidationError is the validation error returned by
// GetAgentRequest.Validate if the designated constraints aren't met.
type GetAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentRequestValidationError) ErrorName() string { return "GetAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentRequestValidationError{}

// Validate checks the field values on GetAgentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentResponseMultiError, or nil if none found.
func (m *GetAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *GetAgentResponse_PmmAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_Vmagent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVmagent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "Vmagent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "Vmagent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVmagent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "Vmagent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_NodeExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_MysqldExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_MongodbExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_PostgresExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_ProxysqlExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMysqlPerfschemaAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMysqlSlowlogAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanMongodbProfilerAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_ExternalExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_RdsExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetAgentResponse_AzureDatabaseExporter:
		if v == nil {
			err := GetAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAgentResponseMultiError(errors)
	}

	return nil
}

// GetAgentResponseMultiError is an error wrapping multiple validation errors
// returned by GetAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentResponseMultiError) AllErrors() []error { return m }

// GetAgentResponseValidationError is the validation error returned by
// GetAgentResponse.Validate if the designated constraints aren't met.
type GetAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentResponseValidationError) ErrorName() string { return "GetAgentResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentResponseValidationError{}

// Validate checks the field values on GetAgentLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentLogsRequestMultiError, or nil if none found.
func (m *GetAgentLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := GetAgentLogsRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAgentLogsRequestMultiError(errors)
	}

	return nil
}

// GetAgentLogsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAgentLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAgentLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentLogsRequestMultiError) AllErrors() []error { return m }

// GetAgentLogsRequestValidationError is the validation error returned by
// GetAgentLogsRequest.Validate if the designated constraints aren't met.
type GetAgentLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentLogsRequestValidationError) ErrorName() string {
	return "GetAgentLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentLogsRequestValidationError{}

// Validate checks the field values on GetAgentLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentLogsResponseMultiError, or nil if none found.
func (m *GetAgentLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentConfigLogLinesCount

	if len(errors) > 0 {
		return GetAgentLogsResponseMultiError(errors)
	}

	return nil
}

// GetAgentLogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAgentLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAgentLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentLogsResponseMultiError) AllErrors() []error { return m }

// GetAgentLogsResponseValidationError is the validation error returned by
// GetAgentLogsResponse.Validate if the designated constraints aren't met.
type GetAgentLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentLogsResponseValidationError) ErrorName() string {
	return "GetAgentLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentLogsResponseValidationError{}

// Validate checks the field values on AddAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentRequestMultiError, or nil if none found.
func (m *AddAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *AddAgentRequest_PmmAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_NodeExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_MysqldExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_MongodbExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_PostgresExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_ProxysqlExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_ExternalExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_RdsExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_AzureDatabaseExporter:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMysqlPerfschemaAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMysqlSlowlogAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanMongodbProfilerAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentRequest_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := AddAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentRequestValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddAgentRequestMultiError(errors)
	}

	return nil
}

// AddAgentRequestMultiError is an error wrapping multiple validation errors
// returned by AddAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentRequestMultiError) AllErrors() []error { return m }

// AddAgentRequestValidationError is the validation error returned by
// AddAgentRequest.Validate if the designated constraints aren't met.
type AddAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentRequestValidationError) ErrorName() string { return "AddAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentRequestValidationError{}

// Validate checks the field values on AddAgentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentResponseMultiError, or nil if none found.
func (m *AddAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *AddAgentResponse_PmmAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPmmAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PmmAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPmmAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "PmmAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_NodeExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_MysqldExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_MongodbExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_PostgresExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_ProxysqlExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_ExternalExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_RdsExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_AzureDatabaseExporter:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMysqlPerfschemaAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMysqlSlowlogAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanMongodbProfilerAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddAgentResponse_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := AddAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddAgentResponseMultiError(errors)
	}

	return nil
}

// AddAgentResponseMultiError is an error wrapping multiple validation errors
// returned by AddAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentResponseMultiError) AllErrors() []error { return m }

// AddAgentResponseValidationError is the validation error returned by
// AddAgentResponse.Validate if the designated constraints aren't met.
type AddAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentResponseValidationError) ErrorName() string { return "AddAgentResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentResponseValidationError{}

// Validate checks the field values on ChangeAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAgentRequestMultiError, or nil if none found.
func (m *ChangeAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *ChangeAgentRequest_NodeExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_MysqldExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_MongodbExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_PostgresExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_ProxysqlExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_ExternalExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_RdsExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_AzureDatabaseExporter:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_QanMysqlPerfschemaAgent:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_QanMysqlSlowlogAgent:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_QanMongodbProfilerAgent:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentRequest_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := ChangeAgentRequestValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentRequestValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentRequestValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChangeAgentRequestMultiError(errors)
	}

	return nil
}

// ChangeAgentRequestMultiError is an error wrapping multiple validation errors
// returned by ChangeAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type ChangeAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAgentRequestMultiError) AllErrors() []error { return m }

// ChangeAgentRequestValidationError is the validation error returned by
// ChangeAgentRequest.Validate if the designated constraints aren't met.
type ChangeAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAgentRequestValidationError) ErrorName() string {
	return "ChangeAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAgentRequestValidationError{}

// Validate checks the field values on ChangeAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAgentResponseMultiError, or nil if none found.
func (m *ChangeAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Agent.(type) {
	case *ChangeAgentResponse_NodeExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "NodeExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "NodeExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_MysqldExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqldExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "MysqldExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqldExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "MysqldExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_MongodbExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "MongodbExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_PostgresExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "PostgresExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "PostgresExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_ProxysqlExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysqlExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "ProxysqlExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysqlExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "ProxysqlExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_ExternalExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "ExternalExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "ExternalExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_RdsExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRdsExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "RdsExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRdsExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "RdsExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_AzureDatabaseExporter:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAzureDatabaseExporter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "AzureDatabaseExporter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureDatabaseExporter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "AzureDatabaseExporter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_QanMysqlPerfschemaAgent:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlPerfschemaAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMysqlPerfschemaAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlPerfschemaAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "QanMysqlPerfschemaAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_QanMysqlSlowlogAgent:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMysqlSlowlogAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMysqlSlowlogAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMysqlSlowlogAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "QanMysqlSlowlogAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_QanMongodbProfilerAgent:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanMongodbProfilerAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanMongodbProfilerAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanMongodbProfilerAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "QanMongodbProfilerAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_QanPostgresqlPgstatementsAgent:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanPostgresqlPgstatementsAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatementsAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "QanPostgresqlPgstatementsAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeAgentResponse_QanPostgresqlPgstatmonitorAgent:
		if v == nil {
			err := ChangeAgentResponseValidationError{
				field:  "Agent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAgentResponseValidationError{
						field:  "QanPostgresqlPgstatmonitorAgent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanPostgresqlPgstatmonitorAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAgentResponseValidationError{
					field:  "QanPostgresqlPgstatmonitorAgent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChangeAgentResponseMultiError(errors)
	}

	return nil
}

// ChangeAgentResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAgentResponseMultiError) AllErrors() []error { return m }

// ChangeAgentResponseValidationError is the validation error returned by
// ChangeAgentResponse.Validate if the designated constraints aren't met.
type ChangeAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAgentResponseValidationError) ErrorName() string {
	return "ChangeAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAgentResponseValidationError{}

// Validate checks the field values on AddPMMAgentParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPMMAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPMMAgentParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPMMAgentParamsMultiError, or nil if none found.
func (m *AddPMMAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPMMAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRunsOnNodeId()) < 1 {
		err := AddPMMAgentParamsValidationError{
			field:  "RunsOnNodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddPMMAgentParamsMultiError(errors)
	}

	return nil
}

// AddPMMAgentParamsMultiError is an error wrapping multiple validation errors
// returned by AddPMMAgentParams.ValidateAll() if the designated constraints
// aren't met.
type AddPMMAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPMMAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPMMAgentParamsMultiError) AllErrors() []error { return m }

// AddPMMAgentParamsValidationError is the validation error returned by
// AddPMMAgentParams.Validate if the designated constraints aren't met.
type AddPMMAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPMMAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPMMAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPMMAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPMMAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPMMAgentParamsValidationError) ErrorName() string {
	return "AddPMMAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddPMMAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPMMAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPMMAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPMMAgentParamsValidationError{}

// Validate checks the field values on AddNodeExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNodeExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNodeExporterParamsMultiError, or nil if none found.
func (m *AddNodeExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddNodeExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddNodeExporterParamsMultiError(errors)
	}

	return nil
}

// AddNodeExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddNodeExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddNodeExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeExporterParamsMultiError) AllErrors() []error { return m }

// AddNodeExporterParamsValidationError is the validation error returned by
// AddNodeExporterParams.Validate if the designated constraints aren't met.
type AddNodeExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeExporterParamsValidationError) ErrorName() string {
	return "AddNodeExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddNodeExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeExporterParamsValidationError{}

// Validate checks the field values on ChangeNodeExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNodeExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNodeExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNodeExporterParamsMultiError, or nil if none found.
func (m *ChangeNodeExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNodeExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeNodeExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeNodeExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeNodeExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeNodeExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeNodeExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeNodeExporterParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeNodeExporterParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeNodeExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNodeExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNodeExporterParamsMultiError) AllErrors() []error { return m }

// ChangeNodeExporterParamsValidationError is the validation error returned by
// ChangeNodeExporterParams.Validate if the designated constraints aren't met.
type ChangeNodeExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNodeExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNodeExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNodeExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNodeExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNodeExporterParamsValidationError) ErrorName() string {
	return "ChangeNodeExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNodeExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNodeExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNodeExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNodeExporterParamsValidationError{}

// Validate checks the field values on AddMySQLdExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMySQLdExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMySQLdExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMySQLdExporterParamsMultiError, or nil if none found.
func (m *AddMySQLdExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMySQLdExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddMySQLdExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for TablestatsGroupTableLimit

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddMySQLdExporterParamsMultiError(errors)
	}

	return nil
}

// AddMySQLdExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddMySQLdExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddMySQLdExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMySQLdExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMySQLdExporterParamsMultiError) AllErrors() []error { return m }

// AddMySQLdExporterParamsValidationError is the validation error returned by
// AddMySQLdExporterParams.Validate if the designated constraints aren't met.
type AddMySQLdExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMySQLdExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMySQLdExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMySQLdExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMySQLdExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMySQLdExporterParamsValidationError) ErrorName() string {
	return "AddMySQLdExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMySQLdExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMySQLdExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMySQLdExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMySQLdExporterParamsValidationError{}

// Validate checks the field values on ChangeMySQLdExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMySQLdExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMySQLdExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMySQLdExporterParamsMultiError, or nil if none found.
func (m *ChangeMySQLdExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMySQLdExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeMySQLdExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMySQLdExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMySQLdExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMySQLdExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMySQLdExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeMySQLdExporterParamsMultiError is an error wrapping multiple
// validation errors returned by ChangeMySQLdExporterParams.ValidateAll() if
// the designated constraints aren't met.
type ChangeMySQLdExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMySQLdExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMySQLdExporterParamsMultiError) AllErrors() []error { return m }

// ChangeMySQLdExporterParamsValidationError is the validation error returned
// by ChangeMySQLdExporterParams.Validate if the designated constraints aren't met.
type ChangeMySQLdExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMySQLdExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMySQLdExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMySQLdExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMySQLdExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMySQLdExporterParamsValidationError) ErrorName() string {
	return "ChangeMySQLdExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMySQLdExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMySQLdExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMySQLdExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMySQLdExporterParamsValidationError{}

// Validate checks the field values on AddMongoDBExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMongoDBExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMongoDBExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMongoDBExporterParamsMultiError, or nil if none found.
func (m *AddMongoDBExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMongoDBExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddMongoDBExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddMongoDBExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCertificateKey

	// no validation rules for TlsCertificateKeyFilePassword

	// no validation rules for TlsCa

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AuthenticationMechanism

	// no validation rules for AuthenticationDatabase

	// no validation rules for AgentPassword

	// no validation rules for CollectionsLimit

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddMongoDBExporterParamsMultiError(errors)
	}

	return nil
}

// AddMongoDBExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddMongoDBExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddMongoDBExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMongoDBExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMongoDBExporterParamsMultiError) AllErrors() []error { return m }

// AddMongoDBExporterParamsValidationError is the validation error returned by
// AddMongoDBExporterParams.Validate if the designated constraints aren't met.
type AddMongoDBExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMongoDBExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMongoDBExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMongoDBExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMongoDBExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMongoDBExporterParamsValidationError) ErrorName() string {
	return "AddMongoDBExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMongoDBExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMongoDBExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMongoDBExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMongoDBExporterParamsValidationError{}

// Validate checks the field values on ChangeMongoDBExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeMongoDBExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMongoDBExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMongoDBExporterParamsMultiError, or nil if none found.
func (m *ChangeMongoDBExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMongoDBExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeMongoDBExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeMongoDBExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeMongoDBExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeMongoDBExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMongoDBExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeMongoDBExporterParamsMultiError is an error wrapping multiple
// validation errors returned by ChangeMongoDBExporterParams.ValidateAll() if
// the designated constraints aren't met.
type ChangeMongoDBExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMongoDBExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMongoDBExporterParamsMultiError) AllErrors() []error { return m }

// ChangeMongoDBExporterParamsValidationError is the validation error returned
// by ChangeMongoDBExporterParams.Validate if the designated constraints
// aren't met.
type ChangeMongoDBExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMongoDBExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMongoDBExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMongoDBExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMongoDBExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMongoDBExporterParamsValidationError) ErrorName() string {
	return "ChangeMongoDBExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeMongoDBExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMongoDBExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMongoDBExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMongoDBExporterParamsValidationError{}

// Validate checks the field values on AddPostgresExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostgresExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostgresExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostgresExporterParamsMultiError, or nil if none found.
func (m *AddPostgresExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostgresExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddPostgresExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for AutoDiscoveryLimit

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddPostgresExporterParamsMultiError(errors)
	}

	return nil
}

// AddPostgresExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddPostgresExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddPostgresExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostgresExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostgresExporterParamsMultiError) AllErrors() []error { return m }

// AddPostgresExporterParamsValidationError is the validation error returned by
// AddPostgresExporterParams.Validate if the designated constraints aren't met.
type AddPostgresExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostgresExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostgresExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostgresExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostgresExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostgresExporterParamsValidationError) ErrorName() string {
	return "AddPostgresExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostgresExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostgresExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostgresExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostgresExporterParamsValidationError{}

// Validate checks the field values on ChangePostgresExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePostgresExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePostgresExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePostgresExporterParamsMultiError, or nil if none found.
func (m *ChangePostgresExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePostgresExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangePostgresExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePostgresExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePostgresExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePostgresExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePostgresExporterParamsMultiError(errors)
	}

	return nil
}

// ChangePostgresExporterParamsMultiError is an error wrapping multiple
// validation errors returned by ChangePostgresExporterParams.ValidateAll() if
// the designated constraints aren't met.
type ChangePostgresExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePostgresExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePostgresExporterParamsMultiError) AllErrors() []error { return m }

// ChangePostgresExporterParamsValidationError is the validation error returned
// by ChangePostgresExporterParams.Validate if the designated constraints
// aren't met.
type ChangePostgresExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePostgresExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePostgresExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePostgresExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePostgresExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePostgresExporterParamsValidationError) ErrorName() string {
	return "ChangePostgresExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePostgresExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePostgresExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePostgresExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePostgresExporterParamsValidationError{}

// Validate checks the field values on AddProxySQLExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProxySQLExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProxySQLExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProxySQLExporterParamsMultiError, or nil if none found.
func (m *AddProxySQLExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProxySQLExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddProxySQLExporterParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for AgentPassword

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddProxySQLExporterParamsMultiError(errors)
	}

	return nil
}

// AddProxySQLExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddProxySQLExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddProxySQLExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProxySQLExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProxySQLExporterParamsMultiError) AllErrors() []error { return m }

// AddProxySQLExporterParamsValidationError is the validation error returned by
// AddProxySQLExporterParams.Validate if the designated constraints aren't met.
type AddProxySQLExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProxySQLExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProxySQLExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProxySQLExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProxySQLExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProxySQLExporterParamsValidationError) ErrorName() string {
	return "AddProxySQLExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddProxySQLExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProxySQLExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProxySQLExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProxySQLExporterParamsValidationError{}

// Validate checks the field values on ChangeProxySQLExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeProxySQLExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeProxySQLExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeProxySQLExporterParamsMultiError, or nil if none found.
func (m *ChangeProxySQLExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeProxySQLExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeProxySQLExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeProxySQLExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeProxySQLExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeProxySQLExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeProxySQLExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeProxySQLExporterParamsMultiError is an error wrapping multiple
// validation errors returned by ChangeProxySQLExporterParams.ValidateAll() if
// the designated constraints aren't met.
type ChangeProxySQLExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeProxySQLExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeProxySQLExporterParamsMultiError) AllErrors() []error { return m }

// ChangeProxySQLExporterParamsValidationError is the validation error returned
// by ChangeProxySQLExporterParams.Validate if the designated constraints
// aren't met.
type ChangeProxySQLExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeProxySQLExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeProxySQLExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeProxySQLExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeProxySQLExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeProxySQLExporterParamsValidationError) ErrorName() string {
	return "ChangeProxySQLExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeProxySQLExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeProxySQLExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeProxySQLExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeProxySQLExporterParamsValidationError{}

// Validate checks the field values on AddQANMySQLPerfSchemaAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddQANMySQLPerfSchemaAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMySQLPerfSchemaAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMySQLPerfSchemaAgentParamsMultiError, or nil if none found.
func (m *AddQANMySQLPerfSchemaAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMySQLPerfSchemaAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMySQLPerfSchemaAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMySQLPerfSchemaAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// AddQANMySQLPerfSchemaAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANMySQLPerfSchemaAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMySQLPerfSchemaAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMySQLPerfSchemaAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMySQLPerfSchemaAgentParamsValidationError is the validation error
// returned by AddQANMySQLPerfSchemaAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMySQLPerfSchemaAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) ErrorName() string {
	return "AddQANMySQLPerfSchemaAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMySQLPerfSchemaAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMySQLPerfSchemaAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMySQLPerfSchemaAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMySQLPerfSchemaAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMySQLPerfSchemaAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeQANMySQLPerfSchemaAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLPerfSchemaAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLPerfSchemaAgentParamsMultiError, or nil if none found.
func (m *ChangeQANMySQLPerfSchemaAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLPerfSchemaAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMySQLPerfSchemaAgentParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLPerfSchemaAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLPerfSchemaAgentParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLPerfSchemaAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLPerfSchemaAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMySQLPerfSchemaAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLPerfSchemaAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLPerfSchemaAgentParamsMultiError) AllErrors() []error { return m }

// ChangeQANMySQLPerfSchemaAgentParamsValidationError is the validation error
// returned by ChangeQANMySQLPerfSchemaAgentParams.Validate if the designated
// constraints aren't met.
type ChangeQANMySQLPerfSchemaAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) ErrorName() string {
	return "ChangeQANMySQLPerfSchemaAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLPerfSchemaAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLPerfSchemaAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLPerfSchemaAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLPerfSchemaAgentParamsValidationError{}

// Validate checks the field values on AddQANMySQLSlowlogAgentParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddQANMySQLSlowlogAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMySQLSlowlogAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMySQLSlowlogAgentParamsMultiError, or nil if none found.
func (m *AddQANMySQLSlowlogAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMySQLSlowlogAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANMySQLSlowlogAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for MaxSlowlogFileSize

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMySQLSlowlogAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMySQLSlowlogAgentParamsMultiError is an error wrapping multiple
// validation errors returned by AddQANMySQLSlowlogAgentParams.ValidateAll()
// if the designated constraints aren't met.
type AddQANMySQLSlowlogAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMySQLSlowlogAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMySQLSlowlogAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMySQLSlowlogAgentParamsValidationError is the validation error
// returned by AddQANMySQLSlowlogAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMySQLSlowlogAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMySQLSlowlogAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMySQLSlowlogAgentParamsValidationError) ErrorName() string {
	return "AddQANMySQLSlowlogAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMySQLSlowlogAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMySQLSlowlogAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMySQLSlowlogAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMySQLSlowlogAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMySQLSlowlogAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeQANMySQLSlowlogAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMySQLSlowlogAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeQANMySQLSlowlogAgentParamsMultiError, or nil if none found.
func (m *ChangeQANMySQLSlowlogAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMySQLSlowlogAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMySQLSlowlogAgentParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMySQLSlowlogAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMySQLSlowlogAgentParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMySQLSlowlogAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeQANMySQLSlowlogAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMySQLSlowlogAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMySQLSlowlogAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMySQLSlowlogAgentParamsMultiError) AllErrors() []error { return m }

// ChangeQANMySQLSlowlogAgentParamsValidationError is the validation error
// returned by ChangeQANMySQLSlowlogAgentParams.Validate if the designated
// constraints aren't met.
type ChangeQANMySQLSlowlogAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) ErrorName() string {
	return "ChangeQANMySQLSlowlogAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMySQLSlowlogAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMySQLSlowlogAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMySQLSlowlogAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMySQLSlowlogAgentParamsValidationError{}

// Validate checks the field values on AddQANMongoDBProfilerAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddQANMongoDBProfilerAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddQANMongoDBProfilerAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddQANMongoDBProfilerAgentParamsMultiError, or nil if none found.
func (m *AddQANMongoDBProfilerAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANMongoDBProfilerAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANMongoDBProfilerAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANMongoDBProfilerAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCertificateKey

	// no validation rules for TlsCertificateKeyFilePassword

	// no validation rules for TlsCa

	// no validation rules for MaxQueryLength

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for AuthenticationMechanism

	// no validation rules for AuthenticationDatabase

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANMongoDBProfilerAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANMongoDBProfilerAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// AddQANMongoDBProfilerAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANMongoDBProfilerAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANMongoDBProfilerAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANMongoDBProfilerAgentParamsMultiError) AllErrors() []error { return m }

// AddQANMongoDBProfilerAgentParamsValidationError is the validation error
// returned by AddQANMongoDBProfilerAgentParams.Validate if the designated
// constraints aren't met.
type AddQANMongoDBProfilerAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANMongoDBProfilerAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANMongoDBProfilerAgentParamsValidationError) ErrorName() string {
	return "AddQANMongoDBProfilerAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANMongoDBProfilerAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANMongoDBProfilerAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANMongoDBProfilerAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANMongoDBProfilerAgentParamsValidationError{}

// Validate checks the field values on ChangeQANMongoDBProfilerAgentParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeQANMongoDBProfilerAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeQANMongoDBProfilerAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeQANMongoDBProfilerAgentParamsMultiError, or nil if none found.
func (m *ChangeQANMongoDBProfilerAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANMongoDBProfilerAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANMongoDBProfilerAgentParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANMongoDBProfilerAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANMongoDBProfilerAgentParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANMongoDBProfilerAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeQANMongoDBProfilerAgentParamsMultiError is an error wrapping multiple
// validation errors returned by
// ChangeQANMongoDBProfilerAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANMongoDBProfilerAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANMongoDBProfilerAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANMongoDBProfilerAgentParamsMultiError) AllErrors() []error { return m }

// ChangeQANMongoDBProfilerAgentParamsValidationError is the validation error
// returned by ChangeQANMongoDBProfilerAgentParams.Validate if the designated
// constraints aren't met.
type ChangeQANMongoDBProfilerAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) ErrorName() string {
	return "ChangeQANMongoDBProfilerAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANMongoDBProfilerAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANMongoDBProfilerAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANMongoDBProfilerAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANMongoDBProfilerAgentParamsValidationError{}

// Validate checks the field values on AddQANPostgreSQLPgStatementsAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddQANPostgreSQLPgStatementsAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddQANPostgreSQLPgStatementsAgentParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddQANPostgreSQLPgStatementsAgentParamsMultiError, or nil if none found.
func (m *AddQANPostgreSQLPgStatementsAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANPostgreSQLPgStatementsAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for MaxQueryLength

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANPostgreSQLPgStatementsAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANPostgreSQLPgStatementsAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// AddQANPostgreSQLPgStatementsAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANPostgreSQLPgStatementsAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANPostgreSQLPgStatementsAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANPostgreSQLPgStatementsAgentParamsMultiError) AllErrors() []error { return m }

// AddQANPostgreSQLPgStatementsAgentParamsValidationError is the validation
// error returned by AddQANPostgreSQLPgStatementsAgentParams.Validate if the
// designated constraints aren't met.
type AddQANPostgreSQLPgStatementsAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) ErrorName() string {
	return "AddQANPostgreSQLPgStatementsAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANPostgreSQLPgStatementsAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANPostgreSQLPgStatementsAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANPostgreSQLPgStatementsAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANPostgreSQLPgStatementsAgentParamsValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatementsAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatementsAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatementsAgentParamsMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatementsAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatementsAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatementsAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatementsAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatementsAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatementsAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatementsAgentParamsMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatementsAgentParamsValidationError is the validation
// error returned by ChangeQANPostgreSQLPgStatementsAgentParams.Validate if
// the designated constraints aren't met.
type ChangeQANPostgreSQLPgStatementsAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatementsAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatementsAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatementsAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatementsAgentParamsValidationError{}

// Validate checks the field values on AddQANPostgreSQLPgStatMonitorAgentParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddQANPostgreSQLPgStatMonitorAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddQANPostgreSQLPgStatMonitorAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AddQANPostgreSQLPgStatMonitorAgentParamsMultiError, or nil if none found.
func (m *AddQANPostgreSQLPgStatMonitorAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddQANPostgreSQLPgStatMonitorAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for MaxQueryLength

	// no validation rules for DisableQueryExamples

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableCommentsParsing

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddQANPostgreSQLPgStatMonitorAgentParamsMultiError(errors)
	}

	return nil
}

// AddQANPostgreSQLPgStatMonitorAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// AddQANPostgreSQLPgStatMonitorAgentParams.ValidateAll() if the designated
// constraints aren't met.
type AddQANPostgreSQLPgStatMonitorAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddQANPostgreSQLPgStatMonitorAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddQANPostgreSQLPgStatMonitorAgentParamsMultiError) AllErrors() []error { return m }

// AddQANPostgreSQLPgStatMonitorAgentParamsValidationError is the validation
// error returned by AddQANPostgreSQLPgStatMonitorAgentParams.Validate if the
// designated constraints aren't met.
type AddQANPostgreSQLPgStatMonitorAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) ErrorName() string {
	return "AddQANPostgreSQLPgStatMonitorAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddQANPostgreSQLPgStatMonitorAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQANPostgreSQLPgStatMonitorAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

// Validate checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangeQANPostgreSQLPgStatMonitorAgentParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError, or nil if none found.
func (m *ChangeQANPostgreSQLPgStatMonitorAgentParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeQANPostgreSQLPgStatMonitorAgentParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError(errors)
	}

	return nil
}

// ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError is an error wrapping
// multiple validation errors returned by
// ChangeQANPostgreSQLPgStatMonitorAgentParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeQANPostgreSQLPgStatMonitorAgentParamsMultiError) AllErrors() []error { return m }

// ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError is the validation
// error returned by ChangeQANPostgreSQLPgStatMonitorAgentParams.Validate if
// the designated constraints aren't met.
type ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) ErrorName() string {
	return "ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeQANPostgreSQLPgStatMonitorAgentParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeQANPostgreSQLPgStatMonitorAgentParamsValidationError{}

// Validate checks the field values on AddRDSExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRDSExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRDSExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRDSExporterParamsMultiError, or nil if none found.
func (m *AddRDSExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRDSExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddRDSExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddRDSExporterParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AwsAccessKey

	// no validation rules for AwsSecretKey

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for DisableBasicMetrics

	// no validation rules for DisableEnhancedMetrics

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddRDSExporterParamsMultiError(errors)
	}

	return nil
}

// AddRDSExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddRDSExporterParams.ValidateAll() if the designated
// constraints aren't met.
type AddRDSExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRDSExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRDSExporterParamsMultiError) AllErrors() []error { return m }

// AddRDSExporterParamsValidationError is the validation error returned by
// AddRDSExporterParams.Validate if the designated constraints aren't met.
type AddRDSExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRDSExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRDSExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRDSExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRDSExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRDSExporterParamsValidationError) ErrorName() string {
	return "AddRDSExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddRDSExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRDSExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRDSExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRDSExporterParamsValidationError{}

// Validate checks the field values on ChangeRDSExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRDSExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRDSExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRDSExporterParamsMultiError, or nil if none found.
func (m *ChangeRDSExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRDSExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeRDSExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeRDSExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeRDSExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeRDSExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeRDSExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeRDSExporterParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeRDSExporterParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeRDSExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRDSExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRDSExporterParamsMultiError) AllErrors() []error { return m }

// ChangeRDSExporterParamsValidationError is the validation error returned by
// ChangeRDSExporterParams.Validate if the designated constraints aren't met.
type ChangeRDSExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRDSExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRDSExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRDSExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRDSExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRDSExporterParamsValidationError) ErrorName() string {
	return "ChangeRDSExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRDSExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRDSExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRDSExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRDSExporterParamsValidationError{}

// Validate checks the field values on AddExternalExporterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExternalExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExternalExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExternalExporterParamsMultiError, or nil if none found.
func (m *AddExternalExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExternalExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRunsOnNodeId()) < 1 {
		err := AddExternalExporterParamsValidationError{
			field:  "RunsOnNodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceId

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Scheme

	// no validation rules for MetricsPath

	if val := m.GetListenPort(); val <= 0 || val >= 65536 {
		err := AddExternalExporterParamsValidationError{
			field:  "ListenPort",
			reason: "value must be inside range (0, 65536)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for PushMetrics

	if len(errors) > 0 {
		return AddExternalExporterParamsMultiError(errors)
	}

	return nil
}

// AddExternalExporterParamsMultiError is an error wrapping multiple validation
// errors returned by AddExternalExporterParams.ValidateAll() if the
// designated constraints aren't met.
type AddExternalExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExternalExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExternalExporterParamsMultiError) AllErrors() []error { return m }

// AddExternalExporterParamsValidationError is the validation error returned by
// AddExternalExporterParams.Validate if the designated constraints aren't met.
type AddExternalExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExternalExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExternalExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExternalExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExternalExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExternalExporterParamsValidationError) ErrorName() string {
	return "AddExternalExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddExternalExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExternalExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExternalExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExternalExporterParamsValidationError{}

// Validate checks the field values on ChangeExternalExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeExternalExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeExternalExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeExternalExporterParamsMultiError, or nil if none found.
func (m *ChangeExternalExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeExternalExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeExternalExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeExternalExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeExternalExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeExternalExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeExternalExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeExternalExporterParamsMultiError is an error wrapping multiple
// validation errors returned by ChangeExternalExporterParams.ValidateAll() if
// the designated constraints aren't met.
type ChangeExternalExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeExternalExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeExternalExporterParamsMultiError) AllErrors() []error { return m }

// ChangeExternalExporterParamsValidationError is the validation error returned
// by ChangeExternalExporterParams.Validate if the designated constraints
// aren't met.
type ChangeExternalExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeExternalExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeExternalExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeExternalExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeExternalExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeExternalExporterParamsValidationError) ErrorName() string {
	return "ChangeExternalExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeExternalExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeExternalExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeExternalExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeExternalExporterParamsValidationError{}

// Validate checks the field values on AddAzureDatabaseExporterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAzureDatabaseExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAzureDatabaseExporterParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddAzureDatabaseExporterParamsMultiError, or nil if none found.
func (m *AddAzureDatabaseExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAzureDatabaseExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AzureClientId

	// no validation rules for AzureClientSecret

	// no validation rules for AzureTenantId

	// no validation rules for AzureSubscriptionId

	// no validation rules for AzureResourceGroup

	if utf8.RuneCountInString(m.GetAzureDatabaseResourceType()) < 1 {
		err := AddAzureDatabaseExporterParamsValidationError{
			field:  "AzureDatabaseResourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for PushMetrics

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return AddAzureDatabaseExporterParamsMultiError(errors)
	}

	return nil
}

// AddAzureDatabaseExporterParamsMultiError is an error wrapping multiple
// validation errors returned by AddAzureDatabaseExporterParams.ValidateAll()
// if the designated constraints aren't met.
type AddAzureDatabaseExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAzureDatabaseExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAzureDatabaseExporterParamsMultiError) AllErrors() []error { return m }

// AddAzureDatabaseExporterParamsValidationError is the validation error
// returned by AddAzureDatabaseExporterParams.Validate if the designated
// constraints aren't met.
type AddAzureDatabaseExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAzureDatabaseExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAzureDatabaseExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAzureDatabaseExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAzureDatabaseExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAzureDatabaseExporterParamsValidationError) ErrorName() string {
	return "AddAzureDatabaseExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddAzureDatabaseExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAzureDatabaseExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAzureDatabaseExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAzureDatabaseExporterParamsValidationError{}

// Validate checks the field values on ChangeAzureDatabaseExporterParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeAzureDatabaseExporterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAzureDatabaseExporterParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeAzureDatabaseExporterParamsMultiError, or nil if none found.
func (m *ChangeAzureDatabaseExporterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAzureDatabaseExporterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := ChangeAzureDatabaseExporterParamsValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeAzureDatabaseExporterParamsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeAzureDatabaseExporterParamsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeAzureDatabaseExporterParamsMultiError(errors)
	}

	return nil
}

// ChangeAzureDatabaseExporterParamsMultiError is an error wrapping multiple
// validation errors returned by
// ChangeAzureDatabaseExporterParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAzureDatabaseExporterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAzureDatabaseExporterParamsMultiError) AllErrors() []error { return m }

// ChangeAzureDatabaseExporterParamsValidationError is the validation error
// returned by ChangeAzureDatabaseExporterParams.Validate if the designated
// constraints aren't met.
type ChangeAzureDatabaseExporterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAzureDatabaseExporterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAzureDatabaseExporterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAzureDatabaseExporterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAzureDatabaseExporterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAzureDatabaseExporterParamsValidationError) ErrorName() string {
	return "ChangeAzureDatabaseExporterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAzureDatabaseExporterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAzureDatabaseExporterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAzureDatabaseExporterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAzureDatabaseExporterParamsValidationError{}

// Validate checks the field values on RemoveAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAgentRequestMultiError, or nil if none found.
func (m *RemoveAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAgentId()) < 1 {
		err := RemoveAgentRequestValidationError{
			field:  "AgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return RemoveAgentRequestMultiError(errors)
	}

	return nil
}

// RemoveAgentRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAgentRequestMultiError) AllErrors() []error { return m }

// RemoveAgentRequestValidationError is the validation error returned by
// RemoveAgentRequest.Validate if the designated constraints aren't met.
type RemoveAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAgentRequestValidationError) ErrorName() string {
	return "RemoveAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAgentRequestValidationError{}

// Validate checks the field values on RemoveAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAgentResponseMultiError, or nil if none found.
func (m *RemoveAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveAgentResponseMultiError(errors)
	}

	return nil
}

// RemoveAgentResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAgentResponseMultiError) AllErrors() []error { return m }

// RemoveAgentResponseValidationError is the validation error returned by
// RemoveAgentResponse.Validate if the designated constraints aren't met.
type RemoveAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAgentResponseValidationError) ErrorName() string {
	return "RemoveAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAgentResponseValidationError{}
