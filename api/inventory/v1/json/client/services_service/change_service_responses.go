// Code generated by go-swagger; DO NOT EDIT.

package services_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangeServiceReader is a Reader for the ChangeService structure.
type ChangeServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangeServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangeServiceOK creates a ChangeServiceOK with default headers values
func NewChangeServiceOK() *ChangeServiceOK {
	return &ChangeServiceOK{}
}

/*
ChangeServiceOK describes a response with status code 200, with default header values.

A successful response.
*/
type ChangeServiceOK struct {
	Payload *ChangeServiceOKBody
}

func (o *ChangeServiceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/inventory/services/{service_id}][%d] changeServiceOk  %+v", 200, o.Payload)
}

func (o *ChangeServiceOK) GetPayload() *ChangeServiceOKBody {
	return o.Payload
}

func (o *ChangeServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ChangeServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeServiceDefault creates a ChangeServiceDefault with default headers values
func NewChangeServiceDefault(code int) *ChangeServiceDefault {
	return &ChangeServiceDefault{
		_statusCode: code,
	}
}

/*
ChangeServiceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ChangeServiceDefault struct {
	_statusCode int

	Payload *ChangeServiceDefaultBody
}

// Code gets the status code for the change service default response
func (o *ChangeServiceDefault) Code() int {
	return o._statusCode
}

func (o *ChangeServiceDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/inventory/services/{service_id}][%d] ChangeService default  %+v", o._statusCode, o.Payload)
}

func (o *ChangeServiceDefault) GetPayload() *ChangeServiceDefaultBody {
	return o.Payload
}

func (o *ChangeServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ChangeServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ChangeServiceBody change service body
swagger:model ChangeServiceBody
*/
type ChangeServiceBody struct {
	// environment
	Environment *string `json:"environment,omitempty"`

	// cluster
	Cluster *string `json:"cluster,omitempty"`

	// replication set
	ReplicationSet *string `json:"replication_set,omitempty"`

	// external group
	ExternalGroup *string `json:"external_group,omitempty"`

	// custom labels
	CustomLabels *ChangeServiceParamsBodyCustomLabels `json:"custom_labels,omitempty"`
}

// Validate validates this change service body
func (o *ChangeServiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceBody) validateCustomLabels(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomLabels) { // not required
		return nil
	}

	if o.CustomLabels != nil {
		if err := o.CustomLabels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "custom_labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "custom_labels")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change service body based on the context it is used
func (o *ChangeServiceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceBody) contextValidateCustomLabels(ctx context.Context, formats strfmt.Registry) error {
	if o.CustomLabels != nil {
		if err := o.CustomLabels.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "custom_labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "custom_labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceBody) UnmarshalBinary(b []byte) error {
	var res ChangeServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceDefaultBody change service default body
swagger:model ChangeServiceDefaultBody
*/
type ChangeServiceDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ChangeServiceDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this change service default body
func (o *ChangeServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangeService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change service default body based on the context it is used
func (o *ChangeServiceDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangeService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChangeServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceDefaultBodyDetailsItems0 change service default body details items0
swagger:model ChangeServiceDefaultBodyDetailsItems0
*/
type ChangeServiceDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this change service default body details items0
func (o *ChangeServiceDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service default body details items0 based on context it is used
func (o *ChangeServiceDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ChangeServiceDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBody change service OK body
swagger:model ChangeServiceOKBody
*/
type ChangeServiceOKBody struct {
	// external
	External *ChangeServiceOKBodyExternal `json:"external,omitempty"`

	// haproxy
	Haproxy *ChangeServiceOKBodyHaproxy `json:"haproxy,omitempty"`

	// mongodb
	Mongodb *ChangeServiceOKBodyMongodb `json:"mongodb,omitempty"`

	// mysql
	Mysql *ChangeServiceOKBodyMysql `json:"mysql,omitempty"`

	// postgresql
	Postgresql *ChangeServiceOKBodyPostgresql `json:"postgresql,omitempty"`

	// proxysql
	Proxysql *ChangeServiceOKBodyProxysql `json:"proxysql,omitempty"`
}

// Validate validates this change service OK body
func (o *ChangeServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceOKBody) validateExternal(formats strfmt.Registry) error {
	if swag.IsZero(o.External) { // not required
		return nil
	}

	if o.External != nil {
		if err := o.External.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) validateHaproxy(formats strfmt.Registry) error {
	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) validateMongodb(formats strfmt.Registry) error {
	if swag.IsZero(o.Mongodb) { // not required
		return nil
	}

	if o.Mongodb != nil {
		if err := o.Mongodb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) validateMysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) validatePostgresql(formats strfmt.Registry) error {
	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) validateProxysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change service OK body based on the context it is used
func (o *ChangeServiceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHaproxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMongodb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProxysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeServiceOKBody) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {
	if o.External != nil {
		if err := o.External.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) contextValidateHaproxy(ctx context.Context, formats strfmt.Registry) error {
	if o.Haproxy != nil {
		if err := o.Haproxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) contextValidateMongodb(ctx context.Context, formats strfmt.Registry) error {
	if o.Mongodb != nil {
		if err := o.Mongodb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) contextValidateMysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Mysql != nil {
		if err := o.Mysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) contextValidatePostgresql(ctx context.Context, formats strfmt.Registry) error {
	if o.Postgresql != nil {
		if err := o.Postgresql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeServiceOKBody) contextValidateProxysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Proxysql != nil {
		if err := o.Proxysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeServiceOk" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBody) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyExternal ExternalService represents a generic External service instance.
swagger:model ChangeServiceOKBodyExternal
*/
type ChangeServiceOKBodyExternal struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Group name of external service.
	Group string `json:"group,omitempty"`
}

// Validate validates this change service OK body external
func (o *ChangeServiceOKBodyExternal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body external based on context it is used
func (o *ChangeServiceOKBodyExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyExternal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyExternal) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyHaproxy HAProxyService represents a generic HAProxy service instance.
swagger:model ChangeServiceOKBodyHaproxy
*/
type ChangeServiceOKBodyHaproxy struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this change service OK body haproxy
func (o *ChangeServiceOKBodyHaproxy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body haproxy based on context it is used
func (o *ChangeServiceOKBodyHaproxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyHaproxy) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyMongodb MongoDBService represents a generic MongoDB instance.
swagger:model ChangeServiceOKBodyMongodb
*/
type ChangeServiceOKBodyMongodb struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MongoDB version.
	Version string `json:"version,omitempty"`
}

// Validate validates this change service OK body mongodb
func (o *ChangeServiceOKBodyMongodb) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body mongodb based on context it is used
func (o *ChangeServiceOKBodyMongodb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyMongodb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyMongodb) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyMongodb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyMysql MySQLService represents a generic MySQL instance.
swagger:model ChangeServiceOKBodyMysql
*/
type ChangeServiceOKBodyMysql struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MySQL version.
	Version string `json:"version,omitempty"`
}

// Validate validates this change service OK body mysql
func (o *ChangeServiceOKBodyMysql) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body mysql based on context it is used
func (o *ChangeServiceOKBodyMysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyMysql) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyPostgresql PostgreSQLService represents a generic PostgreSQL instance.
swagger:model ChangeServiceOKBodyPostgresql
*/
type ChangeServiceOKBodyPostgresql struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Database name.
	DatabaseName string `json:"database_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// PostgreSQL version.
	Version string `json:"version,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`
}

// Validate validates this change service OK body postgresql
func (o *ChangeServiceOKBodyPostgresql) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body postgresql based on context it is used
func (o *ChangeServiceOKBodyPostgresql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceOKBodyProxysql ProxySQLService represents a generic ProxySQL instance.
swagger:model ChangeServiceOKBodyProxysql
*/
type ChangeServiceOKBodyProxysql struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// ProxySQL version.
	Version string `json:"version,omitempty"`
}

// Validate validates this change service OK body proxysql
func (o *ChangeServiceOKBodyProxysql) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service OK body proxysql based on context it is used
func (o *ChangeServiceOKBodyProxysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceOKBodyProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceOKBodyProxysql) UnmarshalBinary(b []byte) error {
	var res ChangeServiceOKBodyProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeServiceParamsBodyCustomLabels A wrapper for map[string]string. This type allows to distinguish between an empty map and a null value.
swagger:model ChangeServiceParamsBodyCustomLabels
*/
type ChangeServiceParamsBodyCustomLabels struct {
	// values
	Values map[string]string `json:"values,omitempty"`
}

// Validate validates this change service params body custom labels
func (o *ChangeServiceParamsBodyCustomLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change service params body custom labels based on context it is used
func (o *ChangeServiceParamsBodyCustomLabels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeServiceParamsBodyCustomLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeServiceParamsBodyCustomLabels) UnmarshalBinary(b []byte) error {
	var res ChangeServiceParamsBodyCustomLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
