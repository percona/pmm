// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory/v1/services.proto

package inventoryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MySQLService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySQLService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySQLService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MySQLServiceMultiError, or
// nil if none found.
func (m *MySQLService) ValidateAll() error {
	return m.validate(true)
}

func (m *MySQLService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for NodeId

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Version

	if len(errors) > 0 {
		return MySQLServiceMultiError(errors)
	}

	return nil
}

// MySQLServiceMultiError is an error wrapping multiple validation errors
// returned by MySQLService.ValidateAll() if the designated constraints aren't met.
type MySQLServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySQLServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySQLServiceMultiError) AllErrors() []error { return m }

// MySQLServiceValidationError is the validation error returned by
// MySQLService.Validate if the designated constraints aren't met.
type MySQLServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLServiceValidationError) ErrorName() string { return "MySQLServiceValidationError" }

// Error satisfies the builtin error interface
func (e MySQLServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQLService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLServiceValidationError{}

// Validate checks the field values on MongoDBService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MongoDBService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MongoDBService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MongoDBServiceMultiError,
// or nil if none found.
func (m *MongoDBService) ValidateAll() error {
	return m.validate(true)
}

func (m *MongoDBService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for NodeId

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Version

	if len(errors) > 0 {
		return MongoDBServiceMultiError(errors)
	}

	return nil
}

// MongoDBServiceMultiError is an error wrapping multiple validation errors
// returned by MongoDBService.ValidateAll() if the designated constraints
// aren't met.
type MongoDBServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoDBServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoDBServiceMultiError) AllErrors() []error { return m }

// MongoDBServiceValidationError is the validation error returned by
// MongoDBService.Validate if the designated constraints aren't met.
type MongoDBServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBServiceValidationError) ErrorName() string { return "MongoDBServiceValidationError" }

// Error satisfies the builtin error interface
func (e MongoDBServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDBService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBServiceValidationError{}

// Validate checks the field values on PostgreSQLService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostgreSQLService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgreSQLService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgreSQLServiceMultiError, or nil if none found.
func (m *PostgreSQLService) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgreSQLService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for DatabaseName

	// no validation rules for NodeId

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Version

	// no validation rules for AutoDiscoveryLimit

	if len(errors) > 0 {
		return PostgreSQLServiceMultiError(errors)
	}

	return nil
}

// PostgreSQLServiceMultiError is an error wrapping multiple validation errors
// returned by PostgreSQLService.ValidateAll() if the designated constraints
// aren't met.
type PostgreSQLServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgreSQLServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgreSQLServiceMultiError) AllErrors() []error { return m }

// PostgreSQLServiceValidationError is the validation error returned by
// PostgreSQLService.Validate if the designated constraints aren't met.
type PostgreSQLServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgreSQLServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgreSQLServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgreSQLServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgreSQLServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgreSQLServiceValidationError) ErrorName() string {
	return "PostgreSQLServiceValidationError"
}

// Error satisfies the builtin error interface
func (e PostgreSQLServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgreSQLService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgreSQLServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgreSQLServiceValidationError{}

// Validate checks the field values on ProxySQLService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProxySQLService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxySQLService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxySQLServiceMultiError, or nil if none found.
func (m *ProxySQLService) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxySQLService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for NodeId

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Version

	if len(errors) > 0 {
		return ProxySQLServiceMultiError(errors)
	}

	return nil
}

// ProxySQLServiceMultiError is an error wrapping multiple validation errors
// returned by ProxySQLService.ValidateAll() if the designated constraints
// aren't met.
type ProxySQLServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxySQLServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxySQLServiceMultiError) AllErrors() []error { return m }

// ProxySQLServiceValidationError is the validation error returned by
// ProxySQLService.Validate if the designated constraints aren't met.
type ProxySQLServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxySQLServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxySQLServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxySQLServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxySQLServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxySQLServiceValidationError) ErrorName() string { return "ProxySQLServiceValidationError" }

// Error satisfies the builtin error interface
func (e ProxySQLServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxySQLService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxySQLServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxySQLServiceValidationError{}

// Validate checks the field values on HAProxyService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HAProxyService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HAProxyService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HAProxyServiceMultiError,
// or nil if none found.
func (m *HAProxyService) ValidateAll() error {
	return m.validate(true)
}

func (m *HAProxyService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for NodeId

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return HAProxyServiceMultiError(errors)
	}

	return nil
}

// HAProxyServiceMultiError is an error wrapping multiple validation errors
// returned by HAProxyService.ValidateAll() if the designated constraints
// aren't met.
type HAProxyServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HAProxyServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HAProxyServiceMultiError) AllErrors() []error { return m }

// HAProxyServiceValidationError is the validation error returned by
// HAProxyService.Validate if the designated constraints aren't met.
type HAProxyServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HAProxyServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HAProxyServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HAProxyServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HAProxyServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HAProxyServiceValidationError) ErrorName() string { return "HAProxyServiceValidationError" }

// Error satisfies the builtin error interface
func (e HAProxyServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHAProxyService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HAProxyServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HAProxyServiceValidationError{}

// Validate checks the field values on ExternalService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExternalService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalServiceMultiError, or nil if none found.
func (m *ExternalService) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for NodeId

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Group

	if len(errors) > 0 {
		return ExternalServiceMultiError(errors)
	}

	return nil
}

// ExternalServiceMultiError is an error wrapping multiple validation errors
// returned by ExternalService.ValidateAll() if the designated constraints
// aren't met.
type ExternalServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalServiceMultiError) AllErrors() []error { return m }

// ExternalServiceValidationError is the validation error returned by
// ExternalService.Validate if the designated constraints aren't met.
type ExternalServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalServiceValidationError) ErrorName() string { return "ExternalServiceValidationError" }

// Error satisfies the builtin error interface
func (e ExternalServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalServiceValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for ServiceType

	// no validation rules for ExternalGroup

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMysql() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Mysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Mysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Mysql[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMongodb() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Mongodb[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Mongodb[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Mongodb[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPostgresql() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Postgresql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Postgresql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Postgresql[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProxysql() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Proxysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Proxysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Proxysql[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHaproxy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Haproxy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Haproxy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Haproxy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExternal() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("External[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("External[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("External[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on ListActiveServiceTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActiveServiceTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActiveServiceTypesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListActiveServiceTypesRequestMultiError, or nil if none found.
func (m *ListActiveServiceTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActiveServiceTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListActiveServiceTypesRequestMultiError(errors)
	}

	return nil
}

// ListActiveServiceTypesRequestMultiError is an error wrapping multiple
// validation errors returned by ListActiveServiceTypesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListActiveServiceTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActiveServiceTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActiveServiceTypesRequestMultiError) AllErrors() []error { return m }

// ListActiveServiceTypesRequestValidationError is the validation error
// returned by ListActiveServiceTypesRequest.Validate if the designated
// constraints aren't met.
type ListActiveServiceTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActiveServiceTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActiveServiceTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActiveServiceTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActiveServiceTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActiveServiceTypesRequestValidationError) ErrorName() string {
	return "ListActiveServiceTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActiveServiceTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActiveServiceTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActiveServiceTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActiveServiceTypesRequestValidationError{}

// Validate checks the field values on ListActiveServiceTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActiveServiceTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActiveServiceTypesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListActiveServiceTypesResponseMultiError, or nil if none found.
func (m *ListActiveServiceTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActiveServiceTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListActiveServiceTypesResponseMultiError(errors)
	}

	return nil
}

// ListActiveServiceTypesResponseMultiError is an error wrapping multiple
// validation errors returned by ListActiveServiceTypesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListActiveServiceTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActiveServiceTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActiveServiceTypesResponseMultiError) AllErrors() []error { return m }

// ListActiveServiceTypesResponseValidationError is the validation error
// returned by ListActiveServiceTypesResponse.Validate if the designated
// constraints aren't met.
type ListActiveServiceTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActiveServiceTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActiveServiceTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActiveServiceTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActiveServiceTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActiveServiceTypesResponseValidationError) ErrorName() string {
	return "ListActiveServiceTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActiveServiceTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActiveServiceTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActiveServiceTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActiveServiceTypesResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := GetServiceRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceResponseMultiError, or nil if none found.
func (m *GetServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *GetServiceResponse_Mysql:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetServiceResponse_Mongodb:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetServiceResponse_Postgresql:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetServiceResponse_Proxysql:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetServiceResponse_Haproxy:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetServiceResponse_External:
		if v == nil {
			err := GetServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetServiceResponseMultiError(errors)
	}

	return nil
}

// GetServiceResponseMultiError is an error wrapping multiple validation errors
// returned by GetServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceResponseMultiError) AllErrors() []error { return m }

// GetServiceResponseValidationError is the validation error returned by
// GetServiceResponse.Validate if the designated constraints aren't met.
type GetServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceResponseValidationError) ErrorName() string {
	return "GetServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceResponseValidationError{}

// Validate checks the field values on AddServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceRequestMultiError, or nil if none found.
func (m *AddServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *AddServiceRequest_Mysql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Mongodb:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Postgresql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Proxysql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Haproxy:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_External:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServiceRequestMultiError(errors)
	}

	return nil
}

// AddServiceRequestMultiError is an error wrapping multiple validation errors
// returned by AddServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceRequestMultiError) AllErrors() []error { return m }

// AddServiceRequestValidationError is the validation error returned by
// AddServiceRequest.Validate if the designated constraints aren't met.
type AddServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceRequestValidationError) ErrorName() string {
	return "AddServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceRequestValidationError{}

// Validate checks the field values on AddServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceResponseMultiError, or nil if none found.
func (m *AddServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *AddServiceResponse_Mysql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Mongodb:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Postgresql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Proxysql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Haproxy:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_External:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServiceResponseMultiError(errors)
	}

	return nil
}

// AddServiceResponseMultiError is an error wrapping multiple validation errors
// returned by AddServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceResponseMultiError) AllErrors() []error { return m }

// AddServiceResponseValidationError is the validation error returned by
// AddServiceResponse.Validate if the designated constraints aren't met.
type AddServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceResponseValidationError) ErrorName() string {
	return "AddServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceResponseValidationError{}

// Validate checks the field values on AddMySQLServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMySQLServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMySQLServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMySQLServiceParamsMultiError, or nil if none found.
func (m *AddMySQLServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMySQLServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddMySQLServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddMySQLServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddMySQLServiceParamsMultiError(errors)
	}

	return nil
}

// AddMySQLServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddMySQLServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddMySQLServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMySQLServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMySQLServiceParamsMultiError) AllErrors() []error { return m }

// AddMySQLServiceParamsValidationError is the validation error returned by
// AddMySQLServiceParams.Validate if the designated constraints aren't met.
type AddMySQLServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMySQLServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMySQLServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMySQLServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMySQLServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMySQLServiceParamsValidationError) ErrorName() string {
	return "AddMySQLServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMySQLServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMySQLServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMySQLServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMySQLServiceParamsValidationError{}

// Validate checks the field values on AddMongoDBServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMongoDBServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMongoDBServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMongoDBServiceParamsMultiError, or nil if none found.
func (m *AddMongoDBServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMongoDBServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddMongoDBServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddMongoDBServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddMongoDBServiceParamsMultiError(errors)
	}

	return nil
}

// AddMongoDBServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddMongoDBServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddMongoDBServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMongoDBServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMongoDBServiceParamsMultiError) AllErrors() []error { return m }

// AddMongoDBServiceParamsValidationError is the validation error returned by
// AddMongoDBServiceParams.Validate if the designated constraints aren't met.
type AddMongoDBServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMongoDBServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMongoDBServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMongoDBServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMongoDBServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMongoDBServiceParamsValidationError) ErrorName() string {
	return "AddMongoDBServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddMongoDBServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMongoDBServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMongoDBServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMongoDBServiceParamsValidationError{}

// Validate checks the field values on AddPostgreSQLServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostgreSQLServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostgreSQLServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostgreSQLServiceParamsMultiError, or nil if none found.
func (m *AddPostgreSQLServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostgreSQLServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddPostgreSQLServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddPostgreSQLServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for AutoDiscoveryLimit

	if len(errors) > 0 {
		return AddPostgreSQLServiceParamsMultiError(errors)
	}

	return nil
}

// AddPostgreSQLServiceParamsMultiError is an error wrapping multiple
// validation errors returned by AddPostgreSQLServiceParams.ValidateAll() if
// the designated constraints aren't met.
type AddPostgreSQLServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostgreSQLServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostgreSQLServiceParamsMultiError) AllErrors() []error { return m }

// AddPostgreSQLServiceParamsValidationError is the validation error returned
// by AddPostgreSQLServiceParams.Validate if the designated constraints aren't met.
type AddPostgreSQLServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostgreSQLServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostgreSQLServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostgreSQLServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostgreSQLServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostgreSQLServiceParamsValidationError) ErrorName() string {
	return "AddPostgreSQLServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostgreSQLServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostgreSQLServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostgreSQLServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostgreSQLServiceParamsValidationError{}

// Validate checks the field values on AddProxySQLServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProxySQLServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProxySQLServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProxySQLServiceParamsMultiError, or nil if none found.
func (m *AddProxySQLServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProxySQLServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddProxySQLServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddProxySQLServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddProxySQLServiceParamsMultiError(errors)
	}

	return nil
}

// AddProxySQLServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddProxySQLServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddProxySQLServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProxySQLServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProxySQLServiceParamsMultiError) AllErrors() []error { return m }

// AddProxySQLServiceParamsValidationError is the validation error returned by
// AddProxySQLServiceParams.Validate if the designated constraints aren't met.
type AddProxySQLServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProxySQLServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProxySQLServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProxySQLServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProxySQLServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProxySQLServiceParamsValidationError) ErrorName() string {
	return "AddProxySQLServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddProxySQLServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProxySQLServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProxySQLServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProxySQLServiceParamsValidationError{}

// Validate checks the field values on AddHAProxyServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddHAProxyServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddHAProxyServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddHAProxyServiceParamsMultiError, or nil if none found.
func (m *AddHAProxyServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddHAProxyServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddHAProxyServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddHAProxyServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddHAProxyServiceParamsMultiError(errors)
	}

	return nil
}

// AddHAProxyServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddHAProxyServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddHAProxyServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddHAProxyServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddHAProxyServiceParamsMultiError) AllErrors() []error { return m }

// AddHAProxyServiceParamsValidationError is the validation error returned by
// AddHAProxyServiceParams.Validate if the designated constraints aren't met.
type AddHAProxyServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHAProxyServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHAProxyServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHAProxyServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHAProxyServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHAProxyServiceParamsValidationError) ErrorName() string {
	return "AddHAProxyServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddHAProxyServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHAProxyServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHAProxyServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHAProxyServiceParamsValidationError{}

// Validate checks the field values on AddExternalServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExternalServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExternalServiceParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExternalServiceParamsMultiError, or nil if none found.
func (m *AddExternalServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExternalServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddExternalServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := AddExternalServiceParamsValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for Group

	if len(errors) > 0 {
		return AddExternalServiceParamsMultiError(errors)
	}

	return nil
}

// AddExternalServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddExternalServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddExternalServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExternalServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExternalServiceParamsMultiError) AllErrors() []error { return m }

// AddExternalServiceParamsValidationError is the validation error returned by
// AddExternalServiceParams.Validate if the designated constraints aren't met.
type AddExternalServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExternalServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExternalServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExternalServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExternalServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExternalServiceParamsValidationError) ErrorName() string {
	return "AddExternalServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddExternalServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExternalServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExternalServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExternalServiceParamsValidationError{}

// Validate checks the field values on RemoveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServiceRequestMultiError, or nil if none found.
func (m *RemoveServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := RemoveServiceRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return RemoveServiceRequestMultiError(errors)
	}

	return nil
}

// RemoveServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceRequestMultiError) AllErrors() []error { return m }

// RemoveServiceRequestValidationError is the validation error returned by
// RemoveServiceRequest.Validate if the designated constraints aren't met.
type RemoveServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceRequestValidationError) ErrorName() string {
	return "RemoveServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceRequestValidationError{}

// Validate checks the field values on RemoveServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServiceResponseMultiError, or nil if none found.
func (m *RemoveServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveServiceResponseMultiError(errors)
	}

	return nil
}

// RemoveServiceResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceResponseMultiError) AllErrors() []error { return m }

// RemoveServiceResponseValidationError is the validation error returned by
// RemoveServiceResponse.Validate if the designated constraints aren't met.
type RemoveServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceResponseValidationError) ErrorName() string {
	return "RemoveServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceResponseValidationError{}

// Validate checks the field values on ChangeServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeServiceRequestMultiError, or nil if none found.
func (m *ChangeServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := ChangeServiceRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Environment != nil {
		// no validation rules for Environment
	}

	if m.Cluster != nil {
		// no validation rules for Cluster
	}

	if m.ReplicationSet != nil {
		// no validation rules for ReplicationSet
	}

	if m.ExternalGroup != nil {
		// no validation rules for ExternalGroup
	}

	if m.CustomLabels != nil {
		if all {
			switch v := interface{}(m.GetCustomLabels()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceRequestValidationError{
						field:  "CustomLabels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceRequestValidationError{
						field:  "CustomLabels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomLabels()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceRequestValidationError{
					field:  "CustomLabels",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if len(errors) > 0 {
		return ChangeServiceRequestMultiError(errors)
	}

	return nil
}

// ChangeServiceRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeServiceRequestMultiError) AllErrors() []error { return m }

// ChangeServiceRequestValidationError is the validation error returned by
// ChangeServiceRequest.Validate if the designated constraints aren't met.
type ChangeServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeServiceRequestValidationError) ErrorName() string {
	return "ChangeServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeServiceRequestValidationError{}

// Validate checks the field values on ChangeServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeServiceResponseMultiError, or nil if none found.
func (m *ChangeServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *ChangeServiceResponse_Mysql:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeServiceResponse_Mongodb:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeServiceResponse_Postgresql:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeServiceResponse_Proxysql:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeServiceResponse_Haproxy:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeServiceResponse_External:
		if v == nil {
			err := ChangeServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeServiceResponseValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChangeServiceResponseMultiError(errors)
	}

	return nil
}

// ChangeServiceResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeServiceResponseMultiError) AllErrors() []error { return m }

// ChangeServiceResponseValidationError is the validation error returned by
// ChangeServiceResponse.Validate if the designated constraints aren't met.
type ChangeServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeServiceResponseValidationError) ErrorName() string {
	return "ChangeServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeServiceResponseValidationError{}
