// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: inventory/v1/services.proto

package inventoryv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	common "github.com/percona/pmm/api/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ServiceType describes supported Service types.
type ServiceType int32

const (
	ServiceType_SERVICE_TYPE_UNSPECIFIED        ServiceType = 0
	ServiceType_SERVICE_TYPE_MYSQL_SERVICE      ServiceType = 1
	ServiceType_SERVICE_TYPE_MONGODB_SERVICE    ServiceType = 2
	ServiceType_SERVICE_TYPE_POSTGRESQL_SERVICE ServiceType = 3
	ServiceType_SERVICE_TYPE_PROXYSQL_SERVICE   ServiceType = 4
	ServiceType_SERVICE_TYPE_HAPROXY_SERVICE    ServiceType = 6
	ServiceType_SERVICE_TYPE_EXTERNAL_SERVICE   ServiceType = 5
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "SERVICE_TYPE_MYSQL_SERVICE",
		2: "SERVICE_TYPE_MONGODB_SERVICE",
		3: "SERVICE_TYPE_POSTGRESQL_SERVICE",
		4: "SERVICE_TYPE_PROXYSQL_SERVICE",
		6: "SERVICE_TYPE_HAPROXY_SERVICE",
		5: "SERVICE_TYPE_EXTERNAL_SERVICE",
	}
	ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED":        0,
		"SERVICE_TYPE_MYSQL_SERVICE":      1,
		"SERVICE_TYPE_MONGODB_SERVICE":    2,
		"SERVICE_TYPE_POSTGRESQL_SERVICE": 3,
		"SERVICE_TYPE_PROXYSQL_SERVICE":   4,
		"SERVICE_TYPE_HAPROXY_SERVICE":    6,
		"SERVICE_TYPE_EXTERNAL_SERVICE":   5,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_v1_services_proto_enumTypes[0].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_inventory_v1_services_proto_enumTypes[0]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{0}
}

// MySQLService represents a generic MySQL instance.
type MySQLService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,6,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,9,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// MySQL version.
	Version string `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Extra parameters to be added to the DSN.
	ExtraDsnParams map[string]string `protobuf:"bytes,12,rep,name=extra_dsn_params,json=extraDsnParams,proto3" json:"extra_dsn_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MySQLService) Reset() {
	*x = MySQLService{}
	mi := &file_inventory_v1_services_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLService) ProtoMessage() {}

func (x *MySQLService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLService.ProtoReflect.Descriptor instead.
func (*MySQLService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{0}
}

func (x *MySQLService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MySQLService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MySQLService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MySQLService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MySQLService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySQLService) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *MySQLService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MySQLService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MySQLService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *MySQLService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *MySQLService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MySQLService) GetExtraDsnParams() map[string]string {
	if x != nil {
		return x.ExtraDsnParams
	}
	return nil
}

// MongoDBService represents a generic MongoDB instance.
type MongoDBService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,6,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,9,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// MongoDB version.
	Version       string `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongoDBService) Reset() {
	*x = MongoDBService{}
	mi := &file_inventory_v1_services_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDBService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBService) ProtoMessage() {}

func (x *MongoDBService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBService.ProtoReflect.Descriptor instead.
func (*MongoDBService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{1}
}

func (x *MongoDBService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MongoDBService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MongoDBService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MongoDBService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MongoDBService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MongoDBService) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *MongoDBService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MongoDBService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MongoDBService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *MongoDBService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *MongoDBService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// PostgreSQLService represents a generic PostgreSQL instance.
type PostgreSQLService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Database name.
	DatabaseName string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,7,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,10,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,11,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PostgreSQL version.
	Version string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `protobuf:"varint,13,opt,name=auto_discovery_limit,json=autoDiscoveryLimit,proto3" json:"auto_discovery_limit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PostgreSQLService) Reset() {
	*x = PostgreSQLService{}
	mi := &file_inventory_v1_services_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLService) ProtoMessage() {}

func (x *PostgreSQLService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLService.ProtoReflect.Descriptor instead.
func (*PostgreSQLService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{2}
}

func (x *PostgreSQLService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *PostgreSQLService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PostgreSQLService) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PostgreSQLService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PostgreSQLService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PostgreSQLService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgreSQLService) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *PostgreSQLService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *PostgreSQLService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PostgreSQLService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *PostgreSQLService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *PostgreSQLService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PostgreSQLService) GetAutoDiscoveryLimit() int32 {
	if x != nil {
		return x.AutoDiscoveryLimit
	}
	return 0
}

// ProxySQLService represents a generic ProxySQL instance.
type ProxySQLService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,6,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,9,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ProxySQL version.
	Version       string `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxySQLService) Reset() {
	*x = ProxySQLService{}
	mi := &file_inventory_v1_services_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxySQLService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySQLService) ProtoMessage() {}

func (x *ProxySQLService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySQLService.ProtoReflect.Descriptor instead.
func (*ProxySQLService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{3}
}

func (x *ProxySQLService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ProxySQLService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ProxySQLService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProxySQLService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxySQLService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ProxySQLService) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *ProxySQLService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ProxySQLService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ProxySQLService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *ProxySQLService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *ProxySQLService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// HAProxyService represents a generic HAProxy service instance.
type HAProxyService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this service instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,6,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,7,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HAProxyService) Reset() {
	*x = HAProxyService{}
	mi := &file_inventory_v1_services_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HAProxyService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HAProxyService) ProtoMessage() {}

func (x *HAProxyService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HAProxyService.ProtoReflect.Descriptor instead.
func (*HAProxyService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{4}
}

func (x *HAProxyService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *HAProxyService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HAProxyService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *HAProxyService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *HAProxyService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *HAProxyService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *HAProxyService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

// ExternalService represents a generic External service instance.
type ExternalService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this service instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,6,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,7,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Group name of external service.
	Group         string `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalService) Reset() {
	*x = ExternalService{}
	mi := &file_inventory_v1_services_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalService) ProtoMessage() {}

func (x *ExternalService) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalService.ProtoReflect.Descriptor instead.
func (*ExternalService) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{5}
}

func (x *ExternalService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ExternalService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ExternalService) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ExternalService) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ExternalService) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ExternalService) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *ExternalService) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *ExternalService) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ListServicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Return only Services running on that Node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Return only services filtered by service type.
	ServiceType ServiceType `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3,enum=inventory.v1.ServiceType" json:"service_type,omitempty"`
	// Return only services in this external group.
	ExternalGroup string `protobuf:"bytes,3,opt,name=external_group,json=externalGroup,proto3" json:"external_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{6}
}

func (x *ListServicesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ListServicesRequest) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListServicesRequest) GetExternalGroup() string {
	if x != nil {
		return x.ExternalGroup
	}
	return ""
}

type ListServicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mysql         []*MySQLService        `protobuf:"bytes,1,rep,name=mysql,proto3" json:"mysql,omitempty"`
	Mongodb       []*MongoDBService      `protobuf:"bytes,2,rep,name=mongodb,proto3" json:"mongodb,omitempty"`
	Postgresql    []*PostgreSQLService   `protobuf:"bytes,3,rep,name=postgresql,proto3" json:"postgresql,omitempty"`
	Proxysql      []*ProxySQLService     `protobuf:"bytes,4,rep,name=proxysql,proto3" json:"proxysql,omitempty"`
	Haproxy       []*HAProxyService      `protobuf:"bytes,5,rep,name=haproxy,proto3" json:"haproxy,omitempty"`
	External      []*ExternalService     `protobuf:"bytes,6,rep,name=external,proto3" json:"external,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesResponse) Reset() {
	*x = ListServicesResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResponse) ProtoMessage() {}

func (x *ListServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResponse.ProtoReflect.Descriptor instead.
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{7}
}

func (x *ListServicesResponse) GetMysql() []*MySQLService {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *ListServicesResponse) GetMongodb() []*MongoDBService {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *ListServicesResponse) GetPostgresql() []*PostgreSQLService {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *ListServicesResponse) GetProxysql() []*ProxySQLService {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *ListServicesResponse) GetHaproxy() []*HAProxyService {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

func (x *ListServicesResponse) GetExternal() []*ExternalService {
	if x != nil {
		return x.External
	}
	return nil
}

type ListActiveServiceTypesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActiveServiceTypesRequest) Reset() {
	*x = ListActiveServiceTypesRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActiveServiceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveServiceTypesRequest) ProtoMessage() {}

func (x *ListActiveServiceTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveServiceTypesRequest.ProtoReflect.Descriptor instead.
func (*ListActiveServiceTypesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{8}
}

type ListActiveServiceTypesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceTypes  []ServiceType          `protobuf:"varint,1,rep,packed,name=service_types,json=serviceTypes,proto3,enum=inventory.v1.ServiceType" json:"service_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActiveServiceTypesResponse) Reset() {
	*x = ListActiveServiceTypesResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActiveServiceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveServiceTypesResponse) ProtoMessage() {}

func (x *ListActiveServiceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveServiceTypesResponse.ProtoReflect.Descriptor instead.
func (*ListActiveServiceTypesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{9}
}

func (x *ListActiveServiceTypesResponse) GetServiceTypes() []ServiceType {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

type GetServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	ServiceId     string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceRequest) Reset() {
	*x = GetServiceRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRequest) ProtoMessage() {}

func (x *GetServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRequest.ProtoReflect.Descriptor instead.
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetServiceRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type GetServiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Service:
	//
	//	*GetServiceResponse_Mysql
	//	*GetServiceResponse_Mongodb
	//	*GetServiceResponse_Postgresql
	//	*GetServiceResponse_Proxysql
	//	*GetServiceResponse_Haproxy
	//	*GetServiceResponse_External
	Service       isGetServiceResponse_Service `protobuf_oneof:"service"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceResponse) Reset() {
	*x = GetServiceResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceResponse) ProtoMessage() {}

func (x *GetServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceResponse.ProtoReflect.Descriptor instead.
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{11}
}

func (x *GetServiceResponse) GetService() isGetServiceResponse_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *GetServiceResponse) GetMysql() *MySQLService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *GetServiceResponse) GetMongodb() *MongoDBService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_Mongodb); ok {
			return x.Mongodb
		}
	}
	return nil
}

func (x *GetServiceResponse) GetPostgresql() *PostgreSQLService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_Postgresql); ok {
			return x.Postgresql
		}
	}
	return nil
}

func (x *GetServiceResponse) GetProxysql() *ProxySQLService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_Proxysql); ok {
			return x.Proxysql
		}
	}
	return nil
}

func (x *GetServiceResponse) GetHaproxy() *HAProxyService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_Haproxy); ok {
			return x.Haproxy
		}
	}
	return nil
}

func (x *GetServiceResponse) GetExternal() *ExternalService {
	if x != nil {
		if x, ok := x.Service.(*GetServiceResponse_External); ok {
			return x.External
		}
	}
	return nil
}

type isGetServiceResponse_Service interface {
	isGetServiceResponse_Service()
}

type GetServiceResponse_Mysql struct {
	Mysql *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3,oneof"`
}

type GetServiceResponse_Mongodb struct {
	Mongodb *MongoDBService `protobuf:"bytes,2,opt,name=mongodb,proto3,oneof"`
}

type GetServiceResponse_Postgresql struct {
	Postgresql *PostgreSQLService `protobuf:"bytes,3,opt,name=postgresql,proto3,oneof"`
}

type GetServiceResponse_Proxysql struct {
	Proxysql *ProxySQLService `protobuf:"bytes,4,opt,name=proxysql,proto3,oneof"`
}

type GetServiceResponse_Haproxy struct {
	Haproxy *HAProxyService `protobuf:"bytes,5,opt,name=haproxy,proto3,oneof"`
}

type GetServiceResponse_External struct {
	External *ExternalService `protobuf:"bytes,6,opt,name=external,proto3,oneof"`
}

func (*GetServiceResponse_Mysql) isGetServiceResponse_Service() {}

func (*GetServiceResponse_Mongodb) isGetServiceResponse_Service() {}

func (*GetServiceResponse_Postgresql) isGetServiceResponse_Service() {}

func (*GetServiceResponse_Proxysql) isGetServiceResponse_Service() {}

func (*GetServiceResponse_Haproxy) isGetServiceResponse_Service() {}

func (*GetServiceResponse_External) isGetServiceResponse_Service() {}

type AddServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Service:
	//
	//	*AddServiceRequest_Mysql
	//	*AddServiceRequest_Mongodb
	//	*AddServiceRequest_Postgresql
	//	*AddServiceRequest_Proxysql
	//	*AddServiceRequest_Haproxy
	//	*AddServiceRequest_External
	Service       isAddServiceRequest_Service `protobuf_oneof:"service"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddServiceRequest) Reset() {
	*x = AddServiceRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceRequest) ProtoMessage() {}

func (x *AddServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceRequest.ProtoReflect.Descriptor instead.
func (*AddServiceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{12}
}

func (x *AddServiceRequest) GetService() isAddServiceRequest_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *AddServiceRequest) GetMysql() *AddMySQLServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *AddServiceRequest) GetMongodb() *AddMongoDBServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_Mongodb); ok {
			return x.Mongodb
		}
	}
	return nil
}

func (x *AddServiceRequest) GetPostgresql() *AddPostgreSQLServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_Postgresql); ok {
			return x.Postgresql
		}
	}
	return nil
}

func (x *AddServiceRequest) GetProxysql() *AddProxySQLServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_Proxysql); ok {
			return x.Proxysql
		}
	}
	return nil
}

func (x *AddServiceRequest) GetHaproxy() *AddHAProxyServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_Haproxy); ok {
			return x.Haproxy
		}
	}
	return nil
}

func (x *AddServiceRequest) GetExternal() *AddExternalServiceParams {
	if x != nil {
		if x, ok := x.Service.(*AddServiceRequest_External); ok {
			return x.External
		}
	}
	return nil
}

type isAddServiceRequest_Service interface {
	isAddServiceRequest_Service()
}

type AddServiceRequest_Mysql struct {
	Mysql *AddMySQLServiceParams `protobuf:"bytes,1,opt,name=mysql,proto3,oneof"`
}

type AddServiceRequest_Mongodb struct {
	Mongodb *AddMongoDBServiceParams `protobuf:"bytes,2,opt,name=mongodb,proto3,oneof"`
}

type AddServiceRequest_Postgresql struct {
	Postgresql *AddPostgreSQLServiceParams `protobuf:"bytes,3,opt,name=postgresql,proto3,oneof"`
}

type AddServiceRequest_Proxysql struct {
	Proxysql *AddProxySQLServiceParams `protobuf:"bytes,4,opt,name=proxysql,proto3,oneof"`
}

type AddServiceRequest_Haproxy struct {
	Haproxy *AddHAProxyServiceParams `protobuf:"bytes,5,opt,name=haproxy,proto3,oneof"`
}

type AddServiceRequest_External struct {
	External *AddExternalServiceParams `protobuf:"bytes,6,opt,name=external,proto3,oneof"`
}

func (*AddServiceRequest_Mysql) isAddServiceRequest_Service() {}

func (*AddServiceRequest_Mongodb) isAddServiceRequest_Service() {}

func (*AddServiceRequest_Postgresql) isAddServiceRequest_Service() {}

func (*AddServiceRequest_Proxysql) isAddServiceRequest_Service() {}

func (*AddServiceRequest_Haproxy) isAddServiceRequest_Service() {}

func (*AddServiceRequest_External) isAddServiceRequest_Service() {}

type AddServiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Service:
	//
	//	*AddServiceResponse_Mysql
	//	*AddServiceResponse_Mongodb
	//	*AddServiceResponse_Postgresql
	//	*AddServiceResponse_Proxysql
	//	*AddServiceResponse_Haproxy
	//	*AddServiceResponse_External
	Service       isAddServiceResponse_Service `protobuf_oneof:"service"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddServiceResponse) Reset() {
	*x = AddServiceResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceResponse) ProtoMessage() {}

func (x *AddServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceResponse.ProtoReflect.Descriptor instead.
func (*AddServiceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{13}
}

func (x *AddServiceResponse) GetService() isAddServiceResponse_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *AddServiceResponse) GetMysql() *MySQLService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *AddServiceResponse) GetMongodb() *MongoDBService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_Mongodb); ok {
			return x.Mongodb
		}
	}
	return nil
}

func (x *AddServiceResponse) GetPostgresql() *PostgreSQLService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_Postgresql); ok {
			return x.Postgresql
		}
	}
	return nil
}

func (x *AddServiceResponse) GetProxysql() *ProxySQLService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_Proxysql); ok {
			return x.Proxysql
		}
	}
	return nil
}

func (x *AddServiceResponse) GetHaproxy() *HAProxyService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_Haproxy); ok {
			return x.Haproxy
		}
	}
	return nil
}

func (x *AddServiceResponse) GetExternal() *ExternalService {
	if x != nil {
		if x, ok := x.Service.(*AddServiceResponse_External); ok {
			return x.External
		}
	}
	return nil
}

type isAddServiceResponse_Service interface {
	isAddServiceResponse_Service()
}

type AddServiceResponse_Mysql struct {
	Mysql *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3,oneof"`
}

type AddServiceResponse_Mongodb struct {
	Mongodb *MongoDBService `protobuf:"bytes,2,opt,name=mongodb,proto3,oneof"`
}

type AddServiceResponse_Postgresql struct {
	Postgresql *PostgreSQLService `protobuf:"bytes,3,opt,name=postgresql,proto3,oneof"`
}

type AddServiceResponse_Proxysql struct {
	Proxysql *ProxySQLService `protobuf:"bytes,4,opt,name=proxysql,proto3,oneof"`
}

type AddServiceResponse_Haproxy struct {
	Haproxy *HAProxyService `protobuf:"bytes,5,opt,name=haproxy,proto3,oneof"`
}

type AddServiceResponse_External struct {
	External *ExternalService `protobuf:"bytes,6,opt,name=external,proto3,oneof"`
}

func (*AddServiceResponse_Mysql) isAddServiceResponse_Service() {}

func (*AddServiceResponse_Mongodb) isAddServiceResponse_Service() {}

func (*AddServiceResponse_Postgresql) isAddServiceResponse_Service() {}

func (*AddServiceResponse_Proxysql) isAddServiceResponse_Service() {}

func (*AddServiceResponse_Haproxy) isAddServiceResponse_Service() {}

func (*AddServiceResponse_External) isAddServiceResponse_Service() {}

type AddMySQLServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,5,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,8,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Extra parameters to be added to the DSN.
	ExtraDsnParams map[string]string `protobuf:"bytes,10,rep,name=extra_dsn_params,json=extraDsnParams,proto3" json:"extra_dsn_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddMySQLServiceParams) Reset() {
	*x = AddMySQLServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMySQLServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMySQLServiceParams) ProtoMessage() {}

func (x *AddMySQLServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMySQLServiceParams.ProtoReflect.Descriptor instead.
func (*AddMySQLServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{14}
}

func (x *AddMySQLServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddMySQLServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddMySQLServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddMySQLServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddMySQLServiceParams) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *AddMySQLServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddMySQLServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddMySQLServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddMySQLServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *AddMySQLServiceParams) GetExtraDsnParams() map[string]string {
	if x != nil {
		return x.ExtraDsnParams
	}
	return nil
}

type AddMongoDBServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,5,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,8,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMongoDBServiceParams) Reset() {
	*x = AddMongoDBServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMongoDBServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMongoDBServiceParams) ProtoMessage() {}

func (x *AddMongoDBServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMongoDBServiceParams.ProtoReflect.Descriptor instead.
func (*AddMongoDBServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{15}
}

func (x *AddMongoDBServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddMongoDBServiceParams) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddPostgreSQLServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,5,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,8,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `protobuf:"varint,10,opt,name=auto_discovery_limit,json=autoDiscoveryLimit,proto3" json:"auto_discovery_limit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AddPostgreSQLServiceParams) Reset() {
	*x = AddPostgreSQLServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPostgreSQLServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPostgreSQLServiceParams) ProtoMessage() {}

func (x *AddPostgreSQLServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPostgreSQLServiceParams.ProtoReflect.Descriptor instead.
func (*AddPostgreSQLServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{16}
}

func (x *AddPostgreSQLServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddPostgreSQLServiceParams) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddPostgreSQLServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *AddPostgreSQLServiceParams) GetAutoDiscoveryLimit() int32 {
	if x != nil {
		return x.AutoDiscoveryLimit
	}
	return 0
}

type AddProxySQLServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,5,opt,name=socket,proto3" json:"socket,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,8,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProxySQLServiceParams) Reset() {
	*x = AddProxySQLServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProxySQLServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProxySQLServiceParams) ProtoMessage() {}

func (x *AddProxySQLServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProxySQLServiceParams.ProtoReflect.Descriptor instead.
func (*AddProxySQLServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{17}
}

func (x *AddProxySQLServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddProxySQLServiceParams) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddProxySQLServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddHAProxyServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,5,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,6,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHAProxyServiceParams) Reset() {
	*x = AddHAProxyServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHAProxyServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHAProxyServiceParams) ProtoMessage() {}

func (x *AddHAProxyServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHAProxyServiceParams.ProtoReflect.Descriptor instead.
func (*AddHAProxyServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{18}
}

func (x *AddHAProxyServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddHAProxyServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddHAProxyServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddHAProxyServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddHAProxyServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddHAProxyServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddExternalServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs. Required.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,5,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,6,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Group name of external service.
	Group         string `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddExternalServiceParams) Reset() {
	*x = AddExternalServiceParams{}
	mi := &file_inventory_v1_services_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExternalServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExternalServiceParams) ProtoMessage() {}

func (x *AddExternalServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExternalServiceParams.ProtoReflect.Descriptor instead.
func (*AddExternalServiceParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{19}
}

func (x *AddExternalServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddExternalServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddExternalServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddExternalServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddExternalServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddExternalServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *AddExternalServiceParams) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type RemoveServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier. Required.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Remove service with all dependencies.
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServiceRequest) Reset() {
	*x = RemoveServiceRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServiceRequest) ProtoMessage() {}

func (x *RemoveServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServiceRequest.ProtoReflect.Descriptor instead.
func (*RemoveServiceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveServiceRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RemoveServiceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveServiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServiceResponse) Reset() {
	*x = RemoveServiceResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServiceResponse) ProtoMessage() {}

func (x *RemoveServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServiceResponse.ProtoReflect.Descriptor instead.
func (*RemoveServiceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{21}
}

type ChangeServiceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServiceId      string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Environment    *string                `protobuf:"bytes,2,opt,name=environment,proto3,oneof" json:"environment,omitempty"`
	Cluster        *string                `protobuf:"bytes,3,opt,name=cluster,proto3,oneof" json:"cluster,omitempty"`
	ReplicationSet *string                `protobuf:"bytes,4,opt,name=replication_set,json=replicationSet,proto3,oneof" json:"replication_set,omitempty"`
	ExternalGroup  *string                `protobuf:"bytes,5,opt,name=external_group,json=externalGroup,proto3,oneof" json:"external_group,omitempty"`
	// Replace all custom user-assigned labels.
	CustomLabels  *common.StringMap `protobuf:"bytes,6,opt,name=custom_labels,json=customLabels,proto3,oneof" json:"custom_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeServiceRequest) Reset() {
	*x = ChangeServiceRequest{}
	mi := &file_inventory_v1_services_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeServiceRequest) ProtoMessage() {}

func (x *ChangeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeServiceRequest.ProtoReflect.Descriptor instead.
func (*ChangeServiceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{22}
}

func (x *ChangeServiceRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ChangeServiceRequest) GetEnvironment() string {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return ""
}

func (x *ChangeServiceRequest) GetCluster() string {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return ""
}

func (x *ChangeServiceRequest) GetReplicationSet() string {
	if x != nil && x.ReplicationSet != nil {
		return *x.ReplicationSet
	}
	return ""
}

func (x *ChangeServiceRequest) GetExternalGroup() string {
	if x != nil && x.ExternalGroup != nil {
		return *x.ExternalGroup
	}
	return ""
}

func (x *ChangeServiceRequest) GetCustomLabels() *common.StringMap {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type ChangeServiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Service:
	//
	//	*ChangeServiceResponse_Mysql
	//	*ChangeServiceResponse_Mongodb
	//	*ChangeServiceResponse_Postgresql
	//	*ChangeServiceResponse_Proxysql
	//	*ChangeServiceResponse_Haproxy
	//	*ChangeServiceResponse_External
	Service       isChangeServiceResponse_Service `protobuf_oneof:"service"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeServiceResponse) Reset() {
	*x = ChangeServiceResponse{}
	mi := &file_inventory_v1_services_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeServiceResponse) ProtoMessage() {}

func (x *ChangeServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_services_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeServiceResponse.ProtoReflect.Descriptor instead.
func (*ChangeServiceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_services_proto_rawDescGZIP(), []int{23}
}

func (x *ChangeServiceResponse) GetService() isChangeServiceResponse_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ChangeServiceResponse) GetMysql() *MySQLService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *ChangeServiceResponse) GetMongodb() *MongoDBService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_Mongodb); ok {
			return x.Mongodb
		}
	}
	return nil
}

func (x *ChangeServiceResponse) GetPostgresql() *PostgreSQLService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_Postgresql); ok {
			return x.Postgresql
		}
	}
	return nil
}

func (x *ChangeServiceResponse) GetProxysql() *ProxySQLService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_Proxysql); ok {
			return x.Proxysql
		}
	}
	return nil
}

func (x *ChangeServiceResponse) GetHaproxy() *HAProxyService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_Haproxy); ok {
			return x.Haproxy
		}
	}
	return nil
}

func (x *ChangeServiceResponse) GetExternal() *ExternalService {
	if x != nil {
		if x, ok := x.Service.(*ChangeServiceResponse_External); ok {
			return x.External
		}
	}
	return nil
}

type isChangeServiceResponse_Service interface {
	isChangeServiceResponse_Service()
}

type ChangeServiceResponse_Mysql struct {
	Mysql *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3,oneof"`
}

type ChangeServiceResponse_Mongodb struct {
	Mongodb *MongoDBService `protobuf:"bytes,2,opt,name=mongodb,proto3,oneof"`
}

type ChangeServiceResponse_Postgresql struct {
	Postgresql *PostgreSQLService `protobuf:"bytes,3,opt,name=postgresql,proto3,oneof"`
}

type ChangeServiceResponse_Proxysql struct {
	Proxysql *ProxySQLService `protobuf:"bytes,4,opt,name=proxysql,proto3,oneof"`
}

type ChangeServiceResponse_Haproxy struct {
	Haproxy *HAProxyService `protobuf:"bytes,5,opt,name=haproxy,proto3,oneof"`
}

type ChangeServiceResponse_External struct {
	External *ExternalService `protobuf:"bytes,6,opt,name=external,proto3,oneof"`
}

func (*ChangeServiceResponse_Mysql) isChangeServiceResponse_Service() {}

func (*ChangeServiceResponse_Mongodb) isChangeServiceResponse_Service() {}

func (*ChangeServiceResponse_Postgresql) isChangeServiceResponse_Service() {}

func (*ChangeServiceResponse_Proxysql) isChangeServiceResponse_Service() {}

func (*ChangeServiceResponse_Haproxy) isChangeServiceResponse_Service() {}

func (*ChangeServiceResponse_External) isChangeServiceResponse_Service() {}

var File_inventory_v1_services_proto protoreflect.FileDescriptor

const file_inventory_v1_services_proto_rawDesc = "" +
	"\n" +
	"\x1binventory/v1/services.proto\x12\finventory.v1\x1a\x13common/common.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x17validate/validate.proto\"\xdf\x04\n" +
	"\fMySQLService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x04 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x05 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x06 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\a \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\b \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\t \x01(\tR\x0ereplicationSet\x12Q\n" +
	"\rcustom_labels\x18\n" +
	" \x03(\v2,.inventory.v1.MySQLService.CustomLabelsEntryR\fcustomLabels\x12\x18\n" +
	"\aversion\x18\v \x01(\tR\aversion\x12X\n" +
	"\x10extra_dsn_params\x18\f \x03(\v2..inventory.v1.MySQLService.ExtraDsnParamsEntryR\x0eextraDsnParams\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13ExtraDsnParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc6\x03\n" +
	"\x0eMongoDBService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x04 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x05 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x06 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\a \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\b \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\t \x01(\tR\x0ereplicationSet\x12S\n" +
	"\rcustom_labels\x18\n" +
	" \x03(\v2..inventory.v1.MongoDBService.CustomLabelsEntryR\fcustomLabels\x12\x18\n" +
	"\aversion\x18\v \x01(\tR\aversion\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa3\x04\n" +
	"\x11PostgreSQLService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12#\n" +
	"\rdatabase_name\x18\x03 \x01(\tR\fdatabaseName\x12\x17\n" +
	"\anode_id\x18\x04 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x06 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\a \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\b \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\t \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\n" +
	" \x01(\tR\x0ereplicationSet\x12V\n" +
	"\rcustom_labels\x18\v \x03(\v21.inventory.v1.PostgreSQLService.CustomLabelsEntryR\fcustomLabels\x12\x18\n" +
	"\aversion\x18\f \x01(\tR\aversion\x120\n" +
	"\x14auto_discovery_limit\x18\r \x01(\x05R\x12autoDiscoveryLimit\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc8\x03\n" +
	"\x0fProxySQLService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x04 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x05 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x06 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\a \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\b \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\t \x01(\tR\x0ereplicationSet\x12T\n" +
	"\rcustom_labels\x18\n" +
	" \x03(\v2/.inventory.v1.ProxySQLService.CustomLabelsEntryR\fcustomLabels\x12\x18\n" +
	"\aversion\x18\v \x01(\tR\aversion\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe6\x02\n" +
	"\x0eHAProxyService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12 \n" +
	"\venvironment\x18\x04 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\x05 \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\x06 \x01(\tR\x0ereplicationSet\x12S\n" +
	"\rcustom_labels\x18\a \x03(\v2..inventory.v1.HAProxyService.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfe\x02\n" +
	"\x0fExternalService\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12 \n" +
	"\venvironment\x18\x04 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\x05 \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\x06 \x01(\tR\x0ereplicationSet\x12T\n" +
	"\rcustom_labels\x18\a \x03(\v2/.inventory.v1.ExternalService.CustomLabelsEntryR\fcustomLabels\x12\x14\n" +
	"\x05group\x18\b \x01(\tR\x05group\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x01\n" +
	"\x13ListServicesRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12<\n" +
	"\fservice_type\x18\x02 \x01(\x0e2\x19.inventory.v1.ServiceTypeR\vserviceType\x12%\n" +
	"\x0eexternal_group\x18\x03 \x01(\tR\rexternalGroup\"\xef\x02\n" +
	"\x14ListServicesResponse\x120\n" +
	"\x05mysql\x18\x01 \x03(\v2\x1a.inventory.v1.MySQLServiceR\x05mysql\x126\n" +
	"\amongodb\x18\x02 \x03(\v2\x1c.inventory.v1.MongoDBServiceR\amongodb\x12?\n" +
	"\n" +
	"postgresql\x18\x03 \x03(\v2\x1f.inventory.v1.PostgreSQLServiceR\n" +
	"postgresql\x129\n" +
	"\bproxysql\x18\x04 \x03(\v2\x1d.inventory.v1.ProxySQLServiceR\bproxysql\x126\n" +
	"\ahaproxy\x18\x05 \x03(\v2\x1c.inventory.v1.HAProxyServiceR\ahaproxy\x129\n" +
	"\bexternal\x18\x06 \x03(\v2\x1d.inventory.v1.ExternalServiceR\bexternal\"\x1f\n" +
	"\x1dListActiveServiceTypesRequest\"`\n" +
	"\x1eListActiveServiceTypesResponse\x12>\n" +
	"\rservice_types\x18\x01 \x03(\x0e2\x19.inventory.v1.ServiceTypeR\fserviceTypes\";\n" +
	"\x11GetServiceRequest\x12&\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\tserviceId\"\x84\x03\n" +
	"\x12GetServiceResponse\x122\n" +
	"\x05mysql\x18\x01 \x01(\v2\x1a.inventory.v1.MySQLServiceH\x00R\x05mysql\x128\n" +
	"\amongodb\x18\x02 \x01(\v2\x1c.inventory.v1.MongoDBServiceH\x00R\amongodb\x12A\n" +
	"\n" +
	"postgresql\x18\x03 \x01(\v2\x1f.inventory.v1.PostgreSQLServiceH\x00R\n" +
	"postgresql\x12;\n" +
	"\bproxysql\x18\x04 \x01(\v2\x1d.inventory.v1.ProxySQLServiceH\x00R\bproxysql\x128\n" +
	"\ahaproxy\x18\x05 \x01(\v2\x1c.inventory.v1.HAProxyServiceH\x00R\ahaproxy\x12;\n" +
	"\bexternal\x18\x06 \x01(\v2\x1d.inventory.v1.ExternalServiceH\x00R\bexternalB\t\n" +
	"\aservice\"\xb9\x03\n" +
	"\x11AddServiceRequest\x12;\n" +
	"\x05mysql\x18\x01 \x01(\v2#.inventory.v1.AddMySQLServiceParamsH\x00R\x05mysql\x12A\n" +
	"\amongodb\x18\x02 \x01(\v2%.inventory.v1.AddMongoDBServiceParamsH\x00R\amongodb\x12J\n" +
	"\n" +
	"postgresql\x18\x03 \x01(\v2(.inventory.v1.AddPostgreSQLServiceParamsH\x00R\n" +
	"postgresql\x12D\n" +
	"\bproxysql\x18\x04 \x01(\v2&.inventory.v1.AddProxySQLServiceParamsH\x00R\bproxysql\x12A\n" +
	"\ahaproxy\x18\x05 \x01(\v2%.inventory.v1.AddHAProxyServiceParamsH\x00R\ahaproxy\x12D\n" +
	"\bexternal\x18\x06 \x01(\v2&.inventory.v1.AddExternalServiceParamsH\x00R\bexternalB\t\n" +
	"\aservice\"\x84\x03\n" +
	"\x12AddServiceResponse\x122\n" +
	"\x05mysql\x18\x01 \x01(\v2\x1a.inventory.v1.MySQLServiceH\x00R\x05mysql\x128\n" +
	"\amongodb\x18\x02 \x01(\v2\x1c.inventory.v1.MongoDBServiceH\x00R\amongodb\x12A\n" +
	"\n" +
	"postgresql\x18\x03 \x01(\v2\x1f.inventory.v1.PostgreSQLServiceH\x00R\n" +
	"postgresql\x12;\n" +
	"\bproxysql\x18\x04 \x01(\v2\x1d.inventory.v1.ProxySQLServiceH\x00R\bproxysql\x128\n" +
	"\ahaproxy\x18\x05 \x01(\v2\x1c.inventory.v1.HAProxyServiceH\x00R\ahaproxy\x12;\n" +
	"\bexternal\x18\x06 \x01(\v2\x1d.inventory.v1.ExternalServiceH\x00R\bexternalB\t\n" +
	"\aservice\"\xd3\x04\n" +
	"\x15AddMySQLServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x05 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\b \x01(\tR\x0ereplicationSet\x12Z\n" +
	"\rcustom_labels\x18\t \x03(\v25.inventory.v1.AddMySQLServiceParams.CustomLabelsEntryR\fcustomLabels\x12a\n" +
	"\x10extra_dsn_params\x18\n" +
	" \x03(\v27.inventory.v1.AddMySQLServiceParams.ExtraDsnParamsEntryR\x0eextraDsnParams\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13ExtraDsnParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb1\x03\n" +
	"\x17AddMongoDBServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x05 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\b \x01(\tR\x0ereplicationSet\x12\\\n" +
	"\rcustom_labels\x18\t \x03(\v27.inventory.v1.AddMongoDBServiceParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe9\x03\n" +
	"\x1aAddPostgreSQLServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x05 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\b \x01(\tR\x0ereplicationSet\x12_\n" +
	"\rcustom_labels\x18\t \x03(\v2:.inventory.v1.AddPostgreSQLServiceParams.CustomLabelsEntryR\fcustomLabels\x120\n" +
	"\x14auto_discovery_limit\x18\n" +
	" \x01(\x05R\x12autoDiscoveryLimit\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb3\x03\n" +
	"\x18AddProxySQLServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\x05 \x01(\tR\x06socket\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\b \x01(\tR\x0ereplicationSet\x12]\n" +
	"\rcustom_labels\x18\t \x03(\v28.inventory.v1.AddProxySQLServiceParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xeb\x02\n" +
	"\x17AddHAProxyServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12 \n" +
	"\venvironment\x18\x03 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\x04 \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\x05 \x01(\tR\x0ereplicationSet\x12\\\n" +
	"\rcustom_labels\x18\x06 \x03(\v27.inventory.v1.AddHAProxyServiceParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x83\x03\n" +
	"\x18AddExternalServiceParams\x12*\n" +
	"\fservice_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12 \n" +
	"\anode_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12 \n" +
	"\venvironment\x18\x03 \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\x04 \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\x05 \x01(\tR\x0ereplicationSet\x12]\n" +
	"\rcustom_labels\x18\x06 \x03(\v28.inventory.v1.AddExternalServiceParams.CustomLabelsEntryR\fcustomLabels\x12\x14\n" +
	"\x05group\x18\a \x01(\tR\x05group\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"T\n" +
	"\x14RemoveServiceRequest\x12&\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\tserviceId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\x17\n" +
	"\x15RemoveServiceResponse\"\xf0\x02\n" +
	"\x14ChangeServiceRequest\x12&\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\tserviceId\x12%\n" +
	"\venvironment\x18\x02 \x01(\tH\x00R\venvironment\x88\x01\x01\x12\x1d\n" +
	"\acluster\x18\x03 \x01(\tH\x01R\acluster\x88\x01\x01\x12,\n" +
	"\x0freplication_set\x18\x04 \x01(\tH\x02R\x0ereplicationSet\x88\x01\x01\x12*\n" +
	"\x0eexternal_group\x18\x05 \x01(\tH\x03R\rexternalGroup\x88\x01\x01\x12;\n" +
	"\rcustom_labels\x18\x06 \x01(\v2\x11.common.StringMapH\x04R\fcustomLabels\x88\x01\x01B\x0e\n" +
	"\f_environmentB\n" +
	"\n" +
	"\b_clusterB\x12\n" +
	"\x10_replication_setB\x11\n" +
	"\x0f_external_groupB\x10\n" +
	"\x0e_custom_labels\"\x87\x03\n" +
	"\x15ChangeServiceResponse\x122\n" +
	"\x05mysql\x18\x01 \x01(\v2\x1a.inventory.v1.MySQLServiceH\x00R\x05mysql\x128\n" +
	"\amongodb\x18\x02 \x01(\v2\x1c.inventory.v1.MongoDBServiceH\x00R\amongodb\x12A\n" +
	"\n" +
	"postgresql\x18\x03 \x01(\v2\x1f.inventory.v1.PostgreSQLServiceH\x00R\n" +
	"postgresql\x12;\n" +
	"\bproxysql\x18\x04 \x01(\v2\x1d.inventory.v1.ProxySQLServiceH\x00R\bproxysql\x128\n" +
	"\ahaproxy\x18\x05 \x01(\v2\x1c.inventory.v1.HAProxyServiceH\x00R\ahaproxy\x12;\n" +
	"\bexternal\x18\x06 \x01(\v2\x1d.inventory.v1.ExternalServiceH\x00R\bexternalB\t\n" +
	"\aservice*\xfa\x01\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSERVICE_TYPE_MYSQL_SERVICE\x10\x01\x12 \n" +
	"\x1cSERVICE_TYPE_MONGODB_SERVICE\x10\x02\x12#\n" +
	"\x1fSERVICE_TYPE_POSTGRESQL_SERVICE\x10\x03\x12!\n" +
	"\x1dSERVICE_TYPE_PROXYSQL_SERVICE\x10\x04\x12 \n" +
	"\x1cSERVICE_TYPE_HAPROXY_SERVICE\x10\x06\x12!\n" +
	"\x1dSERVICE_TYPE_EXTERNAL_SERVICE\x10\x052\x88\n" +
	"\n" +
	"\x0fServicesService\x12\xb5\x01\n" +
	"\fListServices\x12!.inventory.v1.ListServicesRequest\x1a\".inventory.v1.ListServicesResponse\"^\x92A=\x12\rList Services\x1a,Returns a list of Services filtered by type.\x82\xd3\xe4\x93\x02\x18\x12\x16/v1/inventory/services\x12\xe6\x01\n" +
	"\x16ListActiveServiceTypes\x12+.inventory.v1.ListActiveServiceTypesRequest\x1a,.inventory.v1.ListActiveServiceTypesResponse\"q\x92AD\x12\x19List Active Service Types\x1a'Returns a list of active Service types.\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/v1/inventory/services:getTypes\x12\xaf\x01\n" +
	"\n" +
	"GetService\x12\x1f.inventory.v1.GetServiceRequest\x1a .inventory.v1.GetServiceResponse\"^\x92A0\x12\rGet a Service\x1a\x1fReturns a single Service by ID.\x82\xd3\xe4\x93\x02%\x12#/v1/inventory/services/{service_id}\x12\x95\x01\n" +
	"\n" +
	"AddService\x12\x1f.inventory.v1.AddServiceRequest\x1a .inventory.v1.AddServiceResponse\"D\x92A \x12\rAdd a Service\x1a\x0fAdds a Service.\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/v1/inventory/services\x12\xaa\x01\n" +
	"\rRemoveService\x12\".inventory.v1.RemoveServiceRequest\x1a#.inventory.v1.RemoveServiceResponse\"P\x92A\"\x12\x0eRemove Service\x1a\x10Removes Service.\x82\xd3\xe4\x93\x02%*#/v1/inventory/services/{service_id}\x12\xdc\x02\n" +
	"\rChangeService\x12\".inventory.v1.ChangeServiceRequest\x1a#.inventory.v1.ChangeServiceResponse\"\x81\x02\x92A\xcf\x01\x12\x0eChange service\x1a\xbc\x01Changes service configuration. If a new cluster label is specified, it removes all backup/restore tasks scheduled for the related services. Fails if there are running backup/restore tasks.\x82\xd3\xe4\x93\x02(:\x01*\x1a#/v1/inventory/services/{service_id}B\xa7\x01\n" +
	"\x10com.inventory.v1B\rServicesProtoP\x01Z3github.com/percona/pmm/api/inventory/v1;inventoryv1\xa2\x02\x03IXX\xaa\x02\fInventory.V1\xca\x02\fInventory\\V1\xe2\x02\x18Inventory\\V1\\GPBMetadata\xea\x02\rInventory::V1b\x06proto3"

var (
	file_inventory_v1_services_proto_rawDescOnce sync.Once
	file_inventory_v1_services_proto_rawDescData []byte
)

func file_inventory_v1_services_proto_rawDescGZIP() []byte {
	file_inventory_v1_services_proto_rawDescOnce.Do(func() {
		file_inventory_v1_services_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inventory_v1_services_proto_rawDesc), len(file_inventory_v1_services_proto_rawDesc)))
	})
	return file_inventory_v1_services_proto_rawDescData
}

var (
	file_inventory_v1_services_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_inventory_v1_services_proto_msgTypes  = make([]protoimpl.MessageInfo, 38)
	file_inventory_v1_services_proto_goTypes   = []any{
		(ServiceType)(0),                       // 0: inventory.v1.ServiceType
		(*MySQLService)(nil),                   // 1: inventory.v1.MySQLService
		(*MongoDBService)(nil),                 // 2: inventory.v1.MongoDBService
		(*PostgreSQLService)(nil),              // 3: inventory.v1.PostgreSQLService
		(*ProxySQLService)(nil),                // 4: inventory.v1.ProxySQLService
		(*HAProxyService)(nil),                 // 5: inventory.v1.HAProxyService
		(*ExternalService)(nil),                // 6: inventory.v1.ExternalService
		(*ListServicesRequest)(nil),            // 7: inventory.v1.ListServicesRequest
		(*ListServicesResponse)(nil),           // 8: inventory.v1.ListServicesResponse
		(*ListActiveServiceTypesRequest)(nil),  // 9: inventory.v1.ListActiveServiceTypesRequest
		(*ListActiveServiceTypesResponse)(nil), // 10: inventory.v1.ListActiveServiceTypesResponse
		(*GetServiceRequest)(nil),              // 11: inventory.v1.GetServiceRequest
		(*GetServiceResponse)(nil),             // 12: inventory.v1.GetServiceResponse
		(*AddServiceRequest)(nil),              // 13: inventory.v1.AddServiceRequest
		(*AddServiceResponse)(nil),             // 14: inventory.v1.AddServiceResponse
		(*AddMySQLServiceParams)(nil),          // 15: inventory.v1.AddMySQLServiceParams
		(*AddMongoDBServiceParams)(nil),        // 16: inventory.v1.AddMongoDBServiceParams
		(*AddPostgreSQLServiceParams)(nil),     // 17: inventory.v1.AddPostgreSQLServiceParams
		(*AddProxySQLServiceParams)(nil),       // 18: inventory.v1.AddProxySQLServiceParams
		(*AddHAProxyServiceParams)(nil),        // 19: inventory.v1.AddHAProxyServiceParams
		(*AddExternalServiceParams)(nil),       // 20: inventory.v1.AddExternalServiceParams
		(*RemoveServiceRequest)(nil),           // 21: inventory.v1.RemoveServiceRequest
		(*RemoveServiceResponse)(nil),          // 22: inventory.v1.RemoveServiceResponse
		(*ChangeServiceRequest)(nil),           // 23: inventory.v1.ChangeServiceRequest
		(*ChangeServiceResponse)(nil),          // 24: inventory.v1.ChangeServiceResponse
		nil,                                    // 25: inventory.v1.MySQLService.CustomLabelsEntry
		nil,                                    // 26: inventory.v1.MySQLService.ExtraDsnParamsEntry
		nil,                                    // 27: inventory.v1.MongoDBService.CustomLabelsEntry
		nil,                                    // 28: inventory.v1.PostgreSQLService.CustomLabelsEntry
		nil,                                    // 29: inventory.v1.ProxySQLService.CustomLabelsEntry
		nil,                                    // 30: inventory.v1.HAProxyService.CustomLabelsEntry
		nil,                                    // 31: inventory.v1.ExternalService.CustomLabelsEntry
		nil,                                    // 32: inventory.v1.AddMySQLServiceParams.CustomLabelsEntry
		nil,                                    // 33: inventory.v1.AddMySQLServiceParams.ExtraDsnParamsEntry
		nil,                                    // 34: inventory.v1.AddMongoDBServiceParams.CustomLabelsEntry
		nil,                                    // 35: inventory.v1.AddPostgreSQLServiceParams.CustomLabelsEntry
		nil,                                    // 36: inventory.v1.AddProxySQLServiceParams.CustomLabelsEntry
		nil,                                    // 37: inventory.v1.AddHAProxyServiceParams.CustomLabelsEntry
		nil,                                    // 38: inventory.v1.AddExternalServiceParams.CustomLabelsEntry
		(*common.StringMap)(nil),               // 39: common.StringMap
	}
)

var file_inventory_v1_services_proto_depIdxs = []int32{
	25, // 0: inventory.v1.MySQLService.custom_labels:type_name -> inventory.v1.MySQLService.CustomLabelsEntry
	26, // 1: inventory.v1.MySQLService.extra_dsn_params:type_name -> inventory.v1.MySQLService.ExtraDsnParamsEntry
	27, // 2: inventory.v1.MongoDBService.custom_labels:type_name -> inventory.v1.MongoDBService.CustomLabelsEntry
	28, // 3: inventory.v1.PostgreSQLService.custom_labels:type_name -> inventory.v1.PostgreSQLService.CustomLabelsEntry
	29, // 4: inventory.v1.ProxySQLService.custom_labels:type_name -> inventory.v1.ProxySQLService.CustomLabelsEntry
	30, // 5: inventory.v1.HAProxyService.custom_labels:type_name -> inventory.v1.HAProxyService.CustomLabelsEntry
	31, // 6: inventory.v1.ExternalService.custom_labels:type_name -> inventory.v1.ExternalService.CustomLabelsEntry
	0,  // 7: inventory.v1.ListServicesRequest.service_type:type_name -> inventory.v1.ServiceType
	1,  // 8: inventory.v1.ListServicesResponse.mysql:type_name -> inventory.v1.MySQLService
	2,  // 9: inventory.v1.ListServicesResponse.mongodb:type_name -> inventory.v1.MongoDBService
	3,  // 10: inventory.v1.ListServicesResponse.postgresql:type_name -> inventory.v1.PostgreSQLService
	4,  // 11: inventory.v1.ListServicesResponse.proxysql:type_name -> inventory.v1.ProxySQLService
	5,  // 12: inventory.v1.ListServicesResponse.haproxy:type_name -> inventory.v1.HAProxyService
	6,  // 13: inventory.v1.ListServicesResponse.external:type_name -> inventory.v1.ExternalService
	0,  // 14: inventory.v1.ListActiveServiceTypesResponse.service_types:type_name -> inventory.v1.ServiceType
	1,  // 15: inventory.v1.GetServiceResponse.mysql:type_name -> inventory.v1.MySQLService
	2,  // 16: inventory.v1.GetServiceResponse.mongodb:type_name -> inventory.v1.MongoDBService
	3,  // 17: inventory.v1.GetServiceResponse.postgresql:type_name -> inventory.v1.PostgreSQLService
	4,  // 18: inventory.v1.GetServiceResponse.proxysql:type_name -> inventory.v1.ProxySQLService
	5,  // 19: inventory.v1.GetServiceResponse.haproxy:type_name -> inventory.v1.HAProxyService
	6,  // 20: inventory.v1.GetServiceResponse.external:type_name -> inventory.v1.ExternalService
	15, // 21: inventory.v1.AddServiceRequest.mysql:type_name -> inventory.v1.AddMySQLServiceParams
	16, // 22: inventory.v1.AddServiceRequest.mongodb:type_name -> inventory.v1.AddMongoDBServiceParams
	17, // 23: inventory.v1.AddServiceRequest.postgresql:type_name -> inventory.v1.AddPostgreSQLServiceParams
	18, // 24: inventory.v1.AddServiceRequest.proxysql:type_name -> inventory.v1.AddProxySQLServiceParams
	19, // 25: inventory.v1.AddServiceRequest.haproxy:type_name -> inventory.v1.AddHAProxyServiceParams
	20, // 26: inventory.v1.AddServiceRequest.external:type_name -> inventory.v1.AddExternalServiceParams
	1,  // 27: inventory.v1.AddServiceResponse.mysql:type_name -> inventory.v1.MySQLService
	2,  // 28: inventory.v1.AddServiceResponse.mongodb:type_name -> inventory.v1.MongoDBService
	3,  // 29: inventory.v1.AddServiceResponse.postgresql:type_name -> inventory.v1.PostgreSQLService
	4,  // 30: inventory.v1.AddServiceResponse.proxysql:type_name -> inventory.v1.ProxySQLService
	5,  // 31: inventory.v1.AddServiceResponse.haproxy:type_name -> inventory.v1.HAProxyService
	6,  // 32: inventory.v1.AddServiceResponse.external:type_name -> inventory.v1.ExternalService
	32, // 33: inventory.v1.AddMySQLServiceParams.custom_labels:type_name -> inventory.v1.AddMySQLServiceParams.CustomLabelsEntry
	33, // 34: inventory.v1.AddMySQLServiceParams.extra_dsn_params:type_name -> inventory.v1.AddMySQLServiceParams.ExtraDsnParamsEntry
	34, // 35: inventory.v1.AddMongoDBServiceParams.custom_labels:type_name -> inventory.v1.AddMongoDBServiceParams.CustomLabelsEntry
	35, // 36: inventory.v1.AddPostgreSQLServiceParams.custom_labels:type_name -> inventory.v1.AddPostgreSQLServiceParams.CustomLabelsEntry
	36, // 37: inventory.v1.AddProxySQLServiceParams.custom_labels:type_name -> inventory.v1.AddProxySQLServiceParams.CustomLabelsEntry
	37, // 38: inventory.v1.AddHAProxyServiceParams.custom_labels:type_name -> inventory.v1.AddHAProxyServiceParams.CustomLabelsEntry
	38, // 39: inventory.v1.AddExternalServiceParams.custom_labels:type_name -> inventory.v1.AddExternalServiceParams.CustomLabelsEntry
	39, // 40: inventory.v1.ChangeServiceRequest.custom_labels:type_name -> common.StringMap
	1,  // 41: inventory.v1.ChangeServiceResponse.mysql:type_name -> inventory.v1.MySQLService
	2,  // 42: inventory.v1.ChangeServiceResponse.mongodb:type_name -> inventory.v1.MongoDBService
	3,  // 43: inventory.v1.ChangeServiceResponse.postgresql:type_name -> inventory.v1.PostgreSQLService
	4,  // 44: inventory.v1.ChangeServiceResponse.proxysql:type_name -> inventory.v1.ProxySQLService
	5,  // 45: inventory.v1.ChangeServiceResponse.haproxy:type_name -> inventory.v1.HAProxyService
	6,  // 46: inventory.v1.ChangeServiceResponse.external:type_name -> inventory.v1.ExternalService
	7,  // 47: inventory.v1.ServicesService.ListServices:input_type -> inventory.v1.ListServicesRequest
	9,  // 48: inventory.v1.ServicesService.ListActiveServiceTypes:input_type -> inventory.v1.ListActiveServiceTypesRequest
	11, // 49: inventory.v1.ServicesService.GetService:input_type -> inventory.v1.GetServiceRequest
	13, // 50: inventory.v1.ServicesService.AddService:input_type -> inventory.v1.AddServiceRequest
	21, // 51: inventory.v1.ServicesService.RemoveService:input_type -> inventory.v1.RemoveServiceRequest
	23, // 52: inventory.v1.ServicesService.ChangeService:input_type -> inventory.v1.ChangeServiceRequest
	8,  // 53: inventory.v1.ServicesService.ListServices:output_type -> inventory.v1.ListServicesResponse
	10, // 54: inventory.v1.ServicesService.ListActiveServiceTypes:output_type -> inventory.v1.ListActiveServiceTypesResponse
	12, // 55: inventory.v1.ServicesService.GetService:output_type -> inventory.v1.GetServiceResponse
	14, // 56: inventory.v1.ServicesService.AddService:output_type -> inventory.v1.AddServiceResponse
	22, // 57: inventory.v1.ServicesService.RemoveService:output_type -> inventory.v1.RemoveServiceResponse
	24, // 58: inventory.v1.ServicesService.ChangeService:output_type -> inventory.v1.ChangeServiceResponse
	53, // [53:59] is the sub-list for method output_type
	47, // [47:53] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_inventory_v1_services_proto_init() }
func file_inventory_v1_services_proto_init() {
	if File_inventory_v1_services_proto != nil {
		return
	}
	file_inventory_v1_services_proto_msgTypes[11].OneofWrappers = []any{
		(*GetServiceResponse_Mysql)(nil),
		(*GetServiceResponse_Mongodb)(nil),
		(*GetServiceResponse_Postgresql)(nil),
		(*GetServiceResponse_Proxysql)(nil),
		(*GetServiceResponse_Haproxy)(nil),
		(*GetServiceResponse_External)(nil),
	}
	file_inventory_v1_services_proto_msgTypes[12].OneofWrappers = []any{
		(*AddServiceRequest_Mysql)(nil),
		(*AddServiceRequest_Mongodb)(nil),
		(*AddServiceRequest_Postgresql)(nil),
		(*AddServiceRequest_Proxysql)(nil),
		(*AddServiceRequest_Haproxy)(nil),
		(*AddServiceRequest_External)(nil),
	}
	file_inventory_v1_services_proto_msgTypes[13].OneofWrappers = []any{
		(*AddServiceResponse_Mysql)(nil),
		(*AddServiceResponse_Mongodb)(nil),
		(*AddServiceResponse_Postgresql)(nil),
		(*AddServiceResponse_Proxysql)(nil),
		(*AddServiceResponse_Haproxy)(nil),
		(*AddServiceResponse_External)(nil),
	}
	file_inventory_v1_services_proto_msgTypes[22].OneofWrappers = []any{}
	file_inventory_v1_services_proto_msgTypes[23].OneofWrappers = []any{
		(*ChangeServiceResponse_Mysql)(nil),
		(*ChangeServiceResponse_Mongodb)(nil),
		(*ChangeServiceResponse_Postgresql)(nil),
		(*ChangeServiceResponse_Proxysql)(nil),
		(*ChangeServiceResponse_Haproxy)(nil),
		(*ChangeServiceResponse_External)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inventory_v1_services_proto_rawDesc), len(file_inventory_v1_services_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_v1_services_proto_goTypes,
		DependencyIndexes: file_inventory_v1_services_proto_depIdxs,
		EnumInfos:         file_inventory_v1_services_proto_enumTypes,
		MessageInfos:      file_inventory_v1_services_proto_msgTypes,
	}.Build()
	File_inventory_v1_services_proto = out.File
	file_inventory_v1_services_proto_goTypes = nil
	file_inventory_v1_services_proto_depIdxs = nil
}
