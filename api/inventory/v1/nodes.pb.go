// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: inventory/v1/nodes.proto

package inventoryv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeType describes supported Node types.
type NodeType int32

const (
	NodeType_NODE_TYPE_UNSPECIFIED                NodeType = 0
	NodeType_NODE_TYPE_GENERIC_NODE               NodeType = 1
	NodeType_NODE_TYPE_CONTAINER_NODE             NodeType = 2
	NodeType_NODE_TYPE_REMOTE_NODE                NodeType = 3
	NodeType_NODE_TYPE_REMOTE_RDS_NODE            NodeType = 4
	NodeType_NODE_TYPE_REMOTE_AZURE_DATABASE_NODE NodeType = 5
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "NODE_TYPE_GENERIC_NODE",
		2: "NODE_TYPE_CONTAINER_NODE",
		3: "NODE_TYPE_REMOTE_NODE",
		4: "NODE_TYPE_REMOTE_RDS_NODE",
		5: "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE",
	}
	NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED":                0,
		"NODE_TYPE_GENERIC_NODE":               1,
		"NODE_TYPE_CONTAINER_NODE":             2,
		"NODE_TYPE_REMOTE_NODE":                3,
		"NODE_TYPE_REMOTE_RDS_NODE":            4,
		"NODE_TYPE_REMOTE_AZURE_DATABASE_NODE": 5,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_v1_nodes_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_inventory_v1_nodes_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{0}
}

// GenericNode represents a bare metal server or virtual machine.
type GenericNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Linux machine-id.
	MachineId string `protobuf:"bytes,4,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution name and version.
	Distro string `protobuf:"bytes,5,opt,name=distro,proto3" json:"distro,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,6,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,8,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericNode) Reset() {
	*x = GenericNode{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericNode) ProtoMessage() {}

func (x *GenericNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericNode.ProtoReflect.Descriptor instead.
func (*GenericNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{0}
}

func (x *GenericNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GenericNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *GenericNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GenericNode) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *GenericNode) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *GenericNode) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *GenericNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GenericNode) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *GenericNode) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

// ContainerNode represents a Docker container.
type ContainerNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs.
	MachineId string `protobuf:"bytes,4,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerId string `protobuf:"bytes,5,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name.
	ContainerName string `protobuf:"bytes,6,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,7,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,9,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerNode) Reset() {
	*x = ContainerNode{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNode) ProtoMessage() {}

func (x *ContainerNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNode.ProtoReflect.Descriptor instead.
func (*ContainerNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ContainerNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ContainerNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContainerNode) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *ContainerNode) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerNode) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerNode) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *ContainerNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ContainerNode) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *ContainerNode) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

// RemoteNode represents generic remote Node. It's a node where we don't run pmm-agents. Only external exporters can run on Remote Nodes.
type RemoteNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,4,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,6,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,7,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteNode) Reset() {
	*x = RemoteNode{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteNode) ProtoMessage() {}

func (x *RemoteNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteNode.ProtoReflect.Descriptor instead.
func (*RemoteNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RemoteNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *RemoteNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemoteNode) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *RemoteNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteNode) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *RemoteNode) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

// RemoteRDSNode represents remote RDS Node. Agents can't run on Remote RDS Nodes.
type RemoteRDSNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,4,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,6,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,7,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// AWS instance ID.
	InstanceId    string `protobuf:"bytes,8,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteRDSNode) Reset() {
	*x = RemoteRDSNode{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteRDSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRDSNode) ProtoMessage() {}

func (x *RemoteRDSNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteRDSNode.ProtoReflect.Descriptor instead.
func (*RemoteRDSNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{3}
}

func (x *RemoteRDSNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RemoteRDSNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *RemoteRDSNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemoteRDSNode) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *RemoteRDSNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteRDSNode) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *RemoteRDSNode) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *RemoteRDSNode) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// RemoteAzureDatabaseNode represents remote AzureDatabase Node. Agents can't run on Remote AzureDatabase Nodes.
type RemoteAzureDatabaseNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,4,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,6,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,7,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteAzureDatabaseNode) Reset() {
	*x = RemoteAzureDatabaseNode{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAzureDatabaseNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAzureDatabaseNode) ProtoMessage() {}

func (x *RemoteAzureDatabaseNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAzureDatabaseNode.ProtoReflect.Descriptor instead.
func (*RemoteAzureDatabaseNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{4}
}

func (x *RemoteAzureDatabaseNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *RemoteAzureDatabaseNode) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type ListNodesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Return only Nodes with matching Node type.
	NodeType      NodeType `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=inventory.v1.NodeType" json:"node_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{5}
}

func (x *ListNodesRequest) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

type ListNodesResponse struct {
	state               protoimpl.MessageState     `protogen:"open.v1"`
	Generic             []*GenericNode             `protobuf:"bytes,1,rep,name=generic,proto3" json:"generic,omitempty"`
	Container           []*ContainerNode           `protobuf:"bytes,2,rep,name=container,proto3" json:"container,omitempty"`
	Remote              []*RemoteNode              `protobuf:"bytes,3,rep,name=remote,proto3" json:"remote,omitempty"`
	RemoteRds           []*RemoteRDSNode           `protobuf:"bytes,4,rep,name=remote_rds,json=remoteRds,proto3" json:"remote_rds,omitempty"`
	RemoteAzureDatabase []*RemoteAzureDatabaseNode `protobuf:"bytes,5,rep,name=remote_azure_database,json=remoteAzureDatabase,proto3" json:"remote_azure_database,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{6}
}

func (x *ListNodesResponse) GetGeneric() []*GenericNode {
	if x != nil {
		return x.Generic
	}
	return nil
}

func (x *ListNodesResponse) GetContainer() []*ContainerNode {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ListNodesResponse) GetRemote() []*RemoteNode {
	if x != nil {
		return x.Remote
	}
	return nil
}

func (x *ListNodesResponse) GetRemoteRds() []*RemoteRDSNode {
	if x != nil {
		return x.RemoteRds
	}
	return nil
}

func (x *ListNodesResponse) GetRemoteAzureDatabase() []*RemoteAzureDatabaseNode {
	if x != nil {
		return x.RemoteAzureDatabase
	}
	return nil
}

type GetNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId        string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{7}
}

func (x *GetNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GetNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Node:
	//
	//	*GetNodeResponse_Generic
	//	*GetNodeResponse_Container
	//	*GetNodeResponse_Remote
	//	*GetNodeResponse_RemoteRds
	//	*GetNodeResponse_RemoteAzureDatabase
	Node          isGetNodeResponse_Node `protobuf_oneof:"node"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeResponse) Reset() {
	*x = GetNodeResponse{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeResponse) ProtoMessage() {}

func (x *GetNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeResponse.ProtoReflect.Descriptor instead.
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{8}
}

func (x *GetNodeResponse) GetNode() isGetNodeResponse_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *GetNodeResponse) GetGeneric() *GenericNode {
	if x != nil {
		if x, ok := x.Node.(*GetNodeResponse_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

func (x *GetNodeResponse) GetContainer() *ContainerNode {
	if x != nil {
		if x, ok := x.Node.(*GetNodeResponse_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *GetNodeResponse) GetRemote() *RemoteNode {
	if x != nil {
		if x, ok := x.Node.(*GetNodeResponse_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *GetNodeResponse) GetRemoteRds() *RemoteRDSNode {
	if x != nil {
		if x, ok := x.Node.(*GetNodeResponse_RemoteRds); ok {
			return x.RemoteRds
		}
	}
	return nil
}

func (x *GetNodeResponse) GetRemoteAzureDatabase() *RemoteAzureDatabaseNode {
	if x != nil {
		if x, ok := x.Node.(*GetNodeResponse_RemoteAzureDatabase); ok {
			return x.RemoteAzureDatabase
		}
	}
	return nil
}

type isGetNodeResponse_Node interface {
	isGetNodeResponse_Node()
}

type GetNodeResponse_Generic struct {
	Generic *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type GetNodeResponse_Container struct {
	Container *ContainerNode `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

type GetNodeResponse_Remote struct {
	Remote *RemoteNode `protobuf:"bytes,3,opt,name=remote,proto3,oneof"`
}

type GetNodeResponse_RemoteRds struct {
	RemoteRds *RemoteRDSNode `protobuf:"bytes,4,opt,name=remote_rds,json=remoteRds,proto3,oneof"`
}

type GetNodeResponse_RemoteAzureDatabase struct {
	RemoteAzureDatabase *RemoteAzureDatabaseNode `protobuf:"bytes,5,opt,name=remote_azure_database,json=remoteAzureDatabase,proto3,oneof"`
}

func (*GetNodeResponse_Generic) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Container) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Remote) isGetNodeResponse_Node() {}

func (*GetNodeResponse_RemoteRds) isGetNodeResponse_Node() {}

func (*GetNodeResponse_RemoteAzureDatabase) isGetNodeResponse_Node() {}

type AddNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Node:
	//
	//	*AddNodeRequest_Generic
	//	*AddNodeRequest_Container
	//	*AddNodeRequest_Remote
	//	*AddNodeRequest_RemoteRds
	//	*AddNodeRequest_RemoteAzure
	Node          isAddNodeRequest_Node `protobuf_oneof:"node"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddNodeRequest) Reset() {
	*x = AddNodeRequest{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeRequest) ProtoMessage() {}

func (x *AddNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeRequest.ProtoReflect.Descriptor instead.
func (*AddNodeRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{9}
}

func (x *AddNodeRequest) GetNode() isAddNodeRequest_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *AddNodeRequest) GetGeneric() *AddGenericNodeParams {
	if x != nil {
		if x, ok := x.Node.(*AddNodeRequest_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

func (x *AddNodeRequest) GetContainer() *AddContainerNodeParams {
	if x != nil {
		if x, ok := x.Node.(*AddNodeRequest_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *AddNodeRequest) GetRemote() *AddRemoteNodeParams {
	if x != nil {
		if x, ok := x.Node.(*AddNodeRequest_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *AddNodeRequest) GetRemoteRds() *AddRemoteRDSNodeParams {
	if x != nil {
		if x, ok := x.Node.(*AddNodeRequest_RemoteRds); ok {
			return x.RemoteRds
		}
	}
	return nil
}

func (x *AddNodeRequest) GetRemoteAzure() *AddRemoteAzureNodeParams {
	if x != nil {
		if x, ok := x.Node.(*AddNodeRequest_RemoteAzure); ok {
			return x.RemoteAzure
		}
	}
	return nil
}

type isAddNodeRequest_Node interface {
	isAddNodeRequest_Node()
}

type AddNodeRequest_Generic struct {
	Generic *AddGenericNodeParams `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type AddNodeRequest_Container struct {
	Container *AddContainerNodeParams `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

type AddNodeRequest_Remote struct {
	Remote *AddRemoteNodeParams `protobuf:"bytes,3,opt,name=remote,proto3,oneof"`
}

type AddNodeRequest_RemoteRds struct {
	RemoteRds *AddRemoteRDSNodeParams `protobuf:"bytes,4,opt,name=remote_rds,json=remoteRds,proto3,oneof"`
}

type AddNodeRequest_RemoteAzure struct {
	RemoteAzure *AddRemoteAzureNodeParams `protobuf:"bytes,5,opt,name=remote_azure,json=remoteAzure,proto3,oneof"`
}

func (*AddNodeRequest_Generic) isAddNodeRequest_Node() {}

func (*AddNodeRequest_Container) isAddNodeRequest_Node() {}

func (*AddNodeRequest_Remote) isAddNodeRequest_Node() {}

func (*AddNodeRequest_RemoteRds) isAddNodeRequest_Node() {}

func (*AddNodeRequest_RemoteAzure) isAddNodeRequest_Node() {}

type AddNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Node:
	//
	//	*AddNodeResponse_Generic
	//	*AddNodeResponse_Container
	//	*AddNodeResponse_Remote
	//	*AddNodeResponse_RemoteRds
	//	*AddNodeResponse_RemoteAzureDatabase
	Node          isAddNodeResponse_Node `protobuf_oneof:"node"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddNodeResponse) Reset() {
	*x = AddNodeResponse{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeResponse) ProtoMessage() {}

func (x *AddNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeResponse.ProtoReflect.Descriptor instead.
func (*AddNodeResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{10}
}

func (x *AddNodeResponse) GetNode() isAddNodeResponse_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *AddNodeResponse) GetGeneric() *GenericNode {
	if x != nil {
		if x, ok := x.Node.(*AddNodeResponse_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

func (x *AddNodeResponse) GetContainer() *ContainerNode {
	if x != nil {
		if x, ok := x.Node.(*AddNodeResponse_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *AddNodeResponse) GetRemote() *RemoteNode {
	if x != nil {
		if x, ok := x.Node.(*AddNodeResponse_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *AddNodeResponse) GetRemoteRds() *RemoteRDSNode {
	if x != nil {
		if x, ok := x.Node.(*AddNodeResponse_RemoteRds); ok {
			return x.RemoteRds
		}
	}
	return nil
}

func (x *AddNodeResponse) GetRemoteAzureDatabase() *RemoteAzureDatabaseNode {
	if x != nil {
		if x, ok := x.Node.(*AddNodeResponse_RemoteAzureDatabase); ok {
			return x.RemoteAzureDatabase
		}
	}
	return nil
}

type isAddNodeResponse_Node interface {
	isAddNodeResponse_Node()
}

type AddNodeResponse_Generic struct {
	Generic *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type AddNodeResponse_Container struct {
	Container *ContainerNode `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

type AddNodeResponse_Remote struct {
	Remote *RemoteNode `protobuf:"bytes,3,opt,name=remote,proto3,oneof"`
}

type AddNodeResponse_RemoteRds struct {
	RemoteRds *RemoteRDSNode `protobuf:"bytes,4,opt,name=remote_rds,json=remoteRds,proto3,oneof"`
}

type AddNodeResponse_RemoteAzureDatabase struct {
	RemoteAzureDatabase *RemoteAzureDatabaseNode `protobuf:"bytes,5,opt,name=remote_azure_database,json=remoteAzureDatabase,proto3,oneof"`
}

func (*AddNodeResponse_Generic) isAddNodeResponse_Node() {}

func (*AddNodeResponse_Container) isAddNodeResponse_Node() {}

func (*AddNodeResponse_Remote) isAddNodeResponse_Node() {}

func (*AddNodeResponse_RemoteRds) isAddNodeResponse_Node() {}

func (*AddNodeResponse_RemoteAzureDatabase) isAddNodeResponse_Node() {}

type AddGenericNodeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Linux machine-id.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution name and version.
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,5,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,7,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,8,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddGenericNodeParams) Reset() {
	*x = AddGenericNodeParams{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGenericNodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGenericNodeParams) ProtoMessage() {}

func (x *AddGenericNodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGenericNodeParams.ProtoReflect.Descriptor instead.
func (*AddGenericNodeParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{11}
}

func (x *AddGenericNodeParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddGenericNodeParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddGenericNodeParams) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *AddGenericNodeParams) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *AddGenericNodeParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddGenericNodeParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddGenericNodeParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddGenericNodeParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddContainerNodeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerId string `protobuf:"bytes,4,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name.
	ContainerName string `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,6,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,8,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddContainerNodeParams) Reset() {
	*x = AddContainerNodeParams{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddContainerNodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContainerNodeParams) ProtoMessage() {}

func (x *AddContainerNodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContainerNodeParams.ProtoReflect.Descriptor instead.
func (*AddContainerNodeParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{12}
}

func (x *AddContainerNodeParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddContainerNodeParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddContainerNodeParams) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *AddContainerNodeParams) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *AddContainerNodeParams) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *AddContainerNodeParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddContainerNodeParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddContainerNodeParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddContainerNodeParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddRemoteNodeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node address (DNS name or IP).
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,3,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,5,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,6,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRemoteNodeParams) Reset() {
	*x = AddRemoteNodeParams{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRemoteNodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemoteNodeParams) ProtoMessage() {}

func (x *AddRemoteNodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemoteNodeParams.ProtoReflect.Descriptor instead.
func (*AddRemoteNodeParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{13}
}

func (x *AddRemoteNodeParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddRemoteNodeParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddRemoteNodeParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddRemoteNodeParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddRemoteNodeParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddRemoteNodeParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddRemoteRDSNodeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,3,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,5,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,6,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRemoteRDSNodeParams) Reset() {
	*x = AddRemoteRDSNodeParams{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRemoteRDSNodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemoteRDSNodeParams) ProtoMessage() {}

func (x *AddRemoteRDSNodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemoteRDSNodeParams.ProtoReflect.Descriptor instead.
func (*AddRemoteRDSNodeParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{14}
}

func (x *AddRemoteRDSNodeParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddRemoteRDSNodeParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddRemoteRDSNodeParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddRemoteRDSNodeParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddRemoteRDSNodeParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddRemoteRDSNodeParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type AddRemoteAzureNodeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Node model.
	NodeModel string `protobuf:"bytes,3,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone.
	Az string `protobuf:"bytes,5,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels  map[string]string `protobuf:"bytes,6,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRemoteAzureNodeParams) Reset() {
	*x = AddRemoteAzureNodeParams{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRemoteAzureNodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemoteAzureNodeParams) ProtoMessage() {}

func (x *AddRemoteAzureNodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemoteAzureNodeParams.ProtoReflect.Descriptor instead.
func (*AddRemoteAzureNodeParams) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{15}
}

func (x *AddRemoteAzureNodeParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddRemoteAzureNodeParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddRemoteAzureNodeParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddRemoteAzureNodeParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddRemoteAzureNodeParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddRemoteAzureNodeParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type RemoveNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Remove node with all dependencies.
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveNodeRequest) Reset() {
	*x = RemoveNodeRequest{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeRequest) ProtoMessage() {}

func (x *RemoveNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeRequest.ProtoReflect.Descriptor instead.
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RemoveNodeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveNodeResponse) Reset() {
	*x = RemoveNodeResponse{}
	mi := &file_inventory_v1_nodes_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeResponse) ProtoMessage() {}

func (x *RemoveNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_nodes_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeResponse.ProtoReflect.Descriptor instead.
func (*RemoveNodeResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_nodes_proto_rawDescGZIP(), []int{17}
}

var File_inventory_v1_nodes_proto protoreflect.FileDescriptor

const file_inventory_v1_nodes_proto_rawDesc = "" +
	"\n" +
	"\x18inventory/v1/nodes.proto\x12\finventory.v1\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x17validate/validate.proto\"\xee\x02\n" +
	"\vGenericNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x04 \x01(\tR\tmachineId\x12\x16\n" +
	"\x06distro\x18\x05 \x01(\tR\x06distro\x12\x1d\n" +
	"\n" +
	"node_model\x18\x06 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\a \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\b \x01(\tR\x02az\x12P\n" +
	"\rcustom_labels\x18\t \x03(\v2+.inventory.v1.GenericNode.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa4\x03\n" +
	"\rContainerNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x04 \x01(\tR\tmachineId\x12!\n" +
	"\fcontainer_id\x18\x05 \x01(\tR\vcontainerId\x12%\n" +
	"\x0econtainer_name\x18\x06 \x01(\tR\rcontainerName\x12\x1d\n" +
	"\n" +
	"node_model\x18\a \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\b \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\t \x01(\tR\x02az\x12R\n" +
	"\rcustom_labels\x18\n" +
	" \x03(\v2-.inventory.v1.ContainerNode.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb5\x02\n" +
	"\n" +
	"RemoteNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x04 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x06 \x01(\tR\x02az\x12O\n" +
	"\rcustom_labels\x18\a \x03(\v2*.inventory.v1.RemoteNode.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdc\x02\n" +
	"\rRemoteRDSNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x04 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x06 \x01(\tR\x02az\x12R\n" +
	"\rcustom_labels\x18\a \x03(\v2-.inventory.v1.RemoteRDSNode.CustomLabelsEntryR\fcustomLabels\x12\x1f\n" +
	"\vinstance_id\x18\b \x01(\tR\n" +
	"instanceId\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x02\n" +
	"\x17RemoteAzureDatabaseNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x04 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x06 \x01(\tR\x02az\x12\\\n" +
	"\rcustom_labels\x18\a \x03(\v27.inventory.v1.RemoteAzureDatabaseNode.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"G\n" +
	"\x10ListNodesRequest\x123\n" +
	"\tnode_type\x18\x01 \x01(\x0e2\x16.inventory.v1.NodeTypeR\bnodeType\"\xcc\x02\n" +
	"\x11ListNodesResponse\x123\n" +
	"\ageneric\x18\x01 \x03(\v2\x19.inventory.v1.GenericNodeR\ageneric\x129\n" +
	"\tcontainer\x18\x02 \x03(\v2\x1b.inventory.v1.ContainerNodeR\tcontainer\x120\n" +
	"\x06remote\x18\x03 \x03(\v2\x18.inventory.v1.RemoteNodeR\x06remote\x12:\n" +
	"\n" +
	"remote_rds\x18\x04 \x03(\v2\x1b.inventory.v1.RemoteRDSNodeR\tremoteRds\x12Y\n" +
	"\x15remote_azure_database\x18\x05 \x03(\v2%.inventory.v1.RemoteAzureDatabaseNodeR\x13remoteAzureDatabase\"2\n" +
	"\x0eGetNodeRequest\x12 \n" +
	"\anode_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\"\xdc\x02\n" +
	"\x0fGetNodeResponse\x125\n" +
	"\ageneric\x18\x01 \x01(\v2\x19.inventory.v1.GenericNodeH\x00R\ageneric\x12;\n" +
	"\tcontainer\x18\x02 \x01(\v2\x1b.inventory.v1.ContainerNodeH\x00R\tcontainer\x122\n" +
	"\x06remote\x18\x03 \x01(\v2\x18.inventory.v1.RemoteNodeH\x00R\x06remote\x12<\n" +
	"\n" +
	"remote_rds\x18\x04 \x01(\v2\x1b.inventory.v1.RemoteRDSNodeH\x00R\tremoteRds\x12[\n" +
	"\x15remote_azure_database\x18\x05 \x01(\v2%.inventory.v1.RemoteAzureDatabaseNodeH\x00R\x13remoteAzureDatabaseB\x06\n" +
	"\x04node\"\xef\x02\n" +
	"\x0eAddNodeRequest\x12>\n" +
	"\ageneric\x18\x01 \x01(\v2\".inventory.v1.AddGenericNodeParamsH\x00R\ageneric\x12D\n" +
	"\tcontainer\x18\x02 \x01(\v2$.inventory.v1.AddContainerNodeParamsH\x00R\tcontainer\x12;\n" +
	"\x06remote\x18\x03 \x01(\v2!.inventory.v1.AddRemoteNodeParamsH\x00R\x06remote\x12E\n" +
	"\n" +
	"remote_rds\x18\x04 \x01(\v2$.inventory.v1.AddRemoteRDSNodeParamsH\x00R\tremoteRds\x12K\n" +
	"\fremote_azure\x18\x05 \x01(\v2&.inventory.v1.AddRemoteAzureNodeParamsH\x00R\vremoteAzureB\x06\n" +
	"\x04node\"\xdc\x02\n" +
	"\x0fAddNodeResponse\x125\n" +
	"\ageneric\x18\x01 \x01(\v2\x19.inventory.v1.GenericNodeH\x00R\ageneric\x12;\n" +
	"\tcontainer\x18\x02 \x01(\v2\x1b.inventory.v1.ContainerNodeH\x00R\tcontainer\x122\n" +
	"\x06remote\x18\x03 \x01(\v2\x18.inventory.v1.RemoteNodeH\x00R\x06remote\x12<\n" +
	"\n" +
	"remote_rds\x18\x04 \x01(\v2\x1b.inventory.v1.RemoteRDSNodeH\x00R\tremoteRds\x12[\n" +
	"\x15remote_azure_database\x18\x05 \x01(\v2%.inventory.v1.RemoteAzureDatabaseNodeH\x00R\x13remoteAzureDatabaseB\x06\n" +
	"\x04node\"\xf9\x02\n" +
	"\x14AddGenericNodeParams\x12$\n" +
	"\tnode_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bnodeName\x12!\n" +
	"\aaddress\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x03 \x01(\tR\tmachineId\x12\x16\n" +
	"\x06distro\x18\x04 \x01(\tR\x06distro\x12\x1d\n" +
	"\n" +
	"node_model\x18\x05 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x06 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\a \x01(\tR\x02az\x12Y\n" +
	"\rcustom_labels\x18\b \x03(\v24.inventory.v1.AddGenericNodeParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaf\x03\n" +
	"\x16AddContainerNodeParams\x12$\n" +
	"\tnode_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bnodeName\x12!\n" +
	"\aaddress\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x03 \x01(\tR\tmachineId\x12!\n" +
	"\fcontainer_id\x18\x04 \x01(\tR\vcontainerId\x12%\n" +
	"\x0econtainer_name\x18\x05 \x01(\tR\rcontainerName\x12\x1d\n" +
	"\n" +
	"node_model\x18\x06 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\a \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\b \x01(\tR\x02az\x12[\n" +
	"\rcustom_labels\x18\t \x03(\v26.inventory.v1.AddContainerNodeParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x02\n" +
	"\x13AddRemoteNodeParams\x12$\n" +
	"\tnode_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bnodeName\x12!\n" +
	"\aaddress\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x03 \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x05 \x01(\tR\x02az\x12X\n" +
	"\rcustom_labels\x18\x06 \x03(\v23.inventory.v1.AddRemoteNodeParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x02\n" +
	"\x16AddRemoteRDSNodeParams\x12$\n" +
	"\tnode_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bnodeName\x12!\n" +
	"\aaddress\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x03 \x01(\tR\tnodeModel\x12\x1f\n" +
	"\x06region\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06region\x12\x0e\n" +
	"\x02az\x18\x05 \x01(\tR\x02az\x12[\n" +
	"\rcustom_labels\x18\x06 \x03(\v26.inventory.v1.AddRemoteRDSNodeParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd3\x02\n" +
	"\x18AddRemoteAzureNodeParams\x12$\n" +
	"\tnode_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bnodeName\x12!\n" +
	"\aaddress\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1d\n" +
	"\n" +
	"node_model\x18\x03 \x01(\tR\tnodeModel\x12\x1f\n" +
	"\x06region\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06region\x12\x0e\n" +
	"\x02az\x18\x05 \x01(\tR\x02az\x12]\n" +
	"\rcustom_labels\x18\x06 \x03(\v28.inventory.v1.AddRemoteAzureNodeParams.CustomLabelsEntryR\fcustomLabels\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"K\n" +
	"\x11RemoveNodeRequest\x12 \n" +
	"\anode_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nodeId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\x14\n" +
	"\x12RemoveNodeResponse*\xc3\x01\n" +
	"\bNodeType\x12\x19\n" +
	"\x15NODE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16NODE_TYPE_GENERIC_NODE\x10\x01\x12\x1c\n" +
	"\x18NODE_TYPE_CONTAINER_NODE\x10\x02\x12\x19\n" +
	"\x15NODE_TYPE_REMOTE_NODE\x10\x03\x12\x1d\n" +
	"\x19NODE_TYPE_REMOTE_RDS_NODE\x10\x04\x12(\n" +
	"$NODE_TYPE_REMOTE_AZURE_DATABASE_NODE\x10\x052\xe6\x04\n" +
	"\fNodesService\x12\x96\x01\n" +
	"\tListNodes\x12\x1e.inventory.v1.ListNodesRequest\x1a\x1f.inventory.v1.ListNodesResponse\"H\x92A*\x12\n" +
	"List Nodes\x1a\x1cReturns a list of all Nodes.\x82\xd3\xe4\x93\x02\x15\x12\x13/v1/inventory/nodes\x12\x9a\x01\n" +
	"\aGetNode\x12\x1c.inventory.v1.GetNodeRequest\x1a\x1d.inventory.v1.GetNodeResponse\"R\x92A*\x12\n" +
	"Get a Node\x1a\x1cReturns a single Node by ID.\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/inventory/nodes/{node_id}\x12\x83\x01\n" +
	"\aAddNode\x12\x1c.inventory.v1.AddNodeRequest\x1a\x1d.inventory.v1.AddNodeResponse\";\x92A\x1a\x12\n" +
	"Add a Node\x1a\fAdds a Node.\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/inventory/nodes\x12\x99\x01\n" +
	"\n" +
	"RemoveNode\x12\x1f.inventory.v1.RemoveNodeRequest\x1a .inventory.v1.RemoveNodeResponse\"H\x92A \x12\rRemove a Node\x1a\x0fRemoves a Node.\x82\xd3\xe4\x93\x02\x1f*\x1d/v1/inventory/nodes/{node_id}B\xa4\x01\n" +
	"\x10com.inventory.v1B\n" +
	"NodesProtoP\x01Z3github.com/percona/pmm/api/inventory/v1;inventoryv1\xa2\x02\x03IXX\xaa\x02\fInventory.V1\xca\x02\fInventory\\V1\xe2\x02\x18Inventory\\V1\\GPBMetadata\xea\x02\rInventory::V1b\x06proto3"

var (
	file_inventory_v1_nodes_proto_rawDescOnce sync.Once
	file_inventory_v1_nodes_proto_rawDescData []byte
)

func file_inventory_v1_nodes_proto_rawDescGZIP() []byte {
	file_inventory_v1_nodes_proto_rawDescOnce.Do(func() {
		file_inventory_v1_nodes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inventory_v1_nodes_proto_rawDesc), len(file_inventory_v1_nodes_proto_rawDesc)))
	})
	return file_inventory_v1_nodes_proto_rawDescData
}

var (
	file_inventory_v1_nodes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_inventory_v1_nodes_proto_msgTypes  = make([]protoimpl.MessageInfo, 28)
	file_inventory_v1_nodes_proto_goTypes   = []any{
		(NodeType)(0),                    // 0: inventory.v1.NodeType
		(*GenericNode)(nil),              // 1: inventory.v1.GenericNode
		(*ContainerNode)(nil),            // 2: inventory.v1.ContainerNode
		(*RemoteNode)(nil),               // 3: inventory.v1.RemoteNode
		(*RemoteRDSNode)(nil),            // 4: inventory.v1.RemoteRDSNode
		(*RemoteAzureDatabaseNode)(nil),  // 5: inventory.v1.RemoteAzureDatabaseNode
		(*ListNodesRequest)(nil),         // 6: inventory.v1.ListNodesRequest
		(*ListNodesResponse)(nil),        // 7: inventory.v1.ListNodesResponse
		(*GetNodeRequest)(nil),           // 8: inventory.v1.GetNodeRequest
		(*GetNodeResponse)(nil),          // 9: inventory.v1.GetNodeResponse
		(*AddNodeRequest)(nil),           // 10: inventory.v1.AddNodeRequest
		(*AddNodeResponse)(nil),          // 11: inventory.v1.AddNodeResponse
		(*AddGenericNodeParams)(nil),     // 12: inventory.v1.AddGenericNodeParams
		(*AddContainerNodeParams)(nil),   // 13: inventory.v1.AddContainerNodeParams
		(*AddRemoteNodeParams)(nil),      // 14: inventory.v1.AddRemoteNodeParams
		(*AddRemoteRDSNodeParams)(nil),   // 15: inventory.v1.AddRemoteRDSNodeParams
		(*AddRemoteAzureNodeParams)(nil), // 16: inventory.v1.AddRemoteAzureNodeParams
		(*RemoveNodeRequest)(nil),        // 17: inventory.v1.RemoveNodeRequest
		(*RemoveNodeResponse)(nil),       // 18: inventory.v1.RemoveNodeResponse
		nil,                              // 19: inventory.v1.GenericNode.CustomLabelsEntry
		nil,                              // 20: inventory.v1.ContainerNode.CustomLabelsEntry
		nil,                              // 21: inventory.v1.RemoteNode.CustomLabelsEntry
		nil,                              // 22: inventory.v1.RemoteRDSNode.CustomLabelsEntry
		nil,                              // 23: inventory.v1.RemoteAzureDatabaseNode.CustomLabelsEntry
		nil,                              // 24: inventory.v1.AddGenericNodeParams.CustomLabelsEntry
		nil,                              // 25: inventory.v1.AddContainerNodeParams.CustomLabelsEntry
		nil,                              // 26: inventory.v1.AddRemoteNodeParams.CustomLabelsEntry
		nil,                              // 27: inventory.v1.AddRemoteRDSNodeParams.CustomLabelsEntry
		nil,                              // 28: inventory.v1.AddRemoteAzureNodeParams.CustomLabelsEntry
	}
)

var file_inventory_v1_nodes_proto_depIdxs = []int32{
	19, // 0: inventory.v1.GenericNode.custom_labels:type_name -> inventory.v1.GenericNode.CustomLabelsEntry
	20, // 1: inventory.v1.ContainerNode.custom_labels:type_name -> inventory.v1.ContainerNode.CustomLabelsEntry
	21, // 2: inventory.v1.RemoteNode.custom_labels:type_name -> inventory.v1.RemoteNode.CustomLabelsEntry
	22, // 3: inventory.v1.RemoteRDSNode.custom_labels:type_name -> inventory.v1.RemoteRDSNode.CustomLabelsEntry
	23, // 4: inventory.v1.RemoteAzureDatabaseNode.custom_labels:type_name -> inventory.v1.RemoteAzureDatabaseNode.CustomLabelsEntry
	0,  // 5: inventory.v1.ListNodesRequest.node_type:type_name -> inventory.v1.NodeType
	1,  // 6: inventory.v1.ListNodesResponse.generic:type_name -> inventory.v1.GenericNode
	2,  // 7: inventory.v1.ListNodesResponse.container:type_name -> inventory.v1.ContainerNode
	3,  // 8: inventory.v1.ListNodesResponse.remote:type_name -> inventory.v1.RemoteNode
	4,  // 9: inventory.v1.ListNodesResponse.remote_rds:type_name -> inventory.v1.RemoteRDSNode
	5,  // 10: inventory.v1.ListNodesResponse.remote_azure_database:type_name -> inventory.v1.RemoteAzureDatabaseNode
	1,  // 11: inventory.v1.GetNodeResponse.generic:type_name -> inventory.v1.GenericNode
	2,  // 12: inventory.v1.GetNodeResponse.container:type_name -> inventory.v1.ContainerNode
	3,  // 13: inventory.v1.GetNodeResponse.remote:type_name -> inventory.v1.RemoteNode
	4,  // 14: inventory.v1.GetNodeResponse.remote_rds:type_name -> inventory.v1.RemoteRDSNode
	5,  // 15: inventory.v1.GetNodeResponse.remote_azure_database:type_name -> inventory.v1.RemoteAzureDatabaseNode
	12, // 16: inventory.v1.AddNodeRequest.generic:type_name -> inventory.v1.AddGenericNodeParams
	13, // 17: inventory.v1.AddNodeRequest.container:type_name -> inventory.v1.AddContainerNodeParams
	14, // 18: inventory.v1.AddNodeRequest.remote:type_name -> inventory.v1.AddRemoteNodeParams
	15, // 19: inventory.v1.AddNodeRequest.remote_rds:type_name -> inventory.v1.AddRemoteRDSNodeParams
	16, // 20: inventory.v1.AddNodeRequest.remote_azure:type_name -> inventory.v1.AddRemoteAzureNodeParams
	1,  // 21: inventory.v1.AddNodeResponse.generic:type_name -> inventory.v1.GenericNode
	2,  // 22: inventory.v1.AddNodeResponse.container:type_name -> inventory.v1.ContainerNode
	3,  // 23: inventory.v1.AddNodeResponse.remote:type_name -> inventory.v1.RemoteNode
	4,  // 24: inventory.v1.AddNodeResponse.remote_rds:type_name -> inventory.v1.RemoteRDSNode
	5,  // 25: inventory.v1.AddNodeResponse.remote_azure_database:type_name -> inventory.v1.RemoteAzureDatabaseNode
	24, // 26: inventory.v1.AddGenericNodeParams.custom_labels:type_name -> inventory.v1.AddGenericNodeParams.CustomLabelsEntry
	25, // 27: inventory.v1.AddContainerNodeParams.custom_labels:type_name -> inventory.v1.AddContainerNodeParams.CustomLabelsEntry
	26, // 28: inventory.v1.AddRemoteNodeParams.custom_labels:type_name -> inventory.v1.AddRemoteNodeParams.CustomLabelsEntry
	27, // 29: inventory.v1.AddRemoteRDSNodeParams.custom_labels:type_name -> inventory.v1.AddRemoteRDSNodeParams.CustomLabelsEntry
	28, // 30: inventory.v1.AddRemoteAzureNodeParams.custom_labels:type_name -> inventory.v1.AddRemoteAzureNodeParams.CustomLabelsEntry
	6,  // 31: inventory.v1.NodesService.ListNodes:input_type -> inventory.v1.ListNodesRequest
	8,  // 32: inventory.v1.NodesService.GetNode:input_type -> inventory.v1.GetNodeRequest
	10, // 33: inventory.v1.NodesService.AddNode:input_type -> inventory.v1.AddNodeRequest
	17, // 34: inventory.v1.NodesService.RemoveNode:input_type -> inventory.v1.RemoveNodeRequest
	7,  // 35: inventory.v1.NodesService.ListNodes:output_type -> inventory.v1.ListNodesResponse
	9,  // 36: inventory.v1.NodesService.GetNode:output_type -> inventory.v1.GetNodeResponse
	11, // 37: inventory.v1.NodesService.AddNode:output_type -> inventory.v1.AddNodeResponse
	18, // 38: inventory.v1.NodesService.RemoveNode:output_type -> inventory.v1.RemoveNodeResponse
	35, // [35:39] is the sub-list for method output_type
	31, // [31:35] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_inventory_v1_nodes_proto_init() }
func file_inventory_v1_nodes_proto_init() {
	if File_inventory_v1_nodes_proto != nil {
		return
	}
	file_inventory_v1_nodes_proto_msgTypes[8].OneofWrappers = []any{
		(*GetNodeResponse_Generic)(nil),
		(*GetNodeResponse_Container)(nil),
		(*GetNodeResponse_Remote)(nil),
		(*GetNodeResponse_RemoteRds)(nil),
		(*GetNodeResponse_RemoteAzureDatabase)(nil),
	}
	file_inventory_v1_nodes_proto_msgTypes[9].OneofWrappers = []any{
		(*AddNodeRequest_Generic)(nil),
		(*AddNodeRequest_Container)(nil),
		(*AddNodeRequest_Remote)(nil),
		(*AddNodeRequest_RemoteRds)(nil),
		(*AddNodeRequest_RemoteAzure)(nil),
	}
	file_inventory_v1_nodes_proto_msgTypes[10].OneofWrappers = []any{
		(*AddNodeResponse_Generic)(nil),
		(*AddNodeResponse_Container)(nil),
		(*AddNodeResponse_Remote)(nil),
		(*AddNodeResponse_RemoteRds)(nil),
		(*AddNodeResponse_RemoteAzureDatabase)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inventory_v1_nodes_proto_rawDesc), len(file_inventory_v1_nodes_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_v1_nodes_proto_goTypes,
		DependencyIndexes: file_inventory_v1_nodes_proto_depIdxs,
		EnumInfos:         file_inventory_v1_nodes_proto_enumTypes,
		MessageInfos:      file_inventory_v1_nodes_proto_msgTypes,
	}.Build()
	File_inventory_v1_nodes_proto = out.File
	file_inventory_v1_nodes_proto_goTypes = nil
	file_inventory_v1_nodes_proto_depIdxs = nil
}
