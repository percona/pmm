syntax = "proto3";

package inventory;

option go_package = "inventory";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventory/agent_status.proto";

// PMMAgent runs on Generic on Container Node.
message PMMAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2;
  //
  // Status fields below.
  //

  // True if Agent is running and connected to pmm-managed.
  bool connected = 3;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// NodeExporter runs on Generic on Container Node and exposes its metrics.
message NodeExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled or disabled.
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 3;

  // Actual Agent status.
  AgentStatus status = 4;
  // Listen port for scraping metrics.
  uint32 listen_port = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// MySQLdExporter runs on Generic or Container Node and exposes MySQL and AmazonRDSMySQL Service metrics.
message MySQLdExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MySQL username for scraping metrics.
  string username = 4;
  // MySQL password for scraping metrics.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled or disabled.
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 6;

  // Actual Agent status.
  AgentStatus status = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// RDSExporter runs on Generic or Container Node and exposes RemoteAmazonRDS Node and AmazonRDSMySQL Service metrics.
message RDSExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2;
  // A list of Service identifiers (Node identifiers are extracted from Services).
  repeated string service_ids = 3;
  // TODO AWS credentials

  //
  // Status fields below.
  //

  // Desired Agent status: enabled or disabled.
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 4;

  // Actual Agent status.
  AgentStatus status = 5;
  // Listen port for scraping metrics.
  uint32 listen_port = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// ExternalExporter does not run on any Inventory Node.
message ExternalExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // URL for scraping metrics.
  string metrics_url = 2;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled or disabled.
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 3;

  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
message MongoDBExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MongoDB URI for scraping metrics. (See https://docs.mongodb.com/manual/reference/connection-string/)
  string connection_string = 4;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled or disabled.
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 6;

  // Actual Agent status.
  AgentStatus status = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
message QANMySQLPerfSchemaAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
}

// List

message ListAgentsRequest {
  oneof filter {
    // Return only Agents started by this pmm-agent.
    string pmm_agent_id = 1;
    // Return only Agents that provide insights for that Node.
    string node_id = 2;
    // Return only Agents that provide insights for that Service.
    string service_id = 3;
  }
}

message ListAgentsResponse {
  repeated PMMAgent pmm_agent = 1;
  repeated NodeExporter node_exporter = 2;
  repeated MySQLdExporter mysqld_exporter = 3;
  repeated RDSExporter rds_exporter = 4;
  repeated ExternalExporter external_exporter = 5;
  repeated MongoDBExporter mongodb_exporter = 6;
  repeated QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 7;
}

// Get

message GetAgentRequest {
  // Unique randomly generated instance identifier.
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetAgentResponse {
  oneof agent {
    PMMAgent pmm_agent = 1;
    NodeExporter node_exporter = 2;
    MySQLdExporter mysqld_exporter = 3;
    RDSExporter rds_exporter = 4;
    ExternalExporter external_exporter = 5;
    MongoDBExporter mongodb_exporter = 6;
    QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 7;
  }
}

// Add/Change PMMAgent

message AddPMMAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddPMMAgentResponse {
  PMMAgent pmm_agent = 1;
}

// TODO ChangePMMAgentRequest https://jira.percona.com/browse/PMM-3470

// Add/Change NodeExporter

message AddNodeExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddNodeExporterResponse {
  NodeExporter node_exporter = 1;
}

// TODO ChangeNodeExporterRequest https://jira.percona.com/browse/PMM-3470

// Add/Change MySQLdExporter

message AddMySQLdExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for scraping metrics.
  string username = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for scraping metrics.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddMySQLdExporterResponse {
  MySQLdExporter mysqld_exporter = 1;
}

// TODO ChangeMySQLdExporterRequest https://jira.percona.com/browse/PMM-3470

// Add/Change RDSExporter

message AddRDSExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // A list of Service identifiers (Node identifiers are extracted from Services).
  repeated string service_ids = 3;
  //
  // TODO AWS credentials
  //

  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddRDSExporterResponse {
  RDSExporter rds_exporter = 1;
}

// TODO ChangeRDSExporterRequest https://jira.percona.com/browse/PMM-3470

// Add/Change ExternalExporter

message AddExternalExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // URL for scraping metrics.
  string metrics_url = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddExternalExporterResponse {
  ExternalExporter external_exporter = 1;
}

// TODO ChangeExternalExporterRequest https://jira.percona.com/browse/PMM-3470

// Add/Change MongoDBExporter

message AddMongoDBExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MongoDB URI for scraping metrics. (See: https://docs.mongodb.com/manual/reference/connection-string/)
  string connection_string = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddMongoDBExporterResponse {
  MongoDBExporter mongodb_exporter = 1;
}

// TODO ChangeMongoDBExporterResponse https://jira.percona.com/browse/PMM-3470

// Add/Change QANMySQLPerfSchemaAgent

message AddQANMySQLPerfSchemaAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // pmm-agent identifier where this instance runs.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message AddQANMySQLPerfSchemaAgentResponse {
  QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 1;
}

// TODO ChangeQANMySQLPerfSchemaAgentResponse https://jira.percona.com/browse/PMM-3470

// Remove

message RemoveAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message RemoveAgentResponse {}

// Agents service provides public methods for managing Agents.
service Agents {
  // ListAgents returns a list of all Agents.
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/List"
      body: "*"
    };
  }
  // GetAgent returns a single Agent by ID.
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Get"
      body: "*"
    };
  }
  // AddPMMAgent adds pmm-agent Agent.
  rpc AddPMMAgent(AddPMMAgentRequest) returns (AddPMMAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddPMMAgent"
      body: "*"
    };
  }
  // AddNodeExporter adds node_exporter Agent.
  rpc AddNodeExporter(AddNodeExporterRequest) returns (AddNodeExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddNodeExporter"
      body: "*"
    };
  }
  // AddMySQLdExporter adds mysqld_exporter Agent.
  rpc AddMySQLdExporter(AddMySQLdExporterRequest) returns (AddMySQLdExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMySQLdExporter"
      body: "*"
    };
  }
  // AddRDSExporter adds rds_exporter Agent.
  rpc AddRDSExporter(AddRDSExporterRequest) returns (AddRDSExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddRDSExporter"
      body: "*"
    };
  }
  // AddExternalExporter adds External Agent.
  rpc AddExternalExporter(AddExternalExporterRequest) returns (AddExternalExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddExternalExporter"
      body: "*"
    };
  }
  // AddMongoDBExporter adds mongodb_exporter Agent.
  rpc AddMongoDBExporter(AddMongoDBExporterRequest) returns (AddMongoDBExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMongoDBExporter"
      body: "*"
    };
  }
  // AddQANMySQLPerfSchemaAgent adds mongodb_exporter Agent.
  rpc AddQANMySQLPerfSchemaAgent(AddQANMySQLPerfSchemaAgentRequest) returns (AddQANMySQLPerfSchemaAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMySQLPerfSchemaAgent"
      body: "*"
    };
  }
  // RemoveAgent removes Agent.
  rpc RemoveAgent(RemoveAgentRequest) returns (RemoveAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Remove"
      body: "*"
    };
  }
}
