// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory/nodes.proto

package inventory

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GenericNode represents a bare metal server or virtual machine.
type GenericNode struct {
	// Unique randomly generated instance identifier, can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name, can be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id. Can't be changed. Must be unique across all Generic Nodes if specified.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution (if any). Can be changed.
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Linux distribution version (if any). Can be changed.
	DistroVersion string `protobuf:"bytes,5,opt,name=distro_version,json=distroVersion,proto3" json:"distro_version,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME.
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericNode) Reset()         { *m = GenericNode{} }
func (m *GenericNode) String() string { return proto.CompactTextString(m) }
func (*GenericNode) ProtoMessage()    {}
func (*GenericNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{0}
}
func (m *GenericNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericNode.Unmarshal(m, b)
}
func (m *GenericNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericNode.Marshal(b, m, deterministic)
}
func (dst *GenericNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericNode.Merge(dst, src)
}
func (m *GenericNode) XXX_Size() int {
	return xxx_messageInfo_GenericNode.Size(m)
}
func (m *GenericNode) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericNode.DiscardUnknown(m)
}

var xxx_messageInfo_GenericNode proto.InternalMessageInfo

func (m *GenericNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *GenericNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *GenericNode) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *GenericNode) GetDistro() string {
	if m != nil {
		return m.Distro
	}
	return ""
}

func (m *GenericNode) GetDistroVersion() string {
	if m != nil {
		return m.DistroVersion
	}
	return ""
}

func (m *GenericNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *GenericNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// ContainerNode represents a Docker container.
type ContainerNode struct {
	// Unique randomly generated instance identifier, can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name, can be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs. If defined, Generic Node with that machine_id must exist. Can't be changed.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Docker container identifier. If specified, must be a unique Docker container identifier. Can't be changed.
	DockerContainerId string `protobuf:"bytes,4,opt,name=docker_container_id,json=dockerContainerId,proto3" json:"docker_container_id,omitempty"`
	// Container name. Can be changed.
	DockerContainerName string `protobuf:"bytes,5,opt,name=docker_container_name,json=dockerContainerName,proto3" json:"docker_container_name,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ContainerNode) Reset()         { *m = ContainerNode{} }
func (m *ContainerNode) String() string { return proto.CompactTextString(m) }
func (*ContainerNode) ProtoMessage()    {}
func (*ContainerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{1}
}
func (m *ContainerNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerNode.Unmarshal(m, b)
}
func (m *ContainerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerNode.Marshal(b, m, deterministic)
}
func (dst *ContainerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNode.Merge(dst, src)
}
func (m *ContainerNode) XXX_Size() int {
	return xxx_messageInfo_ContainerNode.Size(m)
}
func (m *ContainerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNode.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNode proto.InternalMessageInfo

func (m *ContainerNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ContainerNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ContainerNode) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *ContainerNode) GetDockerContainerId() string {
	if m != nil {
		return m.DockerContainerId
	}
	return ""
}

func (m *ContainerNode) GetDockerContainerName() string {
	if m != nil {
		return m.DockerContainerName
	}
	return ""
}

func (m *ContainerNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

// RemoteNode represents generic remote Node. Agents can't run on Remote Nodes.
type RemoteNode struct {
	// Unique randomly generated instance identifier, can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name, can be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoteNode) Reset()         { *m = RemoteNode{} }
func (m *RemoteNode) String() string { return proto.CompactTextString(m) }
func (*RemoteNode) ProtoMessage()    {}
func (*RemoteNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{2}
}
func (m *RemoteNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteNode.Unmarshal(m, b)
}
func (m *RemoteNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteNode.Marshal(b, m, deterministic)
}
func (dst *RemoteNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteNode.Merge(dst, src)
}
func (m *RemoteNode) XXX_Size() int {
	return xxx_messageInfo_RemoteNode.Size(m)
}
func (m *RemoteNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteNode proto.InternalMessageInfo

func (m *RemoteNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RemoteNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RemoteNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

// RemoteAmazonRDSNode represents a Remote Node for Amazon RDS. Agents can't run on Remote Nodes.
type RemoteAmazonRDSNode struct {
	// Unique randomly generated instance identifier, can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name, can be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region. Can be changed.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Unique across all RemoteAmazonRDS Nodes in combination with instance. Can't be changed.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoteAmazonRDSNode) Reset()         { *m = RemoteAmazonRDSNode{} }
func (m *RemoteAmazonRDSNode) String() string { return proto.CompactTextString(m) }
func (*RemoteAmazonRDSNode) ProtoMessage()    {}
func (*RemoteAmazonRDSNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{3}
}
func (m *RemoteAmazonRDSNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteAmazonRDSNode.Unmarshal(m, b)
}
func (m *RemoteAmazonRDSNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteAmazonRDSNode.Marshal(b, m, deterministic)
}
func (dst *RemoteAmazonRDSNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteAmazonRDSNode.Merge(dst, src)
}
func (m *RemoteAmazonRDSNode) XXX_Size() int {
	return xxx_messageInfo_RemoteAmazonRDSNode.Size(m)
}
func (m *RemoteAmazonRDSNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteAmazonRDSNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteAmazonRDSNode proto.InternalMessageInfo

func (m *RemoteAmazonRDSNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type ListNodesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNodesRequest) Reset()         { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()    {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{4}
}
func (m *ListNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodesRequest.Unmarshal(m, b)
}
func (m *ListNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodesRequest.Marshal(b, m, deterministic)
}
func (dst *ListNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesRequest.Merge(dst, src)
}
func (m *ListNodesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNodesRequest.Size(m)
}
func (m *ListNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesRequest proto.InternalMessageInfo

type ListNodesResponse struct {
	Generic              []*GenericNode         `protobuf:"bytes,1,rep,name=generic,proto3" json:"generic,omitempty"`
	Container            []*ContainerNode       `protobuf:"bytes,2,rep,name=container,proto3" json:"container,omitempty"`
	Remote               []*RemoteNode          `protobuf:"bytes,3,rep,name=remote,proto3" json:"remote,omitempty"`
	RemoteAmazonRds      []*RemoteAmazonRDSNode `protobuf:"bytes,4,rep,name=remote_amazon_rds,json=remoteAmazonRds,proto3" json:"remote_amazon_rds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListNodesResponse) Reset()         { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()    {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{5}
}
func (m *ListNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodesResponse.Unmarshal(m, b)
}
func (m *ListNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodesResponse.Marshal(b, m, deterministic)
}
func (dst *ListNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesResponse.Merge(dst, src)
}
func (m *ListNodesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNodesResponse.Size(m)
}
func (m *ListNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesResponse proto.InternalMessageInfo

func (m *ListNodesResponse) GetGeneric() []*GenericNode {
	if m != nil {
		return m.Generic
	}
	return nil
}

func (m *ListNodesResponse) GetContainer() []*ContainerNode {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ListNodesResponse) GetRemote() []*RemoteNode {
	if m != nil {
		return m.Remote
	}
	return nil
}

func (m *ListNodesResponse) GetRemoteAmazonRds() []*RemoteAmazonRDSNode {
	if m != nil {
		return m.RemoteAmazonRds
	}
	return nil
}

type GetNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeRequest) Reset()         { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()    {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{6}
}
func (m *GetNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeRequest.Unmarshal(m, b)
}
func (m *GetNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeRequest.Marshal(b, m, deterministic)
}
func (dst *GetNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeRequest.Merge(dst, src)
}
func (m *GetNodeRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeRequest.Size(m)
}
func (m *GetNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeRequest proto.InternalMessageInfo

func (m *GetNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type GetNodeResponse struct {
	// Types that are valid to be assigned to Node:
	//	*GetNodeResponse_Generic
	//	*GetNodeResponse_Container
	//	*GetNodeResponse_Remote
	//	*GetNodeResponse_RemoteAmazonRds
	Node                 isGetNodeResponse_Node `protobuf_oneof:"node"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNodeResponse) Reset()         { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()    {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{7}
}
func (m *GetNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeResponse.Unmarshal(m, b)
}
func (m *GetNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeResponse.Marshal(b, m, deterministic)
}
func (dst *GetNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeResponse.Merge(dst, src)
}
func (m *GetNodeResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeResponse.Size(m)
}
func (m *GetNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeResponse proto.InternalMessageInfo

type isGetNodeResponse_Node interface {
	isGetNodeResponse_Node()
}

type GetNodeResponse_Generic struct {
	Generic *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type GetNodeResponse_Container struct {
	Container *ContainerNode `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

type GetNodeResponse_Remote struct {
	Remote *RemoteNode `protobuf:"bytes,3,opt,name=remote,proto3,oneof"`
}

type GetNodeResponse_RemoteAmazonRds struct {
	RemoteAmazonRds *RemoteAmazonRDSNode `protobuf:"bytes,4,opt,name=remote_amazon_rds,json=remoteAmazonRds,proto3,oneof"`
}

func (*GetNodeResponse_Generic) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Container) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Remote) isGetNodeResponse_Node() {}

func (*GetNodeResponse_RemoteAmazonRds) isGetNodeResponse_Node() {}

func (m *GetNodeResponse) GetNode() isGetNodeResponse_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GetNodeResponse) GetGeneric() *GenericNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *GetNodeResponse) GetContainer() *ContainerNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Container); ok {
		return x.Container
	}
	return nil
}

func (m *GetNodeResponse) GetRemote() *RemoteNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Remote); ok {
		return x.Remote
	}
	return nil
}

func (m *GetNodeResponse) GetRemoteAmazonRds() *RemoteAmazonRDSNode {
	if x, ok := m.GetNode().(*GetNodeResponse_RemoteAmazonRds); ok {
		return x.RemoteAmazonRds
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetNodeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetNodeResponse_OneofMarshaler, _GetNodeResponse_OneofUnmarshaler, _GetNodeResponse_OneofSizer, []interface{}{
		(*GetNodeResponse_Generic)(nil),
		(*GetNodeResponse_Container)(nil),
		(*GetNodeResponse_Remote)(nil),
		(*GetNodeResponse_RemoteAmazonRds)(nil),
	}
}

func _GetNodeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetNodeResponse)
	// node
	switch x := m.Node.(type) {
	case *GetNodeResponse_Generic:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Generic); err != nil {
			return err
		}
	case *GetNodeResponse_Container:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Container); err != nil {
			return err
		}
	case *GetNodeResponse_Remote:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Remote); err != nil {
			return err
		}
	case *GetNodeResponse_RemoteAmazonRds:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteAmazonRds); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetNodeResponse.Node has unexpected type %T", x)
	}
	return nil
}

func _GetNodeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetNodeResponse)
	switch tag {
	case 1: // node.generic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericNode)
		err := b.DecodeMessage(msg)
		m.Node = &GetNodeResponse_Generic{msg}
		return true, err
	case 2: // node.container
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerNode)
		err := b.DecodeMessage(msg)
		m.Node = &GetNodeResponse_Container{msg}
		return true, err
	case 3: // node.remote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoteNode)
		err := b.DecodeMessage(msg)
		m.Node = &GetNodeResponse_Remote{msg}
		return true, err
	case 4: // node.remote_amazon_rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoteAmazonRDSNode)
		err := b.DecodeMessage(msg)
		m.Node = &GetNodeResponse_RemoteAmazonRds{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetNodeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetNodeResponse)
	// node
	switch x := m.Node.(type) {
	case *GetNodeResponse_Generic:
		s := proto.Size(x.Generic)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetNodeResponse_Container:
		s := proto.Size(x.Container)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetNodeResponse_Remote:
		s := proto.Size(x.Remote)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetNodeResponse_RemoteAmazonRds:
		s := proto.Size(x.RemoteAmazonRds)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddGenericNodeRequest struct {
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id. Must be unique across all Generic Nodes if specified.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution (if any).
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Linux distribution version (if any).
	DistroVersion string `protobuf:"bytes,5,opt,name=distro_version,json=distroVersion,proto3" json:"distro_version,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME.
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddGenericNodeRequest) Reset()         { *m = AddGenericNodeRequest{} }
func (m *AddGenericNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddGenericNodeRequest) ProtoMessage()    {}
func (*AddGenericNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{8}
}
func (m *AddGenericNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddGenericNodeRequest.Unmarshal(m, b)
}
func (m *AddGenericNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddGenericNodeRequest.Marshal(b, m, deterministic)
}
func (dst *AddGenericNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGenericNodeRequest.Merge(dst, src)
}
func (m *AddGenericNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddGenericNodeRequest.Size(m)
}
func (m *AddGenericNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGenericNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGenericNodeRequest proto.InternalMessageInfo

func (m *AddGenericNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddGenericNodeRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *AddGenericNodeRequest) GetDistro() string {
	if m != nil {
		return m.Distro
	}
	return ""
}

func (m *AddGenericNodeRequest) GetDistroVersion() string {
	if m != nil {
		return m.DistroVersion
	}
	return ""
}

func (m *AddGenericNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddGenericNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddGenericNodeResponse struct {
	Generic              *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3" json:"generic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddGenericNodeResponse) Reset()         { *m = AddGenericNodeResponse{} }
func (m *AddGenericNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddGenericNodeResponse) ProtoMessage()    {}
func (*AddGenericNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{9}
}
func (m *AddGenericNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddGenericNodeResponse.Unmarshal(m, b)
}
func (m *AddGenericNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddGenericNodeResponse.Marshal(b, m, deterministic)
}
func (dst *AddGenericNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGenericNodeResponse.Merge(dst, src)
}
func (m *AddGenericNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddGenericNodeResponse.Size(m)
}
func (m *AddGenericNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGenericNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGenericNodeResponse proto.InternalMessageInfo

func (m *AddGenericNodeResponse) GetGeneric() *GenericNode {
	if m != nil {
		return m.Generic
	}
	return nil
}

type ChangeGenericNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux distribution (if any).
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Linux distribution version (if any).
	DistroVersion string `protobuf:"bytes,5,opt,name=distro_version,json=distroVersion,proto3" json:"distro_version,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME.
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeGenericNodeRequest) Reset()         { *m = ChangeGenericNodeRequest{} }
func (m *ChangeGenericNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeGenericNodeRequest) ProtoMessage()    {}
func (*ChangeGenericNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{10}
}
func (m *ChangeGenericNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeGenericNodeRequest.Unmarshal(m, b)
}
func (m *ChangeGenericNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeGenericNodeRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeGenericNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeGenericNodeRequest.Merge(dst, src)
}
func (m *ChangeGenericNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeGenericNodeRequest.Size(m)
}
func (m *ChangeGenericNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeGenericNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeGenericNodeRequest proto.InternalMessageInfo

func (m *ChangeGenericNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ChangeGenericNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ChangeGenericNodeRequest) GetDistro() string {
	if m != nil {
		return m.Distro
	}
	return ""
}

func (m *ChangeGenericNodeRequest) GetDistroVersion() string {
	if m != nil {
		return m.DistroVersion
	}
	return ""
}

func (m *ChangeGenericNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *ChangeGenericNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ChangeGenericNodeResponse struct {
	Generic              *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3" json:"generic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChangeGenericNodeResponse) Reset()         { *m = ChangeGenericNodeResponse{} }
func (m *ChangeGenericNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeGenericNodeResponse) ProtoMessage()    {}
func (*ChangeGenericNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{11}
}
func (m *ChangeGenericNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeGenericNodeResponse.Unmarshal(m, b)
}
func (m *ChangeGenericNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeGenericNodeResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeGenericNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeGenericNodeResponse.Merge(dst, src)
}
func (m *ChangeGenericNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeGenericNodeResponse.Size(m)
}
func (m *ChangeGenericNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeGenericNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeGenericNodeResponse proto.InternalMessageInfo

func (m *ChangeGenericNodeResponse) GetGeneric() *GenericNode {
	if m != nil {
		return m.Generic
	}
	return nil
}

type AddContainerNodeRequest struct {
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs. If defined, Generic Node with that machine_id must exist.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Docker container identifier. If specified, must be a unique Docker container identifier.
	DockerContainerId string `protobuf:"bytes,4,opt,name=docker_container_id,json=dockerContainerId,proto3" json:"docker_container_id,omitempty"`
	// Container name.
	DockerContainerName string `protobuf:"bytes,5,opt,name=docker_container_name,json=dockerContainerName,proto3" json:"docker_container_name,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddContainerNodeRequest) Reset()         { *m = AddContainerNodeRequest{} }
func (m *AddContainerNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddContainerNodeRequest) ProtoMessage()    {}
func (*AddContainerNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{12}
}
func (m *AddContainerNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddContainerNodeRequest.Unmarshal(m, b)
}
func (m *AddContainerNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddContainerNodeRequest.Marshal(b, m, deterministic)
}
func (dst *AddContainerNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddContainerNodeRequest.Merge(dst, src)
}
func (m *AddContainerNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddContainerNodeRequest.Size(m)
}
func (m *AddContainerNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddContainerNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddContainerNodeRequest proto.InternalMessageInfo

func (m *AddContainerNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddContainerNodeRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *AddContainerNodeRequest) GetDockerContainerId() string {
	if m != nil {
		return m.DockerContainerId
	}
	return ""
}

func (m *AddContainerNodeRequest) GetDockerContainerName() string {
	if m != nil {
		return m.DockerContainerName
	}
	return ""
}

func (m *AddContainerNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type AddContainerNodeResponse struct {
	Container            *ContainerNode `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddContainerNodeResponse) Reset()         { *m = AddContainerNodeResponse{} }
func (m *AddContainerNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddContainerNodeResponse) ProtoMessage()    {}
func (*AddContainerNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{13}
}
func (m *AddContainerNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddContainerNodeResponse.Unmarshal(m, b)
}
func (m *AddContainerNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddContainerNodeResponse.Marshal(b, m, deterministic)
}
func (dst *AddContainerNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddContainerNodeResponse.Merge(dst, src)
}
func (m *AddContainerNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddContainerNodeResponse.Size(m)
}
func (m *AddContainerNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddContainerNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddContainerNodeResponse proto.InternalMessageInfo

func (m *AddContainerNodeResponse) GetContainer() *ContainerNode {
	if m != nil {
		return m.Container
	}
	return nil
}

type ChangeContainerNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Container name.
	DockerContainerName string `protobuf:"bytes,5,opt,name=docker_container_name,json=dockerContainerName,proto3" json:"docker_container_name,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChangeContainerNodeRequest) Reset()         { *m = ChangeContainerNodeRequest{} }
func (m *ChangeContainerNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeContainerNodeRequest) ProtoMessage()    {}
func (*ChangeContainerNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{14}
}
func (m *ChangeContainerNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeContainerNodeRequest.Unmarshal(m, b)
}
func (m *ChangeContainerNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeContainerNodeRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeContainerNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeContainerNodeRequest.Merge(dst, src)
}
func (m *ChangeContainerNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeContainerNodeRequest.Size(m)
}
func (m *ChangeContainerNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeContainerNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeContainerNodeRequest proto.InternalMessageInfo

func (m *ChangeContainerNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ChangeContainerNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ChangeContainerNodeRequest) GetDockerContainerName() string {
	if m != nil {
		return m.DockerContainerName
	}
	return ""
}

func (m *ChangeContainerNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type ChangeContainerNodeResponse struct {
	Container            *ContainerNode `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChangeContainerNodeResponse) Reset()         { *m = ChangeContainerNodeResponse{} }
func (m *ChangeContainerNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeContainerNodeResponse) ProtoMessage()    {}
func (*ChangeContainerNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{15}
}
func (m *ChangeContainerNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeContainerNodeResponse.Unmarshal(m, b)
}
func (m *ChangeContainerNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeContainerNodeResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeContainerNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeContainerNodeResponse.Merge(dst, src)
}
func (m *ChangeContainerNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeContainerNodeResponse.Size(m)
}
func (m *ChangeContainerNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeContainerNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeContainerNodeResponse proto.InternalMessageInfo

func (m *ChangeContainerNodeResponse) GetContainer() *ContainerNode {
	if m != nil {
		return m.Container
	}
	return nil
}

type AddRemoteNodeRequest struct {
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddRemoteNodeRequest) Reset()         { *m = AddRemoteNodeRequest{} }
func (m *AddRemoteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddRemoteNodeRequest) ProtoMessage()    {}
func (*AddRemoteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{16}
}
func (m *AddRemoteNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteNodeRequest.Unmarshal(m, b)
}
func (m *AddRemoteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteNodeRequest.Marshal(b, m, deterministic)
}
func (dst *AddRemoteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteNodeRequest.Merge(dst, src)
}
func (m *AddRemoteNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddRemoteNodeRequest.Size(m)
}
func (m *AddRemoteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteNodeRequest proto.InternalMessageInfo

func (m *AddRemoteNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddRemoteNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type AddRemoteNodeResponse struct {
	Remote               *RemoteNode `protobuf:"bytes,1,opt,name=remote,proto3" json:"remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddRemoteNodeResponse) Reset()         { *m = AddRemoteNodeResponse{} }
func (m *AddRemoteNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddRemoteNodeResponse) ProtoMessage()    {}
func (*AddRemoteNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{17}
}
func (m *AddRemoteNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteNodeResponse.Unmarshal(m, b)
}
func (m *AddRemoteNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteNodeResponse.Marshal(b, m, deterministic)
}
func (dst *AddRemoteNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteNodeResponse.Merge(dst, src)
}
func (m *AddRemoteNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddRemoteNodeResponse.Size(m)
}
func (m *AddRemoteNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteNodeResponse proto.InternalMessageInfo

func (m *AddRemoteNodeResponse) GetRemote() *RemoteNode {
	if m != nil {
		return m.Remote
	}
	return nil
}

type ChangeRemoteNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChangeRemoteNodeRequest) Reset()         { *m = ChangeRemoteNodeRequest{} }
func (m *ChangeRemoteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeRemoteNodeRequest) ProtoMessage()    {}
func (*ChangeRemoteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{18}
}
func (m *ChangeRemoteNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeRemoteNodeRequest.Unmarshal(m, b)
}
func (m *ChangeRemoteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeRemoteNodeRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeRemoteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRemoteNodeRequest.Merge(dst, src)
}
func (m *ChangeRemoteNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeRemoteNodeRequest.Size(m)
}
func (m *ChangeRemoteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRemoteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRemoteNodeRequest proto.InternalMessageInfo

func (m *ChangeRemoteNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ChangeRemoteNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ChangeRemoteNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type ChangeRemoteNodeResponse struct {
	Remote               *RemoteNode `protobuf:"bytes,1,opt,name=remote,proto3" json:"remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChangeRemoteNodeResponse) Reset()         { *m = ChangeRemoteNodeResponse{} }
func (m *ChangeRemoteNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeRemoteNodeResponse) ProtoMessage()    {}
func (*ChangeRemoteNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{19}
}
func (m *ChangeRemoteNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeRemoteNodeResponse.Unmarshal(m, b)
}
func (m *ChangeRemoteNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeRemoteNodeResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeRemoteNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRemoteNodeResponse.Merge(dst, src)
}
func (m *ChangeRemoteNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeRemoteNodeResponse.Size(m)
}
func (m *ChangeRemoteNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRemoteNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRemoteNodeResponse proto.InternalMessageInfo

func (m *ChangeRemoteNodeResponse) GetRemote() *RemoteNode {
	if m != nil {
		return m.Remote
	}
	return nil
}

type AddRemoteAmazonRDSNodeRequest struct {
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Unique across all RemoteAmazonRDS Nodes in combination with instance.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddRemoteAmazonRDSNodeRequest) Reset()         { *m = AddRemoteAmazonRDSNodeRequest{} }
func (m *AddRemoteAmazonRDSNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddRemoteAmazonRDSNodeRequest) ProtoMessage()    {}
func (*AddRemoteAmazonRDSNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{20}
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Unmarshal(m, b)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Marshal(b, m, deterministic)
}
func (dst *AddRemoteAmazonRDSNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Merge(dst, src)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Size(m)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteAmazonRDSNodeRequest proto.InternalMessageInfo

func (m *AddRemoteAmazonRDSNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type AddRemoteAmazonRDSNodeResponse struct {
	RemoteAmazonRds      *RemoteAmazonRDSNode `protobuf:"bytes,1,opt,name=remote_amazon_rds,json=remoteAmazonRds,proto3" json:"remote_amazon_rds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AddRemoteAmazonRDSNodeResponse) Reset()         { *m = AddRemoteAmazonRDSNodeResponse{} }
func (m *AddRemoteAmazonRDSNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddRemoteAmazonRDSNodeResponse) ProtoMessage()    {}
func (*AddRemoteAmazonRDSNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{21}
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Unmarshal(m, b)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Marshal(b, m, deterministic)
}
func (dst *AddRemoteAmazonRDSNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Merge(dst, src)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Size(m)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteAmazonRDSNodeResponse proto.InternalMessageInfo

func (m *AddRemoteAmazonRDSNodeResponse) GetRemoteAmazonRds() *RemoteAmazonRDSNode {
	if m != nil {
		return m.RemoteAmazonRds
	}
	return nil
}

type ChangeRemoteAmazonRDSNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChangeRemoteAmazonRDSNodeRequest) Reset()         { *m = ChangeRemoteAmazonRDSNodeRequest{} }
func (m *ChangeRemoteAmazonRDSNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeRemoteAmazonRDSNodeRequest) ProtoMessage()    {}
func (*ChangeRemoteAmazonRDSNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{22}
}
func (m *ChangeRemoteAmazonRDSNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest.Unmarshal(m, b)
}
func (m *ChangeRemoteAmazonRDSNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeRemoteAmazonRDSNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest.Merge(dst, src)
}
func (m *ChangeRemoteAmazonRDSNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest.Size(m)
}
func (m *ChangeRemoteAmazonRDSNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRemoteAmazonRDSNodeRequest proto.InternalMessageInfo

func (m *ChangeRemoteAmazonRDSNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ChangeRemoteAmazonRDSNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ChangeRemoteAmazonRDSNodeRequest) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *ChangeRemoteAmazonRDSNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type ChangeRemoteAmazonRDSNodeResponse struct {
	RemoteAmazonRds      *RemoteAmazonRDSNode `protobuf:"bytes,1,opt,name=remote_amazon_rds,json=remoteAmazonRds,proto3" json:"remote_amazon_rds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChangeRemoteAmazonRDSNodeResponse) Reset()         { *m = ChangeRemoteAmazonRDSNodeResponse{} }
func (m *ChangeRemoteAmazonRDSNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeRemoteAmazonRDSNodeResponse) ProtoMessage()    {}
func (*ChangeRemoteAmazonRDSNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{23}
}
func (m *ChangeRemoteAmazonRDSNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse.Unmarshal(m, b)
}
func (m *ChangeRemoteAmazonRDSNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeRemoteAmazonRDSNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse.Merge(dst, src)
}
func (m *ChangeRemoteAmazonRDSNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse.Size(m)
}
func (m *ChangeRemoteAmazonRDSNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRemoteAmazonRDSNodeResponse proto.InternalMessageInfo

func (m *ChangeRemoteAmazonRDSNodeResponse) GetRemoteAmazonRds() *RemoteAmazonRDSNode {
	if m != nil {
		return m.RemoteAmazonRds
	}
	return nil
}

type RemoveNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeRequest) Reset()         { *m = RemoveNodeRequest{} }
func (m *RemoveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeRequest) ProtoMessage()    {}
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{24}
}
func (m *RemoveNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeRequest.Unmarshal(m, b)
}
func (m *RemoveNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeRequest.Merge(dst, src)
}
func (m *RemoveNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeRequest.Size(m)
}
func (m *RemoveNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeRequest proto.InternalMessageInfo

func (m *RemoveNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type RemoveNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeResponse) Reset()         { *m = RemoveNodeResponse{} }
func (m *RemoveNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeResponse) ProtoMessage()    {}
func (*RemoveNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodes_7b6110ee1686f1ba, []int{25}
}
func (m *RemoveNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeResponse.Unmarshal(m, b)
}
func (m *RemoveNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeResponse.Marshal(b, m, deterministic)
}
func (dst *RemoveNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeResponse.Merge(dst, src)
}
func (m *RemoveNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeResponse.Size(m)
}
func (m *RemoveNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenericNode)(nil), "inventory.GenericNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.GenericNode.CustomLabelsEntry")
	proto.RegisterType((*ContainerNode)(nil), "inventory.ContainerNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ContainerNode.CustomLabelsEntry")
	proto.RegisterType((*RemoteNode)(nil), "inventory.RemoteNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.RemoteNode.CustomLabelsEntry")
	proto.RegisterType((*RemoteAmazonRDSNode)(nil), "inventory.RemoteAmazonRDSNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.RemoteAmazonRDSNode.CustomLabelsEntry")
	proto.RegisterType((*ListNodesRequest)(nil), "inventory.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "inventory.ListNodesResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "inventory.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "inventory.GetNodeResponse")
	proto.RegisterType((*AddGenericNodeRequest)(nil), "inventory.AddGenericNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddGenericNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddGenericNodeResponse)(nil), "inventory.AddGenericNodeResponse")
	proto.RegisterType((*ChangeGenericNodeRequest)(nil), "inventory.ChangeGenericNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ChangeGenericNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*ChangeGenericNodeResponse)(nil), "inventory.ChangeGenericNodeResponse")
	proto.RegisterType((*AddContainerNodeRequest)(nil), "inventory.AddContainerNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddContainerNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddContainerNodeResponse)(nil), "inventory.AddContainerNodeResponse")
	proto.RegisterType((*ChangeContainerNodeRequest)(nil), "inventory.ChangeContainerNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ChangeContainerNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*ChangeContainerNodeResponse)(nil), "inventory.ChangeContainerNodeResponse")
	proto.RegisterType((*AddRemoteNodeRequest)(nil), "inventory.AddRemoteNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddRemoteNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddRemoteNodeResponse)(nil), "inventory.AddRemoteNodeResponse")
	proto.RegisterType((*ChangeRemoteNodeRequest)(nil), "inventory.ChangeRemoteNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ChangeRemoteNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*ChangeRemoteNodeResponse)(nil), "inventory.ChangeRemoteNodeResponse")
	proto.RegisterType((*AddRemoteAmazonRDSNodeRequest)(nil), "inventory.AddRemoteAmazonRDSNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddRemoteAmazonRDSNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddRemoteAmazonRDSNodeResponse)(nil), "inventory.AddRemoteAmazonRDSNodeResponse")
	proto.RegisterType((*ChangeRemoteAmazonRDSNodeRequest)(nil), "inventory.ChangeRemoteAmazonRDSNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ChangeRemoteAmazonRDSNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*ChangeRemoteAmazonRDSNodeResponse)(nil), "inventory.ChangeRemoteAmazonRDSNodeResponse")
	proto.RegisterType((*RemoveNodeRequest)(nil), "inventory.RemoveNodeRequest")
	proto.RegisterType((*RemoveNodeResponse)(nil), "inventory.RemoveNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesClient interface {
	// ListNodes returns a list of all Nodes.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// AddGenericNode adds generic Node.
	AddGenericNode(ctx context.Context, in *AddGenericNodeRequest, opts ...grpc.CallOption) (*AddGenericNodeResponse, error)
	// ChangeGenericNode changes generic Node.
	ChangeGenericNode(ctx context.Context, in *ChangeGenericNodeRequest, opts ...grpc.CallOption) (*ChangeGenericNodeResponse, error)
	// AddContainerNode adds Container Node.
	AddContainerNode(ctx context.Context, in *AddContainerNodeRequest, opts ...grpc.CallOption) (*AddContainerNodeResponse, error)
	// ChangeContainerNode changes Container Node.
	ChangeContainerNode(ctx context.Context, in *ChangeContainerNodeRequest, opts ...grpc.CallOption) (*ChangeContainerNodeResponse, error)
	// AddRemoteNode adds remote Node.
	AddRemoteNode(ctx context.Context, in *AddRemoteNodeRequest, opts ...grpc.CallOption) (*AddRemoteNodeResponse, error)
	// ChangeRemoteNode changes remote Node.
	ChangeRemoteNode(ctx context.Context, in *ChangeRemoteNodeRequest, opts ...grpc.CallOption) (*ChangeRemoteNodeResponse, error)
	// AddRemoteAmazonRDSNode adds Amazon (AWS) RDS remote Node.
	AddRemoteAmazonRDSNode(ctx context.Context, in *AddRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*AddRemoteAmazonRDSNodeResponse, error)
	// ChangeRemoteAmazonRDSNode changes Amazon (AWS) RDS remote Node.
	ChangeRemoteAmazonRDSNode(ctx context.Context, in *ChangeRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*ChangeRemoteAmazonRDSNodeResponse, error)
	// RemoveNode removes Node without any Agents and Services.
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error)
}

type nodesClient struct {
	cc *grpc.ClientConn
}

func NewNodesClient(cc *grpc.ClientConn) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddGenericNode(ctx context.Context, in *AddGenericNodeRequest, opts ...grpc.CallOption) (*AddGenericNodeResponse, error) {
	out := new(AddGenericNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddGenericNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ChangeGenericNode(ctx context.Context, in *ChangeGenericNodeRequest, opts ...grpc.CallOption) (*ChangeGenericNodeResponse, error) {
	out := new(ChangeGenericNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ChangeGenericNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddContainerNode(ctx context.Context, in *AddContainerNodeRequest, opts ...grpc.CallOption) (*AddContainerNodeResponse, error) {
	out := new(AddContainerNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddContainerNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ChangeContainerNode(ctx context.Context, in *ChangeContainerNodeRequest, opts ...grpc.CallOption) (*ChangeContainerNodeResponse, error) {
	out := new(ChangeContainerNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ChangeContainerNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddRemoteNode(ctx context.Context, in *AddRemoteNodeRequest, opts ...grpc.CallOption) (*AddRemoteNodeResponse, error) {
	out := new(AddRemoteNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddRemoteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ChangeRemoteNode(ctx context.Context, in *ChangeRemoteNodeRequest, opts ...grpc.CallOption) (*ChangeRemoteNodeResponse, error) {
	out := new(ChangeRemoteNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ChangeRemoteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddRemoteAmazonRDSNode(ctx context.Context, in *AddRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*AddRemoteAmazonRDSNodeResponse, error) {
	out := new(AddRemoteAmazonRDSNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddRemoteAmazonRDSNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ChangeRemoteAmazonRDSNode(ctx context.Context, in *ChangeRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*ChangeRemoteAmazonRDSNodeResponse, error) {
	out := new(ChangeRemoteAmazonRDSNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ChangeRemoteAmazonRDSNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error) {
	out := new(RemoveNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServer is the server API for Nodes service.
type NodesServer interface {
	// ListNodes returns a list of all Nodes.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// AddGenericNode adds generic Node.
	AddGenericNode(context.Context, *AddGenericNodeRequest) (*AddGenericNodeResponse, error)
	// ChangeGenericNode changes generic Node.
	ChangeGenericNode(context.Context, *ChangeGenericNodeRequest) (*ChangeGenericNodeResponse, error)
	// AddContainerNode adds Container Node.
	AddContainerNode(context.Context, *AddContainerNodeRequest) (*AddContainerNodeResponse, error)
	// ChangeContainerNode changes Container Node.
	ChangeContainerNode(context.Context, *ChangeContainerNodeRequest) (*ChangeContainerNodeResponse, error)
	// AddRemoteNode adds remote Node.
	AddRemoteNode(context.Context, *AddRemoteNodeRequest) (*AddRemoteNodeResponse, error)
	// ChangeRemoteNode changes remote Node.
	ChangeRemoteNode(context.Context, *ChangeRemoteNodeRequest) (*ChangeRemoteNodeResponse, error)
	// AddRemoteAmazonRDSNode adds Amazon (AWS) RDS remote Node.
	AddRemoteAmazonRDSNode(context.Context, *AddRemoteAmazonRDSNodeRequest) (*AddRemoteAmazonRDSNodeResponse, error)
	// ChangeRemoteAmazonRDSNode changes Amazon (AWS) RDS remote Node.
	ChangeRemoteAmazonRDSNode(context.Context, *ChangeRemoteAmazonRDSNodeRequest) (*ChangeRemoteAmazonRDSNodeResponse, error)
	// RemoveNode removes Node without any Agents and Services.
	RemoveNode(context.Context, *RemoveNodeRequest) (*RemoveNodeResponse, error)
}

func RegisterNodesServer(s *grpc.Server, srv NodesServer) {
	s.RegisterService(&_Nodes_serviceDesc, srv)
}

func _Nodes_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddGenericNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddGenericNode(ctx, req.(*AddGenericNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ChangeGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGenericNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ChangeGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ChangeGenericNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ChangeGenericNode(ctx, req.(*ChangeGenericNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddContainerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddContainerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddContainerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddContainerNode(ctx, req.(*AddContainerNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ChangeContainerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeContainerNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ChangeContainerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ChangeContainerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ChangeContainerNode(ctx, req.(*ChangeContainerNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddRemoteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddRemoteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddRemoteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddRemoteNode(ctx, req.(*AddRemoteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ChangeRemoteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRemoteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ChangeRemoteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ChangeRemoteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ChangeRemoteNode(ctx, req.(*ChangeRemoteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddRemoteAmazonRDSNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteAmazonRDSNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddRemoteAmazonRDSNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddRemoteAmazonRDSNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddRemoteAmazonRDSNode(ctx, req.(*AddRemoteAmazonRDSNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ChangeRemoteAmazonRDSNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRemoteAmazonRDSNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ChangeRemoteAmazonRDSNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ChangeRemoteAmazonRDSNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ChangeRemoteAmazonRDSNode(ctx, req.(*ChangeRemoteAmazonRDSNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _Nodes_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Nodes_GetNode_Handler,
		},
		{
			MethodName: "AddGenericNode",
			Handler:    _Nodes_AddGenericNode_Handler,
		},
		{
			MethodName: "ChangeGenericNode",
			Handler:    _Nodes_ChangeGenericNode_Handler,
		},
		{
			MethodName: "AddContainerNode",
			Handler:    _Nodes_AddContainerNode_Handler,
		},
		{
			MethodName: "ChangeContainerNode",
			Handler:    _Nodes_ChangeContainerNode_Handler,
		},
		{
			MethodName: "AddRemoteNode",
			Handler:    _Nodes_AddRemoteNode_Handler,
		},
		{
			MethodName: "ChangeRemoteNode",
			Handler:    _Nodes_ChangeRemoteNode_Handler,
		},
		{
			MethodName: "AddRemoteAmazonRDSNode",
			Handler:    _Nodes_AddRemoteAmazonRDSNode_Handler,
		},
		{
			MethodName: "ChangeRemoteAmazonRDSNode",
			Handler:    _Nodes_ChangeRemoteAmazonRDSNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Nodes_RemoveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/nodes.proto",
}

func init() { proto.RegisterFile("inventory/nodes.proto", fileDescriptor_nodes_7b6110ee1686f1ba) }

var fileDescriptor_nodes_7b6110ee1686f1ba = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x6c, 0x9c, 0x5f, 0xaf, 0xdf, 0xb4, 0xce, 0xa4, 0x69, 0xb6, 0xdb, 0xfc, 0x70, 0xc7,
	0xdf, 0x04, 0x37, 0x6d, 0xbc, 0x4d, 0x28, 0xa5, 0x8a, 0x84, 0x20, 0x2d, 0xa5, 0x49, 0x48, 0x8b,
	0x64, 0xd4, 0x02, 0x05, 0xc9, 0xda, 0x78, 0xa7, 0xee, 0x2a, 0xf6, 0x4e, 0xd8, 0xdd, 0xa4, 0x2a,
	0xe2, 0x80, 0x38, 0x20, 0x0e, 0x9c, 0x00, 0x89, 0x2b, 0x7f, 0x00, 0x07, 0x6e, 0x9c, 0x39, 0x73,
	0x42, 0x70, 0x2a, 0x48, 0x48, 0xc0, 0x1f, 0x81, 0xc4, 0x05, 0xed, 0xec, 0x78, 0xbd, 0xeb, 0x9d,
	0xb5, 0x9d, 0x3a, 0x4e, 0x4e, 0xde, 0x9d, 0x79, 0x6f, 0xde, 0x67, 0x3e, 0xef, 0xbd, 0x99, 0xf7,
	0xbc, 0x30, 0x65, 0xd9, 0x07, 0xd4, 0xf6, 0x98, 0xf3, 0x54, 0xb7, 0x99, 0x49, 0xdd, 0xe2, 0x9e,
	0xc3, 0x3c, 0x86, 0xc7, 0xc2, 0x61, 0xed, 0x7a, 0xd5, 0xf2, 0x1e, 0xef, 0xef, 0x14, 0x2b, 0xac,
	0xae, 0xd7, 0x9f, 0x58, 0xde, 0x2e, 0x7b, 0xa2, 0x57, 0xd9, 0x32, 0x97, 0x5b, 0x3e, 0x30, 0x6a,
	0x96, 0x69, 0x78, 0xcc, 0x71, 0xf5, 0xf0, 0x31, 0x58, 0x42, 0x9b, 0xa9, 0x32, 0x56, 0xad, 0x51,
	0xdd, 0xd8, 0xb3, 0x74, 0xc3, 0xb6, 0x99, 0x67, 0x78, 0x16, 0xb3, 0x85, 0x01, 0xed, 0x0a, 0xff,
	0xa9, 0x2c, 0x57, 0xa9, 0xbd, 0xec, 0x3e, 0x31, 0xaa, 0x55, 0xea, 0xe8, 0x6c, 0x8f, 0x4b, 0x24,
	0xa5, 0xc9, 0x4f, 0x0a, 0x9c, 0xba, 0x43, 0x6d, 0xea, 0x58, 0x95, 0x7b, 0xcc, 0xa4, 0x78, 0x1a,
	0x46, 0x7c, 0xb4, 0x65, 0xcb, 0x54, 0x51, 0x0e, 0x15, 0xc6, 0x4a, 0xc3, 0xfe, 0xeb, 0xa6, 0x89,
	0x2f, 0xc0, 0x18, 0x9f, 0xb0, 0x8d, 0x3a, 0x55, 0x15, 0x3e, 0x35, 0xea, 0x0f, 0xdc, 0x33, 0xea,
	0x14, 0xcf, 0x02, 0xd4, 0x8d, 0xca, 0x63, 0xcb, 0xe6, 0x8a, 0x83, 0x7c, 0x76, 0x4c, 0x8c, 0x6c,
	0x9a, 0xf8, 0x1c, 0x0c, 0x9b, 0x96, 0xeb, 0x39, 0x4c, 0xcd, 0x04, 0x6b, 0x06, 0x6f, 0x78, 0x01,
	0x4e, 0x07, 0x4f, 0xe5, 0x03, 0xea, 0xb8, 0x16, 0xb3, 0xd5, 0x21, 0x3e, 0x3f, 0x1e, 0x8c, 0x3e,
	0x08, 0x06, 0xf1, 0x5d, 0x18, 0xaf, 0xec, 0xbb, 0x1e, 0xab, 0x97, 0x6b, 0xc6, 0x0e, 0xad, 0xb9,
	0x2a, 0xe4, 0x06, 0x0b, 0xa7, 0x56, 0x0b, 0xc5, 0x90, 0xca, 0x62, 0x64, 0x0b, 0xc5, 0x5b, 0x5c,
	0x76, 0x9b, 0x8b, 0xde, 0xb6, 0x3d, 0xe7, 0x69, 0xe9, 0x7f, 0x95, 0xc8, 0x10, 0x56, 0x61, 0xc4,
	0x30, 0x4d, 0x87, 0xba, 0xae, 0xba, 0xc4, 0xcd, 0x35, 0x5e, 0xb5, 0x57, 0x61, 0x22, 0xa1, 0x8c,
	0xb3, 0x30, 0xb8, 0x4b, 0x9f, 0x0a, 0x36, 0xfc, 0x47, 0x7c, 0x16, 0x86, 0x0e, 0x8c, 0xda, 0x7e,
	0x83, 0x86, 0xe0, 0x65, 0x4d, 0xb9, 0x81, 0xc8, 0x33, 0x05, 0xc6, 0x6f, 0x31, 0xdb, 0x33, 0x2c,
	0x9b, 0x3a, 0xfd, 0xe3, 0xb3, 0x08, 0x93, 0x26, 0xab, 0xec, 0x52, 0xa7, 0x5c, 0x69, 0x18, 0xf3,
	0xe5, 0x02, 0x72, 0x27, 0x82, 0xa9, 0x10, 0xc6, 0xa6, 0x89, 0x57, 0x61, 0x2a, 0x21, 0xcf, 0xed,
	0x06, 0x74, 0x4f, 0xb6, 0x68, 0x70, 0x08, 0x6f, 0xc9, 0x49, 0x5f, 0x8a, 0x90, 0x1e, 0xdb, 0x69,
	0x27, 0xda, 0x7b, 0x27, 0xf7, 0x67, 0x04, 0x50, 0xa2, 0x75, 0xe6, 0xd1, 0x1e, 0x98, 0xdd, 0x96,
	0x6f, 0xeb, 0x85, 0xc8, 0xb6, 0x9a, 0x36, 0xfa, 0xbf, 0xa7, 0x6f, 0x14, 0x98, 0x0c, 0xec, 0xad,
	0xd7, 0x8d, 0x8f, 0x98, 0x5d, 0x7a, 0xfd, 0xed, 0x1e, 0x36, 0xa7, 0xc1, 0xa8, 0x65, 0xbb, 0x9e,
	0x61, 0x57, 0xa8, 0x08, 0x9a, 0xf0, 0xdd, 0xcf, 0x41, 0x87, 0x56, 0xfd, 0x1c, 0x13, 0x39, 0x18,
	0xbc, 0xe1, 0xfb, 0x72, 0x42, 0xae, 0x26, 0x08, 0x89, 0x01, 0xec, 0x3f, 0x33, 0x18, 0xb2, 0xdb,
	0x96, 0xeb, 0xf9, 0xc6, 0xdc, 0x12, 0xfd, 0x70, 0x9f, 0xba, 0x1e, 0xf9, 0x07, 0xc1, 0x44, 0x64,
	0xd0, 0xdd, 0x63, 0xb6, 0x4b, 0xf1, 0x55, 0x18, 0xa9, 0x06, 0xe9, 0xaf, 0x22, 0x8e, 0xfd, 0x9c,
	0xfc, 0x60, 0x28, 0x35, 0xc4, 0xf0, 0x75, 0x18, 0x0b, 0x13, 0x41, 0x55, 0xb8, 0x8e, 0x9a, 0x16,
	0xd7, 0xa5, 0xa6, 0x28, 0x5e, 0xf6, 0x39, 0xf4, 0xb9, 0x50, 0x07, 0xb9, 0xd2, 0x94, 0x34, 0x6a,
	0x4a, 0x42, 0x08, 0x6f, 0xc1, 0x44, 0xf0, 0x54, 0x36, 0x38, 0x77, 0x65, 0xc7, 0x74, 0xd5, 0x0c,
	0xd7, 0x9c, 0x6b, 0x4f, 0x6f, 0xe9, 0x8c, 0x13, 0x1d, 0x34, 0x5d, 0xb2, 0x02, 0xa7, 0xef, 0x50,
	0xbe, 0x71, 0x41, 0x06, 0x9e, 0x6f, 0x09, 0x91, 0x9b, 0xc3, 0x7f, 0xfe, 0x31, 0xaf, 0xbc, 0x8b,
	0x1a, 0xa1, 0x42, 0x3e, 0x53, 0xe0, 0x4c, 0xa8, 0x23, 0xb8, 0x5a, 0x8d, 0x72, 0x85, 0xd2, 0xb9,
	0xda, 0x18, 0x68, 0xb2, 0x75, 0x23, 0xce, 0x16, 0x6a, 0xc7, 0xd6, 0xc6, 0x40, 0x94, 0x2f, 0x3d,
	0xc2, 0x17, 0x4a, 0xe5, 0x6b, 0x63, 0x20, 0x64, 0x6c, 0x5b, 0xce, 0x18, 0xea, 0xcc, 0xd8, 0xc6,
	0x40, 0x82, 0xb3, 0x9b, 0xc3, 0x90, 0xf1, 0xa9, 0x20, 0xbf, 0x2a, 0x30, 0xb5, 0x6e, 0x9a, 0xd1,
	0x50, 0x10, 0x1c, 0xe6, 0x13, 0xd9, 0x14, 0xb2, 0x78, 0x5c, 0x97, 0xdb, 0x3b, 0xf2, 0xfc, 0x5b,
	0x8d, 0x6c, 0x57, 0x8a, 0xfd, 0x04, 0xaf, 0xb9, 0xad, 0xcc, 0x28, 0xca, 0x2a, 0x64, 0x0b, 0xce,
	0xb5, 0x22, 0x93, 0x65, 0x24, 0xea, 0x22, 0x23, 0xc9, 0xef, 0x0a, 0xa8, 0xb7, 0x1e, 0x1b, 0x76,
	0x95, 0x4a, 0xbc, 0xd4, 0x29, 0xd2, 0xbb, 0x73, 0x63, 0x8f, 0x7e, 0x7a, 0x28, 0xf7, 0xd3, 0x4b,
	0xd1, 0x4c, 0x48, 0xd9, 0xc0, 0xc9, 0xba, 0x6a, 0x30, 0x9b, 0x21, 0x77, 0xe1, 0xbc, 0x04, 0xdc,
	0x73, 0x7b, 0xeb, 0x2f, 0x05, 0xa6, 0xd7, 0x4d, 0x33, 0x7e, 0x4e, 0x1e, 0x61, 0x4a, 0x1d, 0x47,
	0x7d, 0xf3, 0x9e, 0xdc, 0x9f, 0xd7, 0xe2, 0x79, 0x27, 0xdb, 0x62, 0xdf, 0xef, 0x3e, 0x91, 0x5f,
	0x25, 0x50, 0x93, 0x08, 0x84, 0xcf, 0x62, 0x37, 0x18, 0x6a, 0x7f, 0x26, 0x47, 0x4e, 0x64, 0xf2,
	0xa3, 0x02, 0x5a, 0x10, 0x09, 0x52, 0xe7, 0x1d, 0x4d, 0xa6, 0x3d, 0x8f, 0x3b, 0x3e, 0x90, 0xbb,
	0xe3, 0xe5, 0x44, 0x7a, 0x9d, 0x94, 0x47, 0x06, 0xb3, 0x99, 0xad, 0xcc, 0x68, 0x26, 0x3b, 0x44,
	0xee, 0xc3, 0x05, 0x29, 0x94, 0x1e, 0x5d, 0xf3, 0x0c, 0xc1, 0xd9, 0x75, 0xd3, 0x8c, 0xd4, 0x11,
	0x87, 0xc9, 0xa8, 0x07, 0x72, 0xfe, 0x56, 0xe2, 0xe1, 0x9c, 0x58, 0xfc, 0xb8, 0x62, 0xf9, 0x0d,
	0x7e, 0x03, 0x47, 0xcd, 0x0b, 0xb6, 0x9a, 0x25, 0x15, 0x6a, 0x53, 0x22, 0x34, 0x0a, 0x04, 0xf2,
	0x2f, 0x82, 0xe9, 0x80, 0xfc, 0x24, 0x4f, 0x47, 0x13, 0xbc, 0x5d, 0x9c, 0x0b, 0x29, 0x00, 0xfa,
	0x5f, 0x13, 0x6f, 0x36, 0x2e, 0xc9, 0xde, 0x89, 0xfc, 0x5e, 0x81, 0xd9, 0xd0, 0x23, 0xf1, 0xda,
	0xf3, 0x30, 0x61, 0x47, 0x5a, 0x3b, 0x8e, 0xa6, 0x4c, 0xd8, 0x79, 0xcc, 0xc5, 0x3b, 0x8f, 0xa6,
	0x5b, 0x44, 0x07, 0x52, 0x96, 0x33, 0xbe, 0x26, 0x0b, 0x5d, 0x19, 0xd2, 0xe3, 0x8a, 0xe1, 0x1a,
	0xcc, 0xa5, 0xe1, 0x10, 0x3e, 0x90, 0x16, 0xfc, 0xa8, 0x9b, 0xf2, 0x35, 0x59, 0xf0, 0xff, 0xa0,
	0x40, 0x2e, 0xea, 0x6c, 0xa9, 0x8f, 0x8e, 0x26, 0xe4, 0xbb, 0x71, 0xe2, 0x8e, 0xdc, 0x49, 0xaf,
	0xa4, 0xa4, 0xc5, 0x49, 0xf9, 0xc9, 0x3f, 0x9f, 0x19, 0x5c, 0x6c, 0x03, 0xa5, 0x0f, 0xae, 0xba,
	0x06, 0x13, 0xbe, 0xdc, 0xc1, 0xa1, 0x4e, 0x23, 0x72, 0x16, 0x70, 0x54, 0x2b, 0xc0, 0xb5, 0xfa,
	0xdb, 0x29, 0x18, 0xe2, 0xed, 0x2d, 0xde, 0x85, 0xb1, 0xb0, 0xd7, 0xc5, 0x17, 0x22, 0x98, 0x5a,
	0xdb, 0x62, 0x6d, 0x46, 0x3e, 0x19, 0xac, 0x48, 0xf2, 0x9f, 0xfe, 0xf2, 0xf7, 0x57, 0xca, 0x2c,
	0x51, 0xf5, 0x83, 0x15, 0xbd, 0xf9, 0x9f, 0x24, 0x17, 0xd2, 0x7d, 0xf1, 0x35, 0xb4, 0x84, 0x4d,
	0x18, 0x11, 0xad, 0x22, 0x3e, 0x1f, 0xab, 0xfe, 0xa2, 0x2d, 0xa7, 0xa6, 0xc9, 0xa6, 0x84, 0x19,
	0xc2, 0xcd, 0xcc, 0x90, 0x69, 0x99, 0x99, 0x3b, 0x94, 0x5b, 0xf9, 0x04, 0xc1, 0xe9, 0x78, 0xcb,
	0x80, 0x73, 0x9d, 0xfa, 0x1c, 0xed, 0x62, 0x1b, 0x09, 0x61, 0xfb, 0x12, 0xb7, 0x9d, 0x27, 0x73,
	0x32, 0xdb, 0x4d, 0x1d, 0x1f, 0xc2, 0x17, 0x08, 0x26, 0x12, 0xa5, 0x30, 0xce, 0x77, 0x51, 0xc5,
	0x6b, 0xff, 0x6f, 0x2f, 0x24, 0xb0, 0x5c, 0xe1, 0x58, 0x16, 0xc9, 0x45, 0x19, 0x96, 0x98, 0x9a,
	0x0f, 0xe7, 0x73, 0x04, 0xd9, 0xd6, 0x22, 0x0f, 0x93, 0xce, 0x35, 0xa8, 0x96, 0x6f, 0x2b, 0x23,
	0xb0, 0x5c, 0xe6, 0x58, 0x16, 0x48, 0x2e, 0x85, 0x97, 0x50, 0xcb, 0x87, 0xf2, 0x35, 0x82, 0x49,
	0x49, 0x5d, 0x83, 0x17, 0xba, 0x2a, 0xc1, 0xb4, 0xc5, 0x4e, 0x62, 0x02, 0x53, 0x91, 0x63, 0x2a,
	0x90, 0x7c, 0x3a, 0x3f, 0x31, 0x58, 0x1f, 0xc3, 0x78, 0xac, 0x72, 0xc0, 0xf3, 0x1d, 0x4a, 0x1a,
	0x2d, 0x97, 0x2e, 0x20, 0x30, 0x14, 0x38, 0x06, 0x42, 0x66, 0x53, 0x78, 0x09, 0x54, 0x1a, 0xfe,
	0x69, 0xbd, 0x72, 0x63, 0xfe, 0x49, 0xa9, 0x05, 0xb4, 0x7c, 0x5b, 0x99, 0x6e, 0xfc, 0x13, 0xd5,
	0xf2, 0xa1, 0x7c, 0x8b, 0x78, 0xbf, 0x2d, 0xfb, 0xb7, 0xb0, 0xd0, 0xed, 0x55, 0xa9, 0x5d, 0xea,
	0x42, 0x52, 0x80, 0x5b, 0xe1, 0xe0, 0x2e, 0x93, 0xc5, 0xb6, 0x24, 0x85, 0xba, 0x3e, 0xc4, 0xef,
	0x50, 0xa3, 0xcf, 0x94, 0xa1, 0xbc, 0x7c, 0x88, 0xbb, 0x42, 0xbb, 0xd2, 0x9d, 0xb0, 0xc0, 0x7a,
	0x8d, 0x63, 0x2d, 0x92, 0x4b, 0x9d, 0x88, 0x8c, 0xc1, 0xdd, 0x0b, 0xfe, 0x4f, 0x0e, 0x4e, 0x60,
	0x3c, 0xd3, 0x72, 0xec, 0xc7, 0x8e, 0x73, 0x6d, 0x36, 0x65, 0x56, 0x00, 0x58, 0xe0, 0x00, 0xe6,
	0x89, 0x26, 0x03, 0x10, 0xc8, 0xaf, 0xa1, 0xa5, 0x9b, 0xef, 0x7f, 0xb9, 0x7e, 0xb7, 0xf4, 0x26,
	0x8c, 0x98, 0xf4, 0x91, 0xb1, 0x5f, 0xf3, 0xf0, 0x6b, 0x80, 0xd7, 0xed, 0x1c, 0x75, 0x1c, 0xe6,
	0xe4, 0x1c, 0xb1, 0x56, 0x11, 0x2f, 0x41, 0x41, 0x5b, 0xcc, 0xeb, 0x26, 0x7d, 0x64, 0xd9, 0x56,
	0xf0, 0xe1, 0x26, 0x5c, 0x72, 0x6f, 0xe7, 0xb6, 0x2f, 0xdd, 0x30, 0xfc, 0xb0, 0xf9, 0x39, 0x69,
	0x67, 0x98, 0x7f, 0xd1, 0x79, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xf1, 0x1d, 0xb0,
	0x79, 0x1a, 0x00, 0x00,
}
