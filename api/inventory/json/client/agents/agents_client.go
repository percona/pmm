// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new agents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddExternalAgent adds external agent adds external agent
*/
func (a *Client) AddExternalAgent(params *AddExternalAgentParams) (*AddExternalAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddExternalAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddExternalAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddExternalAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddExternalAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddExternalAgentOK), nil

}

/*
AddMySqldExporter adds my sqld exporter adds mysqld exporter agent
*/
func (a *Client) AddMySqldExporter(params *AddMySqldExporterParams) (*AddMySqldExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMySqldExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddMySQLdExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddMySQLdExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddMySqldExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddMySqldExporterOK), nil

}

/*
AddNodeExporter adds node exporter adds node exporter agent
*/
func (a *Client) AddNodeExporter(params *AddNodeExporterParams) (*AddNodeExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNodeExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddNodeExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddNodeExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddNodeExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddNodeExporterOK), nil

}

/*
AddPMMAgent adds PMM agent adds pmm agent agent
*/
func (a *Client) AddPMMAgent(params *AddPMMAgentParams) (*AddPMMAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPMMAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddPMMAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddPMMAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddPMMAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddPMMAgentOK), nil

}

/*
AddRDSExporter adds RDS exporter adds rds exporter agent
*/
func (a *Client) AddRDSExporter(params *AddRDSExporterParams) (*AddRDSExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRDSExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddRDSExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddRDSExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRDSExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRDSExporterOK), nil

}

/*
GetAgent gets agent returns a single agent by ID
*/
func (a *Client) GetAgent(params *GetAgentParams) (*GetAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAgentOK), nil

}

/*
ListAgents lists agents returns a list of all agents
*/
func (a *Client) ListAgents(params *ListAgentsParams) (*ListAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAgents",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAgentsOK), nil

}

/*
RemoveAgent removes agent removes agent
*/
func (a *Client) RemoveAgent(params *RemoveAgentParams) (*RemoveAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAgentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
