// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// AddMongoDBExporterReader is a Reader for the AddMongoDBExporter structure.
type AddMongoDBExporterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMongoDBExporterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddMongoDBExporterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddMongoDBExporterOK creates a AddMongoDBExporterOK with default headers values
func NewAddMongoDBExporterOK() *AddMongoDBExporterOK {
	return &AddMongoDBExporterOK{}
}

/*AddMongoDBExporterOK handles this case with default header values.

A successful response.
*/
type AddMongoDBExporterOK struct {
	Payload *AddMongoDBExporterOKBody
}

func (o *AddMongoDBExporterOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/AddMongoDBExporter][%d] addMongoDBExporterOK  %+v", 200, o.Payload)
}

func (o *AddMongoDBExporterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddMongoDBExporterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddMongoDBExporterBody add mongo d b exporter body
swagger:model AddMongoDBExporterBody
*/
type AddMongoDBExporterBody struct {

	// MongoDB URI for scraping metrics. (See: https://docs.mongodb.com/manual/reference/connection-string/)
	ConnectionString string `json:"connection_string,omitempty"`

	// Custom user-assigned labels. Keys must start with "_".
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this add mongo d b exporter body
func (o *AddMongoDBExporterBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMongoDBExporterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMongoDBExporterBody) UnmarshalBinary(b []byte) error {
	var res AddMongoDBExporterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMongoDBExporterOKBody add mongo d b exporter o k body
swagger:model AddMongoDBExporterOKBody
*/
type AddMongoDBExporterOKBody struct {

	// mongodb exporter
	MongodbExporter *AddMongoDBExporterOKBodyMongodbExporter `json:"mongodb_exporter,omitempty"`
}

// Validate validates this add mongo d b exporter o k body
func (o *AddMongoDBExporterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMongodbExporter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddMongoDBExporterOKBody) validateMongodbExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.MongodbExporter) { // not required
		return nil
	}

	if o.MongodbExporter != nil {
		if err := o.MongodbExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMongoDBExporterOK" + "." + "mongodb_exporter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMongoDBExporterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMongoDBExporterOKBody) UnmarshalBinary(b []byte) error {
	var res AddMongoDBExporterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMongoDBExporterOKBodyMongodbExporter MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
swagger:model AddMongoDBExporterOKBodyMongodbExporter
*/
type AddMongoDBExporterOKBodyMongodbExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// MongoDB URI for scraping metrics. (See https://docs.mongodb.com/manual/reference/connection-string/)
	ConnectionString string `json:"connection_string,omitempty"`

	// Custom user-assigned labels. Keys must start with "_".
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// AgentStatus represents actual Agent process status.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE]
	Status *string `json:"status,omitempty"`
}

// Validate validates this add mongo d b exporter o k body mongodb exporter
func (o *AddMongoDBExporterOKBodyMongodbExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addMongoDBExporterOKBodyMongodbExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addMongoDBExporterOKBodyMongodbExporterTypeStatusPropEnum = append(addMongoDBExporterOKBodyMongodbExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddMongoDBExporterOKBodyMongodbExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AddMongoDBExporterOKBodyMongodbExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AddMongoDBExporterOKBodyMongodbExporterStatusSTARTING captures enum value "STARTING"
	AddMongoDBExporterOKBodyMongodbExporterStatusSTARTING string = "STARTING"

	// AddMongoDBExporterOKBodyMongodbExporterStatusRUNNING captures enum value "RUNNING"
	AddMongoDBExporterOKBodyMongodbExporterStatusRUNNING string = "RUNNING"

	// AddMongoDBExporterOKBodyMongodbExporterStatusWAITING captures enum value "WAITING"
	AddMongoDBExporterOKBodyMongodbExporterStatusWAITING string = "WAITING"

	// AddMongoDBExporterOKBodyMongodbExporterStatusSTOPPING captures enum value "STOPPING"
	AddMongoDBExporterOKBodyMongodbExporterStatusSTOPPING string = "STOPPING"

	// AddMongoDBExporterOKBodyMongodbExporterStatusDONE captures enum value "DONE"
	AddMongoDBExporterOKBodyMongodbExporterStatusDONE string = "DONE"
)

// prop value enum
func (o *AddMongoDBExporterOKBodyMongodbExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addMongoDBExporterOKBodyMongodbExporterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AddMongoDBExporterOKBodyMongodbExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addMongoDBExporterOK"+"."+"mongodb_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMongoDBExporterOKBodyMongodbExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMongoDBExporterOKBodyMongodbExporter) UnmarshalBinary(b []byte) error {
	var res AddMongoDBExporterOKBodyMongodbExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
