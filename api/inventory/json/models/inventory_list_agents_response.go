// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InventoryListAgentsResponse inventory list agents response
// swagger:model inventoryListAgentsResponse
type InventoryListAgentsResponse struct {

	// external exporter
	ExternalExporter []*InventoryExternalExporter `json:"external_exporter"`

	// mongodb exporter
	MongodbExporter []*InventoryMongoDBExporter `json:"mongodb_exporter"`

	// mysqld exporter
	MysqldExporter []*InventoryMySqldExporter `json:"mysqld_exporter"`

	// node exporter
	NodeExporter []*InventoryNodeExporter `json:"node_exporter"`

	// pmm agent
	PMMAgent []*InventoryPMMAgent `json:"pmm_agent"`

	// qan mysql perfschema agent
	QANMysqlPerfschemaAgent []*InventoryQANMySQLPerfSchemaAgent `json:"qan_mysql_perfschema_agent"`

	// rds exporter
	RDSExporter []*InventoryRDSExporter `json:"rds_exporter"`
}

// Validate validates this inventory list agents response
func (m *InventoryListAgentsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePMMAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQANMysqlPerfschemaAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRDSExporter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryListAgentsResponse) validateExternalExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalExporter) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalExporter); i++ {
		if swag.IsZero(m.ExternalExporter[i]) { // not required
			continue
		}

		if m.ExternalExporter[i] != nil {
			if err := m.ExternalExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validateMongodbExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.MongodbExporter) { // not required
		return nil
	}

	for i := 0; i < len(m.MongodbExporter); i++ {
		if swag.IsZero(m.MongodbExporter[i]) { // not required
			continue
		}

		if m.MongodbExporter[i] != nil {
			if err := m.MongodbExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mongodb_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validateMysqldExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.MysqldExporter) { // not required
		return nil
	}

	for i := 0; i < len(m.MysqldExporter); i++ {
		if swag.IsZero(m.MysqldExporter[i]) { // not required
			continue
		}

		if m.MysqldExporter[i] != nil {
			if err := m.MysqldExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mysqld_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validateNodeExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeExporter) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeExporter); i++ {
		if swag.IsZero(m.NodeExporter[i]) { // not required
			continue
		}

		if m.NodeExporter[i] != nil {
			if err := m.NodeExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validatePMMAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.PMMAgent) { // not required
		return nil
	}

	for i := 0; i < len(m.PMMAgent); i++ {
		if swag.IsZero(m.PMMAgent[i]) { // not required
			continue
		}

		if m.PMMAgent[i] != nil {
			if err := m.PMMAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pmm_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validateQANMysqlPerfschemaAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.QANMysqlPerfschemaAgent) { // not required
		return nil
	}

	for i := 0; i < len(m.QANMysqlPerfschemaAgent); i++ {
		if swag.IsZero(m.QANMysqlPerfschemaAgent[i]) { // not required
			continue
		}

		if m.QANMysqlPerfschemaAgent[i] != nil {
			if err := m.QANMysqlPerfschemaAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qan_mysql_perfschema_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListAgentsResponse) validateRDSExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.RDSExporter) { // not required
		return nil
	}

	for i := 0; i < len(m.RDSExporter); i++ {
		if swag.IsZero(m.RDSExporter[i]) { // not required
			continue
		}

		if m.RDSExporter[i] != nil {
			if err := m.RDSExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rds_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryListAgentsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryListAgentsResponse) UnmarshalBinary(b []byte) error {
	var res InventoryListAgentsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
