// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory/services.proto

package inventory

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MySQLService represents a generic MySQL instance.
type MySQLService struct {
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP). Required if unix_socket is absent.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port. Required if unix_socket is absent.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access Unix socket. Required if address and port are absent.
	UnixSocket           string   `protobuf:"bytes,6,opt,name=unix_socket,json=unixSocket,proto3" json:"unix_socket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MySQLService) Reset()         { *m = MySQLService{} }
func (m *MySQLService) String() string { return proto.CompactTextString(m) }
func (*MySQLService) ProtoMessage()    {}
func (*MySQLService) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{0}
}
func (m *MySQLService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MySQLService.Unmarshal(m, b)
}
func (m *MySQLService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MySQLService.Marshal(b, m, deterministic)
}
func (dst *MySQLService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLService.Merge(dst, src)
}
func (m *MySQLService) XXX_Size() int {
	return xxx_messageInfo_MySQLService.Size(m)
}
func (m *MySQLService) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLService.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLService proto.InternalMessageInfo

func (m *MySQLService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *MySQLService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MySQLService) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MySQLService) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MySQLService) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MySQLService) GetUnixSocket() string {
	if m != nil {
		return m.UnixSocket
	}
	return ""
}

// AmazonRDSMySQLService represents a MySQL instance running on a single RemoteAmazonRDS Node
type AmazonRDSMySQLService struct {
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Instance endpoint (full DNS name).
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Instance port.
	Port                 uint32   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AmazonRDSMySQLService) Reset()         { *m = AmazonRDSMySQLService{} }
func (m *AmazonRDSMySQLService) String() string { return proto.CompactTextString(m) }
func (*AmazonRDSMySQLService) ProtoMessage()    {}
func (*AmazonRDSMySQLService) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{1}
}
func (m *AmazonRDSMySQLService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmazonRDSMySQLService.Unmarshal(m, b)
}
func (m *AmazonRDSMySQLService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmazonRDSMySQLService.Marshal(b, m, deterministic)
}
func (dst *AmazonRDSMySQLService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmazonRDSMySQLService.Merge(dst, src)
}
func (m *AmazonRDSMySQLService) XXX_Size() int {
	return xxx_messageInfo_AmazonRDSMySQLService.Size(m)
}
func (m *AmazonRDSMySQLService) XXX_DiscardUnknown() {
	xxx_messageInfo_AmazonRDSMySQLService.DiscardUnknown(m)
}

var xxx_messageInfo_AmazonRDSMySQLService proto.InternalMessageInfo

func (m *AmazonRDSMySQLService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *AmazonRDSMySQLService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AmazonRDSMySQLService) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AmazonRDSMySQLService) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AmazonRDSMySQLService) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ListServicesRequest struct {
	// Types that are valid to be assigned to Filter:
	//	*ListServicesRequest_NodeId
	Filter               isListServicesRequest_Filter `protobuf_oneof:"filter"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ListServicesRequest) Reset()         { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()    {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{2}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesRequest.Unmarshal(m, b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
}
func (dst *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(dst, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListServicesRequest.Size(m)
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

type isListServicesRequest_Filter interface {
	isListServicesRequest_Filter()
}

type ListServicesRequest_NodeId struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,oneof"`
}

func (*ListServicesRequest_NodeId) isListServicesRequest_Filter() {}

func (m *ListServicesRequest) GetFilter() isListServicesRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListServicesRequest) GetNodeId() string {
	if x, ok := m.GetFilter().(*ListServicesRequest_NodeId); ok {
		return x.NodeId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListServicesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListServicesRequest_OneofMarshaler, _ListServicesRequest_OneofUnmarshaler, _ListServicesRequest_OneofSizer, []interface{}{
		(*ListServicesRequest_NodeId)(nil),
	}
}

func _ListServicesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListServicesRequest)
	// filter
	switch x := m.Filter.(type) {
	case *ListServicesRequest_NodeId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NodeId)
	case nil:
	default:
		return fmt.Errorf("ListServicesRequest.Filter has unexpected type %T", x)
	}
	return nil
}

func _ListServicesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListServicesRequest)
	switch tag {
	case 1: // filter.node_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Filter = &ListServicesRequest_NodeId{x}
		return true, err
	default:
		return false, nil
	}
}

func _ListServicesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListServicesRequest)
	// filter
	switch x := m.Filter.(type) {
	case *ListServicesRequest_NodeId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.NodeId)))
		n += len(x.NodeId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListServicesResponse struct {
	Mysql                []*MySQLService          `protobuf:"bytes,1,rep,name=mysql,proto3" json:"mysql,omitempty"`
	AmazonRdsMysql       []*AmazonRDSMySQLService `protobuf:"bytes,2,rep,name=amazon_rds_mysql,json=amazonRdsMysql,proto3" json:"amazon_rds_mysql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListServicesResponse) Reset()         { *m = ListServicesResponse{} }
func (m *ListServicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListServicesResponse) ProtoMessage()    {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{3}
}
func (m *ListServicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesResponse.Unmarshal(m, b)
}
func (m *ListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesResponse.Marshal(b, m, deterministic)
}
func (dst *ListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponse.Merge(dst, src)
}
func (m *ListServicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListServicesResponse.Size(m)
}
func (m *ListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponse proto.InternalMessageInfo

func (m *ListServicesResponse) GetMysql() []*MySQLService {
	if m != nil {
		return m.Mysql
	}
	return nil
}

func (m *ListServicesResponse) GetAmazonRdsMysql() []*AmazonRDSMySQLService {
	if m != nil {
		return m.AmazonRdsMysql
	}
	return nil
}

type GetServiceRequest struct {
	// Unique randomly generated instance identifier.
	ServiceId            string   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{4}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceRequest.Unmarshal(m, b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
}
func (dst *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(dst, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return xxx_messageInfo_GetServiceRequest.Size(m)
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

type GetServiceResponse struct {
	// Types that are valid to be assigned to Service:
	//	*GetServiceResponse_Mysql
	//	*GetServiceResponse_AmazonRdsMysql
	Service              isGetServiceResponse_Service `protobuf_oneof:"service"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetServiceResponse) Reset()         { *m = GetServiceResponse{} }
func (m *GetServiceResponse) String() string { return proto.CompactTextString(m) }
func (*GetServiceResponse) ProtoMessage()    {}
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{5}
}
func (m *GetServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceResponse.Unmarshal(m, b)
}
func (m *GetServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceResponse.Marshal(b, m, deterministic)
}
func (dst *GetServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceResponse.Merge(dst, src)
}
func (m *GetServiceResponse) XXX_Size() int {
	return xxx_messageInfo_GetServiceResponse.Size(m)
}
func (m *GetServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceResponse proto.InternalMessageInfo

type isGetServiceResponse_Service interface {
	isGetServiceResponse_Service()
}

type GetServiceResponse_Mysql struct {
	Mysql *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3,oneof"`
}

type GetServiceResponse_AmazonRdsMysql struct {
	AmazonRdsMysql *AmazonRDSMySQLService `protobuf:"bytes,2,opt,name=amazon_rds_mysql,json=amazonRdsMysql,proto3,oneof"`
}

func (*GetServiceResponse_Mysql) isGetServiceResponse_Service() {}

func (*GetServiceResponse_AmazonRdsMysql) isGetServiceResponse_Service() {}

func (m *GetServiceResponse) GetService() isGetServiceResponse_Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *GetServiceResponse) GetMysql() *MySQLService {
	if x, ok := m.GetService().(*GetServiceResponse_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (m *GetServiceResponse) GetAmazonRdsMysql() *AmazonRDSMySQLService {
	if x, ok := m.GetService().(*GetServiceResponse_AmazonRdsMysql); ok {
		return x.AmazonRdsMysql
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetServiceResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetServiceResponse_OneofMarshaler, _GetServiceResponse_OneofUnmarshaler, _GetServiceResponse_OneofSizer, []interface{}{
		(*GetServiceResponse_Mysql)(nil),
		(*GetServiceResponse_AmazonRdsMysql)(nil),
	}
}

func _GetServiceResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetServiceResponse)
	// service
	switch x := m.Service.(type) {
	case *GetServiceResponse_Mysql:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mysql); err != nil {
			return err
		}
	case *GetServiceResponse_AmazonRdsMysql:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmazonRdsMysql); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetServiceResponse.Service has unexpected type %T", x)
	}
	return nil
}

func _GetServiceResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetServiceResponse)
	switch tag {
	case 1: // service.mysql
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MySQLService)
		err := b.DecodeMessage(msg)
		m.Service = &GetServiceResponse_Mysql{msg}
		return true, err
	case 2: // service.amazon_rds_mysql
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmazonRDSMySQLService)
		err := b.DecodeMessage(msg)
		m.Service = &GetServiceResponse_AmazonRdsMysql{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetServiceResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetServiceResponse)
	// service
	switch x := m.Service.(type) {
	case *GetServiceResponse_Mysql:
		s := proto.Size(x.Mysql)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetServiceResponse_AmazonRdsMysql:
		s := proto.Size(x.AmazonRdsMysql)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddMySQLServiceRequest struct {
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP). Required if unix_socket is absent.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port. Required if unix_socket is absent.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access Unix socket. Required if address and port are absent.
	UnixSocket           string   `protobuf:"bytes,6,opt,name=unix_socket,json=unixSocket,proto3" json:"unix_socket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMySQLServiceRequest) Reset()         { *m = AddMySQLServiceRequest{} }
func (m *AddMySQLServiceRequest) String() string { return proto.CompactTextString(m) }
func (*AddMySQLServiceRequest) ProtoMessage()    {}
func (*AddMySQLServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{6}
}
func (m *AddMySQLServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMySQLServiceRequest.Unmarshal(m, b)
}
func (m *AddMySQLServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMySQLServiceRequest.Marshal(b, m, deterministic)
}
func (dst *AddMySQLServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMySQLServiceRequest.Merge(dst, src)
}
func (m *AddMySQLServiceRequest) XXX_Size() int {
	return xxx_messageInfo_AddMySQLServiceRequest.Size(m)
}
func (m *AddMySQLServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMySQLServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMySQLServiceRequest proto.InternalMessageInfo

func (m *AddMySQLServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddMySQLServiceRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AddMySQLServiceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddMySQLServiceRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AddMySQLServiceRequest) GetUnixSocket() string {
	if m != nil {
		return m.UnixSocket
	}
	return ""
}

type AddMySQLServiceResponse struct {
	Mysql                *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddMySQLServiceResponse) Reset()         { *m = AddMySQLServiceResponse{} }
func (m *AddMySQLServiceResponse) String() string { return proto.CompactTextString(m) }
func (*AddMySQLServiceResponse) ProtoMessage()    {}
func (*AddMySQLServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{7}
}
func (m *AddMySQLServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMySQLServiceResponse.Unmarshal(m, b)
}
func (m *AddMySQLServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMySQLServiceResponse.Marshal(b, m, deterministic)
}
func (dst *AddMySQLServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMySQLServiceResponse.Merge(dst, src)
}
func (m *AddMySQLServiceResponse) XXX_Size() int {
	return xxx_messageInfo_AddMySQLServiceResponse.Size(m)
}
func (m *AddMySQLServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMySQLServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMySQLServiceResponse proto.InternalMessageInfo

func (m *AddMySQLServiceResponse) GetMysql() *MySQLService {
	if m != nil {
		return m.Mysql
	}
	return nil
}

type ChangeMySQLServiceRequest struct {
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Access address (DNS name or IP). Required if unix_socket is absent.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Access port. Required if unix_socket is absent.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Access Unix socket. Required if address and port are absent.
	UnixSocket           string   `protobuf:"bytes,6,opt,name=unix_socket,json=unixSocket,proto3" json:"unix_socket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeMySQLServiceRequest) Reset()         { *m = ChangeMySQLServiceRequest{} }
func (m *ChangeMySQLServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeMySQLServiceRequest) ProtoMessage()    {}
func (*ChangeMySQLServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{8}
}
func (m *ChangeMySQLServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeMySQLServiceRequest.Unmarshal(m, b)
}
func (m *ChangeMySQLServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeMySQLServiceRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeMySQLServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMySQLServiceRequest.Merge(dst, src)
}
func (m *ChangeMySQLServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeMySQLServiceRequest.Size(m)
}
func (m *ChangeMySQLServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMySQLServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMySQLServiceRequest proto.InternalMessageInfo

func (m *ChangeMySQLServiceRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ChangeMySQLServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ChangeMySQLServiceRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ChangeMySQLServiceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChangeMySQLServiceRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ChangeMySQLServiceRequest) GetUnixSocket() string {
	if m != nil {
		return m.UnixSocket
	}
	return ""
}

type ChangeMySQLServiceResponse struct {
	Mysql                *MySQLService `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ChangeMySQLServiceResponse) Reset()         { *m = ChangeMySQLServiceResponse{} }
func (m *ChangeMySQLServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeMySQLServiceResponse) ProtoMessage()    {}
func (*ChangeMySQLServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{9}
}
func (m *ChangeMySQLServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeMySQLServiceResponse.Unmarshal(m, b)
}
func (m *ChangeMySQLServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeMySQLServiceResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeMySQLServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMySQLServiceResponse.Merge(dst, src)
}
func (m *ChangeMySQLServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeMySQLServiceResponse.Size(m)
}
func (m *ChangeMySQLServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMySQLServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMySQLServiceResponse proto.InternalMessageInfo

func (m *ChangeMySQLServiceResponse) GetMysql() *MySQLService {
	if m != nil {
		return m.Mysql
	}
	return nil
}

type AddAmazonRDSMySQLServiceRequest struct {
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node identifier where this instance runs.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Instance endpoint (full DNS name).
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Instance port.
	Port                 uint32   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAmazonRDSMySQLServiceRequest) Reset()         { *m = AddAmazonRDSMySQLServiceRequest{} }
func (m *AddAmazonRDSMySQLServiceRequest) String() string { return proto.CompactTextString(m) }
func (*AddAmazonRDSMySQLServiceRequest) ProtoMessage()    {}
func (*AddAmazonRDSMySQLServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{10}
}
func (m *AddAmazonRDSMySQLServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceRequest.Unmarshal(m, b)
}
func (m *AddAmazonRDSMySQLServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceRequest.Marshal(b, m, deterministic)
}
func (dst *AddAmazonRDSMySQLServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAmazonRDSMySQLServiceRequest.Merge(dst, src)
}
func (m *AddAmazonRDSMySQLServiceRequest) XXX_Size() int {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceRequest.Size(m)
}
func (m *AddAmazonRDSMySQLServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAmazonRDSMySQLServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAmazonRDSMySQLServiceRequest proto.InternalMessageInfo

func (m *AddAmazonRDSMySQLServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddAmazonRDSMySQLServiceRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AddAmazonRDSMySQLServiceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddAmazonRDSMySQLServiceRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AddAmazonRDSMySQLServiceResponse struct {
	AmazonRdsMysql       *AmazonRDSMySQLService `protobuf:"bytes,1,opt,name=amazon_rds_mysql,json=amazonRdsMysql,proto3" json:"amazon_rds_mysql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AddAmazonRDSMySQLServiceResponse) Reset()         { *m = AddAmazonRDSMySQLServiceResponse{} }
func (m *AddAmazonRDSMySQLServiceResponse) String() string { return proto.CompactTextString(m) }
func (*AddAmazonRDSMySQLServiceResponse) ProtoMessage()    {}
func (*AddAmazonRDSMySQLServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{11}
}
func (m *AddAmazonRDSMySQLServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceResponse.Unmarshal(m, b)
}
func (m *AddAmazonRDSMySQLServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceResponse.Marshal(b, m, deterministic)
}
func (dst *AddAmazonRDSMySQLServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAmazonRDSMySQLServiceResponse.Merge(dst, src)
}
func (m *AddAmazonRDSMySQLServiceResponse) XXX_Size() int {
	return xxx_messageInfo_AddAmazonRDSMySQLServiceResponse.Size(m)
}
func (m *AddAmazonRDSMySQLServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAmazonRDSMySQLServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddAmazonRDSMySQLServiceResponse proto.InternalMessageInfo

func (m *AddAmazonRDSMySQLServiceResponse) GetAmazonRdsMysql() *AmazonRDSMySQLService {
	if m != nil {
		return m.AmazonRdsMysql
	}
	return nil
}

type ChangeAmazonRDSMySQLServiceRequest struct {
	// Unique randomly generated instance identifier.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Unique across all Services user-defined name.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Instance endpoint (full DNS name).
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Instance port.
	Port                 uint32   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeAmazonRDSMySQLServiceRequest) Reset()         { *m = ChangeAmazonRDSMySQLServiceRequest{} }
func (m *ChangeAmazonRDSMySQLServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeAmazonRDSMySQLServiceRequest) ProtoMessage()    {}
func (*ChangeAmazonRDSMySQLServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{12}
}
func (m *ChangeAmazonRDSMySQLServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest.Unmarshal(m, b)
}
func (m *ChangeAmazonRDSMySQLServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeAmazonRDSMySQLServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest.Merge(dst, src)
}
func (m *ChangeAmazonRDSMySQLServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest.Size(m)
}
func (m *ChangeAmazonRDSMySQLServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeAmazonRDSMySQLServiceRequest proto.InternalMessageInfo

func (m *ChangeAmazonRDSMySQLServiceRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ChangeAmazonRDSMySQLServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ChangeAmazonRDSMySQLServiceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChangeAmazonRDSMySQLServiceRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ChangeAmazonRDSMySQLServiceResponse struct {
	AmazonRdsMysql       *AmazonRDSMySQLService `protobuf:"bytes,1,opt,name=amazon_rds_mysql,json=amazonRdsMysql,proto3" json:"amazon_rds_mysql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ChangeAmazonRDSMySQLServiceResponse) Reset()         { *m = ChangeAmazonRDSMySQLServiceResponse{} }
func (m *ChangeAmazonRDSMySQLServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeAmazonRDSMySQLServiceResponse) ProtoMessage()    {}
func (*ChangeAmazonRDSMySQLServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{13}
}
func (m *ChangeAmazonRDSMySQLServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse.Unmarshal(m, b)
}
func (m *ChangeAmazonRDSMySQLServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeAmazonRDSMySQLServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse.Merge(dst, src)
}
func (m *ChangeAmazonRDSMySQLServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse.Size(m)
}
func (m *ChangeAmazonRDSMySQLServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeAmazonRDSMySQLServiceResponse proto.InternalMessageInfo

func (m *ChangeAmazonRDSMySQLServiceResponse) GetAmazonRdsMysql() *AmazonRDSMySQLService {
	if m != nil {
		return m.AmazonRdsMysql
	}
	return nil
}

type RemoveServiceRequest struct {
	// Unique randomly generated instance identifier.
	ServiceId            string   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveServiceRequest) Reset()         { *m = RemoveServiceRequest{} }
func (m *RemoveServiceRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveServiceRequest) ProtoMessage()    {}
func (*RemoveServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{14}
}
func (m *RemoveServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveServiceRequest.Unmarshal(m, b)
}
func (m *RemoveServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveServiceRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServiceRequest.Merge(dst, src)
}
func (m *RemoveServiceRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveServiceRequest.Size(m)
}
func (m *RemoveServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServiceRequest proto.InternalMessageInfo

func (m *RemoveServiceRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

type RemoveServiceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveServiceResponse) Reset()         { *m = RemoveServiceResponse{} }
func (m *RemoveServiceResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveServiceResponse) ProtoMessage()    {}
func (*RemoveServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_daa459a95988729b, []int{15}
}
func (m *RemoveServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveServiceResponse.Unmarshal(m, b)
}
func (m *RemoveServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveServiceResponse.Marshal(b, m, deterministic)
}
func (dst *RemoveServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServiceResponse.Merge(dst, src)
}
func (m *RemoveServiceResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveServiceResponse.Size(m)
}
func (m *RemoveServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MySQLService)(nil), "inventory.MySQLService")
	proto.RegisterType((*AmazonRDSMySQLService)(nil), "inventory.AmazonRDSMySQLService")
	proto.RegisterType((*ListServicesRequest)(nil), "inventory.ListServicesRequest")
	proto.RegisterType((*ListServicesResponse)(nil), "inventory.ListServicesResponse")
	proto.RegisterType((*GetServiceRequest)(nil), "inventory.GetServiceRequest")
	proto.RegisterType((*GetServiceResponse)(nil), "inventory.GetServiceResponse")
	proto.RegisterType((*AddMySQLServiceRequest)(nil), "inventory.AddMySQLServiceRequest")
	proto.RegisterType((*AddMySQLServiceResponse)(nil), "inventory.AddMySQLServiceResponse")
	proto.RegisterType((*ChangeMySQLServiceRequest)(nil), "inventory.ChangeMySQLServiceRequest")
	proto.RegisterType((*ChangeMySQLServiceResponse)(nil), "inventory.ChangeMySQLServiceResponse")
	proto.RegisterType((*AddAmazonRDSMySQLServiceRequest)(nil), "inventory.AddAmazonRDSMySQLServiceRequest")
	proto.RegisterType((*AddAmazonRDSMySQLServiceResponse)(nil), "inventory.AddAmazonRDSMySQLServiceResponse")
	proto.RegisterType((*ChangeAmazonRDSMySQLServiceRequest)(nil), "inventory.ChangeAmazonRDSMySQLServiceRequest")
	proto.RegisterType((*ChangeAmazonRDSMySQLServiceResponse)(nil), "inventory.ChangeAmazonRDSMySQLServiceResponse")
	proto.RegisterType((*RemoveServiceRequest)(nil), "inventory.RemoveServiceRequest")
	proto.RegisterType((*RemoveServiceResponse)(nil), "inventory.RemoveServiceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServicesClient interface {
	// ListServices returns a list of all Services.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// GetService returns a single Service by ID.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	// AddMySQLService adds MySQL Service.
	AddMySQLService(ctx context.Context, in *AddMySQLServiceRequest, opts ...grpc.CallOption) (*AddMySQLServiceResponse, error)
	// ChangeMySQLService changes MySQL Service.
	ChangeMySQLService(ctx context.Context, in *ChangeMySQLServiceRequest, opts ...grpc.CallOption) (*ChangeMySQLServiceResponse, error)
	// AddAmazonRDSMySQLService adds AmazonRDSMySQL Service.
	AddAmazonRDSMySQLService(ctx context.Context, in *AddAmazonRDSMySQLServiceRequest, opts ...grpc.CallOption) (*AddAmazonRDSMySQLServiceResponse, error)
	// ChangeAmazonRDSMySQLService changes AmazonRDSMySQL Service.
	ChangeAmazonRDSMySQLService(ctx context.Context, in *ChangeAmazonRDSMySQLServiceRequest, opts ...grpc.CallOption) (*ChangeAmazonRDSMySQLServiceResponse, error)
	// RemoveService removes Service without any Agents.
	RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*RemoveServiceResponse, error)
}

type servicesClient struct {
	cc *grpc.ClientConn
}

func NewServicesClient(cc *grpc.ClientConn) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) AddMySQLService(ctx context.Context, in *AddMySQLServiceRequest, opts ...grpc.CallOption) (*AddMySQLServiceResponse, error) {
	out := new(AddMySQLServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/AddMySQLService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ChangeMySQLService(ctx context.Context, in *ChangeMySQLServiceRequest, opts ...grpc.CallOption) (*ChangeMySQLServiceResponse, error) {
	out := new(ChangeMySQLServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/ChangeMySQLService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) AddAmazonRDSMySQLService(ctx context.Context, in *AddAmazonRDSMySQLServiceRequest, opts ...grpc.CallOption) (*AddAmazonRDSMySQLServiceResponse, error) {
	out := new(AddAmazonRDSMySQLServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/AddAmazonRDSMySQLService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ChangeAmazonRDSMySQLService(ctx context.Context, in *ChangeAmazonRDSMySQLServiceRequest, opts ...grpc.CallOption) (*ChangeAmazonRDSMySQLServiceResponse, error) {
	out := new(ChangeAmazonRDSMySQLServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/ChangeAmazonRDSMySQLService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*RemoveServiceResponse, error) {
	out := new(RemoveServiceResponse)
	err := c.cc.Invoke(ctx, "/inventory.Services/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
type ServicesServer interface {
	// ListServices returns a list of all Services.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// GetService returns a single Service by ID.
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	// AddMySQLService adds MySQL Service.
	AddMySQLService(context.Context, *AddMySQLServiceRequest) (*AddMySQLServiceResponse, error)
	// ChangeMySQLService changes MySQL Service.
	ChangeMySQLService(context.Context, *ChangeMySQLServiceRequest) (*ChangeMySQLServiceResponse, error)
	// AddAmazonRDSMySQLService adds AmazonRDSMySQL Service.
	AddAmazonRDSMySQLService(context.Context, *AddAmazonRDSMySQLServiceRequest) (*AddAmazonRDSMySQLServiceResponse, error)
	// ChangeAmazonRDSMySQLService changes AmazonRDSMySQL Service.
	ChangeAmazonRDSMySQLService(context.Context, *ChangeAmazonRDSMySQLServiceRequest) (*ChangeAmazonRDSMySQLServiceResponse, error)
	// RemoveService removes Service without any Agents.
	RemoveService(context.Context, *RemoveServiceRequest) (*RemoveServiceResponse, error)
}

func RegisterServicesServer(s *grpc.Server, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_AddMySQLService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMySQLServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).AddMySQLService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/AddMySQLService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).AddMySQLService(ctx, req.(*AddMySQLServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ChangeMySQLService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMySQLServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ChangeMySQLService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/ChangeMySQLService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ChangeMySQLService(ctx, req.(*ChangeMySQLServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_AddAmazonRDSMySQLService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAmazonRDSMySQLServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).AddAmazonRDSMySQLService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/AddAmazonRDSMySQLService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).AddAmazonRDSMySQLService(ctx, req.(*AddAmazonRDSMySQLServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ChangeAmazonRDSMySQLService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAmazonRDSMySQLServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ChangeAmazonRDSMySQLService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/ChangeAmazonRDSMySQLService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ChangeAmazonRDSMySQLService(ctx, req.(*ChangeAmazonRDSMySQLServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Services/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).RemoveService(ctx, req.(*RemoveServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Services_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Services_GetService_Handler,
		},
		{
			MethodName: "AddMySQLService",
			Handler:    _Services_AddMySQLService_Handler,
		},
		{
			MethodName: "ChangeMySQLService",
			Handler:    _Services_ChangeMySQLService_Handler,
		},
		{
			MethodName: "AddAmazonRDSMySQLService",
			Handler:    _Services_AddAmazonRDSMySQLService_Handler,
		},
		{
			MethodName: "ChangeAmazonRDSMySQLService",
			Handler:    _Services_ChangeAmazonRDSMySQLService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _Services_RemoveService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/services.proto",
}

func init() { proto.RegisterFile("inventory/services.proto", fileDescriptor_services_daa459a95988729b) }

var fileDescriptor_services_daa459a95988729b = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6e, 0xfb, 0x44,
	0x10, 0xc7, 0xb3, 0x69, 0x9a, 0x34, 0x93, 0x16, 0xc2, 0xd2, 0x12, 0xd7, 0x6d, 0x89, 0xbb, 0xb4,
	0x10, 0x52, 0x25, 0x86, 0x56, 0xea, 0x21, 0x12, 0x87, 0x06, 0xa4, 0xa6, 0xa5, 0x45, 0xc2, 0xb9,
	0x20, 0x2e, 0x91, 0x5b, 0x2f, 0xa9, 0xd5, 0xc4, 0x9b, 0xda, 0x6e, 0x4a, 0x11, 0x27, 0xc4, 0x03,
	0x80, 0xb8, 0x23, 0x8e, 0x5c, 0x91, 0x38, 0x00, 0xaf, 0xc1, 0x19, 0x21, 0x21, 0xee, 0xbc, 0x02,
	0xca, 0x7a, 0x9d, 0x38, 0xf1, 0x9f, 0x46, 0xfd, 0xfd, 0x2a, 0xf5, 0x16, 0xef, 0xce, 0xec, 0x7c,
	0xe6, 0xeb, 0x99, 0x59, 0x07, 0x24, 0xd3, 0x1a, 0x52, 0xcb, 0x65, 0xf6, 0xbd, 0xea, 0x50, 0x7b,
	0x68, 0x5e, 0x52, 0xa7, 0x3e, 0xb0, 0x99, 0xcb, 0x70, 0x7e, 0xbc, 0x23, 0x1f, 0x76, 0x4d, 0xf7,
	0xea, 0xf6, 0xa2, 0x7e, 0xc9, 0xfa, 0x6a, 0xff, 0xce, 0x74, 0xaf, 0xd9, 0x9d, 0xda, 0x65, 0x35,
	0x6e, 0x57, 0x1b, 0xea, 0x3d, 0xd3, 0xd0, 0x5d, 0x66, 0x3b, 0xea, 0xf8, 0xa7, 0x77, 0x84, 0xbc,
	0xd9, 0x65, 0xac, 0xdb, 0xa3, 0xaa, 0x3e, 0x30, 0x55, 0xdd, 0xb2, 0x98, 0xab, 0xbb, 0x26, 0xb3,
	0x44, 0x00, 0xf2, 0x1b, 0x82, 0xe5, 0xf3, 0xfb, 0xf6, 0xa7, 0x67, 0x6d, 0x2f, 0x30, 0xde, 0x02,
	0x10, 0x0c, 0x1d, 0xd3, 0x90, 0x90, 0x82, 0x2a, 0x79, 0x2d, 0x2f, 0x56, 0x4e, 0x0c, 0xbc, 0x0d,
	0xcb, 0xfe, 0xb6, 0xa5, 0xf7, 0xa9, 0x94, 0xe6, 0x06, 0x05, 0xb1, 0xf6, 0x89, 0xde, 0xa7, 0xb8,
	0x04, 0x39, 0x8b, 0x19, 0xdc, 0x7d, 0x81, 0xef, 0x66, 0x47, 0x8f, 0x27, 0x06, 0x96, 0x20, 0xa7,
	0x1b, 0x86, 0x4d, 0x1d, 0x47, 0xca, 0xf0, 0x0d, 0xff, 0x11, 0x63, 0xc8, 0x0c, 0x98, 0xed, 0x4a,
	0x8b, 0x0a, 0xaa, 0xac, 0x68, 0xfc, 0x37, 0x2e, 0x43, 0xe1, 0xd6, 0x32, 0xbf, 0xec, 0x38, 0xec,
	0xf2, 0x9a, 0xba, 0x52, 0x96, 0x7b, 0xc0, 0x68, 0xa9, 0xcd, 0x57, 0xc8, 0x4f, 0x08, 0xd6, 0x8e,
	0xfa, 0xfa, 0x57, 0xcc, 0xd2, 0x3e, 0x6a, 0x3f, 0xcb, 0x1c, 0x48, 0x03, 0x5e, 0x3f, 0x33, 0x1d,
	0x57, 0x70, 0x39, 0x1a, 0xbd, 0xb9, 0xa5, 0x8e, 0x8b, 0xd7, 0x27, 0xa7, 0x73, 0xb8, 0x56, 0xca,
	0x3f, 0xbf, 0xb9, 0x04, 0xd9, 0x2f, 0xcc, 0x9e, 0x4b, 0x6d, 0xf2, 0x3d, 0x82, 0xd5, 0x69, 0x67,
	0x67, 0xc0, 0x2c, 0x87, 0xe2, 0x1a, 0x2c, 0xf6, 0xef, 0x9d, 0x9b, 0x9e, 0x84, 0x94, 0x85, 0x4a,
	0x61, 0xbf, 0x54, 0x1f, 0xd7, 0x48, 0x3d, 0xa8, 0x82, 0xe6, 0x59, 0xe1, 0x53, 0x28, 0xea, 0x5c,
	0xa5, 0x8e, 0x6d, 0x38, 0x1d, 0xcf, 0x33, 0xcd, 0x3d, 0x95, 0x80, 0x67, 0xa4, 0x90, 0xda, 0x2b,
	0x9e, 0xa7, 0x66, 0x38, 0xe7, 0x23, 0x3f, 0xd2, 0x80, 0xd7, 0x8e, 0xa9, 0x4f, 0xe4, 0x67, 0xb3,
	0x1b, 0x56, 0xbb, 0x99, 0xfd, 0xe7, 0xef, 0x72, 0xfa, 0x33, 0x14, 0x50, 0x9d, 0xfc, 0x88, 0x00,
	0x07, 0x9d, 0x45, 0x36, 0xea, 0x24, 0x1b, 0x94, 0x90, 0x4d, 0x2b, 0xe5, 0xe7, 0x73, 0x16, 0x99,
	0x0f, 0x9a, 0x27, 0x9f, 0x56, 0x6a, 0x36, 0xa3, 0x66, 0x1e, 0x72, 0x02, 0x91, 0xfc, 0x8e, 0xe0,
	0x8d, 0x23, 0xc3, 0x98, 0x12, 0x40, 0xa4, 0xf8, 0x6e, 0x54, 0xc5, 0x8c, 0x93, 0x9c, 0xaa, 0x9c,
	0xf2, 0x4c, 0xe5, 0x8c, 0xad, 0x9e, 0xa6, 0x0b, 0x4e, 0x33, 0x4b, 0xa8, 0x98, 0x26, 0x2d, 0x28,
	0x85, 0xd0, 0xc3, 0xe5, 0x82, 0x1e, 0x2e, 0x17, 0xf2, 0x17, 0x82, 0xf5, 0x0f, 0xaf, 0x74, 0xab,
	0x4b, 0xa3, 0x84, 0x98, 0xef, 0x5d, 0x3f, 0x63, 0xbd, 0xc8, 0xc7, 0x20, 0x47, 0xa5, 0xf7, 0x38,
	0xb1, 0x7e, 0x41, 0x50, 0x3e, 0x32, 0x8c, 0xe8, 0xe6, 0x79, 0x82, 0xda, 0x51, 0x66, 0xb4, 0x18,
	0x1b, 0x8c, 0x35, 0x91, 0x83, 0x9a, 0x78, 0xdb, 0xc5, 0x94, 0xa7, 0x8d, 0x28, 0x15, 0x0b, 0x94,
	0x78, 0x64, 0x21, 0x43, 0xd4, 0xcc, 0x40, 0xf3, 0xf5, 0x58, 0x68, 0x66, 0xfc, 0x81, 0x80, 0x78,
	0x8a, 0x27, 0xca, 0xf4, 0xf2, 0x2b, 0xeb, 0x45, 0xc5, 0x5a, 0x28, 0x66, 0xc8, 0x0d, 0xbc, 0x95,
	0xc8, 0xfe, 0x04, 0x7a, 0x7d, 0x00, 0xab, 0x1a, 0xed, 0xb3, 0x21, 0x7d, 0xdc, 0x98, 0x2d, 0xc1,
	0xda, 0x8c, 0xbb, 0xc7, 0xb8, 0xff, 0x5f, 0x0e, 0x96, 0xfc, 0xbb, 0x04, 0xdf, 0xc1, 0x72, 0xf0,
	0x6e, 0xc1, 0x6f, 0x06, 0x30, 0x23, 0x6e, 0x2c, 0xb9, 0x1c, 0xbb, 0xef, 0x9d, 0x4e, 0xde, 0xfe,
	0xe6, 0xcf, 0x7f, 0x7f, 0x48, 0x2b, 0x64, 0x43, 0x1d, 0xbe, 0xaf, 0x4e, 0x3e, 0x67, 0x7c, 0x3b,
	0x75, 0xe4, 0xd4, 0x40, 0x55, 0x3c, 0x00, 0x98, 0x5c, 0x02, 0x78, 0x33, 0x70, 0x6c, 0xe8, 0x62,
	0x91, 0xb7, 0x62, 0x76, 0x45, 0xc8, 0x5d, 0x1e, 0xb2, 0x4c, 0xe4, 0x98, 0x90, 0xc7, 0x94, 0x47,
	0xfc, 0x16, 0xc1, 0xab, 0x33, 0xb3, 0x11, 0x6f, 0x07, 0xdf, 0x4a, 0xe4, 0xc8, 0x97, 0x49, 0x92,
	0x89, 0x20, 0xa8, 0x72, 0x82, 0x1d, 0x52, 0x8e, 0x21, 0xf0, 0xfd, 0x46, 0x18, 0xdf, 0x21, 0xc0,
	0xe1, 0xc1, 0x83, 0x77, 0x02, 0x61, 0x62, 0xc7, 0xae, 0xbc, 0xfb, 0x80, 0x95, 0xe0, 0xa9, 0x71,
	0x9e, 0x77, 0x08, 0x89, 0xe1, 0x09, 0xb8, 0x8e, 0x90, 0x7e, 0x46, 0x20, 0xc5, 0x8d, 0x02, 0x5c,
	0x9d, 0xce, 0x3f, 0xa9, 0x77, 0xe5, 0xbd, 0xb9, 0x6c, 0x05, 0xe4, 0x01, 0x87, 0xac, 0x91, 0x4a,
	0xbc, 0x68, 0xd3, 0x07, 0x8c, 0x50, 0x7f, 0x45, 0xb0, 0x91, 0xd0, 0x88, 0xb8, 0x16, 0x12, 0x28,
	0x11, 0xb8, 0x3e, 0xaf, 0xb9, 0x60, 0x3e, 0xe4, 0xcc, 0xef, 0x91, 0xbd, 0x44, 0x61, 0xc3, 0xd8,
	0x5f, 0xc3, 0xca, 0x54, 0x33, 0xe2, 0x60, 0x1f, 0x45, 0x75, 0xb9, 0xac, 0xc4, 0x1b, 0x08, 0x96,
	0x0a, 0x67, 0x21, 0x64, 0x2b, 0x86, 0xc5, 0xf3, 0x6a, 0xa0, 0x6a, 0xb3, 0xf0, 0xf9, 0xe4, 0xef,
	0xc3, 0x45, 0x96, 0x7f, 0xef, 0x1f, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x61, 0x9e, 0x6d, 0x46,
	0x6c, 0x0c, 0x00, 0x00,
}
