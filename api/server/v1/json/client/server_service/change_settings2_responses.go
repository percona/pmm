// Code generated by go-swagger; DO NOT EDIT.

package server_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangeSettings2Reader is a Reader for the ChangeSettings2 structure.
type ChangeSettings2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeSettings2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeSettings2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangeSettings2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangeSettings2OK creates a ChangeSettings2OK with default headers values
func NewChangeSettings2OK() *ChangeSettings2OK {
	return &ChangeSettings2OK{}
}

/*
ChangeSettings2OK describes a response with status code 200, with default header values.

A successful response.
*/
type ChangeSettings2OK struct {
	Payload *ChangeSettings2OKBody
}

func (o *ChangeSettings2OK) Error() string {
	return fmt.Sprintf("[PATCH /v1/Settings/Change][%d] changeSettings2Ok  %+v", 200, o.Payload)
}

func (o *ChangeSettings2OK) GetPayload() *ChangeSettings2OKBody {
	return o.Payload
}

func (o *ChangeSettings2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ChangeSettings2OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeSettings2Default creates a ChangeSettings2Default with default headers values
func NewChangeSettings2Default(code int) *ChangeSettings2Default {
	return &ChangeSettings2Default{
		_statusCode: code,
	}
}

/*
ChangeSettings2Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ChangeSettings2Default struct {
	_statusCode int

	Payload *ChangeSettings2DefaultBody
}

// Code gets the status code for the change settings2 default response
func (o *ChangeSettings2Default) Code() int {
	return o._statusCode
}

func (o *ChangeSettings2Default) Error() string {
	return fmt.Sprintf("[PATCH /v1/Settings/Change][%d] ChangeSettings2 default  %+v", o._statusCode, o.Payload)
}

func (o *ChangeSettings2Default) GetPayload() *ChangeSettings2DefaultBody {
	return o.Payload
}

func (o *ChangeSettings2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ChangeSettings2DefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ChangeSettings2Body change settings2 body
swagger:model ChangeSettings2Body
*/
type ChangeSettings2Body struct {
	// enable updates
	EnableUpdates bool `json:"enable_updates,omitempty"`

	// enable telemetry
	EnableTelemetry bool `json:"enable_telemetry,omitempty"`

	// A number of full days for Prometheus and QAN data retention. Should have a suffix in JSON: 2592000s, 43200m, 720h.
	DataRetention string `json:"data_retention,omitempty"`

	// ssh key
	SSHKey string `json:"ssh_key,omitempty"`

	// Enable Security Threat Tool.
	EnableStt bool `json:"enable_stt,omitempty"`

	// Enable Alerting.
	EnableAlerting bool `json:"enable_alerting,omitempty"`

	// PMM Server public address.
	PMMPublicAddress string `json:"pmm_public_address,omitempty"`

	// Enable Azure Discover.
	EnableAzurediscover bool `json:"enable_azurediscover,omitempty"`

	// Enable Backup Management.
	EnableBackupManagement bool `json:"enable_backup_management,omitempty"`

	// Enable Access Control
	EnableAccessControl bool `json:"enable_access_control,omitempty"`

	// aws partitions
	AWSPartitions *ChangeSettings2ParamsBodyAWSPartitions `json:"aws_partitions,omitempty"`

	// metrics resolutions
	MetricsResolutions *ChangeSettings2ParamsBodyMetricsResolutions `json:"metrics_resolutions,omitempty"`

	// stt check intervals
	SttCheckIntervals *ChangeSettings2ParamsBodySttCheckIntervals `json:"stt_check_intervals,omitempty"`
}

// Validate validates this change settings2 body
func (o *ChangeSettings2Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAWSPartitions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSttCheckIntervals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2Body) validateAWSPartitions(formats strfmt.Registry) error {
	if swag.IsZero(o.AWSPartitions) { // not required
		return nil
	}

	if o.AWSPartitions != nil {
		if err := o.AWSPartitions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "aws_partitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "aws_partitions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2Body) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2Body) validateSttCheckIntervals(formats strfmt.Registry) error {
	if swag.IsZero(o.SttCheckIntervals) { // not required
		return nil
	}

	if o.SttCheckIntervals != nil {
		if err := o.SttCheckIntervals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "stt_check_intervals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "stt_check_intervals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change settings2 body based on the context it is used
func (o *ChangeSettings2Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAWSPartitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSttCheckIntervals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2Body) contextValidateAWSPartitions(ctx context.Context, formats strfmt.Registry) error {
	if o.AWSPartitions != nil {
		if err := o.AWSPartitions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "aws_partitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "aws_partitions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2Body) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2Body) contextValidateSttCheckIntervals(ctx context.Context, formats strfmt.Registry) error {
	if o.SttCheckIntervals != nil {
		if err := o.SttCheckIntervals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "stt_check_intervals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "stt_check_intervals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2Body) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2DefaultBody change settings2 default body
swagger:model ChangeSettings2DefaultBody
*/
type ChangeSettings2DefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ChangeSettings2DefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this change settings2 default body
func (o *ChangeSettings2DefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2DefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeSettings2 default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangeSettings2 default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change settings2 default body based on the context it is used
func (o *ChangeSettings2DefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2DefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeSettings2 default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangeSettings2 default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2DefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2DefaultBody) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2DefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2DefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//     // or ...
//     if (any.isSameTypeAs(Foo.getDefaultInstance())) {
//       foo = any.unpack(Foo.getDefaultInstance());
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ChangeSettings2DefaultBodyDetailsItems0
*/
type ChangeSettings2DefaultBodyDetailsItems0 struct {
	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com. As of May 2023, there are no widely used type server
	// implementations and no plans to implement one.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this change settings2 default body details items0
func (o *ChangeSettings2DefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 default body details items0 based on context it is used
func (o *ChangeSettings2DefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2DefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2DefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2DefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2OKBody change settings2 OK body
swagger:model ChangeSettings2OKBody
*/
type ChangeSettings2OKBody struct {
	// settings
	Settings *ChangeSettings2OKBodySettings `json:"settings,omitempty"`
}

// Validate validates this change settings2 OK body
func (o *ChangeSettings2OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2OKBody) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.Settings) { // not required
		return nil
	}

	if o.Settings != nil {
		if err := o.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change settings2 OK body based on the context it is used
func (o *ChangeSettings2OKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2OKBody) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {
	if o.Settings != nil {
		if err := o.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2OKBody) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2OKBodySettings Settings represents PMM Server settings.
swagger:model ChangeSettings2OKBodySettings
*/
type ChangeSettings2OKBodySettings struct {
	// True if updates are enabled.
	UpdatesEnabled bool `json:"updates_enabled,omitempty"`

	// True if telemetry is enabled.
	TelemetryEnabled bool `json:"telemetry_enabled,omitempty"`

	// data retention
	DataRetention string `json:"data_retention,omitempty"`

	// ssh key
	SSHKey string `json:"ssh_key,omitempty"`

	// aws partitions
	AWSPartitions []string `json:"aws_partitions"`

	// True if Security Threat Tool is enabled.
	SttEnabled bool `json:"stt_enabled,omitempty"`

	// Percona Platform user's email, if this PMM instance is linked to the Platform.
	PlatformEmail string `json:"platform_email,omitempty"`

	// True if Alerting is enabled.
	AlertingEnabled bool `json:"alerting_enabled,omitempty"`

	// PMM Server public address.
	PMMPublicAddress string `json:"pmm_public_address,omitempty"`

	// True if Backup Management is enabled.
	BackupManagementEnabled bool `json:"backup_management_enabled,omitempty"`

	// True if Azure Discover is enabled.
	AzurediscoverEnabled bool `json:"azurediscover_enabled,omitempty"`

	// True if the PMM instance is connected to Platform
	ConnectedToPlatform bool `json:"connected_to_platform,omitempty"`

	// Includes list of collected telemetry
	TelemetrySummaries []string `json:"telemetry_summaries"`

	// True if Access Control is enabled.
	EnableAccessControl bool `json:"enable_access_control,omitempty"`

	// Default Access Control role ID for new users.
	DefaultRoleID int64 `json:"default_role_id,omitempty"`

	// metrics resolutions
	MetricsResolutions *ChangeSettings2OKBodySettingsMetricsResolutions `json:"metrics_resolutions,omitempty"`

	// stt check intervals
	SttCheckIntervals *ChangeSettings2OKBodySettingsSttCheckIntervals `json:"stt_check_intervals,omitempty"`
}

// Validate validates this change settings2 OK body settings
func (o *ChangeSettings2OKBodySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSttCheckIntervals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2OKBodySettings) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2OKBodySettings) validateSttCheckIntervals(formats strfmt.Registry) error {
	if swag.IsZero(o.SttCheckIntervals) { // not required
		return nil
	}

	if o.SttCheckIntervals != nil {
		if err := o.SttCheckIntervals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "stt_check_intervals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "stt_check_intervals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change settings2 OK body settings based on the context it is used
func (o *ChangeSettings2OKBodySettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSttCheckIntervals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSettings2OKBodySettings) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeSettings2OKBodySettings) contextValidateSttCheckIntervals(ctx context.Context, formats strfmt.Registry) error {
	if o.SttCheckIntervals != nil {
		if err := o.SttCheckIntervals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "stt_check_intervals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changeSettings2Ok" + "." + "settings" + "." + "stt_check_intervals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettings) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2OKBodySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2OKBodySettingsMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model ChangeSettings2OKBodySettingsMetricsResolutions
*/
type ChangeSettings2OKBodySettingsMetricsResolutions struct {
	// High resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Mr string `json:"mr,omitempty"`

	// Low resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this change settings2 OK body settings metrics resolutions
func (o *ChangeSettings2OKBodySettingsMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 OK body settings metrics resolutions based on context it is used
func (o *ChangeSettings2OKBodySettingsMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettingsMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettingsMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2OKBodySettingsMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2OKBodySettingsSttCheckIntervals STTCheckIntervals represents intervals between STT checks.
swagger:model ChangeSettings2OKBodySettingsSttCheckIntervals
*/
type ChangeSettings2OKBodySettingsSttCheckIntervals struct {
	// Standard check interval.
	StandardInterval string `json:"standard_interval,omitempty"`

	// Interval for rare check runs.
	RareInterval string `json:"rare_interval,omitempty"`

	// Interval for frequent check runs.
	FrequentInterval string `json:"frequent_interval,omitempty"`
}

// Validate validates this change settings2 OK body settings stt check intervals
func (o *ChangeSettings2OKBodySettingsSttCheckIntervals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 OK body settings stt check intervals based on context it is used
func (o *ChangeSettings2OKBodySettingsSttCheckIntervals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettingsSttCheckIntervals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2OKBodySettingsSttCheckIntervals) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2OKBodySettingsSttCheckIntervals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2ParamsBodyAWSPartitions change settings2 params body AWS partitions
swagger:model ChangeSettings2ParamsBodyAWSPartitions
*/
type ChangeSettings2ParamsBodyAWSPartitions struct {
	// values
	Values []string `json:"values"`
}

// Validate validates this change settings2 params body AWS partitions
func (o *ChangeSettings2ParamsBodyAWSPartitions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 params body AWS partitions based on context it is used
func (o *ChangeSettings2ParamsBodyAWSPartitions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodyAWSPartitions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodyAWSPartitions) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2ParamsBodyAWSPartitions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2ParamsBodyMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model ChangeSettings2ParamsBodyMetricsResolutions
*/
type ChangeSettings2ParamsBodyMetricsResolutions struct {
	// High resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Mr string `json:"mr,omitempty"`

	// Low resolution. Should have a suffix in JSON: 1s, 1m, 1h.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this change settings2 params body metrics resolutions
func (o *ChangeSettings2ParamsBodyMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 params body metrics resolutions based on context it is used
func (o *ChangeSettings2ParamsBodyMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodyMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodyMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2ParamsBodyMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangeSettings2ParamsBodySttCheckIntervals STTCheckIntervals represents intervals between STT checks.
swagger:model ChangeSettings2ParamsBodySttCheckIntervals
*/
type ChangeSettings2ParamsBodySttCheckIntervals struct {
	// Standard check interval.
	StandardInterval string `json:"standard_interval,omitempty"`

	// Interval for rare check runs.
	RareInterval string `json:"rare_interval,omitempty"`

	// Interval for frequent check runs.
	FrequentInterval string `json:"frequent_interval,omitempty"`
}

// Validate validates this change settings2 params body stt check intervals
func (o *ChangeSettings2ParamsBodySttCheckIntervals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change settings2 params body stt check intervals based on context it is used
func (o *ChangeSettings2ParamsBodySttCheckIntervals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodySttCheckIntervals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSettings2ParamsBodySttCheckIntervals) UnmarshalBinary(b []byte) error {
	var res ChangeSettings2ParamsBodySttCheckIntervals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
