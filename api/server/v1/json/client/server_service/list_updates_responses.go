// Code generated by go-swagger; DO NOT EDIT.

package server_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListUpdatesReader is a Reader for the ListUpdates structure.
type ListUpdatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUpdatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUpdatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListUpdatesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListUpdatesOK creates a ListUpdatesOK with default headers values
func NewListUpdatesOK() *ListUpdatesOK {
	return &ListUpdatesOK{}
}

/*
ListUpdatesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListUpdatesOK struct {
	Payload *ListUpdatesOKBody
}

func (o *ListUpdatesOK) Error() string {
	return fmt.Sprintf("[GET /v1/Updates/List][%d] listUpdatesOk  %+v", 200, o.Payload)
}

func (o *ListUpdatesOK) GetPayload() *ListUpdatesOKBody {
	return o.Payload
}

func (o *ListUpdatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListUpdatesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUpdatesDefault creates a ListUpdatesDefault with default headers values
func NewListUpdatesDefault(code int) *ListUpdatesDefault {
	return &ListUpdatesDefault{
		_statusCode: code,
	}
}

/*
ListUpdatesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListUpdatesDefault struct {
	_statusCode int

	Payload *ListUpdatesDefaultBody
}

// Code gets the status code for the list updates default response
func (o *ListUpdatesDefault) Code() int {
	return o._statusCode
}

func (o *ListUpdatesDefault) Error() string {
	return fmt.Sprintf("[GET /v1/Updates/List][%d] ListUpdates default  %+v", o._statusCode, o.Payload)
}

func (o *ListUpdatesDefault) GetPayload() *ListUpdatesDefaultBody {
	return o.Payload
}

func (o *ListUpdatesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListUpdatesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListUpdatesDefaultBody list updates default body
swagger:model ListUpdatesDefaultBody
*/
type ListUpdatesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListUpdatesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list updates default body
func (o *ListUpdatesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpdatesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListUpdates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListUpdates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list updates default body based on the context it is used
func (o *ListUpdatesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpdatesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListUpdates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListUpdates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListUpdatesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUpdatesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListUpdatesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListUpdatesDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//     // or ...
//     if (any.isSameTypeAs(Foo.getDefaultInstance())) {
//       foo = any.unpack(Foo.getDefaultInstance());
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ListUpdatesDefaultBodyDetailsItems0
*/
type ListUpdatesDefaultBodyDetailsItems0 struct {
	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com. As of May 2023, there are no widely used type server
	// implementations and no plans to implement one.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list updates default body details items0
func (o *ListUpdatesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list updates default body details items0 based on context it is used
func (o *ListUpdatesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListUpdatesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUpdatesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListUpdatesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListUpdatesOKBody list updates OK body
swagger:model ListUpdatesOKBody
*/
type ListUpdatesOKBody struct {
	// List of available updates.
	Updates []*ListUpdatesOKBodyUpdatesItems0 `json:"updates"`

	// Last check time.
	// Format: date-time
	LastCheck strfmt.DateTime `json:"last_check,omitempty"`
}

// Validate validates this list updates OK body
func (o *ListUpdatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastCheck(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpdatesOKBody) validateUpdates(formats strfmt.Registry) error {
	if swag.IsZero(o.Updates) { // not required
		return nil
	}

	for i := 0; i < len(o.Updates); i++ {
		if swag.IsZero(o.Updates[i]) { // not required
			continue
		}

		if o.Updates[i] != nil {
			if err := o.Updates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listUpdatesOk" + "." + "updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listUpdatesOk" + "." + "updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListUpdatesOKBody) validateLastCheck(formats strfmt.Registry) error {
	if swag.IsZero(o.LastCheck) { // not required
		return nil
	}

	if err := validate.FormatOf("listUpdatesOk"+"."+"last_check", "body", "date-time", o.LastCheck.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list updates OK body based on the context it is used
func (o *ListUpdatesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpdatesOKBody) contextValidateUpdates(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Updates); i++ {
		if o.Updates[i] != nil {
			if err := o.Updates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listUpdatesOk" + "." + "updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listUpdatesOk" + "." + "updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListUpdatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUpdatesOKBody) UnmarshalBinary(b []byte) error {
	var res ListUpdatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListUpdatesOKBodyUpdatesItems0 list updates OK body updates items0
swagger:model ListUpdatesOKBodyUpdatesItems0
*/
type ListUpdatesOKBodyUpdatesItems0 struct {
	// PMM Version.
	Version string `json:"version,omitempty"`

	// Docker image tag.
	Tag string `json:"tag,omitempty"`

	// Release date.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// Release notes URL for the version (if available).
	ReleaseNotesURL string `json:"release_notes_url,omitempty"`

	// Release notes text for the version (if available).
	ReleaseNotesText string `json:"release_notes_text,omitempty"`
}

// Validate validates this list updates OK body updates items0
func (o *ListUpdatesOKBodyUpdatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpdatesOKBodyUpdatesItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list updates OK body updates items0 based on context it is used
func (o *ListUpdatesOKBodyUpdatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListUpdatesOKBodyUpdatesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUpdatesOKBodyUpdatesItems0) UnmarshalBinary(b []byte) error {
	var res ListUpdatesOKBodyUpdatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
