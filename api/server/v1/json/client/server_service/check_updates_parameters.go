// Code generated by go-swagger; DO NOT EDIT.

package server_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCheckUpdatesParams creates a new CheckUpdatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCheckUpdatesParams() *CheckUpdatesParams {
	return &CheckUpdatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCheckUpdatesParamsWithTimeout creates a new CheckUpdatesParams object
// with the ability to set a timeout on a request.
func NewCheckUpdatesParamsWithTimeout(timeout time.Duration) *CheckUpdatesParams {
	return &CheckUpdatesParams{
		timeout: timeout,
	}
}

// NewCheckUpdatesParamsWithContext creates a new CheckUpdatesParams object
// with the ability to set a context for a request.
func NewCheckUpdatesParamsWithContext(ctx context.Context) *CheckUpdatesParams {
	return &CheckUpdatesParams{
		Context: ctx,
	}
}

// NewCheckUpdatesParamsWithHTTPClient creates a new CheckUpdatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewCheckUpdatesParamsWithHTTPClient(client *http.Client) *CheckUpdatesParams {
	return &CheckUpdatesParams{
		HTTPClient: client,
	}
}

/*
CheckUpdatesParams contains all the parameters to send to the API endpoint

	for the check updates operation.

	Typically these are written to a http.Request.
*/
type CheckUpdatesParams struct {
	/* Force.

	   If false, cached information may be returned.
	*/
	Force *bool

	/* OnlyInstalledVersion.

	   If true, only installed version will be in response.
	*/
	OnlyInstalledVersion *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the check updates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CheckUpdatesParams) WithDefaults() *CheckUpdatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the check updates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CheckUpdatesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the check updates params
func (o *CheckUpdatesParams) WithTimeout(timeout time.Duration) *CheckUpdatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check updates params
func (o *CheckUpdatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check updates params
func (o *CheckUpdatesParams) WithContext(ctx context.Context) *CheckUpdatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check updates params
func (o *CheckUpdatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check updates params
func (o *CheckUpdatesParams) WithHTTPClient(client *http.Client) *CheckUpdatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check updates params
func (o *CheckUpdatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the check updates params
func (o *CheckUpdatesParams) WithForce(force *bool) *CheckUpdatesParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the check updates params
func (o *CheckUpdatesParams) SetForce(force *bool) {
	o.Force = force
}

// WithOnlyInstalledVersion adds the onlyInstalledVersion to the check updates params
func (o *CheckUpdatesParams) WithOnlyInstalledVersion(onlyInstalledVersion *bool) *CheckUpdatesParams {
	o.SetOnlyInstalledVersion(onlyInstalledVersion)
	return o
}

// SetOnlyInstalledVersion adds the onlyInstalledVersion to the check updates params
func (o *CheckUpdatesParams) SetOnlyInstalledVersion(onlyInstalledVersion *bool) {
	o.OnlyInstalledVersion = onlyInstalledVersion
}

// WriteToRequest writes these params to a swagger request
func (o *CheckUpdatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	if o.OnlyInstalledVersion != nil {

		// query param only_installed_version
		var qrOnlyInstalledVersion bool

		if o.OnlyInstalledVersion != nil {
			qrOnlyInstalledVersion = *o.OnlyInstalledVersion
		}
		qOnlyInstalledVersion := swag.FormatBool(qrOnlyInstalledVersion)
		if qOnlyInstalledVersion != "" {
			if err := r.SetQueryParam("only_installed_version", qOnlyInstalledVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
