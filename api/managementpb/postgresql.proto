syntax = "proto3";

package management;

option go_package = "api/managementpb;managementpb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/agents.proto";
import "inventorypb/services.proto";
import "managementpb/metrics.proto";
import "managementpb/service.proto";

// Add PostgreSQL

message AddPostgreSQLRequest {
  // Node identifier on which a service is been running.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  string node_id = 1;
  // Node name on which a service is been running.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  string node_name = 2;
  // Create a new Node with those parameters.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  AddNodeParams add_node = 3;
  // Unique across all Services user-defined name. Required.
  string service_name = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node and Service access address (DNS name or IP).
  // Address (and port) or socket is required.
  string address = 5;
  // Service Access port.
  // Port is required when the address present.
  uint32 port = 6;
  // Service Access socket.
  // Address (and port) or socket is required.
  string socket = 18;
  // The "pmm-agent" identifier which should run agents. Required.
  string pmm_agent_id = 7 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Environment name.
  string environment = 8;
  // Cluster name.
  string cluster = 9;
  // Replication set name.
  string replication_set = 10;
  // PostgreSQL username for scraping metrics.
  string username = 11 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL password for scraping metrics.
  string password = 12;
  // If true, adds qan-postgresql-pgstatements-agent for provided service.
  bool qan_postgresql_pgstatements_agent = 13;
  // If true, adds qan-postgresql-pgstatmonitor-agent for provided service.
  bool qan_postgresql_pgstatmonitor_agent = 19;
  // Disable query examples.
  bool disable_query_examples = 20;
  // Custom user-assigned labels for Service.
  map<string, string> custom_labels = 14;
  // Skip connection check.
  bool skip_connection_check = 15;
  // Use TLS for database connections.
  bool tls = 16;
  // Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
  bool tls_skip_verify = 17;
  // Defines metrics flow model for this exporter.
  // Metrics could be pushed to the server with vmagent,
  // pulled by the server, or the server could choose behavior automatically.
  MetricsMode metrics_mode = 21;
  // List of collector names to disable in this exporter.
  repeated string disable_collectors = 22;
}

message AddPostgreSQLResponse {
  inventory.PostgreSQLService service = 1;
  inventory.PostgresExporter postgres_exporter = 2;
  inventory.QANPostgreSQLPgStatementsAgent qan_postgresql_pgstatements_agent = 3;
  inventory.QANPostgreSQLPgStatMonitorAgent qan_postgresql_pgstatmonitor_agent = 4;
}

// PostgreSQL service provides public Management API methods for PostgreSQL Service.
service PostgreSQL {
  // AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
  rpc AddPostgreSQL(AddPostgreSQLRequest) returns (AddPostgreSQLResponse) {
    option (google.api.http) = {
      post: "/v1/management/PostgreSQL/Add"
      body: "*"
    };
  }
}
