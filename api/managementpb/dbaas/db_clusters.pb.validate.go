// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/db_clusters.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PSMDBCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PSMDBCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PSMDBCluster with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PSMDBClusterMultiError, or
// nil if none found.
func (m *PSMDBCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *PSMDBCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Exposed

	// no validation rules for InstalledImage

	// no validation rules for AvailableImage

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetBackup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterValidationError{
				field:  "Backup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRestore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterValidationError{
				field:  "Restore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PSMDBClusterMultiError(errors)
	}

	return nil
}

// PSMDBClusterMultiError is an error wrapping multiple validation errors
// returned by PSMDBCluster.ValidateAll() if the designated constraints aren't met.
type PSMDBClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PSMDBClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PSMDBClusterMultiError) AllErrors() []error { return m }

// PSMDBClusterValidationError is the validation error returned by
// PSMDBCluster.Validate if the designated constraints aren't met.
type PSMDBClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PSMDBClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PSMDBClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PSMDBClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PSMDBClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PSMDBClusterValidationError) ErrorName() string { return "PSMDBClusterValidationError" }

// Error satisfies the builtin error interface
func (e PSMDBClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPSMDBCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PSMDBClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PSMDBClusterValidationError{}

// Validate checks the field values on PXCCluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PXCCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PXCClusterMultiError, or
// nil if none found.
func (m *PXCCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Exposed

	// no validation rules for InstalledImage

	// no validation rules for AvailableImage

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetBackup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterValidationError{
				field:  "Backup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRestore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterValidationError{
				field:  "Restore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PXCClusterMultiError(errors)
	}

	return nil
}

// PXCClusterMultiError is an error wrapping multiple validation errors
// returned by PXCCluster.ValidateAll() if the designated constraints aren't met.
type PXCClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterMultiError) AllErrors() []error { return m }

// PXCClusterValidationError is the validation error returned by
// PXCCluster.Validate if the designated constraints aren't met.
type PXCClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterValidationError) ErrorName() string { return "PXCClusterValidationError" }

// Error satisfies the builtin error interface
func (e PXCClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterValidationError{}

// Validate checks the field values on ListDBClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDBClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDBClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDBClustersRequestMultiError, or nil if none found.
func (m *ListDBClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDBClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ListDBClustersRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDBClustersRequestMultiError(errors)
	}

	return nil
}

// ListDBClustersRequestMultiError is an error wrapping multiple validation
// errors returned by ListDBClustersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDBClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDBClustersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDBClustersRequestMultiError) AllErrors() []error { return m }

// ListDBClustersRequestValidationError is the validation error returned by
// ListDBClustersRequest.Validate if the designated constraints aren't met.
type ListDBClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDBClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDBClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDBClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDBClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDBClustersRequestValidationError) ErrorName() string {
	return "ListDBClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDBClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDBClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDBClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDBClustersRequestValidationError{}

// Validate checks the field values on ListDBClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDBClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDBClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDBClustersResponseMultiError, or nil if none found.
func (m *ListDBClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDBClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPxcClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDBClustersResponseValidationError{
						field:  fmt.Sprintf("PxcClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDBClustersResponseValidationError{
						field:  fmt.Sprintf("PxcClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDBClustersResponseValidationError{
					field:  fmt.Sprintf("PxcClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPsmdbClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDBClustersResponseValidationError{
						field:  fmt.Sprintf("PsmdbClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDBClustersResponseValidationError{
						field:  fmt.Sprintf("PsmdbClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDBClustersResponseValidationError{
					field:  fmt.Sprintf("PsmdbClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDBClustersResponseMultiError(errors)
	}

	return nil
}

// ListDBClustersResponseMultiError is an error wrapping multiple validation
// errors returned by ListDBClustersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDBClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDBClustersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDBClustersResponseMultiError) AllErrors() []error { return m }

// ListDBClustersResponseValidationError is the validation error returned by
// ListDBClustersResponse.Validate if the designated constraints aren't met.
type ListDBClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDBClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDBClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDBClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDBClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDBClustersResponseValidationError) ErrorName() string {
	return "ListDBClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDBClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDBClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDBClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDBClustersResponseValidationError{}

// Validate checks the field values on RestartDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDBClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDBClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDBClusterRequestMultiError, or nil if none found.
func (m *RestartDBClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDBClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := RestartDBClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartDBClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DBClusterType_name[int32(m.GetClusterType())]; !ok {
		err := RestartDBClusterRequestValidationError{
			field:  "ClusterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartDBClusterRequestMultiError(errors)
	}

	return nil
}

// RestartDBClusterRequestMultiError is an error wrapping multiple validation
// errors returned by RestartDBClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartDBClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDBClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDBClusterRequestMultiError) AllErrors() []error { return m }

// RestartDBClusterRequestValidationError is the validation error returned by
// RestartDBClusterRequest.Validate if the designated constraints aren't met.
type RestartDBClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDBClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDBClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDBClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDBClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDBClusterRequestValidationError) ErrorName() string {
	return "RestartDBClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDBClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDBClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDBClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDBClusterRequestValidationError{}

// Validate checks the field values on RestartDBClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDBClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDBClusterResponseMultiError, or nil if none found.
func (m *RestartDBClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDBClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartDBClusterResponseMultiError(errors)
	}

	return nil
}

// RestartDBClusterResponseMultiError is an error wrapping multiple validation
// errors returned by RestartDBClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartDBClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDBClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDBClusterResponseMultiError) AllErrors() []error { return m }

// RestartDBClusterResponseValidationError is the validation error returned by
// RestartDBClusterResponse.Validate if the designated constraints aren't met.
type RestartDBClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDBClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDBClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDBClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDBClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDBClusterResponseValidationError) ErrorName() string {
	return "RestartDBClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDBClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDBClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDBClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDBClusterResponseValidationError{}

// Validate checks the field values on GetDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDBClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDBClusterRequestMultiError, or nil if none found.
func (m *GetDBClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDBClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetDBClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetDBClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDBClusterRequestMultiError(errors)
	}

	return nil
}

// GetDBClusterRequestMultiError is an error wrapping multiple validation
// errors returned by GetDBClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDBClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDBClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDBClusterRequestMultiError) AllErrors() []error { return m }

// GetDBClusterRequestValidationError is the validation error returned by
// GetDBClusterRequest.Validate if the designated constraints aren't met.
type GetDBClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDBClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDBClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDBClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDBClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDBClusterRequestValidationError) ErrorName() string {
	return "GetDBClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDBClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDBClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDBClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDBClusterRequestValidationError{}

// Validate checks the field values on GetDBClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDBClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDBClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDBClusterResponseMultiError, or nil if none found.
func (m *GetDBClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDBClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPxcCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDBClusterResponseValidationError{
					field:  "PxcCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDBClusterResponseValidationError{
					field:  "PxcCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPxcCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDBClusterResponseValidationError{
				field:  "PxcCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPsmdbCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDBClusterResponseValidationError{
					field:  "PsmdbCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDBClusterResponseValidationError{
					field:  "PsmdbCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPsmdbCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDBClusterResponseValidationError{
				field:  "PsmdbCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDBClusterResponseMultiError(errors)
	}

	return nil
}

// GetDBClusterResponseMultiError is an error wrapping multiple validation
// errors returned by GetDBClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDBClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDBClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDBClusterResponseMultiError) AllErrors() []error { return m }

// GetDBClusterResponseValidationError is the validation error returned by
// GetDBClusterResponse.Validate if the designated constraints aren't met.
type GetDBClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDBClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDBClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDBClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDBClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDBClusterResponseValidationError) ErrorName() string {
	return "GetDBClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDBClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDBClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDBClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDBClusterResponseValidationError{}

// Validate checks the field values on DeleteDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDBClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDBClusterRequestMultiError, or nil if none found.
func (m *DeleteDBClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDBClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := DeleteDBClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteDBClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DBClusterType_name[int32(m.GetClusterType())]; !ok {
		err := DeleteDBClusterRequestValidationError{
			field:  "ClusterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDBClusterRequestMultiError(errors)
	}

	return nil
}

// DeleteDBClusterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDBClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDBClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDBClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDBClusterRequestMultiError) AllErrors() []error { return m }

// DeleteDBClusterRequestValidationError is the validation error returned by
// DeleteDBClusterRequest.Validate if the designated constraints aren't met.
type DeleteDBClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDBClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDBClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDBClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDBClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDBClusterRequestValidationError) ErrorName() string {
	return "DeleteDBClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDBClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDBClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDBClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDBClusterRequestValidationError{}

// Validate checks the field values on DeleteDBClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDBClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDBClusterResponseMultiError, or nil if none found.
func (m *DeleteDBClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDBClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDBClusterResponseMultiError(errors)
	}

	return nil
}

// DeleteDBClusterResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDBClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDBClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDBClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDBClusterResponseMultiError) AllErrors() []error { return m }

// DeleteDBClusterResponseValidationError is the validation error returned by
// DeleteDBClusterResponse.Validate if the designated constraints aren't met.
type DeleteDBClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDBClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDBClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDBClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDBClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDBClusterResponseValidationError) ErrorName() string {
	return "DeleteDBClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDBClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDBClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDBClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDBClusterResponseValidationError{}

// Validate checks the field values on S3Item with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *S3Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in S3ItemMultiError, or nil if none found.
func (m *S3Item) ValidateAll() error {
	return m.validate(true)
}

func (m *S3Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return S3ItemMultiError(errors)
	}

	return nil
}

// S3ItemMultiError is an error wrapping multiple validation errors returned by
// S3Item.ValidateAll() if the designated constraints aren't met.
type S3ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ItemMultiError) AllErrors() []error { return m }

// S3ItemValidationError is the validation error returned by S3Item.Validate if
// the designated constraints aren't met.
type S3ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ItemValidationError) ErrorName() string { return "S3ItemValidationError" }

// Error satisfies the builtin error interface
func (e S3ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ItemValidationError{}

// Validate checks the field values on ListS3BackupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BackupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BackupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BackupsRequestMultiError, or nil if none found.
func (m *ListS3BackupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BackupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	if len(errors) > 0 {
		return ListS3BackupsRequestMultiError(errors)
	}

	return nil
}

// ListS3BackupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListS3BackupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListS3BackupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BackupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BackupsRequestMultiError) AllErrors() []error { return m }

// ListS3BackupsRequestValidationError is the validation error returned by
// ListS3BackupsRequest.Validate if the designated constraints aren't met.
type ListS3BackupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BackupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BackupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BackupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BackupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BackupsRequestValidationError) ErrorName() string {
	return "ListS3BackupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BackupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BackupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BackupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BackupsRequestValidationError{}

// Validate checks the field values on ListS3BackupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BackupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BackupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BackupsResponseMultiError, or nil if none found.
func (m *ListS3BackupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BackupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBackups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListS3BackupsResponseValidationError{
						field:  fmt.Sprintf("Backups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListS3BackupsResponseValidationError{
						field:  fmt.Sprintf("Backups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListS3BackupsResponseValidationError{
					field:  fmt.Sprintf("Backups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListS3BackupsResponseMultiError(errors)
	}

	return nil
}

// ListS3BackupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListS3BackupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListS3BackupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BackupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BackupsResponseMultiError) AllErrors() []error { return m }

// ListS3BackupsResponseValidationError is the validation error returned by
// ListS3BackupsResponse.Validate if the designated constraints aren't met.
type ListS3BackupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BackupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BackupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BackupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BackupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BackupsResponseValidationError) ErrorName() string {
	return "ListS3BackupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BackupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BackupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BackupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BackupsResponseValidationError{}

// Validate checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsRequestMultiError, or nil if none found.
func (m *ListSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ListSecretsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSecretsRequestMultiError(errors)
	}

	return nil
}

// ListSecretsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSecretsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsRequestMultiError) AllErrors() []error { return m }

// ListSecretsRequestValidationError is the validation error returned by
// ListSecretsRequest.Validate if the designated constraints aren't met.
type ListSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsRequestValidationError) ErrorName() string {
	return "ListSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsRequestValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsResponseMultiError, or nil if none found.
func (m *ListSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecretsResponseMultiError(errors)
	}

	return nil
}

// ListSecretsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSecretsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsResponseMultiError) AllErrors() []error { return m }

// ListSecretsResponseValidationError is the validation error returned by
// ListSecretsResponse.Validate if the designated constraints aren't met.
type ListSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResponseValidationError) ErrorName() string {
	return "ListSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResponseValidationError{}
