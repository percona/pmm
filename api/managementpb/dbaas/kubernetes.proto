syntax = "proto3";

package dbaas.v1beta1;

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "managementpb/dbaas/dbaas.proto";

// TODO move it to parent directory / package once API is v1-stable

// KubeAuth represents Kubernetes / kubectl authentication and authorization information.
message KubeAuth {
  // Kubeconfig file content.
  string kubeconfig = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// KubernetesClusterStatus defines status of Kubernetes cluster.
enum KubernetesClusterStatus {
  // KUBERNETES_CLUSTER_STATUS_INVALID represents unknown state.
  KUBERNETES_CLUSTER_STATUS_INVALID = 0;
  // KUBERNETES_CLUSTER_STATUS_OK represents that Kubernetes cluster is accessible.
  KUBERNETES_CLUSTER_STATUS_OK = 1;
  // KUBERNETES_CLUSTER_STATUS_UNAVAILABLE represents that Kubernetes cluster is not accessible.
  KUBERNETES_CLUSTER_STATUS_UNAVAILABLE = 2;
}

// Operator contains all information about operator installed in Kubernetes cluster.
message Operator {
  OperatorsStatus status = 1;
  string version = 2;
}

// Operators contains list of operators installed in Kubernetes cluster.
message Operators {
  // Percona PXC Cluster Operator.
  Operator pxc = 1;
  // Percona Server for MongoDB Operator.
  Operator psmdb = 2;
}

message ListKubernetesClustersRequest {}

message ListKubernetesClustersResponse {
  // Cluster contains public info about Kubernetes cluster.
  // TODO Do not use inner messages in all public APIs (for consistency).
  message Cluster {
    // Kubernetes cluster name.
    string kubernetes_cluster_name = 1;
    // Installed operators.
    Operators operators = 2;
    // Status of Kubernetes cluster.
    KubernetesClusterStatus status = 3;
  }
  // Kubernetes clusters.
  repeated Cluster kubernetes_clusters = 1;
}

message RegisterKubernetesClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Kubernetes auth.
  KubeAuth kube_auth = 2 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // AWS access key id, only needed when registering EKS cluster and kubeconfig does not contain it.
  string aws_access_key_id = 3;
  // AWS secret access key, only needed when registering EKS cluster and kubeconfig does not contain it.
  string aws_secret_access_key = 4;
}

message RegisterKubernetesClusterResponse {}

message UnregisterKubernetesClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // If true then Kubernetes cluster will be deleted
  // even if it contains database clusters.
  bool force = 2;
}

message UnregisterKubernetesClusterResponse {}

message GetKubernetesClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetKubernetesClusterResponse {
  // Kubernetes auth.
  KubeAuth kube_auth = 1;
}

message GetResourcesRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetResourcesResponse {
  // The total amount of resources of the Kubernetes cluster.
  Resources all = 1;
  // The amount of resources that is available for consumption by future Kubernetes workloads.
  Resources available = 2;
}

// Kubernetes service provides public methods for managing Kubernetes clusters.
service Kubernetes {
  // ListKubernetesClusters returns a list of all registered Kubernetes clusters.
  rpc ListKubernetesClusters(ListKubernetesClustersRequest) returns (ListKubernetesClustersResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Kubernetes/List"
      body: "*"
    };
  }
  // RegisterKubernetesCluster registers an existing Kubernetes cluster in PMM.
  rpc RegisterKubernetesCluster(RegisterKubernetesClusterRequest) returns (RegisterKubernetesClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Kubernetes/Register"
      body: "*"
    };
  }
  // UnregisterKubernetesCluster removes a registered Kubernetes cluster from PMM.
  rpc UnregisterKubernetesCluster(UnregisterKubernetesClusterRequest) returns (UnregisterKubernetesClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Kubernetes/Unregister"
      body: "*"
    };
  }
  // GetKubernetesCluster return KubeAuth with Kubernetes config.
  rpc GetKubernetesCluster(GetKubernetesClusterRequest) returns (GetKubernetesClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Kubernetes/Get"
      body: "*"
    };
  }
  // GetResources returns all and available resources of a Kubernetes cluster.
  // NOTE: The user defined in kubeconfig for the cluster has to have rights to
  //       list and get Pods from all Namespaces. Also getting and listing Nodes
  //       has to be allowed.
  rpc GetResources(GetResourcesRequest) returns (GetResourcesResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Kubernetes/Resources/Get"
      body: "*"
    };
  }
}
