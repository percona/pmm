syntax = "proto3";

package dbaas.v1beta1;

import "google/api/annotations.proto";
import "managementpb/dbaas/dbaas.proto";
import "managementpb/dbaas/postgresql_clusters.proto";
import "managementpb/dbaas/psmdb_clusters.proto";
import "managementpb/dbaas/pxc_clusters.proto";
import "managementpb/dbaas/templates.proto";
import "validate/validate.proto";

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

// DBClusterState represents DB cluster CR state.
enum DBClusterState {
  // DB_CLUSTER_STATE_INVALID represents unknown state.
  DB_CLUSTER_STATE_INVALID = 0;
  // DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
  DB_CLUSTER_STATE_CHANGING = 1;
  // DB_CLUSTER_STATE_READY represents a cluster without pending changes.
  DB_CLUSTER_STATE_READY = 2;
  // DB_CLUSTER_STATE_FAILED represents a failed cluster.
  DB_CLUSTER_STATE_FAILED = 3;
  // DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
  DB_CLUSTER_STATE_DELETING = 4;
  // DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
  DB_CLUSTER_STATE_PAUSED = 5;
  // DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
  // It indicates database cluster upgrade is ongoing.
  DB_CLUSTER_STATE_UPGRADING = 6;
}

// PSMDBCluster represents PSMDB cluster information.
message PSMDBCluster {
  // Cluster name.
  string name = 1;
  // Cluster state.
  DBClusterState state = 2;
  // Currently running operation, if any.
  RunningOperation operation = 3;
  // Cluster parameters.
  PSMDBClusterParams params = 4;
  // DB cluster accessible outside of K8s cluster.
  bool exposed = 5;
  // Installed PSMDB image.
  string installed_image = 6;
  // Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
  // If it's empty, no upgrade is available.
  string available_image = 7;
  // Is DB cluster accessible via public internet.
  bool internet_facing = 8;
  // Backup configuration parameters.
  Backup backup = 9;
  // Restore configuration parameters.
  Restore restore = 10;
  // Apply IP source ranges against the cluster.
  repeated string source_ranges = 12;
  // Configuration template.
  Template template = 11;
}

// PXCCluster represents PXC cluster information.
message PXCCluster {
  // Cluster name.
  string name = 1;
  // Cluster state.
  DBClusterState state = 2;
  // Currently running operation, if any.
  RunningOperation operation = 3;
  // Cluster parameters.
  PXCClusterParams params = 4;
  // DB cluster accessible outside of K8s cluster.
  bool exposed = 5;
  // Installed XtraDB image.
  string installed_image = 6;
  // Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
  // If it's empty, no upgrade is available.
  string available_image = 7;
  // Is DB cluster accessible via public internet.
  bool internet_facing = 8;
  // Backup configuration parameters.
  Backup backup = 9;
  // Restore configuration parameters.
  Restore restore = 10;
  // Apply IP source ranges against the cluster.
  repeated string source_ranges = 12;
  // Configuration template.
  Template template = 11;
}

// PostgresqlCluster represents Postgresql cluster information.
message PostgresqlCluster {
  // Cluster name.
  string name = 1;
  // Cluster state.
  DBClusterState state = 2;
  // Currently running operation, if any.
  RunningOperation operation = 3;
  // Cluster parameters.
  PostgresqlClusterParams params = 4;
  // DB cluster accessible outside of K8s cluster.
  bool exposed = 5;
  // Installed Postgresql image.
  string installed_image = 6;
  // Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
  // If it's empty, no upgrade is available.
  string available_image = 7;
  // Is DB cluster accessible via public internet.
  bool internet_facing = 8;
  // Backup configuration parameters.
  Backup backup = 9;
  // Restore configuration parameters.
  Restore restore = 10;
  // Apply IP source ranges against the cluster.
  repeated string source_ranges = 12;
  // Configuration template.
  Template template = 11;
}

message ListDBClustersRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
}

message ListDBClustersResponse {
  // PXC clusters information.
  repeated PXCCluster pxc_clusters = 1;
  // PSMDB clusters information.
  repeated PSMDBCluster psmdb_clusters = 2;
  // Postgresql clusters information.
  repeated PostgresqlCluster postgresql_clusters = 3;
}

message RestartDBClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // PXC cluster name.
  string name = 2 [(validate.rules).string.min_len = 1];
  // DB cluster type.
  DBClusterType cluster_type = 3 [(validate.rules).enum.defined_only = true];
}

message RestartDBClusterResponse {}

message GetDBClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // DB cluster name.
  string name = 2 [(validate.rules).string.min_len = 1];
}

message GetDBClusterResponse {
  // PXC cluster information.
  PXCCluster pxc_cluster = 1;
  // PSMDB cluster information.
  PSMDBCluster psmdb_cluster = 2;
  // Postgresql cluster information.
  PostgresqlCluster postgresql_cluster = 3;
}

message DeleteDBClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // DB cluster name.
  string name = 2 [(validate.rules).string.min_len = 1];
  // DB cluster type.
  DBClusterType cluster_type = 3 [(validate.rules).enum.defined_only = true];
}

message DeleteDBClusterResponse {}

message S3Item {
  // Key of a filename on s3.
  string key = 1;
}
message ListS3BackupsRequest {
  // Backup Location ID to list backups from
  string location_id = 1;
}
message ListS3BackupsResponse {
  // Backup list.
  repeated S3Item backups = 1;
}

message ListSecretsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
}
message Secret {
  // Name of a secret
  string name = 1;
}
message ListSecretsResponse {
  // Secret list.
  repeated Secret secrets = 1;
}

// DBClusters service provides public methods for managing db clusters.
service DBClusters {
  // ListDBClusters returns a list of DB clusters.
  rpc ListDBClusters(ListDBClustersRequest) returns (ListDBClustersResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/DBClusters/List"
      body: "*"
    };
  }
  // GetDBCluster returns parameters used to create a database cluster
  rpc GetDBCluster(GetDBClusterRequest) returns (GetDBClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/DBClusters/Get"
      body: "*"
    };
  }
  // RestartDBCluster restarts DB cluster.
  rpc RestartDBCluster(RestartDBClusterRequest) returns (RestartDBClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/DBClusters/Restart"
      body: "*"
    };
  }
  // DeleteDBCluster deletes DB cluster.
  rpc DeleteDBCluster(DeleteDBClusterRequest) returns (DeleteDBClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/DBClusters/Delete"
      body: "*"
    };
  }

  // ListS3Backups lists backups stored on s3.
  rpc ListS3Backups(ListS3BackupsRequest) returns (ListS3BackupsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Backups/List"
      body: "*"
    };
  }

  // ListSecrets returns a list of secrets from k8s
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Secrets/List"
      body: "*"
    };
  }
}
