syntax = "proto3";

package dbaas.v1beta1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

// Logs contain logs for certain pod's container. If container is an empty
// string, logs contain pod's events.
message Logs {
  // Pod name.
  string pod = 1;
  // Container name.
  string container = 2;
  // Content of container's log or pod's events.
  repeated string logs = 3;
}

message GetLogsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // DB cluster name.
  string cluster_name = 2 [(validate.rules).string.min_len = 1];
}

message GetLogsResponse {
  // Log represents list of logs. Each entry contains either container's logs or,
  // when container field is empty, pod's events.
  repeated Logs logs = 1;
}

// LogsAPI provides APIs for reading logs.
service LogsAPI {
  // GetLogs gets all logs from db cluster.
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/GetLogs"
      body: "*"
    };
  }
}
