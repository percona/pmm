// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: managementpb/dbaas/psmdb_clusters.proto

package dbaasv1beta1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PSMDBClusterParams represents PSMDB cluster parameters that can be updated.
type PSMDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// ReplicaSet container parameters.
	Replicaset *PSMDBClusterParams_ReplicaSet `protobuf:"bytes,2,opt,name=replicaset,proto3" json:"replicaset,omitempty"`
	// Docker image used for PSMDB.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PSMDBClusterParams) Reset() {
	*x = PSMDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSMDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSMDBClusterParams) ProtoMessage() {}

func (x *PSMDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSMDBClusterParams.ProtoReflect.Descriptor instead.
func (*PSMDBClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *PSMDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *PSMDBClusterParams) GetReplicaset() *PSMDBClusterParams_ReplicaSet {
	if x != nil {
		return x.Replicaset
	}
	return nil
}

func (x *PSMDBClusterParams) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GetPSMDBClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PSMDB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPSMDBClusterCredentialsRequest) Reset() {
	*x = GetPSMDBClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterCredentialsRequest) ProtoMessage() {}

func (x *GetPSMDBClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *GetPSMDBClusterCredentialsRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *GetPSMDBClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPSMDBClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionCredentials *GetPSMDBClusterCredentialsResponse_PSMDBCredentials `protobuf:"bytes,1,opt,name=connection_credentials,json=connectionCredentials,proto3" json:"connection_credentials,omitempty"`
}

func (x *GetPSMDBClusterCredentialsResponse) Reset() {
	*x = GetPSMDBClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterCredentialsResponse) ProtoMessage() {}

func (x *GetPSMDBClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *GetPSMDBClusterCredentialsResponse) GetConnectionCredentials() *GetPSMDBClusterCredentialsResponse_PSMDBCredentials {
	if x != nil {
		return x.ConnectionCredentials
	}
	return nil
}

type CreatePSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PSMDB cluster name.
	// a DNS-1035 label must consist of lower case alphanumeric characters or '-',
	// start with an alphabetic character, and end with an alphanumeric character
	// (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *PSMDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,4,opt,name=expose,proto3" json:"expose,omitempty"`
}

func (x *CreatePSMDBClusterRequest) Reset() {
	*x = CreatePSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePSMDBClusterRequest) ProtoMessage() {}

func (x *CreatePSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*CreatePSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePSMDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *CreatePSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePSMDBClusterRequest) GetParams() *PSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreatePSMDBClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

type CreatePSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePSMDBClusterResponse) Reset() {
	*x = CreatePSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePSMDBClusterResponse) ProtoMessage() {}

func (x *CreatePSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*CreatePSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{4}
}

type UpdatePSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PSMDB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdatePSMDBClusterRequest) Reset() {
	*x = UpdatePSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePSMDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *UpdatePSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePSMDBClusterRequest) GetParams() *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdatePSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePSMDBClusterResponse) Reset() {
	*x = UpdatePSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterResponse) ProtoMessage() {}

func (x *UpdatePSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{6}
}

type GetPSMDBClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster parameters.
	Params *PSMDBClusterParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GetPSMDBClusterResourcesRequest) Reset() {
	*x = GetPSMDBClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterResourcesRequest) ProtoMessage() {}

func (x *GetPSMDBClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{7}
}

func (x *GetPSMDBClusterResourcesRequest) GetParams() *PSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetPSMDBClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected resources to be consumed by the cluster.
	Expected *Resources `protobuf:"bytes,1,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *GetPSMDBClusterResourcesResponse) Reset() {
	*x = GetPSMDBClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterResourcesResponse) ProtoMessage() {}

func (x *GetPSMDBClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *GetPSMDBClusterResourcesResponse) GetExpected() *Resources {
	if x != nil {
		return x.Expected
	}
	return nil
}

// ReplicaSet container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
type PSMDBClusterParams_ReplicaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *PSMDBClusterParams_ReplicaSet) Reset() {
	*x = PSMDBClusterParams_ReplicaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSMDBClusterParams_ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSMDBClusterParams_ReplicaSet) ProtoMessage() {}

func (x *PSMDBClusterParams_ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSMDBClusterParams_ReplicaSet.ProtoReflect.Descriptor instead.
func (*PSMDBClusterParams_ReplicaSet) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PSMDBClusterParams_ReplicaSet) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *PSMDBClusterParams_ReplicaSet) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// PSMDBCredentials is a credentials to connect to PSMDB.
// TODO Do not use inner messages in all public APIs (for consistency).
type GetPSMDBClusterCredentialsResponse_PSMDBCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MongoDB username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// MongoDB password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// MongoDB host.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// MongoDB port.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Replicaset name.
	Replicaset string `protobuf:"bytes,5,opt,name=replicaset,proto3" json:"replicaset,omitempty"`
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) Reset() {
	*x = GetPSMDBClusterCredentialsResponse_PSMDBCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterCredentialsResponse_PSMDBCredentials) ProtoMessage() {}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterCredentialsResponse_PSMDBCredentials.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterCredentialsResponse_PSMDBCredentials) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) GetReplicaset() string {
	if x != nil {
		return x.Replicaset
	}
	return ""
}

// UpdatePSMDBClusterParams represents PSMDB cluster parameters that can be updated.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// ReplicaSet container parameters.
	Replicaset *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet `protobuf:"bytes,2,opt,name=replicaset,proto3" json:"replicaset,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,4,opt,name=resume,proto3" json:"resume,omitempty"`
	// PSMDB image to use. If it's the same image but with different version tag, upgrade of database cluster to version
	// in given tag is triggered. If entirely different image is given, error is returned.
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) Reset() {
	*x = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetReplicaset() *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet {
	if x != nil {
		return x.Replicaset
	}
	return nil
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ReplicaSet container parameters.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) Reset() {
	*x = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_managementpb_dbaas_psmdb_clusters_proto protoreflect.FileDescriptor

var file_managementpb_dbaas_psmdb_clusters_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x73, 0x6d, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94,
	0x02, 0x0a, 0x12, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x77, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x53,
	0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x10, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x65, 0x74, 0x22, 0xc2, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa4, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x5a, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xcd, 0x05,
	0x0a, 0x0d, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xbf, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x30,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61,
	0x53, 0x2f, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0xb7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x2e, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0xb8, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x42, 0x12, 0x50, 0x73, 0x6d, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x3b, 0x64, 0x62, 0x61, 0x61, 0x73, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x44, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x44, 0x62,
	0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x44, 0x62,
	0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x44, 0x62, 0x61, 0x61, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managementpb_dbaas_psmdb_clusters_proto_rawDescOnce sync.Once
	file_managementpb_dbaas_psmdb_clusters_proto_rawDescData = file_managementpb_dbaas_psmdb_clusters_proto_rawDesc
)

func file_managementpb_dbaas_psmdb_clusters_proto_rawDescGZIP() []byte {
	file_managementpb_dbaas_psmdb_clusters_proto_rawDescOnce.Do(func() {
		file_managementpb_dbaas_psmdb_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_managementpb_dbaas_psmdb_clusters_proto_rawDescData)
	})
	return file_managementpb_dbaas_psmdb_clusters_proto_rawDescData
}

var (
	file_managementpb_dbaas_psmdb_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
	file_managementpb_dbaas_psmdb_clusters_proto_goTypes  = []interface{}{
		(*PSMDBClusterParams)(nil),                                            // 0: dbaas.v1beta1.PSMDBClusterParams
		(*GetPSMDBClusterCredentialsRequest)(nil),                             // 1: dbaas.v1beta1.GetPSMDBClusterCredentialsRequest
		(*GetPSMDBClusterCredentialsResponse)(nil),                            // 2: dbaas.v1beta1.GetPSMDBClusterCredentialsResponse
		(*CreatePSMDBClusterRequest)(nil),                                     // 3: dbaas.v1beta1.CreatePSMDBClusterRequest
		(*CreatePSMDBClusterResponse)(nil),                                    // 4: dbaas.v1beta1.CreatePSMDBClusterResponse
		(*UpdatePSMDBClusterRequest)(nil),                                     // 5: dbaas.v1beta1.UpdatePSMDBClusterRequest
		(*UpdatePSMDBClusterResponse)(nil),                                    // 6: dbaas.v1beta1.UpdatePSMDBClusterResponse
		(*GetPSMDBClusterResourcesRequest)(nil),                               // 7: dbaas.v1beta1.GetPSMDBClusterResourcesRequest
		(*GetPSMDBClusterResourcesResponse)(nil),                              // 8: dbaas.v1beta1.GetPSMDBClusterResourcesResponse
		(*PSMDBClusterParams_ReplicaSet)(nil),                                 // 9: dbaas.v1beta1.PSMDBClusterParams.ReplicaSet
		(*GetPSMDBClusterCredentialsResponse_PSMDBCredentials)(nil),           // 10: dbaas.v1beta1.GetPSMDBClusterCredentialsResponse.PSMDBCredentials
		(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams)(nil),            // 11: dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams
		(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet)(nil), // 12: dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet
		(*Resources)(nil),                                                     // 13: dbaas.v1beta1.Resources
		(*ComputeResources)(nil),                                              // 14: dbaas.v1beta1.ComputeResources
	}
)

var file_managementpb_dbaas_psmdb_clusters_proto_depIdxs = []int32{
	9,  // 0: dbaas.v1beta1.PSMDBClusterParams.replicaset:type_name -> dbaas.v1beta1.PSMDBClusterParams.ReplicaSet
	10, // 1: dbaas.v1beta1.GetPSMDBClusterCredentialsResponse.connection_credentials:type_name -> dbaas.v1beta1.GetPSMDBClusterCredentialsResponse.PSMDBCredentials
	0,  // 2: dbaas.v1beta1.CreatePSMDBClusterRequest.params:type_name -> dbaas.v1beta1.PSMDBClusterParams
	11, // 3: dbaas.v1beta1.UpdatePSMDBClusterRequest.params:type_name -> dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams
	0,  // 4: dbaas.v1beta1.GetPSMDBClusterResourcesRequest.params:type_name -> dbaas.v1beta1.PSMDBClusterParams
	13, // 5: dbaas.v1beta1.GetPSMDBClusterResourcesResponse.expected:type_name -> dbaas.v1beta1.Resources
	14, // 6: dbaas.v1beta1.PSMDBClusterParams.ReplicaSet.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	12, // 7: dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.replicaset:type_name -> dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet
	14, // 8: dbaas.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	1,  // 9: dbaas.v1beta1.PSMDBClusters.GetPSMDBClusterCredentials:input_type -> dbaas.v1beta1.GetPSMDBClusterCredentialsRequest
	3,  // 10: dbaas.v1beta1.PSMDBClusters.CreatePSMDBCluster:input_type -> dbaas.v1beta1.CreatePSMDBClusterRequest
	5,  // 11: dbaas.v1beta1.PSMDBClusters.UpdatePSMDBCluster:input_type -> dbaas.v1beta1.UpdatePSMDBClusterRequest
	7,  // 12: dbaas.v1beta1.PSMDBClusters.GetPSMDBClusterResources:input_type -> dbaas.v1beta1.GetPSMDBClusterResourcesRequest
	2,  // 13: dbaas.v1beta1.PSMDBClusters.GetPSMDBClusterCredentials:output_type -> dbaas.v1beta1.GetPSMDBClusterCredentialsResponse
	4,  // 14: dbaas.v1beta1.PSMDBClusters.CreatePSMDBCluster:output_type -> dbaas.v1beta1.CreatePSMDBClusterResponse
	6,  // 15: dbaas.v1beta1.PSMDBClusters.UpdatePSMDBCluster:output_type -> dbaas.v1beta1.UpdatePSMDBClusterResponse
	8,  // 16: dbaas.v1beta1.PSMDBClusters.GetPSMDBClusterResources:output_type -> dbaas.v1beta1.GetPSMDBClusterResourcesResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_managementpb_dbaas_psmdb_clusters_proto_init() }
func file_managementpb_dbaas_psmdb_clusters_proto_init() {
	if File_managementpb_dbaas_psmdb_clusters_proto != nil {
		return
	}
	file_managementpb_dbaas_dbaas_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSMDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSMDBClusterParams_ReplicaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterCredentialsResponse_PSMDBCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_psmdb_clusters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managementpb_dbaas_psmdb_clusters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managementpb_dbaas_psmdb_clusters_proto_goTypes,
		DependencyIndexes: file_managementpb_dbaas_psmdb_clusters_proto_depIdxs,
		MessageInfos:      file_managementpb_dbaas_psmdb_clusters_proto_msgTypes,
	}.Build()
	File_managementpb_dbaas_psmdb_clusters_proto = out.File
	file_managementpb_dbaas_psmdb_clusters_proto_rawDesc = nil
	file_managementpb_dbaas_psmdb_clusters_proto_goTypes = nil
	file_managementpb_dbaas_psmdb_clusters_proto_depIdxs = nil
}
