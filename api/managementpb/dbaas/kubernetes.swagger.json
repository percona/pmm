{
  "swagger": "2.0",
  "info": {
    "title": "managementpb/dbaas/kubernetes.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/management/DBaaS/Kubernetes/Get": {
      "post": {
        "summary": "GetKubernetesCluster return KubeAuth with Kubernetes config.",
        "operationId": "GetKubernetesCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetKubernetesClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1GetKubernetesClusterRequest"
            }
          }
        ],
        "tags": [
          "Kubernetes"
        ]
      }
    },
    "/v1/management/DBaaS/Kubernetes/List": {
      "post": {
        "summary": "ListKubernetesClusters returns a list of all registered Kubernetes clusters.",
        "operationId": "ListKubernetesClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ListKubernetesClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ListKubernetesClustersRequest"
            }
          }
        ],
        "tags": [
          "Kubernetes"
        ]
      }
    },
    "/v1/management/DBaaS/Kubernetes/Register": {
      "post": {
        "summary": "RegisterKubernetesCluster registers an existing Kubernetes cluster in PMM.",
        "operationId": "RegisterKubernetesCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1RegisterKubernetesClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1RegisterKubernetesClusterRequest"
            }
          }
        ],
        "tags": [
          "Kubernetes"
        ]
      }
    },
    "/v1/management/DBaaS/Kubernetes/Resources/Get": {
      "post": {
        "summary": "GetResources returns all and available resources of a Kubernetes cluster.\nNOTE: The user defined in kubeconfig for the cluster has to have rights to\n      list and get Pods from all Namespaces. Also getting and listing Nodes\n      has to be allowed.",
        "operationId": "GetResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1GetResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1GetResourcesRequest"
            }
          }
        ],
        "tags": [
          "Kubernetes"
        ]
      }
    },
    "/v1/management/DBaaS/Kubernetes/Unregister": {
      "post": {
        "summary": "UnregisterKubernetesCluster removes a registered Kubernetes cluster from PMM.",
        "operationId": "UnregisterKubernetesCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1UnregisterKubernetesClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1UnregisterKubernetesClusterRequest"
            }
          }
        ],
        "tags": [
          "Kubernetes"
        ]
      }
    }
  },
  "definitions": {
    "ListKubernetesClustersResponseCluster": {
      "type": "object",
      "properties": {
        "kubernetes_cluster_name": {
          "type": "string",
          "description": "Kubernetes cluster name."
        },
        "operators": {
          "$ref": "#/definitions/v1beta1Operators",
          "description": "Installed operators."
        },
        "status": {
          "$ref": "#/definitions/v1beta1KubernetesClusterStatus",
          "description": "Status of Kubernetes cluster."
        }
      },
      "description": "Cluster contains public info about Kubernetes cluster.\nTODO Do not use inner messages in all public APIs (for consistency)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1beta1GetKubernetesClusterRequest": {
      "type": "object",
      "properties": {
        "kubernetes_cluster_name": {
          "type": "string",
          "description": "Kubernetes cluster name."
        }
      }
    },
    "v1beta1GetKubernetesClusterResponse": {
      "type": "object",
      "properties": {
        "kube_auth": {
          "$ref": "#/definitions/v1beta1KubeAuth",
          "description": "Kubernetes auth."
        }
      }
    },
    "v1beta1GetResourcesRequest": {
      "type": "object",
      "properties": {
        "kubernetes_cluster_name": {
          "type": "string",
          "description": "Kubernetes cluster name."
        }
      }
    },
    "v1beta1GetResourcesResponse": {
      "type": "object",
      "properties": {
        "all": {
          "$ref": "#/definitions/v1beta1Resources",
          "description": "The total amount of resources of the Kubernetes cluster."
        },
        "available": {
          "$ref": "#/definitions/v1beta1Resources",
          "description": "The amount of resources that is available for consumption by future Kubernetes workloads."
        }
      }
    },
    "v1beta1KubeAuth": {
      "type": "object",
      "properties": {
        "kubeconfig": {
          "type": "string",
          "description": "Kubeconfig file content."
        }
      },
      "description": "KubeAuth represents Kubernetes / kubectl authentication and authorization information."
    },
    "v1beta1KubernetesClusterStatus": {
      "type": "string",
      "enum": [
        "KUBERNETES_CLUSTER_STATUS_INVALID",
        "KUBERNETES_CLUSTER_STATUS_OK",
        "KUBERNETES_CLUSTER_STATUS_UNAVAILABLE"
      ],
      "default": "KUBERNETES_CLUSTER_STATUS_INVALID",
      "description": "KubernetesClusterStatus defines status of Kubernetes cluster.\n\n - KUBERNETES_CLUSTER_STATUS_INVALID: KUBERNETES_CLUSTER_STATUS_INVALID represents unknown state.\n - KUBERNETES_CLUSTER_STATUS_OK: KUBERNETES_CLUSTER_STATUS_OK represents that Kubernetes cluster is accessible.\n - KUBERNETES_CLUSTER_STATUS_UNAVAILABLE: KUBERNETES_CLUSTER_STATUS_UNAVAILABLE represents that Kubernetes cluster is not accessible."
    },
    "v1beta1ListKubernetesClustersRequest": {
      "type": "object"
    },
    "v1beta1ListKubernetesClustersResponse": {
      "type": "object",
      "properties": {
        "kubernetes_clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListKubernetesClustersResponseCluster"
          },
          "description": "Kubernetes clusters."
        }
      }
    },
    "v1beta1Operator": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1beta1OperatorsStatus"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Operator contains all information about operator installed in Kubernetes cluster."
    },
    "v1beta1Operators": {
      "type": "object",
      "properties": {
        "pxc": {
          "$ref": "#/definitions/v1beta1Operator",
          "description": "Percona PXC Cluster Operator."
        },
        "psmdb": {
          "$ref": "#/definitions/v1beta1Operator",
          "description": "Percona Server for MongoDB Operator."
        }
      },
      "description": "Operators contains list of operators installed in Kubernetes cluster."
    },
    "v1beta1OperatorsStatus": {
      "type": "string",
      "enum": [
        "OPERATORS_STATUS_INVALID",
        "OPERATORS_STATUS_OK",
        "OPERATORS_STATUS_UNSUPPORTED",
        "OPERATORS_STATUS_NOT_INSTALLED"
      ],
      "default": "OPERATORS_STATUS_INVALID",
      "description": "OperatorsStatus defines status of operators installed in Kubernetes cluster.\n\n - OPERATORS_STATUS_INVALID: OPERATORS_STATUS_INVALID represents unknown state.\n - OPERATORS_STATUS_OK: OPERATORS_STATUS_OK represents that operators are installed and have supported API version.\n - OPERATORS_STATUS_UNSUPPORTED: OPERATORS_STATUS_UNSUPPORTED represents that operators are installed, but doesn't have supported API version.\n - OPERATORS_STATUS_NOT_INSTALLED: OPERATORS_STATUS_NOT_INSTALLED represents that operators are not installed."
    },
    "v1beta1RegisterKubernetesClusterRequest": {
      "type": "object",
      "properties": {
        "kubernetes_cluster_name": {
          "type": "string",
          "description": "Kubernetes cluster name."
        },
        "kube_auth": {
          "$ref": "#/definitions/v1beta1KubeAuth",
          "description": "Kubernetes auth."
        },
        "aws_access_key_id": {
          "type": "string",
          "description": "AWS access key id, only needed when registering EKS cluster and kubeconfig does not contain it."
        },
        "aws_secret_access_key": {
          "type": "string",
          "description": "AWS secret access key, only needed when registering EKS cluster and kubeconfig does not contain it."
        }
      }
    },
    "v1beta1RegisterKubernetesClusterResponse": {
      "type": "object"
    },
    "v1beta1Resources": {
      "type": "object",
      "properties": {
        "memory_bytes": {
          "type": "string",
          "format": "uint64",
          "description": "Memory in bytes."
        },
        "cpu_m": {
          "type": "string",
          "format": "uint64",
          "description": "CPU in millicpus. For example 0.1 of CPU is equivalent to 100 millicpus.\nSee https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu."
        },
        "disk_size": {
          "type": "string",
          "format": "uint64",
          "description": "Disk size in bytes."
        }
      },
      "description": "Resources contains Kubernetes cluster resources."
    },
    "v1beta1UnregisterKubernetesClusterRequest": {
      "type": "object",
      "properties": {
        "kubernetes_cluster_name": {
          "type": "string",
          "description": "Kubernetes cluster name."
        },
        "force": {
          "type": "boolean",
          "description": "If true then Kubernetes cluster will be deleted\neven if it contains database clusters."
        }
      }
    },
    "v1beta1UnregisterKubernetesClusterResponse": {
      "type": "object"
    }
  }
}
