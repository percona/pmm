// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/components.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Component with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Component) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Component with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComponentMultiError, or nil
// if none found.
func (m *Component) ValidateAll() error {
	return m.validate(true)
}

func (m *Component) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImagePath

	// no validation rules for ImageHash

	// no validation rules for Status

	// no validation rules for Critical

	// no validation rules for Default

	// no validation rules for Disabled

	if len(errors) > 0 {
		return ComponentMultiError(errors)
	}

	return nil
}

// ComponentMultiError is an error wrapping multiple validation errors returned
// by Component.ValidateAll() if the designated constraints aren't met.
type ComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentMultiError) AllErrors() []error { return m }

// ComponentValidationError is the validation error returned by
// Component.Validate if the designated constraints aren't met.
type ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentValidationError) ErrorName() string { return "ComponentValidationError" }

// Error satisfies the builtin error interface
func (e ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentValidationError{}

// Validate checks the field values on Matrix with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Matrix) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Matrix with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MatrixMultiError, or nil if none found.
func (m *Matrix) ValidateAll() error {
	return m.validate(true)
}

func (m *Matrix) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMongod()))
		i := 0
		for key := range m.GetMongod() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMongod()[key]
			_ = val

			// no validation rules for Mongod[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Mongod[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Mongod[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Mongod[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPxc()))
		i := 0
		for key := range m.GetPxc() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPxc()[key]
			_ = val

			// no validation rules for Pxc[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pxc[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pxc[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Pxc[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPmm()))
		i := 0
		for key := range m.GetPmm() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPmm()[key]
			_ = val

			// no validation rules for Pmm[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pmm[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pmm[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Pmm[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetProxysql()))
		i := 0
		for key := range m.GetProxysql() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProxysql()[key]
			_ = val

			// no validation rules for Proxysql[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Proxysql[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Proxysql[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Proxysql[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetHaproxy()))
		i := 0
		for key := range m.GetHaproxy() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHaproxy()[key]
			_ = val

			// no validation rules for Haproxy[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Haproxy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Haproxy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Haproxy[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetBackup()))
		i := 0
		for key := range m.GetBackup() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBackup()[key]
			_ = val

			// no validation rules for Backup[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Backup[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Backup[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Backup[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetOperator()))
		i := 0
		for key := range m.GetOperator() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOperator()[key]
			_ = val

			// no validation rules for Operator[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Operator[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Operator[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Operator[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLogCollector()))
		i := 0
		for key := range m.GetLogCollector() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLogCollector()[key]
			_ = val

			// no validation rules for LogCollector[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("LogCollector[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("LogCollector[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("LogCollector[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPostgresql()))
		i := 0
		for key := range m.GetPostgresql() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPostgresql()[key]
			_ = val

			// no validation rules for Postgresql[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Postgresql[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Postgresql[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Postgresql[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPgbouncer()))
		i := 0
		for key := range m.GetPgbouncer() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPgbouncer()[key]
			_ = val

			// no validation rules for Pgbouncer[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pgbouncer[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pgbouncer[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Pgbouncer[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPgbackrest()))
		i := 0
		for key := range m.GetPgbackrest() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPgbackrest()[key]
			_ = val

			// no validation rules for Pgbackrest[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pgbackrest[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MatrixValidationError{
							field:  fmt.Sprintf("Pgbackrest[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MatrixValidationError{
						field:  fmt.Sprintf("Pgbackrest[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MatrixMultiError(errors)
	}

	return nil
}

// MatrixMultiError is an error wrapping multiple validation errors returned by
// Matrix.ValidateAll() if the designated constraints aren't met.
type MatrixMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatrixMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatrixMultiError) AllErrors() []error { return m }

// MatrixValidationError is the validation error returned by Matrix.Validate if
// the designated constraints aren't met.
type MatrixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatrixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatrixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatrixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatrixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatrixValidationError) ErrorName() string { return "MatrixValidationError" }

// Error satisfies the builtin error interface
func (e MatrixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatrix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatrixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatrixValidationError{}

// Validate checks the field values on OperatorVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorVersionMultiError, or nil if none found.
func (m *OperatorVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Product

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetMatrix()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorVersionValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorVersionValidationError{
					field:  "Matrix",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatrix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorVersionValidationError{
				field:  "Matrix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorVersionMultiError(errors)
	}

	return nil
}

// OperatorVersionMultiError is an error wrapping multiple validation errors
// returned by OperatorVersion.ValidateAll() if the designated constraints
// aren't met.
type OperatorVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorVersionMultiError) AllErrors() []error { return m }

// OperatorVersionValidationError is the validation error returned by
// OperatorVersion.Validate if the designated constraints aren't met.
type OperatorVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorVersionValidationError) ErrorName() string { return "OperatorVersionValidationError" }

// Error satisfies the builtin error interface
func (e OperatorVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorVersionValidationError{}

// Validate checks the field values on GetPSMDBComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPSMDBComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPSMDBComponentsRequestMultiError, or nil if none found.
func (m *GetPSMDBComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubernetesClusterName

	// no validation rules for DbVersion

	if len(errors) > 0 {
		return GetPSMDBComponentsRequestMultiError(errors)
	}

	return nil
}

// GetPSMDBComponentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPSMDBComponentsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPSMDBComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBComponentsRequestMultiError) AllErrors() []error { return m }

// GetPSMDBComponentsRequestValidationError is the validation error returned by
// GetPSMDBComponentsRequest.Validate if the designated constraints aren't met.
type GetPSMDBComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBComponentsRequestValidationError) ErrorName() string {
	return "GetPSMDBComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBComponentsRequestValidationError{}

// Validate checks the field values on GetPSMDBComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPSMDBComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPSMDBComponentsResponseMultiError, or nil if none found.
func (m *GetPSMDBComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPSMDBComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPSMDBComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPSMDBComponentsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPSMDBComponentsResponseMultiError(errors)
	}

	return nil
}

// GetPSMDBComponentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetPSMDBComponentsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPSMDBComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBComponentsResponseMultiError) AllErrors() []error { return m }

// GetPSMDBComponentsResponseValidationError is the validation error returned
// by GetPSMDBComponentsResponse.Validate if the designated constraints aren't met.
type GetPSMDBComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBComponentsResponseValidationError) ErrorName() string {
	return "GetPSMDBComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBComponentsResponseValidationError{}

// Validate checks the field values on GetPXCComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPXCComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPXCComponentsRequestMultiError, or nil if none found.
func (m *GetPXCComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubernetesClusterName

	// no validation rules for DbVersion

	if len(errors) > 0 {
		return GetPXCComponentsRequestMultiError(errors)
	}

	return nil
}

// GetPXCComponentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPXCComponentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPXCComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCComponentsRequestMultiError) AllErrors() []error { return m }

// GetPXCComponentsRequestValidationError is the validation error returned by
// GetPXCComponentsRequest.Validate if the designated constraints aren't met.
type GetPXCComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCComponentsRequestValidationError) ErrorName() string {
	return "GetPXCComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCComponentsRequestValidationError{}

// Validate checks the field values on GetPXCComponentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPXCComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPXCComponentsResponseMultiError, or nil if none found.
func (m *GetPXCComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPXCComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPXCComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPXCComponentsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPXCComponentsResponseMultiError(errors)
	}

	return nil
}

// GetPXCComponentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPXCComponentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPXCComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCComponentsResponseMultiError) AllErrors() []error { return m }

// GetPXCComponentsResponseValidationError is the validation error returned by
// GetPXCComponentsResponse.Validate if the designated constraints aren't met.
type GetPXCComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCComponentsResponseValidationError) ErrorName() string {
	return "GetPXCComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCComponentsResponseValidationError{}

// Validate checks the field values on GetPGComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPGComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPGComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPGComponentsRequestMultiError, or nil if none found.
func (m *GetPGComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPGComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubernetesClusterName

	// no validation rules for DbVersion

	if len(errors) > 0 {
		return GetPGComponentsRequestMultiError(errors)
	}

	return nil
}

// GetPGComponentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPGComponentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPGComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPGComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPGComponentsRequestMultiError) AllErrors() []error { return m }

// GetPGComponentsRequestValidationError is the validation error returned by
// GetPGComponentsRequest.Validate if the designated constraints aren't met.
type GetPGComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPGComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPGComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPGComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPGComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPGComponentsRequestValidationError) ErrorName() string {
	return "GetPGComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPGComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPGComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPGComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPGComponentsRequestValidationError{}

// Validate checks the field values on GetPGComponentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPGComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPGComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPGComponentsResponseMultiError, or nil if none found.
func (m *GetPGComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPGComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPGComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPGComponentsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPGComponentsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPGComponentsResponseMultiError(errors)
	}

	return nil
}

// GetPGComponentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPGComponentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPGComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPGComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPGComponentsResponseMultiError) AllErrors() []error { return m }

// GetPGComponentsResponseValidationError is the validation error returned by
// GetPGComponentsResponse.Validate if the designated constraints aren't met.
type GetPGComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPGComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPGComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPGComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPGComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPGComponentsResponseValidationError) ErrorName() string {
	return "GetPGComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPGComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPGComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPGComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPGComponentsResponseValidationError{}

// Validate checks the field values on ChangeComponent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeComponent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeComponentMultiError, or nil if none found.
func (m *ChangeComponent) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeComponent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultVersion

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeComponentValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeComponentValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeComponentValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangeComponentMultiError(errors)
	}

	return nil
}

// ChangeComponentMultiError is an error wrapping multiple validation errors
// returned by ChangeComponent.ValidateAll() if the designated constraints
// aren't met.
type ChangeComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeComponentMultiError) AllErrors() []error { return m }

// ChangeComponentValidationError is the validation error returned by
// ChangeComponent.Validate if the designated constraints aren't met.
type ChangeComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeComponentValidationError) ErrorName() string { return "ChangeComponentValidationError" }

// Error satisfies the builtin error interface
func (e ChangeComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeComponentValidationError{}

// Validate checks the field values on ChangePSMDBComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePSMDBComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePSMDBComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePSMDBComponentsRequestMultiError, or nil if none found.
func (m *ChangePSMDBComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePSMDBComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ChangePSMDBComponentsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMongod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePSMDBComponentsRequestValidationError{
					field:  "Mongod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePSMDBComponentsRequestValidationError{
					field:  "Mongod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMongod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePSMDBComponentsRequestValidationError{
				field:  "Mongod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePSMDBComponentsRequestMultiError(errors)
	}

	return nil
}

// ChangePSMDBComponentsRequestMultiError is an error wrapping multiple
// validation errors returned by ChangePSMDBComponentsRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangePSMDBComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePSMDBComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePSMDBComponentsRequestMultiError) AllErrors() []error { return m }

// ChangePSMDBComponentsRequestValidationError is the validation error returned
// by ChangePSMDBComponentsRequest.Validate if the designated constraints
// aren't met.
type ChangePSMDBComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePSMDBComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePSMDBComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePSMDBComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePSMDBComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePSMDBComponentsRequestValidationError) ErrorName() string {
	return "ChangePSMDBComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePSMDBComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePSMDBComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePSMDBComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePSMDBComponentsRequestValidationError{}

// Validate checks the field values on ChangePSMDBComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePSMDBComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePSMDBComponentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangePSMDBComponentsResponseMultiError, or nil if none found.
func (m *ChangePSMDBComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePSMDBComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePSMDBComponentsResponseMultiError(errors)
	}

	return nil
}

// ChangePSMDBComponentsResponseMultiError is an error wrapping multiple
// validation errors returned by ChangePSMDBComponentsResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangePSMDBComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePSMDBComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePSMDBComponentsResponseMultiError) AllErrors() []error { return m }

// ChangePSMDBComponentsResponseValidationError is the validation error
// returned by ChangePSMDBComponentsResponse.Validate if the designated
// constraints aren't met.
type ChangePSMDBComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePSMDBComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePSMDBComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePSMDBComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePSMDBComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePSMDBComponentsResponseValidationError) ErrorName() string {
	return "ChangePSMDBComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePSMDBComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePSMDBComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePSMDBComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePSMDBComponentsResponseValidationError{}

// Validate checks the field values on ChangePXCComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePXCComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePXCComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePXCComponentsRequestMultiError, or nil if none found.
func (m *ChangePXCComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePXCComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ChangePXCComponentsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPxc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPxc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePXCComponentsRequestValidationError{
				field:  "Pxc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProxysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePXCComponentsRequestValidationError{
				field:  "Proxysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHaproxy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePXCComponentsRequestValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePXCComponentsRequestValidationError{
				field:  "Haproxy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePXCComponentsRequestMultiError(errors)
	}

	return nil
}

// ChangePXCComponentsRequestMultiError is an error wrapping multiple
// validation errors returned by ChangePXCComponentsRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangePXCComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePXCComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePXCComponentsRequestMultiError) AllErrors() []error { return m }

// ChangePXCComponentsRequestValidationError is the validation error returned
// by ChangePXCComponentsRequest.Validate if the designated constraints aren't met.
type ChangePXCComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePXCComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePXCComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePXCComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePXCComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePXCComponentsRequestValidationError) ErrorName() string {
	return "ChangePXCComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePXCComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePXCComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePXCComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePXCComponentsRequestValidationError{}

// Validate checks the field values on ChangePXCComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePXCComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePXCComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePXCComponentsResponseMultiError, or nil if none found.
func (m *ChangePXCComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePXCComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePXCComponentsResponseMultiError(errors)
	}

	return nil
}

// ChangePXCComponentsResponseMultiError is an error wrapping multiple
// validation errors returned by ChangePXCComponentsResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangePXCComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePXCComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePXCComponentsResponseMultiError) AllErrors() []error { return m }

// ChangePXCComponentsResponseValidationError is the validation error returned
// by ChangePXCComponentsResponse.Validate if the designated constraints
// aren't met.
type ChangePXCComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePXCComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePXCComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePXCComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePXCComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePXCComponentsResponseValidationError) ErrorName() string {
	return "ChangePXCComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePXCComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePXCComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePXCComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePXCComponentsResponseValidationError{}

// Validate checks the field values on ChangePGComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePGComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePGComponentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePGComponentsRequestMultiError, or nil if none found.
func (m *ChangePGComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePGComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ChangePGComponentsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPostgresql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePGComponentsRequestValidationError{
				field:  "Postgresql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPgbouncer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgbouncer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePGComponentsRequestValidationError{
				field:  "Pgbouncer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPgbackrest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Pgbackrest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePGComponentsRequestValidationError{
					field:  "Pgbackrest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgbackrest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePGComponentsRequestValidationError{
				field:  "Pgbackrest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePGComponentsRequestMultiError(errors)
	}

	return nil
}

// ChangePGComponentsRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePGComponentsRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangePGComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePGComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePGComponentsRequestMultiError) AllErrors() []error { return m }

// ChangePGComponentsRequestValidationError is the validation error returned by
// ChangePGComponentsRequest.Validate if the designated constraints aren't met.
type ChangePGComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePGComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePGComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePGComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePGComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePGComponentsRequestValidationError) ErrorName() string {
	return "ChangePGComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePGComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePGComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePGComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePGComponentsRequestValidationError{}

// Validate checks the field values on ChangePGComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePGComponentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePGComponentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePGComponentsResponseMultiError, or nil if none found.
func (m *ChangePGComponentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePGComponentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePGComponentsResponseMultiError(errors)
	}

	return nil
}

// ChangePGComponentsResponseMultiError is an error wrapping multiple
// validation errors returned by ChangePGComponentsResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangePGComponentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePGComponentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePGComponentsResponseMultiError) AllErrors() []error { return m }

// ChangePGComponentsResponseValidationError is the validation error returned
// by ChangePGComponentsResponse.Validate if the designated constraints aren't met.
type ChangePGComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePGComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePGComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePGComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePGComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePGComponentsResponseValidationError) ErrorName() string {
	return "ChangePGComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePGComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePGComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePGComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePGComponentsResponseValidationError{}

// Validate checks the field values on InstallOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOperatorRequestMultiError, or nil if none found.
func (m *InstallOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := InstallOperatorRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOperatorType()) < 1 {
		err := InstallOperatorRequestValidationError{
			field:  "OperatorType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := InstallOperatorRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InstallOperatorRequestMultiError(errors)
	}

	return nil
}

// InstallOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by InstallOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type InstallOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOperatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOperatorRequestMultiError) AllErrors() []error { return m }

// InstallOperatorRequestValidationError is the validation error returned by
// InstallOperatorRequest.Validate if the designated constraints aren't met.
type InstallOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOperatorRequestValidationError) ErrorName() string {
	return "InstallOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOperatorRequestValidationError{}

// Validate checks the field values on InstallOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOperatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOperatorResponseMultiError, or nil if none found.
func (m *InstallOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return InstallOperatorResponseMultiError(errors)
	}

	return nil
}

// InstallOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by InstallOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type InstallOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOperatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOperatorResponseMultiError) AllErrors() []error { return m }

// InstallOperatorResponseValidationError is the validation error returned by
// InstallOperatorResponse.Validate if the designated constraints aren't met.
type InstallOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOperatorResponseValidationError) ErrorName() string {
	return "InstallOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOperatorResponseValidationError{}

// Validate checks the field values on CheckForOperatorUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForOperatorUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForOperatorUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForOperatorUpdateRequestMultiError, or nil if none found.
func (m *CheckForOperatorUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForOperatorUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckForOperatorUpdateRequestMultiError(errors)
	}

	return nil
}

// CheckForOperatorUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by CheckForOperatorUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckForOperatorUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForOperatorUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForOperatorUpdateRequestMultiError) AllErrors() []error { return m }

// CheckForOperatorUpdateRequestValidationError is the validation error
// returned by CheckForOperatorUpdateRequest.Validate if the designated
// constraints aren't met.
type CheckForOperatorUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForOperatorUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForOperatorUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForOperatorUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForOperatorUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForOperatorUpdateRequestValidationError) ErrorName() string {
	return "CheckForOperatorUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForOperatorUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForOperatorUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForOperatorUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForOperatorUpdateRequestValidationError{}

// Validate checks the field values on ComponentUpdateInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComponentUpdateInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentUpdateInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentUpdateInformationMultiError, or nil if none found.
func (m *ComponentUpdateInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentUpdateInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailableVersion

	if len(errors) > 0 {
		return ComponentUpdateInformationMultiError(errors)
	}

	return nil
}

// ComponentUpdateInformationMultiError is an error wrapping multiple
// validation errors returned by ComponentUpdateInformation.ValidateAll() if
// the designated constraints aren't met.
type ComponentUpdateInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentUpdateInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentUpdateInformationMultiError) AllErrors() []error { return m }

// ComponentUpdateInformationValidationError is the validation error returned
// by ComponentUpdateInformation.Validate if the designated constraints aren't met.
type ComponentUpdateInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentUpdateInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentUpdateInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentUpdateInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentUpdateInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentUpdateInformationValidationError) ErrorName() string {
	return "ComponentUpdateInformationValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentUpdateInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentUpdateInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentUpdateInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentUpdateInformationValidationError{}

// Validate checks the field values on ComponentsUpdateInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComponentsUpdateInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentsUpdateInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentsUpdateInformationMultiError, or nil if none found.
func (m *ComponentsUpdateInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentsUpdateInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetComponentToUpdateInformation()))
		i := 0
		for key := range m.GetComponentToUpdateInformation() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetComponentToUpdateInformation()[key]
			_ = val

			// no validation rules for ComponentToUpdateInformation[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ComponentsUpdateInformationValidationError{
							field:  fmt.Sprintf("ComponentToUpdateInformation[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ComponentsUpdateInformationValidationError{
							field:  fmt.Sprintf("ComponentToUpdateInformation[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ComponentsUpdateInformationValidationError{
						field:  fmt.Sprintf("ComponentToUpdateInformation[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ComponentsUpdateInformationMultiError(errors)
	}

	return nil
}

// ComponentsUpdateInformationMultiError is an error wrapping multiple
// validation errors returned by ComponentsUpdateInformation.ValidateAll() if
// the designated constraints aren't met.
type ComponentsUpdateInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentsUpdateInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentsUpdateInformationMultiError) AllErrors() []error { return m }

// ComponentsUpdateInformationValidationError is the validation error returned
// by ComponentsUpdateInformation.Validate if the designated constraints
// aren't met.
type ComponentsUpdateInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentsUpdateInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentsUpdateInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentsUpdateInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentsUpdateInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentsUpdateInformationValidationError) ErrorName() string {
	return "ComponentsUpdateInformationValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentsUpdateInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentsUpdateInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentsUpdateInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentsUpdateInformationValidationError{}

// Validate checks the field values on CheckForOperatorUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForOperatorUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForOperatorUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForOperatorUpdateResponseMultiError, or nil if none found.
func (m *CheckForOperatorUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForOperatorUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetClusterToComponents()))
		i := 0
		for key := range m.GetClusterToComponents() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetClusterToComponents()[key]
			_ = val

			// no validation rules for ClusterToComponents[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckForOperatorUpdateResponseValidationError{
							field:  fmt.Sprintf("ClusterToComponents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckForOperatorUpdateResponseValidationError{
							field:  fmt.Sprintf("ClusterToComponents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckForOperatorUpdateResponseValidationError{
						field:  fmt.Sprintf("ClusterToComponents[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CheckForOperatorUpdateResponseMultiError(errors)
	}

	return nil
}

// CheckForOperatorUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by CheckForOperatorUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckForOperatorUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForOperatorUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForOperatorUpdateResponseMultiError) AllErrors() []error { return m }

// CheckForOperatorUpdateResponseValidationError is the validation error
// returned by CheckForOperatorUpdateResponse.Validate if the designated
// constraints aren't met.
type CheckForOperatorUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForOperatorUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForOperatorUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForOperatorUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForOperatorUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForOperatorUpdateResponseValidationError) ErrorName() string {
	return "CheckForOperatorUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForOperatorUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForOperatorUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForOperatorUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForOperatorUpdateResponseValidationError{}

// Validate checks the field values on ChangeComponent_ComponentVersion with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeComponent_ComponentVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeComponent_ComponentVersion with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeComponent_ComponentVersionMultiError, or nil if none found.
func (m *ChangeComponent_ComponentVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeComponent_ComponentVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := ChangeComponent_ComponentVersionValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Disable

	// no validation rules for Enable

	if len(errors) > 0 {
		return ChangeComponent_ComponentVersionMultiError(errors)
	}

	return nil
}

// ChangeComponent_ComponentVersionMultiError is an error wrapping multiple
// validation errors returned by
// ChangeComponent_ComponentVersion.ValidateAll() if the designated
// constraints aren't met.
type ChangeComponent_ComponentVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeComponent_ComponentVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeComponent_ComponentVersionMultiError) AllErrors() []error { return m }

// ChangeComponent_ComponentVersionValidationError is the validation error
// returned by ChangeComponent_ComponentVersion.Validate if the designated
// constraints aren't met.
type ChangeComponent_ComponentVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeComponent_ComponentVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeComponent_ComponentVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeComponent_ComponentVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeComponent_ComponentVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeComponent_ComponentVersionValidationError) ErrorName() string {
	return "ChangeComponent_ComponentVersionValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeComponent_ComponentVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeComponent_ComponentVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeComponent_ComponentVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeComponent_ComponentVersionValidationError{}
