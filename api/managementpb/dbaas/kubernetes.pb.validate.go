// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/kubernetes.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on KubeAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KubeAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KubeAuthMultiError, or nil
// if none found.
func (m *KubeAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubeconfig()) < 1 {
		err := KubeAuthValidationError{
			field:  "Kubeconfig",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubeAuthMultiError(errors)
	}

	return nil
}

// KubeAuthMultiError is an error wrapping multiple validation errors returned
// by KubeAuth.ValidateAll() if the designated constraints aren't met.
type KubeAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeAuthMultiError) AllErrors() []error { return m }

// KubeAuthValidationError is the validation error returned by
// KubeAuth.Validate if the designated constraints aren't met.
type KubeAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeAuthValidationError) ErrorName() string { return "KubeAuthValidationError" }

// Error satisfies the builtin error interface
func (e KubeAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeAuthValidationError{}

// Validate checks the field values on Operator with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Operator with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperatorMultiError, or nil
// if none found.
func (m *Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Version

	if len(errors) > 0 {
		return OperatorMultiError(errors)
	}

	return nil
}

// OperatorMultiError is an error wrapping multiple validation errors returned
// by Operator.ValidateAll() if the designated constraints aren't met.
type OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorMultiError) AllErrors() []error { return m }

// OperatorValidationError is the validation error returned by
// Operator.Validate if the designated constraints aren't met.
type OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorValidationError) ErrorName() string { return "OperatorValidationError" }

// Error satisfies the builtin error interface
func (e OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorValidationError{}

// Validate checks the field values on Operators with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Operators) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Operators with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperatorsMultiError, or nil
// if none found.
func (m *Operators) ValidateAll() error {
	return m.validate(true)
}

func (m *Operators) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPxc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPxc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorsValidationError{
				field:  "Pxc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPsmdb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Psmdb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Psmdb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPsmdb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorsValidationError{
				field:  "Psmdb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDbaas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Dbaas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorsValidationError{
					field:  "Dbaas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbaas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorsValidationError{
				field:  "Dbaas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorsMultiError(errors)
	}

	return nil
}

// OperatorsMultiError is an error wrapping multiple validation errors returned
// by Operators.ValidateAll() if the designated constraints aren't met.
type OperatorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorsMultiError) AllErrors() []error { return m }

// OperatorsValidationError is the validation error returned by
// Operators.Validate if the designated constraints aren't met.
type OperatorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorsValidationError) ErrorName() string { return "OperatorsValidationError" }

// Error satisfies the builtin error interface
func (e OperatorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperators.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorsValidationError{}

// Validate checks the field values on ListKubernetesClustersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKubernetesClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKubernetesClustersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKubernetesClustersRequestMultiError, or nil if none found.
func (m *ListKubernetesClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKubernetesClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListKubernetesClustersRequestMultiError(errors)
	}

	return nil
}

// ListKubernetesClustersRequestMultiError is an error wrapping multiple
// validation errors returned by ListKubernetesClustersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListKubernetesClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKubernetesClustersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKubernetesClustersRequestMultiError) AllErrors() []error { return m }

// ListKubernetesClustersRequestValidationError is the validation error
// returned by ListKubernetesClustersRequest.Validate if the designated
// constraints aren't met.
type ListKubernetesClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubernetesClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubernetesClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubernetesClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubernetesClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubernetesClustersRequestValidationError) ErrorName() string {
	return "ListKubernetesClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubernetesClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubernetesClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubernetesClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubernetesClustersRequestValidationError{}

// Validate checks the field values on ListKubernetesClustersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKubernetesClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKubernetesClustersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKubernetesClustersResponseMultiError, or nil if none found.
func (m *ListKubernetesClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKubernetesClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKubernetesClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKubernetesClustersResponseValidationError{
						field:  fmt.Sprintf("KubernetesClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKubernetesClustersResponseValidationError{
						field:  fmt.Sprintf("KubernetesClusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKubernetesClustersResponseValidationError{
					field:  fmt.Sprintf("KubernetesClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKubernetesClustersResponseMultiError(errors)
	}

	return nil
}

// ListKubernetesClustersResponseMultiError is an error wrapping multiple
// validation errors returned by ListKubernetesClustersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListKubernetesClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKubernetesClustersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKubernetesClustersResponseMultiError) AllErrors() []error { return m }

// ListKubernetesClustersResponseValidationError is the validation error
// returned by ListKubernetesClustersResponse.Validate if the designated
// constraints aren't met.
type ListKubernetesClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubernetesClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubernetesClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubernetesClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubernetesClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubernetesClustersResponseValidationError) ErrorName() string {
	return "ListKubernetesClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubernetesClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubernetesClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubernetesClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubernetesClustersResponseValidationError{}

// Validate checks the field values on RegisterKubernetesClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegisterKubernetesClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterKubernetesClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterKubernetesClusterRequestMultiError, or nil if none found.
func (m *RegisterKubernetesClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterKubernetesClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := RegisterKubernetesClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetKubeAuth() == nil {
		err := RegisterKubernetesClusterRequestValidationError{
			field:  "KubeAuth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetKubeAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterKubernetesClusterRequestValidationError{
					field:  "KubeAuth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterKubernetesClusterRequestValidationError{
					field:  "KubeAuth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKubeAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterKubernetesClusterRequestValidationError{
				field:  "KubeAuth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AwsAccessKeyId

	// no validation rules for AwsSecretAccessKey

	if len(errors) > 0 {
		return RegisterKubernetesClusterRequestMultiError(errors)
	}

	return nil
}

// RegisterKubernetesClusterRequestMultiError is an error wrapping multiple
// validation errors returned by
// RegisterKubernetesClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterKubernetesClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterKubernetesClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterKubernetesClusterRequestMultiError) AllErrors() []error { return m }

// RegisterKubernetesClusterRequestValidationError is the validation error
// returned by RegisterKubernetesClusterRequest.Validate if the designated
// constraints aren't met.
type RegisterKubernetesClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKubernetesClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKubernetesClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKubernetesClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKubernetesClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKubernetesClusterRequestValidationError) ErrorName() string {
	return "RegisterKubernetesClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKubernetesClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKubernetesClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKubernetesClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKubernetesClusterRequestValidationError{}

// Validate checks the field values on RegisterKubernetesClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegisterKubernetesClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterKubernetesClusterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegisterKubernetesClusterResponseMultiError, or nil if none found.
func (m *RegisterKubernetesClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterKubernetesClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterKubernetesClusterResponseMultiError(errors)
	}

	return nil
}

// RegisterKubernetesClusterResponseMultiError is an error wrapping multiple
// validation errors returned by
// RegisterKubernetesClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterKubernetesClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterKubernetesClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterKubernetesClusterResponseMultiError) AllErrors() []error { return m }

// RegisterKubernetesClusterResponseValidationError is the validation error
// returned by RegisterKubernetesClusterResponse.Validate if the designated
// constraints aren't met.
type RegisterKubernetesClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKubernetesClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKubernetesClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKubernetesClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKubernetesClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKubernetesClusterResponseValidationError) ErrorName() string {
	return "RegisterKubernetesClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKubernetesClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKubernetesClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKubernetesClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKubernetesClusterResponseValidationError{}

// Validate checks the field values on UnregisterKubernetesClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnregisterKubernetesClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterKubernetesClusterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnregisterKubernetesClusterRequestMultiError, or nil if none found.
func (m *UnregisterKubernetesClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterKubernetesClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := UnregisterKubernetesClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return UnregisterKubernetesClusterRequestMultiError(errors)
	}

	return nil
}

// UnregisterKubernetesClusterRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnregisterKubernetesClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type UnregisterKubernetesClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterKubernetesClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterKubernetesClusterRequestMultiError) AllErrors() []error { return m }

// UnregisterKubernetesClusterRequestValidationError is the validation error
// returned by UnregisterKubernetesClusterRequest.Validate if the designated
// constraints aren't met.
type UnregisterKubernetesClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterKubernetesClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterKubernetesClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterKubernetesClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterKubernetesClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterKubernetesClusterRequestValidationError) ErrorName() string {
	return "UnregisterKubernetesClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterKubernetesClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterKubernetesClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterKubernetesClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterKubernetesClusterRequestValidationError{}

// Validate checks the field values on UnregisterKubernetesClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnregisterKubernetesClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterKubernetesClusterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnregisterKubernetesClusterResponseMultiError, or nil if none found.
func (m *UnregisterKubernetesClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterKubernetesClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnregisterKubernetesClusterResponseMultiError(errors)
	}

	return nil
}

// UnregisterKubernetesClusterResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnregisterKubernetesClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type UnregisterKubernetesClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterKubernetesClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterKubernetesClusterResponseMultiError) AllErrors() []error { return m }

// UnregisterKubernetesClusterResponseValidationError is the validation error
// returned by UnregisterKubernetesClusterResponse.Validate if the designated
// constraints aren't met.
type UnregisterKubernetesClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterKubernetesClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterKubernetesClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterKubernetesClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterKubernetesClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterKubernetesClusterResponseValidationError) ErrorName() string {
	return "UnregisterKubernetesClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterKubernetesClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterKubernetesClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterKubernetesClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterKubernetesClusterResponseValidationError{}

// Validate checks the field values on GetKubernetesClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubernetesClusterRequestMultiError, or nil if none found.
func (m *GetKubernetesClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetKubernetesClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetKubernetesClusterRequestMultiError(errors)
	}

	return nil
}

// GetKubernetesClusterRequestMultiError is an error wrapping multiple
// validation errors returned by GetKubernetesClusterRequest.ValidateAll() if
// the designated constraints aren't met.
type GetKubernetesClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesClusterRequestMultiError) AllErrors() []error { return m }

// GetKubernetesClusterRequestValidationError is the validation error returned
// by GetKubernetesClusterRequest.Validate if the designated constraints
// aren't met.
type GetKubernetesClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesClusterRequestValidationError) ErrorName() string {
	return "GetKubernetesClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesClusterRequestValidationError{}

// Validate checks the field values on GetKubernetesClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubernetesClusterResponseMultiError, or nil if none found.
func (m *GetKubernetesClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKubeAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKubernetesClusterResponseValidationError{
					field:  "KubeAuth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKubernetesClusterResponseValidationError{
					field:  "KubeAuth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKubeAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubernetesClusterResponseValidationError{
				field:  "KubeAuth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKubernetesClusterResponseMultiError(errors)
	}

	return nil
}

// GetKubernetesClusterResponseMultiError is an error wrapping multiple
// validation errors returned by GetKubernetesClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type GetKubernetesClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesClusterResponseMultiError) AllErrors() []error { return m }

// GetKubernetesClusterResponseValidationError is the validation error returned
// by GetKubernetesClusterResponse.Validate if the designated constraints
// aren't met.
type GetKubernetesClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesClusterResponseValidationError) ErrorName() string {
	return "GetKubernetesClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesClusterResponseValidationError{}

// Validate checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesRequestMultiError, or nil if none found.
func (m *GetResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetResourcesRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourcesRequestMultiError(errors)
	}

	return nil
}

// GetResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesRequestMultiError) AllErrors() []error { return m }

// GetResourcesRequestValidationError is the validation error returned by
// GetResourcesRequest.Validate if the designated constraints aren't met.
type GetResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesRequestValidationError) ErrorName() string {
	return "GetResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesRequestValidationError{}

// Validate checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesResponseMultiError, or nil if none found.
func (m *GetResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAll()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "All",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "All",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAll()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourcesResponseValidationError{
				field:  "All",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "Available",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "Available",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourcesResponseValidationError{
				field:  "Available",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResourcesResponseMultiError(errors)
	}

	return nil
}

// GetResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesResponseMultiError) AllErrors() []error { return m }

// GetResourcesResponseValidationError is the validation error returned by
// GetResourcesResponse.Validate if the designated constraints aren't met.
type GetResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesResponseValidationError) ErrorName() string {
	return "GetResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesResponseValidationError{}

// Validate checks the field values on ListStorageClassesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageClassesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageClassesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageClassesRequestMultiError, or nil if none found.
func (m *ListStorageClassesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageClassesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := ListStorageClassesRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStorageClassesRequestMultiError(errors)
	}

	return nil
}

// ListStorageClassesRequestMultiError is an error wrapping multiple validation
// errors returned by ListStorageClassesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListStorageClassesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageClassesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageClassesRequestMultiError) AllErrors() []error { return m }

// ListStorageClassesRequestValidationError is the validation error returned by
// ListStorageClassesRequest.Validate if the designated constraints aren't met.
type ListStorageClassesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageClassesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageClassesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageClassesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageClassesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageClassesRequestValidationError) ErrorName() string {
	return "ListStorageClassesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageClassesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageClassesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageClassesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageClassesRequestValidationError{}

// Validate checks the field values on ListStorageClassesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageClassesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageClassesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageClassesResponseMultiError, or nil if none found.
func (m *ListStorageClassesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageClassesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStorageClassesResponseMultiError(errors)
	}

	return nil
}

// ListStorageClassesResponseMultiError is an error wrapping multiple
// validation errors returned by ListStorageClassesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListStorageClassesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageClassesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageClassesResponseMultiError) AllErrors() []error { return m }

// ListStorageClassesResponseValidationError is the validation error returned
// by ListStorageClassesResponse.Validate if the designated constraints aren't met.
type ListStorageClassesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageClassesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageClassesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageClassesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageClassesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageClassesResponseValidationError) ErrorName() string {
	return "ListStorageClassesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageClassesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageClassesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageClassesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageClassesResponseValidationError{}

// Validate checks the field values on ListKubernetesClustersResponse_Cluster
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListKubernetesClustersResponse_Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListKubernetesClustersResponse_Cluster with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListKubernetesClustersResponse_ClusterMultiError, or nil if none found.
func (m *ListKubernetesClustersResponse_Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKubernetesClustersResponse_Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubernetesClusterName

	if all {
		switch v := interface{}(m.GetOperators()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListKubernetesClustersResponse_ClusterValidationError{
					field:  "Operators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListKubernetesClustersResponse_ClusterValidationError{
					field:  "Operators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperators()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubernetesClustersResponse_ClusterValidationError{
				field:  "Operators",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListKubernetesClustersResponse_ClusterMultiError(errors)
	}

	return nil
}

// ListKubernetesClustersResponse_ClusterMultiError is an error wrapping
// multiple validation errors returned by
// ListKubernetesClustersResponse_Cluster.ValidateAll() if the designated
// constraints aren't met.
type ListKubernetesClustersResponse_ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKubernetesClustersResponse_ClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKubernetesClustersResponse_ClusterMultiError) AllErrors() []error { return m }

// ListKubernetesClustersResponse_ClusterValidationError is the validation
// error returned by ListKubernetesClustersResponse_Cluster.Validate if the
// designated constraints aren't met.
type ListKubernetesClustersResponse_ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubernetesClustersResponse_ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubernetesClustersResponse_ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubernetesClustersResponse_ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubernetesClustersResponse_ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubernetesClustersResponse_ClusterValidationError) ErrorName() string {
	return "ListKubernetesClustersResponse_ClusterValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubernetesClustersResponse_ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubernetesClustersResponse_Cluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubernetesClustersResponse_ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubernetesClustersResponse_ClusterValidationError{}
