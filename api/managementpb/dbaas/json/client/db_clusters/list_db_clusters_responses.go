// Code generated by go-swagger; DO NOT EDIT.

package db_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListDBClustersReader is a Reader for the ListDBClusters structure.
type ListDBClustersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDBClustersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDBClustersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListDBClustersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListDBClustersOK creates a ListDBClustersOK with default headers values
func NewListDBClustersOK() *ListDBClustersOK {
	return &ListDBClustersOK{}
}

/*ListDBClustersOK handles this case with default header values.

A successful response.
*/
type ListDBClustersOK struct {
	Payload *ListDBClustersOKBody
}

func (o *ListDBClustersOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/List][%d] listDbClustersOk  %+v", 200, o.Payload)
}

func (o *ListDBClustersOK) GetPayload() *ListDBClustersOKBody {
	return o.Payload
}

func (o *ListDBClustersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListDBClustersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDBClustersDefault creates a ListDBClustersDefault with default headers values
func NewListDBClustersDefault(code int) *ListDBClustersDefault {
	return &ListDBClustersDefault{
		_statusCode: code,
	}
}

/*ListDBClustersDefault handles this case with default header values.

An unexpected error response.
*/
type ListDBClustersDefault struct {
	_statusCode int

	Payload *ListDBClustersDefaultBody
}

// Code gets the status code for the list DB clusters default response
func (o *ListDBClustersDefault) Code() int {
	return o._statusCode
}

func (o *ListDBClustersDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/List][%d] ListDBClusters default  %+v", o._statusCode, o.Payload)
}

func (o *ListDBClustersDefault) GetPayload() *ListDBClustersDefaultBody {
	return o.Payload
}

func (o *ListDBClustersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListDBClustersDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListDBClustersBody list DB clusters body
swagger:model ListDBClustersBody
*/
type ListDBClustersBody struct {

	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetesClusterName,omitempty"`
}

// Validate validates this list DB clusters body
func (o *ListDBClustersBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListDBClustersDefaultBody list DB clusters default body
swagger:model ListDBClustersDefaultBody
*/
type ListDBClustersDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list DB clusters default body
func (o *ListDBClustersDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListDBClusters default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListDBClustersOKBody list DB clusters OK body
swagger:model ListDBClustersOKBody
*/
type ListDBClustersOKBody struct {

	// PXC clusters information.
	PXCClusters []*PXCClustersItems0 `json:"pxcClusters"`

	// PSMDB clusters information.
	PSMDBClusters []*PSMDBClustersItems0 `json:"psmdbClusters"`
}

// Validate validates this list DB clusters OK body
func (o *ListDBClustersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePXCClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePSMDBClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersOKBody) validatePXCClusters(formats strfmt.Registry) error {

	if swag.IsZero(o.PXCClusters) { // not required
		return nil
	}

	for i := 0; i < len(o.PXCClusters); i++ {
		if swag.IsZero(o.PXCClusters[i]) { // not required
			continue
		}

		if o.PXCClusters[i] != nil {
			if err := o.PXCClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listDbClustersOk" + "." + "pxcClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListDBClustersOKBody) validatePSMDBClusters(formats strfmt.Registry) error {

	if swag.IsZero(o.PSMDBClusters) { // not required
		return nil
	}

	for i := 0; i < len(o.PSMDBClusters); i++ {
		if swag.IsZero(o.PSMDBClusters[i]) { // not required
			continue
		}

		if o.PSMDBClusters[i] != nil {
			if err := o.PSMDBClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listDbClustersOk" + "." + "psmdbClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersOKBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PSMDBClustersItems0 PSMDBCluster represents PSMDB cluster information.
swagger:model PSMDBClustersItems0
*/
type PSMDBClustersItems0 struct {

	// Cluster name.
	Name string `json:"name,omitempty"`

	// DBClusterState represents DB cluster CR state.
	//
	//  - DB_CLUSTER_STATE_INVALID: DB_CLUSTER_STATE_INVALID represents unknown state.
	//  - DB_CLUSTER_STATE_CHANGING: DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
	//  - DB_CLUSTER_STATE_READY: DB_CLUSTER_STATE_READY represents a cluster without pending changes.
	//  - DB_CLUSTER_STATE_FAILED: DB_CLUSTER_STATE_FAILED represents a failed cluster.
	//  - DB_CLUSTER_STATE_DELETING: DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	//  - DB_CLUSTER_STATE_PAUSED: DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
	//  - DB_CLUSTER_STATE_UPGRADING: DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
	// It indicates database cluster upgrade is ongoing.
	// Enum: [DB_CLUSTER_STATE_INVALID DB_CLUSTER_STATE_CHANGING DB_CLUSTER_STATE_READY DB_CLUSTER_STATE_FAILED DB_CLUSTER_STATE_DELETING DB_CLUSTER_STATE_PAUSED DB_CLUSTER_STATE_UPGRADING]
	State *string `json:"state,omitempty"`

	// DB cluster accessible outside of K8s cluster.
	Exposed bool `json:"exposed,omitempty"`

	// Installed PSMDB image.
	InstalledImage string `json:"installedImage,omitempty"`

	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `json:"availableImage,omitempty"`

	// operation
	Operation *PSMDBClustersItems0Operation `json:"operation,omitempty"`

	// params
	Params *PSMDBClustersItems0Params `json:"params,omitempty"`
}

// Validate validates this PSMDB clusters items0
func (o *PSMDBClustersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var psmdbClustersItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_STATE_INVALID","DB_CLUSTER_STATE_CHANGING","DB_CLUSTER_STATE_READY","DB_CLUSTER_STATE_FAILED","DB_CLUSTER_STATE_DELETING","DB_CLUSTER_STATE_PAUSED","DB_CLUSTER_STATE_UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		psmdbClustersItems0TypeStatePropEnum = append(psmdbClustersItems0TypeStatePropEnum, v)
	}
}

const (

	// PSMDBClustersItems0StateDBCLUSTERSTATEINVALID captures enum value "DB_CLUSTER_STATE_INVALID"
	PSMDBClustersItems0StateDBCLUSTERSTATEINVALID string = "DB_CLUSTER_STATE_INVALID"

	// PSMDBClustersItems0StateDBCLUSTERSTATECHANGING captures enum value "DB_CLUSTER_STATE_CHANGING"
	PSMDBClustersItems0StateDBCLUSTERSTATECHANGING string = "DB_CLUSTER_STATE_CHANGING"

	// PSMDBClustersItems0StateDBCLUSTERSTATEREADY captures enum value "DB_CLUSTER_STATE_READY"
	PSMDBClustersItems0StateDBCLUSTERSTATEREADY string = "DB_CLUSTER_STATE_READY"

	// PSMDBClustersItems0StateDBCLUSTERSTATEFAILED captures enum value "DB_CLUSTER_STATE_FAILED"
	PSMDBClustersItems0StateDBCLUSTERSTATEFAILED string = "DB_CLUSTER_STATE_FAILED"

	// PSMDBClustersItems0StateDBCLUSTERSTATEDELETING captures enum value "DB_CLUSTER_STATE_DELETING"
	PSMDBClustersItems0StateDBCLUSTERSTATEDELETING string = "DB_CLUSTER_STATE_DELETING"

	// PSMDBClustersItems0StateDBCLUSTERSTATEPAUSED captures enum value "DB_CLUSTER_STATE_PAUSED"
	PSMDBClustersItems0StateDBCLUSTERSTATEPAUSED string = "DB_CLUSTER_STATE_PAUSED"

	// PSMDBClustersItems0StateDBCLUSTERSTATEUPGRADING captures enum value "DB_CLUSTER_STATE_UPGRADING"
	PSMDBClustersItems0StateDBCLUSTERSTATEUPGRADING string = "DB_CLUSTER_STATE_UPGRADING"
)

// prop value enum
func (o *PSMDBClustersItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, psmdbClustersItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PSMDBClustersItems0) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *PSMDBClustersItems0) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	if o.Operation != nil {
		if err := o.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (o *PSMDBClustersItems0) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PSMDBClustersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PSMDBClustersItems0) UnmarshalBinary(b []byte) error {
	var res PSMDBClustersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PSMDBClustersItems0Operation RunningOperation respresents a long-running operation.
swagger:model PSMDBClustersItems0Operation
*/
type PSMDBClustersItems0Operation struct {

	// Finished steps of the operaion; can decrease or increase compared to the previous value.
	FinishedSteps int32 `json:"finishedSteps,omitempty"`

	// Text describing the current operation progress step.
	Message string `json:"message,omitempty"`

	// Total steps needed to finish the operation; can decrease or increase compared to the previous value.
	TotalSteps int32 `json:"totalSteps,omitempty"`
}

// Validate validates this PSMDB clusters items0 operation
func (o *PSMDBClustersItems0Operation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PSMDBClustersItems0Operation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PSMDBClustersItems0Operation) UnmarshalBinary(b []byte) error {
	var res PSMDBClustersItems0Operation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PSMDBClustersItems0Params PSMDBClusterParams represents PSMDB cluster parameters that can be updated.
swagger:model PSMDBClustersItems0Params
*/
type PSMDBClustersItems0Params struct {

	// Cluster size.
	ClusterSize int32 `json:"clusterSize,omitempty"`

	// Docker image used for PSMDB.
	Image string `json:"image,omitempty"`

	// replicaset
	Replicaset *PSMDBClustersItems0ParamsReplicaset `json:"replicaset,omitempty"`
}

// Validate validates this PSMDB clusters items0 params
func (o *PSMDBClustersItems0Params) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReplicaset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PSMDBClustersItems0Params) validateReplicaset(formats strfmt.Registry) error {

	if swag.IsZero(o.Replicaset) { // not required
		return nil
	}

	if o.Replicaset != nil {
		if err := o.Replicaset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "replicaset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PSMDBClustersItems0Params) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PSMDBClustersItems0Params) UnmarshalBinary(b []byte) error {
	var res PSMDBClustersItems0Params
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PSMDBClustersItems0ParamsReplicaset ReplicaSet container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model PSMDBClustersItems0ParamsReplicaset
*/
type PSMDBClustersItems0ParamsReplicaset struct {

	// Disk size in bytes.
	DiskSize string `json:"diskSize,omitempty"`

	// compute resources
	ComputeResources *PSMDBClustersItems0ParamsReplicasetComputeResources `json:"computeResources,omitempty"`
}

// Validate validates this PSMDB clusters items0 params replicaset
func (o *PSMDBClustersItems0ParamsReplicaset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PSMDBClustersItems0ParamsReplicaset) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "replicaset" + "." + "computeResources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PSMDBClustersItems0ParamsReplicaset) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PSMDBClustersItems0ParamsReplicaset) UnmarshalBinary(b []byte) error {
	var res PSMDBClustersItems0ParamsReplicaset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PSMDBClustersItems0ParamsReplicasetComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PSMDBClustersItems0ParamsReplicasetComputeResources
*/
type PSMDBClustersItems0ParamsReplicasetComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUM int32 `json:"cpuM,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memoryBytes,omitempty"`
}

// Validate validates this PSMDB clusters items0 params replicaset compute resources
func (o *PSMDBClustersItems0ParamsReplicasetComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PSMDBClustersItems0ParamsReplicasetComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PSMDBClustersItems0ParamsReplicasetComputeResources) UnmarshalBinary(b []byte) error {
	var res PSMDBClustersItems0ParamsReplicasetComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0 PXCCluster represents PXC cluster information.
swagger:model PXCClustersItems0
*/
type PXCClustersItems0 struct {

	// Cluster name.
	Name string `json:"name,omitempty"`

	// DBClusterState represents DB cluster CR state.
	//
	//  - DB_CLUSTER_STATE_INVALID: DB_CLUSTER_STATE_INVALID represents unknown state.
	//  - DB_CLUSTER_STATE_CHANGING: DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
	//  - DB_CLUSTER_STATE_READY: DB_CLUSTER_STATE_READY represents a cluster without pending changes.
	//  - DB_CLUSTER_STATE_FAILED: DB_CLUSTER_STATE_FAILED represents a failed cluster.
	//  - DB_CLUSTER_STATE_DELETING: DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	//  - DB_CLUSTER_STATE_PAUSED: DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
	//  - DB_CLUSTER_STATE_UPGRADING: DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
	// It indicates database cluster upgrade is ongoing.
	// Enum: [DB_CLUSTER_STATE_INVALID DB_CLUSTER_STATE_CHANGING DB_CLUSTER_STATE_READY DB_CLUSTER_STATE_FAILED DB_CLUSTER_STATE_DELETING DB_CLUSTER_STATE_PAUSED DB_CLUSTER_STATE_UPGRADING]
	State *string `json:"state,omitempty"`

	// DB cluster accessible outside of K8s cluster.
	Exposed bool `json:"exposed,omitempty"`

	// Installed XtraDB image.
	InstalledImage string `json:"installedImage,omitempty"`

	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `json:"availableImage,omitempty"`

	// operation
	Operation *PXCClustersItems0Operation `json:"operation,omitempty"`

	// params
	Params *PXCClustersItems0Params `json:"params,omitempty"`
}

// Validate validates this PXC clusters items0
func (o *PXCClustersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pxcClustersItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_STATE_INVALID","DB_CLUSTER_STATE_CHANGING","DB_CLUSTER_STATE_READY","DB_CLUSTER_STATE_FAILED","DB_CLUSTER_STATE_DELETING","DB_CLUSTER_STATE_PAUSED","DB_CLUSTER_STATE_UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pxcClustersItems0TypeStatePropEnum = append(pxcClustersItems0TypeStatePropEnum, v)
	}
}

const (

	// PXCClustersItems0StateDBCLUSTERSTATEINVALID captures enum value "DB_CLUSTER_STATE_INVALID"
	PXCClustersItems0StateDBCLUSTERSTATEINVALID string = "DB_CLUSTER_STATE_INVALID"

	// PXCClustersItems0StateDBCLUSTERSTATECHANGING captures enum value "DB_CLUSTER_STATE_CHANGING"
	PXCClustersItems0StateDBCLUSTERSTATECHANGING string = "DB_CLUSTER_STATE_CHANGING"

	// PXCClustersItems0StateDBCLUSTERSTATEREADY captures enum value "DB_CLUSTER_STATE_READY"
	PXCClustersItems0StateDBCLUSTERSTATEREADY string = "DB_CLUSTER_STATE_READY"

	// PXCClustersItems0StateDBCLUSTERSTATEFAILED captures enum value "DB_CLUSTER_STATE_FAILED"
	PXCClustersItems0StateDBCLUSTERSTATEFAILED string = "DB_CLUSTER_STATE_FAILED"

	// PXCClustersItems0StateDBCLUSTERSTATEDELETING captures enum value "DB_CLUSTER_STATE_DELETING"
	PXCClustersItems0StateDBCLUSTERSTATEDELETING string = "DB_CLUSTER_STATE_DELETING"

	// PXCClustersItems0StateDBCLUSTERSTATEPAUSED captures enum value "DB_CLUSTER_STATE_PAUSED"
	PXCClustersItems0StateDBCLUSTERSTATEPAUSED string = "DB_CLUSTER_STATE_PAUSED"

	// PXCClustersItems0StateDBCLUSTERSTATEUPGRADING captures enum value "DB_CLUSTER_STATE_UPGRADING"
	PXCClustersItems0StateDBCLUSTERSTATEUPGRADING string = "DB_CLUSTER_STATE_UPGRADING"
)

// prop value enum
func (o *PXCClustersItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pxcClustersItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PXCClustersItems0) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *PXCClustersItems0) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	if o.Operation != nil {
		if err := o.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (o *PXCClustersItems0) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0Operation RunningOperation respresents a long-running operation.
swagger:model PXCClustersItems0Operation
*/
type PXCClustersItems0Operation struct {

	// Finished steps of the operaion; can decrease or increase compared to the previous value.
	FinishedSteps int32 `json:"finishedSteps,omitempty"`

	// Text describing the current operation progress step.
	Message string `json:"message,omitempty"`

	// Total steps needed to finish the operation; can decrease or increase compared to the previous value.
	TotalSteps int32 `json:"totalSteps,omitempty"`
}

// Validate validates this PXC clusters items0 operation
func (o *PXCClustersItems0Operation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0Operation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0Operation) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0Operation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0Params PXCClusterParams represents PXC cluster parameters that can be updated.
swagger:model PXCClustersItems0Params
*/
type PXCClustersItems0Params struct {

	// Cluster size.
	ClusterSize int32 `json:"clusterSize,omitempty"`

	// haproxy
	Haproxy *PXCClustersItems0ParamsHaproxy `json:"haproxy,omitempty"`

	// proxysql
	Proxysql *PXCClustersItems0ParamsProxysql `json:"proxysql,omitempty"`

	// pxc
	PXC *PXCClustersItems0ParamsPXC `json:"pxc,omitempty"`
}

// Validate validates this PXC clusters items0 params
func (o *PXCClustersItems0Params) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePXC(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersItems0Params) validateHaproxy(formats strfmt.Registry) error {

	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *PXCClustersItems0Params) validateProxysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *PXCClustersItems0Params) validatePXC(formats strfmt.Registry) error {

	if swag.IsZero(o.PXC) { // not required
		return nil
	}

	if o.PXC != nil {
		if err := o.PXC.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "pxc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0Params) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0Params) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0Params
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsHaproxy HAProxy container parameters.
// NOTE: HAProxy does not need disk size as ProxySQL does because the container does not require it.
swagger:model PXCClustersItems0ParamsHaproxy
*/
type PXCClustersItems0ParamsHaproxy struct {

	// Docker image used for HAProxy.
	Image string `json:"image,omitempty"`

	// compute resources
	ComputeResources *PXCClustersItems0ParamsHaproxyComputeResources `json:"computeResources,omitempty"`
}

// Validate validates this PXC clusters items0 params haproxy
func (o *PXCClustersItems0ParamsHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersItems0ParamsHaproxy) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "haproxy" + "." + "computeResources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsHaproxy) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsHaproxyComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersItems0ParamsHaproxyComputeResources
*/
type PXCClustersItems0ParamsHaproxyComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUM int32 `json:"cpuM,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memoryBytes,omitempty"`
}

// Validate validates this PXC clusters items0 params haproxy compute resources
func (o *PXCClustersItems0ParamsHaproxyComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsHaproxyComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsHaproxyComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsHaproxyComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsPXC PXC container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model PXCClustersItems0ParamsPXC
*/
type PXCClustersItems0ParamsPXC struct {

	// Docker image used for PXC.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"diskSize,omitempty"`

	// compute resources
	ComputeResources *PXCClustersItems0ParamsPXCComputeResources `json:"computeResources,omitempty"`
}

// Validate validates this PXC clusters items0 params PXC
func (o *PXCClustersItems0ParamsPXC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersItems0ParamsPXC) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "pxc" + "." + "computeResources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsPXC) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsPXC) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsPXC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsPXCComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersItems0ParamsPXCComputeResources
*/
type PXCClustersItems0ParamsPXCComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUM int32 `json:"cpuM,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memoryBytes,omitempty"`
}

// Validate validates this PXC clusters items0 params PXC compute resources
func (o *PXCClustersItems0ParamsPXCComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsPXCComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsPXCComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsPXCComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsProxysql ProxySQL container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model PXCClustersItems0ParamsProxysql
*/
type PXCClustersItems0ParamsProxysql struct {

	// Docker image used for ProxySQL.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"diskSize,omitempty"`

	// compute resources
	ComputeResources *PXCClustersItems0ParamsProxysqlComputeResources `json:"computeResources,omitempty"`
}

// Validate validates this PXC clusters items0 params proxysql
func (o *PXCClustersItems0ParamsProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersItems0ParamsProxysql) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "proxysql" + "." + "computeResources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsProxysql) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersItems0ParamsProxysqlComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersItems0ParamsProxysqlComputeResources
*/
type PXCClustersItems0ParamsProxysqlComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUM int32 `json:"cpuM,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memoryBytes,omitempty"`
}

// Validate validates this PXC clusters items0 params proxysql compute resources
func (o *PXCClustersItems0ParamsProxysqlComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersItems0ParamsProxysqlComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersItems0ParamsProxysqlComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersItems0ParamsProxysqlComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
