// Code generated by go-swagger; DO NOT EDIT.

package db_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDBClusterReader is a Reader for the GetDBCluster structure.
type GetDBClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDBClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDBClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDBClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDBClusterOK creates a GetDBClusterOK with default headers values
func NewGetDBClusterOK() *GetDBClusterOK {
	return &GetDBClusterOK{}
}

/*
GetDBClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetDBClusterOK struct {
	Payload *GetDBClusterOKBody
}

func (o *GetDBClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/Get][%d] getDbClusterOk  %+v", 200, o.Payload)
}

func (o *GetDBClusterOK) GetPayload() *GetDBClusterOKBody {
	return o.Payload
}

func (o *GetDBClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetDBClusterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDBClusterDefault creates a GetDBClusterDefault with default headers values
func NewGetDBClusterDefault(code int) *GetDBClusterDefault {
	return &GetDBClusterDefault{
		_statusCode: code,
	}
}

/*
GetDBClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetDBClusterDefault struct {
	_statusCode int

	Payload *GetDBClusterDefaultBody
}

// Code gets the status code for the get DB cluster default response
func (o *GetDBClusterDefault) Code() int {
	return o._statusCode
}

func (o *GetDBClusterDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/Get][%d] GetDBCluster default  %+v", o._statusCode, o.Payload)
}

func (o *GetDBClusterDefault) GetPayload() *GetDBClusterDefaultBody {
	return o.Payload
}

func (o *GetDBClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetDBClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDBClusterBody get DB cluster body
swagger:model GetDBClusterBody
*/
type GetDBClusterBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// DB cluster name.
	Name string `json:"name,omitempty"`
}

// Validate validates this get DB cluster body
func (o *GetDBClusterBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster body based on context it is used
func (o *GetDBClusterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterBody) UnmarshalBinary(b []byte) error {
	var res GetDBClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterDefaultBody get DB cluster default body
swagger:model GetDBClusterDefaultBody
*/
type GetDBClusterDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetDBClusterDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get DB cluster default body
func (o *GetDBClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetDBCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetDBCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get DB cluster default body based on the context it is used
func (o *GetDBClusterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetDBCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetDBCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetDBClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterDefaultBodyDetailsItems0 get DB cluster default body details items0
swagger:model GetDBClusterDefaultBodyDetailsItems0
*/
type GetDBClusterDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get DB cluster default body details items0
func (o *GetDBClusterDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster default body details items0 based on context it is used
func (o *GetDBClusterDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetDBClusterDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBody get DB cluster OK body
swagger:model GetDBClusterOKBody
*/
type GetDBClusterOKBody struct {
	// psmdb cluster
	PSMDBCluster *GetDBClusterOKBodyPSMDBCluster `json:"psmdb_cluster,omitempty"`

	// pxc cluster
	PXCCluster *GetDBClusterOKBodyPXCCluster `json:"pxc_cluster,omitempty"`
}

// Validate validates this get DB cluster OK body
func (o *GetDBClusterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePSMDBCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePXCCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBody) validatePSMDBCluster(formats strfmt.Registry) error {
	if swag.IsZero(o.PSMDBCluster) { // not required
		return nil
	}

	if o.PSMDBCluster != nil {
		if err := o.PSMDBCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBody) validatePXCCluster(formats strfmt.Registry) error {
	if swag.IsZero(o.PXCCluster) { // not required
		return nil
	}

	if o.PXCCluster != nil {
		if err := o.PXCCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body based on the context it is used
func (o *GetDBClusterOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePSMDBCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePXCCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBody) contextValidatePSMDBCluster(ctx context.Context, formats strfmt.Registry) error {
	if o.PSMDBCluster != nil {
		if err := o.PSMDBCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBody) contextValidatePXCCluster(ctx context.Context, formats strfmt.Registry) error {
	if o.PXCCluster != nil {
		if err := o.PXCCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBody) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBCluster PSMDBCluster represents PSMDB cluster information.
swagger:model GetDBClusterOKBodyPSMDBCluster
*/
type GetDBClusterOKBodyPSMDBCluster struct {
	// Cluster name.
	Name string `json:"name,omitempty"`

	// DBClusterState represents DB cluster CR state.
	//
	//  - DB_CLUSTER_STATE_INVALID: DB_CLUSTER_STATE_INVALID represents unknown state.
	//  - DB_CLUSTER_STATE_CHANGING: DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
	//  - DB_CLUSTER_STATE_READY: DB_CLUSTER_STATE_READY represents a cluster without pending changes.
	//  - DB_CLUSTER_STATE_FAILED: DB_CLUSTER_STATE_FAILED represents a failed cluster.
	//  - DB_CLUSTER_STATE_DELETING: DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	//  - DB_CLUSTER_STATE_PAUSED: DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
	//  - DB_CLUSTER_STATE_UPGRADING: DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
	// It indicates database cluster upgrade is ongoing.
	// Enum: [DB_CLUSTER_STATE_INVALID DB_CLUSTER_STATE_CHANGING DB_CLUSTER_STATE_READY DB_CLUSTER_STATE_FAILED DB_CLUSTER_STATE_DELETING DB_CLUSTER_STATE_PAUSED DB_CLUSTER_STATE_UPGRADING]
	State *string `json:"state,omitempty"`

	// DB cluster accessible outside of K8s cluster.
	Exposed bool `json:"exposed,omitempty"`

	// Installed PSMDB image.
	InstalledImage string `json:"installed_image,omitempty"`

	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `json:"available_image,omitempty"`

	// Is DB cluster accessible via public internet.
	InternetFacing bool `json:"internet_facing,omitempty"`

	// Apply IP source ranges against the cluster.
	SourceRanges []string `json:"source_ranges"`

	// backup
	Backup *GetDBClusterOKBodyPSMDBClusterBackup `json:"backup,omitempty"`

	// operation
	Operation *GetDBClusterOKBodyPSMDBClusterOperation `json:"operation,omitempty"`

	// params
	Params *GetDBClusterOKBodyPSMDBClusterParams `json:"params,omitempty"`

	// restore
	Restore *GetDBClusterOKBodyPSMDBClusterRestore `json:"restore,omitempty"`

	// template
	Template *GetDBClusterOKBodyPSMDBClusterTemplate `json:"template,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster
func (o *GetDBClusterOKBodyPSMDBCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDbClusterOkBodyPsmdbClusterTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_STATE_INVALID","DB_CLUSTER_STATE_CHANGING","DB_CLUSTER_STATE_READY","DB_CLUSTER_STATE_FAILED","DB_CLUSTER_STATE_DELETING","DB_CLUSTER_STATE_PAUSED","DB_CLUSTER_STATE_UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDbClusterOkBodyPsmdbClusterTypeStatePropEnum = append(getDbClusterOkBodyPsmdbClusterTypeStatePropEnum, v)
	}
}

const (

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEINVALID captures enum value "DB_CLUSTER_STATE_INVALID"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEINVALID string = "DB_CLUSTER_STATE_INVALID"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATECHANGING captures enum value "DB_CLUSTER_STATE_CHANGING"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATECHANGING string = "DB_CLUSTER_STATE_CHANGING"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEREADY captures enum value "DB_CLUSTER_STATE_READY"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEREADY string = "DB_CLUSTER_STATE_READY"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEFAILED captures enum value "DB_CLUSTER_STATE_FAILED"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEFAILED string = "DB_CLUSTER_STATE_FAILED"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEDELETING captures enum value "DB_CLUSTER_STATE_DELETING"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEDELETING string = "DB_CLUSTER_STATE_DELETING"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEPAUSED captures enum value "DB_CLUSTER_STATE_PAUSED"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEPAUSED string = "DB_CLUSTER_STATE_PAUSED"

	// GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEUPGRADING captures enum value "DB_CLUSTER_STATE_UPGRADING"
	GetDBClusterOKBodyPSMDBClusterStateDBCLUSTERSTATEUPGRADING string = "DB_CLUSTER_STATE_UPGRADING"
)

// prop value enum
func (o *GetDBClusterOKBodyPSMDBCluster) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDbClusterOkBodyPsmdbClusterTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("getDbClusterOk"+"."+"psmdb_cluster"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	if o.Operation != nil {
		if err := o.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "operation")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PSMDB cluster based on the context it is used
func (o *GetDBClusterOKBodyPSMDBCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {
	if o.Operation != nil {
		if err := o.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "operation")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBCluster) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {
	if o.Template != nil {
		if err := o.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBCluster) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBCluster) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterBackup Backup configuration for a database cluster
swagger:model GetDBClusterOKBodyPSMDBClusterBackup
*/
type GetDBClusterOKBodyPSMDBClusterBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster backup
func (o *GetDBClusterOKBodyPSMDBClusterBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster backup based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterBackup) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterOperation RunningOperation respresents a long-running operation.
swagger:model GetDBClusterOKBodyPSMDBClusterOperation
*/
type GetDBClusterOKBodyPSMDBClusterOperation struct {
	// Finished steps of the operaion; can decrease or increase compared to the previous value.
	FinishedSteps int32 `json:"finished_steps,omitempty"`

	// Text describing the current operation progress step.
	Message string `json:"message,omitempty"`

	// Total steps needed to finish the operation; can decrease or increase compared to the previous value.
	TotalSteps int32 `json:"total_steps,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster operation
func (o *GetDBClusterOKBodyPSMDBClusterOperation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster operation based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterOperation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterOperation) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterParams PSMDBClusterParams represents PSMDB cluster parameters that can be updated.
swagger:model GetDBClusterOKBodyPSMDBClusterParams
*/
type GetDBClusterOKBodyPSMDBClusterParams struct {
	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// Docker image used for PSMDB.
	Image string `json:"image,omitempty"`

	// backup
	Backup *GetDBClusterOKBodyPSMDBClusterParamsBackup `json:"backup,omitempty"`

	// replicaset
	Replicaset *GetDBClusterOKBodyPSMDBClusterParamsReplicaset `json:"replicaset,omitempty"`

	// restore
	Restore *GetDBClusterOKBodyPSMDBClusterParamsRestore `json:"restore,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster params
func (o *GetDBClusterOKBodyPSMDBClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplicaset(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) validateReplicaset(formats strfmt.Registry) error {
	if swag.IsZero(o.Replicaset) { // not required
		return nil
	}

	if o.Replicaset != nil {
		if err := o.Replicaset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PSMDB cluster params based on the context it is used
func (o *GetDBClusterOKBodyPSMDBClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReplicaset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) contextValidateReplicaset(ctx context.Context, formats strfmt.Registry) error {
	if o.Replicaset != nil {
		if err := o.Replicaset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParams) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParams) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterParamsBackup Backup configuration for a database cluster
swagger:model GetDBClusterOKBodyPSMDBClusterParamsBackup
*/
type GetDBClusterOKBodyPSMDBClusterParamsBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster params backup
func (o *GetDBClusterOKBodyPSMDBClusterParamsBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster params backup based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterParamsBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsBackup) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterParamsBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterParamsReplicaset ReplicaSet container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model GetDBClusterOKBodyPSMDBClusterParamsReplicaset
*/
type GetDBClusterOKBodyPSMDBClusterParamsReplicaset struct {
	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// Configuration for PSMDB cluster
	Configuration string `json:"configuration,omitempty"`

	// Storage Class for PSMDB cluster.
	StorageClass string `json:"storage_class,omitempty"`

	// compute resources
	ComputeResources *GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster params replicaset
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PSMDB cluster params replicaset based on the context it is used
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "psmdb_cluster" + "." + "params" + "." + "replicaset" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicaset) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterParamsReplicaset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources
*/
type GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster params replicaset compute resources
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster params replicaset compute resources based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterParamsReplicasetComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterParamsRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model GetDBClusterOKBodyPSMDBClusterParamsRestore
*/
type GetDBClusterOKBodyPSMDBClusterParamsRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster params restore
func (o *GetDBClusterOKBodyPSMDBClusterParamsRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster params restore based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterParamsRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterParamsRestore) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterParamsRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model GetDBClusterOKBodyPSMDBClusterRestore
*/
type GetDBClusterOKBodyPSMDBClusterRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster restore
func (o *GetDBClusterOKBodyPSMDBClusterRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster restore based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterRestore) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPSMDBClusterTemplate get DB cluster OK body PSMDB cluster template
swagger:model GetDBClusterOKBodyPSMDBClusterTemplate
*/
type GetDBClusterOKBodyPSMDBClusterTemplate struct {
	// Template CR name.
	Name string `json:"name,omitempty"`

	// Template CR kind.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this get DB cluster OK body PSMDB cluster template
func (o *GetDBClusterOKBodyPSMDBClusterTemplate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PSMDB cluster template based on context it is used
func (o *GetDBClusterOKBodyPSMDBClusterTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterTemplate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPSMDBClusterTemplate) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPSMDBClusterTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCCluster PXCCluster represents PXC cluster information.
swagger:model GetDBClusterOKBodyPXCCluster
*/
type GetDBClusterOKBodyPXCCluster struct {
	// Cluster name.
	Name string `json:"name,omitempty"`

	// DBClusterState represents DB cluster CR state.
	//
	//  - DB_CLUSTER_STATE_INVALID: DB_CLUSTER_STATE_INVALID represents unknown state.
	//  - DB_CLUSTER_STATE_CHANGING: DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
	//  - DB_CLUSTER_STATE_READY: DB_CLUSTER_STATE_READY represents a cluster without pending changes.
	//  - DB_CLUSTER_STATE_FAILED: DB_CLUSTER_STATE_FAILED represents a failed cluster.
	//  - DB_CLUSTER_STATE_DELETING: DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	//  - DB_CLUSTER_STATE_PAUSED: DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
	//  - DB_CLUSTER_STATE_UPGRADING: DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
	// It indicates database cluster upgrade is ongoing.
	// Enum: [DB_CLUSTER_STATE_INVALID DB_CLUSTER_STATE_CHANGING DB_CLUSTER_STATE_READY DB_CLUSTER_STATE_FAILED DB_CLUSTER_STATE_DELETING DB_CLUSTER_STATE_PAUSED DB_CLUSTER_STATE_UPGRADING]
	State *string `json:"state,omitempty"`

	// DB cluster accessible outside of K8s cluster.
	Exposed bool `json:"exposed,omitempty"`

	// Installed XtraDB image.
	InstalledImage string `json:"installed_image,omitempty"`

	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `json:"available_image,omitempty"`

	// Is DB cluster accessible via public internet.
	InternetFacing bool `json:"internet_facing,omitempty"`

	// Apply IP source ranges against the cluster.
	SourceRanges []string `json:"source_ranges"`

	// backup
	Backup *GetDBClusterOKBodyPXCClusterBackup `json:"backup,omitempty"`

	// operation
	Operation *GetDBClusterOKBodyPXCClusterOperation `json:"operation,omitempty"`

	// params
	Params *GetDBClusterOKBodyPXCClusterParams `json:"params,omitempty"`

	// restore
	Restore *GetDBClusterOKBodyPXCClusterRestore `json:"restore,omitempty"`

	// template
	Template *GetDBClusterOKBodyPXCClusterTemplate `json:"template,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster
func (o *GetDBClusterOKBodyPXCCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDbClusterOkBodyPxcClusterTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_STATE_INVALID","DB_CLUSTER_STATE_CHANGING","DB_CLUSTER_STATE_READY","DB_CLUSTER_STATE_FAILED","DB_CLUSTER_STATE_DELETING","DB_CLUSTER_STATE_PAUSED","DB_CLUSTER_STATE_UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDbClusterOkBodyPxcClusterTypeStatePropEnum = append(getDbClusterOkBodyPxcClusterTypeStatePropEnum, v)
	}
}

const (

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEINVALID captures enum value "DB_CLUSTER_STATE_INVALID"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEINVALID string = "DB_CLUSTER_STATE_INVALID"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATECHANGING captures enum value "DB_CLUSTER_STATE_CHANGING"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATECHANGING string = "DB_CLUSTER_STATE_CHANGING"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEREADY captures enum value "DB_CLUSTER_STATE_READY"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEREADY string = "DB_CLUSTER_STATE_READY"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEFAILED captures enum value "DB_CLUSTER_STATE_FAILED"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEFAILED string = "DB_CLUSTER_STATE_FAILED"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEDELETING captures enum value "DB_CLUSTER_STATE_DELETING"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEDELETING string = "DB_CLUSTER_STATE_DELETING"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEPAUSED captures enum value "DB_CLUSTER_STATE_PAUSED"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEPAUSED string = "DB_CLUSTER_STATE_PAUSED"

	// GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEUPGRADING captures enum value "DB_CLUSTER_STATE_UPGRADING"
	GetDBClusterOKBodyPXCClusterStateDBCLUSTERSTATEUPGRADING string = "DB_CLUSTER_STATE_UPGRADING"
)

// prop value enum
func (o *GetDBClusterOKBodyPXCCluster) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDbClusterOkBodyPxcClusterTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("getDbClusterOk"+"."+"pxc_cluster"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	if o.Operation != nil {
		if err := o.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "operation")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PXC cluster based on the context it is used
func (o *GetDBClusterOKBodyPXCCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {
	if o.Operation != nil {
		if err := o.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "operation")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCCluster) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {
	if o.Template != nil {
		if err := o.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCCluster) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCCluster) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterBackup Backup configuration for a database cluster
swagger:model GetDBClusterOKBodyPXCClusterBackup
*/
type GetDBClusterOKBodyPXCClusterBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster backup
func (o *GetDBClusterOKBodyPXCClusterBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster backup based on context it is used
func (o *GetDBClusterOKBodyPXCClusterBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterBackup) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterOperation RunningOperation respresents a long-running operation.
swagger:model GetDBClusterOKBodyPXCClusterOperation
*/
type GetDBClusterOKBodyPXCClusterOperation struct {
	// Finished steps of the operaion; can decrease or increase compared to the previous value.
	FinishedSteps int32 `json:"finished_steps,omitempty"`

	// Text describing the current operation progress step.
	Message string `json:"message,omitempty"`

	// Total steps needed to finish the operation; can decrease or increase compared to the previous value.
	TotalSteps int32 `json:"total_steps,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster operation
func (o *GetDBClusterOKBodyPXCClusterOperation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster operation based on context it is used
func (o *GetDBClusterOKBodyPXCClusterOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterOperation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterOperation) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParams PXCClusterParams represents PXC cluster parameters that can be updated.
swagger:model GetDBClusterOKBodyPXCClusterParams
*/
type GetDBClusterOKBodyPXCClusterParams struct {
	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// backup
	Backup *GetDBClusterOKBodyPXCClusterParamsBackup `json:"backup,omitempty"`

	// haproxy
	Haproxy *GetDBClusterOKBodyPXCClusterParamsHaproxy `json:"haproxy,omitempty"`

	// proxysql
	Proxysql *GetDBClusterOKBodyPXCClusterParamsProxysql `json:"proxysql,omitempty"`

	// pxc
	PXC *GetDBClusterOKBodyPXCClusterParamsPXC `json:"pxc,omitempty"`

	// restore
	Restore *GetDBClusterOKBodyPXCClusterParamsRestore `json:"restore,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params
func (o *GetDBClusterOKBodyPXCClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePXC(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) validateHaproxy(formats strfmt.Registry) error {
	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) validateProxysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) validatePXC(formats strfmt.Registry) error {
	if swag.IsZero(o.PXC) { // not required
		return nil
	}

	if o.PXC != nil {
		if err := o.PXC.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PXC cluster params based on the context it is used
func (o *GetDBClusterOKBodyPXCClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHaproxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProxysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePXC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) contextValidateHaproxy(ctx context.Context, formats strfmt.Registry) error {
	if o.Haproxy != nil {
		if err := o.Haproxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) contextValidateProxysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Proxysql != nil {
		if err := o.Proxysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) contextValidatePXC(ctx context.Context, formats strfmt.Registry) error {
	if o.PXC != nil {
		if err := o.PXC.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc")
			}
			return err
		}
	}

	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParams) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParams) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsBackup Backup configuration for a database cluster
swagger:model GetDBClusterOKBodyPXCClusterParamsBackup
*/
type GetDBClusterOKBodyPXCClusterParamsBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params backup
func (o *GetDBClusterOKBodyPXCClusterParamsBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster params backup based on context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsBackup) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsHaproxy HAProxy container parameters.
// NOTE: HAProxy does not need disk size as ProxySQL does because the container does not require it.
swagger:model GetDBClusterOKBodyPXCClusterParamsHaproxy
*/
type GetDBClusterOKBodyPXCClusterParamsHaproxy struct {
	// Docker image used for HAProxy.
	Image string `json:"image,omitempty"`

	// compute resources
	ComputeResources *GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params haproxy
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PXC cluster params haproxy based on the context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "haproxy" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxy) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources
*/
type GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params haproxy compute resources
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster params haproxy compute resources based on context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsHaproxyComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsPXC PXC container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model GetDBClusterOKBodyPXCClusterParamsPXC
*/
type GetDBClusterOKBodyPXCClusterParamsPXC struct {
	// Docker image used for PXC.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// Configuration for PXC cluster
	Configuration string `json:"configuration,omitempty"`

	// Storage Class for PXC cluster.
	StorageClass string `json:"storage_class,omitempty"`

	// compute resources
	ComputeResources *GetDBClusterOKBodyPXCClusterParamsPXCComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params PXC
func (o *GetDBClusterOKBodyPXCClusterParamsPXC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsPXC) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PXC cluster params PXC based on the context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsPXC) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsPXC) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsPXC) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsPXC) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsPXC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsPXCComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetDBClusterOKBodyPXCClusterParamsPXCComputeResources
*/
type GetDBClusterOKBodyPXCClusterParamsPXCComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params PXC compute resources
func (o *GetDBClusterOKBodyPXCClusterParamsPXCComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster params PXC compute resources based on context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsPXCComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsPXCComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsPXCComputeResources) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsPXCComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsProxysql ProxySQL container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model GetDBClusterOKBodyPXCClusterParamsProxysql
*/
type GetDBClusterOKBodyPXCClusterParamsProxysql struct {
	// Docker image used for ProxySQL.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// compute resources
	ComputeResources *GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params proxysql
func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get DB cluster OK body PXC cluster params proxysql based on the context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDbClusterOk" + "." + "pxc_cluster" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsProxysql) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources
*/
type GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params proxysql compute resources
func (o *GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster params proxysql compute resources based on context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsProxysqlComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterParamsRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model GetDBClusterOKBodyPXCClusterParamsRestore
*/
type GetDBClusterOKBodyPXCClusterParamsRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster params restore
func (o *GetDBClusterOKBodyPXCClusterParamsRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster params restore based on context it is used
func (o *GetDBClusterOKBodyPXCClusterParamsRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterParamsRestore) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterParamsRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model GetDBClusterOKBodyPXCClusterRestore
*/
type GetDBClusterOKBodyPXCClusterRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster restore
func (o *GetDBClusterOKBodyPXCClusterRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster restore based on context it is used
func (o *GetDBClusterOKBodyPXCClusterRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterRestore) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDBClusterOKBodyPXCClusterTemplate get DB cluster OK body PXC cluster template
swagger:model GetDBClusterOKBodyPXCClusterTemplate
*/
type GetDBClusterOKBodyPXCClusterTemplate struct {
	// Template CR name.
	Name string `json:"name,omitempty"`

	// Template CR kind.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this get DB cluster OK body PXC cluster template
func (o *GetDBClusterOKBodyPXCClusterTemplate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get DB cluster OK body PXC cluster template based on context it is used
func (o *GetDBClusterOKBodyPXCClusterTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterTemplate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDBClusterOKBodyPXCClusterTemplate) UnmarshalBinary(b []byte) error {
	var res GetDBClusterOKBodyPXCClusterTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
