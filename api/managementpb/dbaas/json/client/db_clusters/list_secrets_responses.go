// Code generated by go-swagger; DO NOT EDIT.

package db_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListSecretsReader is a Reader for the ListSecrets structure.
type ListSecretsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSecretsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSecretsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListSecretsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListSecretsOK creates a ListSecretsOK with default headers values
func NewListSecretsOK() *ListSecretsOK {
	return &ListSecretsOK{}
}

/*
ListSecretsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListSecretsOK struct {
	Payload *ListSecretsOKBody
}

func (o *ListSecretsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Secrets/List][%d] listSecretsOk  %+v", 200, o.Payload)
}

func (o *ListSecretsOK) GetPayload() *ListSecretsOKBody {
	return o.Payload
}

func (o *ListSecretsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListSecretsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretsDefault creates a ListSecretsDefault with default headers values
func NewListSecretsDefault(code int) *ListSecretsDefault {
	return &ListSecretsDefault{
		_statusCode: code,
	}
}

/*
ListSecretsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListSecretsDefault struct {
	_statusCode int

	Payload *ListSecretsDefaultBody
}

// Code gets the status code for the list secrets default response
func (o *ListSecretsDefault) Code() int {
	return o._statusCode
}

func (o *ListSecretsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Secrets/List][%d] ListSecrets default  %+v", o._statusCode, o.Payload)
}

func (o *ListSecretsDefault) GetPayload() *ListSecretsDefaultBody {
	return o.Payload
}

func (o *ListSecretsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListSecretsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListSecretsBody list secrets body
swagger:model ListSecretsBody
*/
type ListSecretsBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`
}

// Validate validates this list secrets body
func (o *ListSecretsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list secrets body based on context it is used
func (o *ListSecretsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListSecretsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListSecretsBody) UnmarshalBinary(b []byte) error {
	var res ListSecretsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListSecretsDefaultBody list secrets default body
swagger:model ListSecretsDefaultBody
*/
type ListSecretsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListSecretsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list secrets default body
func (o *ListSecretsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListSecretsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListSecrets default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListSecrets default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list secrets default body based on the context it is used
func (o *ListSecretsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListSecretsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListSecrets default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListSecrets default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListSecretsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListSecretsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListSecretsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListSecretsDefaultBodyDetailsItems0 list secrets default body details items0
swagger:model ListSecretsDefaultBodyDetailsItems0
*/
type ListSecretsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list secrets default body details items0
func (o *ListSecretsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list secrets default body details items0 based on context it is used
func (o *ListSecretsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListSecretsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListSecretsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListSecretsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListSecretsOKBody list secrets OK body
swagger:model ListSecretsOKBody
*/
type ListSecretsOKBody struct {
	// Secret list.
	Secrets []*ListSecretsOKBodySecretsItems0 `json:"secrets"`
}

// Validate validates this list secrets OK body
func (o *ListSecretsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSecrets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListSecretsOKBody) validateSecrets(formats strfmt.Registry) error {
	if swag.IsZero(o.Secrets) { // not required
		return nil
	}

	for i := 0; i < len(o.Secrets); i++ {
		if swag.IsZero(o.Secrets[i]) { // not required
			continue
		}

		if o.Secrets[i] != nil {
			if err := o.Secrets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listSecretsOk" + "." + "secrets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listSecretsOk" + "." + "secrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list secrets OK body based on the context it is used
func (o *ListSecretsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListSecretsOKBody) contextValidateSecrets(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Secrets); i++ {
		if o.Secrets[i] != nil {
			if err := o.Secrets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listSecretsOk" + "." + "secrets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listSecretsOk" + "." + "secrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListSecretsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListSecretsOKBody) UnmarshalBinary(b []byte) error {
	var res ListSecretsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListSecretsOKBodySecretsItems0 list secrets OK body secrets items0
swagger:model ListSecretsOKBodySecretsItems0
*/
type ListSecretsOKBodySecretsItems0 struct {
	// Name of a secret
	Name string `json:"name,omitempty"`
}

// Validate validates this list secrets OK body secrets items0
func (o *ListSecretsOKBodySecretsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list secrets OK body secrets items0 based on context it is used
func (o *ListSecretsOKBodySecretsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListSecretsOKBodySecretsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListSecretsOKBodySecretsItems0) UnmarshalBinary(b []byte) error {
	var res ListSecretsOKBodySecretsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
