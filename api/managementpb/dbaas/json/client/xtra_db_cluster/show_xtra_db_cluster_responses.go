// Code generated by go-swagger; DO NOT EDIT.

package xtra_db_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShowXtraDBClusterReader is a Reader for the ShowXtraDBCluster structure.
type ShowXtraDBClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShowXtraDBClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewShowXtraDBClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewShowXtraDBClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewShowXtraDBClusterOK creates a ShowXtraDBClusterOK with default headers values
func NewShowXtraDBClusterOK() *ShowXtraDBClusterOK {
	return &ShowXtraDBClusterOK{}
}

/*ShowXtraDBClusterOK handles this case with default header values.

A successful response.
*/
type ShowXtraDBClusterOK struct {
	Payload *ShowXtraDBClusterOKBody
}

func (o *ShowXtraDBClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/XtraDBClusters/Show][%d] showXtraDbClusterOk  %+v", 200, o.Payload)
}

func (o *ShowXtraDBClusterOK) GetPayload() *ShowXtraDBClusterOKBody {
	return o.Payload
}

func (o *ShowXtraDBClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ShowXtraDBClusterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowXtraDBClusterDefault creates a ShowXtraDBClusterDefault with default headers values
func NewShowXtraDBClusterDefault(code int) *ShowXtraDBClusterDefault {
	return &ShowXtraDBClusterDefault{
		_statusCode: code,
	}
}

/*ShowXtraDBClusterDefault handles this case with default header values.

An unexpected error response.
*/
type ShowXtraDBClusterDefault struct {
	_statusCode int

	Payload *ShowXtraDBClusterDefaultBody
}

// Code gets the status code for the show xtra DB cluster default response
func (o *ShowXtraDBClusterDefault) Code() int {
	return o._statusCode
}

func (o *ShowXtraDBClusterDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/XtraDBClusters/Show][%d] ShowXtraDBCluster default  %+v", o._statusCode, o.Payload)
}

func (o *ShowXtraDBClusterDefault) GetPayload() *ShowXtraDBClusterDefaultBody {
	return o.Payload
}

func (o *ShowXtraDBClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ShowXtraDBClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ShowXtraDBClusterBody show xtra DB cluster body
swagger:model ShowXtraDBClusterBody
*/
type ShowXtraDBClusterBody struct {

	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// XtraDB cluster name.
	Name string `json:"name,omitempty"`
}

// Validate validates this show xtra DB cluster body
func (o *ShowXtraDBClusterBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterBody) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterDefaultBody show xtra DB cluster default body
swagger:model ShowXtraDBClusterDefaultBody
*/
type ShowXtraDBClusterDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this show xtra DB cluster default body
func (o *ShowXtraDBClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ShowXtraDBClusterDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ShowXtraDBCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBody show xtra DB cluster OK body
swagger:model ShowXtraDBClusterOKBody
*/
type ShowXtraDBClusterOKBody struct {

	// Cluster name.
	Name string `json:"name,omitempty"`

	// XtraDBClusterState represents XtraDB cluster CR state.
	//
	//  - XTRA_DB_CLUSTER_STATE_INVALID: XTRA_DB_CLUSTER_STATE_INVALID represents unknown state.
	//  - XTRA_DB_CLUSTER_STATE_CHANGING: XTRA_DB_CLUSTER_STATE_CHANGING represents a cluster being changed (initializing).
	//  - XTRA_DB_CLUSTER_STATE_READY: XTRA_DB_CLUSTER_STATE_READY represents a cluster without pending changes (ready).
	//  - XTRA_DB_CLUSTER_STATE_FAILED: XTRA_DB_CLUSTER_STATE_FAILED represents a failed cluster (error).
	//  - XTRA_DB_CLUSTER_STATE_DELETING: XTRA_DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	// Enum: [XTRA_DB_CLUSTER_STATE_INVALID XTRA_DB_CLUSTER_STATE_CHANGING XTRA_DB_CLUSTER_STATE_READY XTRA_DB_CLUSTER_STATE_FAILED XTRA_DB_CLUSTER_STATE_DELETING]
	State *string `json:"state,omitempty"`

	// ProxySQL username.
	Username string `json:"username,omitempty"`

	// ProxySQL password.
	Password string `json:"password,omitempty"`

	// ProxySQL host.
	Host string `json:"host,omitempty"`

	// ProxySQL port.
	Port int32 `json:"port,omitempty"`

	// operation
	Operation *ShowXtraDBClusterOKBodyOperation `json:"operation,omitempty"`

	// params
	Params *ShowXtraDBClusterOKBodyParams `json:"params,omitempty"`
}

// Validate validates this show xtra DB cluster OK body
func (o *ShowXtraDBClusterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var showXtraDbClusterOkBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["XTRA_DB_CLUSTER_STATE_INVALID","XTRA_DB_CLUSTER_STATE_CHANGING","XTRA_DB_CLUSTER_STATE_READY","XTRA_DB_CLUSTER_STATE_FAILED","XTRA_DB_CLUSTER_STATE_DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		showXtraDbClusterOkBodyTypeStatePropEnum = append(showXtraDbClusterOkBodyTypeStatePropEnum, v)
	}
}

const (

	// ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEINVALID captures enum value "XTRA_DB_CLUSTER_STATE_INVALID"
	ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEINVALID string = "XTRA_DB_CLUSTER_STATE_INVALID"

	// ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATECHANGING captures enum value "XTRA_DB_CLUSTER_STATE_CHANGING"
	ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATECHANGING string = "XTRA_DB_CLUSTER_STATE_CHANGING"

	// ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEREADY captures enum value "XTRA_DB_CLUSTER_STATE_READY"
	ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEREADY string = "XTRA_DB_CLUSTER_STATE_READY"

	// ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEFAILED captures enum value "XTRA_DB_CLUSTER_STATE_FAILED"
	ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEFAILED string = "XTRA_DB_CLUSTER_STATE_FAILED"

	// ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEDELETING captures enum value "XTRA_DB_CLUSTER_STATE_DELETING"
	ShowXtraDBClusterOKBodyStateXTRADBCLUSTERSTATEDELETING string = "XTRA_DB_CLUSTER_STATE_DELETING"
)

// prop value enum
func (o *ShowXtraDBClusterOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, showXtraDbClusterOkBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ShowXtraDBClusterOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("showXtraDbClusterOk"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *ShowXtraDBClusterOKBody) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	if o.Operation != nil {
		if err := o.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "operation")
			}
			return err
		}
	}

	return nil
}

func (o *ShowXtraDBClusterOKBody) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBody) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyOperation RunningOperation respresents a long-running operation.
swagger:model ShowXtraDBClusterOKBodyOperation
*/
type ShowXtraDBClusterOKBodyOperation struct {

	// Progress from 0.0 to 1.0; can decrease compared to the previous value.
	Progress float32 `json:"progress,omitempty"`

	// Text describing the current operation progress step.
	Message string `json:"message,omitempty"`
}

// Validate validates this show xtra DB cluster OK body operation
func (o *ShowXtraDBClusterOKBodyOperation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyOperation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyOperation) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyParams XtraDBClusterParams represents XtraDB cluster parameters that can be updated.
swagger:model ShowXtraDBClusterOKBodyParams
*/
type ShowXtraDBClusterOKBodyParams struct {

	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// proxysql
	Proxysql *ShowXtraDBClusterOKBodyParamsProxysql `json:"proxysql,omitempty"`

	// pxc
	Pxc *ShowXtraDBClusterOKBodyParamsPxc `json:"pxc,omitempty"`
}

// Validate validates this show xtra DB cluster OK body params
func (o *ShowXtraDBClusterOKBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePxc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ShowXtraDBClusterOKBodyParams) validateProxysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "params" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *ShowXtraDBClusterOKBodyParams) validatePxc(formats strfmt.Registry) error {

	if swag.IsZero(o.Pxc) { // not required
		return nil
	}

	if o.Pxc != nil {
		if err := o.Pxc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "params" + "." + "pxc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParams) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyParamsProxysql ProxySQL container parameters.
swagger:model ShowXtraDBClusterOKBodyParamsProxysql
*/
type ShowXtraDBClusterOKBodyParamsProxysql struct {

	// compute resources
	ComputeResources *ShowXtraDBClusterOKBodyParamsProxysqlComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this show xtra DB cluster OK body params proxysql
func (o *ShowXtraDBClusterOKBodyParamsProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ShowXtraDBClusterOKBodyParamsProxysql) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsProxysql) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyParamsProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyParamsProxysqlComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model ShowXtraDBClusterOKBodyParamsProxysqlComputeResources
*/
type ShowXtraDBClusterOKBodyParamsProxysqlComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this show xtra DB cluster OK body params proxysql compute resources
func (o *ShowXtraDBClusterOKBodyParamsProxysqlComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsProxysqlComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsProxysqlComputeResources) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyParamsProxysqlComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyParamsPxc PXC container parameters.
swagger:model ShowXtraDBClusterOKBodyParamsPxc
*/
type ShowXtraDBClusterOKBodyParamsPxc struct {

	// compute resources
	ComputeResources *ShowXtraDBClusterOKBodyParamsPxcComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this show xtra DB cluster OK body params pxc
func (o *ShowXtraDBClusterOKBodyParamsPxc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ShowXtraDBClusterOKBodyParamsPxc) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("showXtraDbClusterOk" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsPxc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsPxc) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyParamsPxc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ShowXtraDBClusterOKBodyParamsPxcComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model ShowXtraDBClusterOKBodyParamsPxcComputeResources
*/
type ShowXtraDBClusterOKBodyParamsPxcComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this show xtra DB cluster OK body params pxc compute resources
func (o *ShowXtraDBClusterOKBodyParamsPxcComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsPxcComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShowXtraDBClusterOKBodyParamsPxcComputeResources) UnmarshalBinary(b []byte) error {
	var res ShowXtraDBClusterOKBodyParamsPxcComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
