// Code generated by go-swagger; DO NOT EDIT.

package p_s_m_db_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new p s m db cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p s m db cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePSMDBCluster(params *CreatePSMDBClusterParams) (*CreatePSMDBClusterOK, error)

	DeletePSMDBCluster(params *DeletePSMDBClusterParams) (*DeletePSMDBClusterOK, error)

	ListPSMDBClusters(params *ListPSMDBClustersParams) (*ListPSMDBClustersOK, error)

	ShowPSMDBCluster(params *ShowPSMDBClusterParams) (*ShowPSMDBClusterOK, error)

	UpdatePSMDBCluster(params *UpdatePSMDBClusterParams) (*UpdatePSMDBClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePSMDBCluster creates p s m DB cluster creates a new p s m DB cluster
*/
func (a *Client) CreatePSMDBCluster(params *CreatePSMDBClusterParams) (*CreatePSMDBClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePSMDBClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePSMDBCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PSMDBCluster/Create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePSMDBClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePSMDBClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePSMDBClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePSMDBCluster deletes p s m DB cluster deletes p s m DB cluster
*/
func (a *Client) DeletePSMDBCluster(params *DeletePSMDBClusterParams) (*DeletePSMDBClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePSMDBClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePSMDBCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PSMDBCluster/Delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePSMDBClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePSMDBClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePSMDBClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPSMDBClusters lists p s m DB clusters returns a list of p s m DB clusters
*/
func (a *Client) ListPSMDBClusters(params *ListPSMDBClustersParams) (*ListPSMDBClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPSMDBClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPSMDBClusters",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PSMDBClusters/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPSMDBClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPSMDBClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPSMDBClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ShowPSMDBCluster shows p s m DB cluster returns a p s m DB cluster by name
*/
func (a *Client) ShowPSMDBCluster(params *ShowPSMDBClusterParams) (*ShowPSMDBClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowPSMDBClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowPSMDBCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PSMDBClusters/Show",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowPSMDBClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowPSMDBClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShowPSMDBClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePSMDBCluster updates p s m DB cluster updates existing p s m DB cluster
*/
func (a *Client) UpdatePSMDBCluster(params *UpdatePSMDBClusterParams) (*UpdatePSMDBClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePSMDBClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePSMDBCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PSMDBCluster/Update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePSMDBClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePSMDBClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePSMDBClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
