// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kubernetes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kubernetes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	KubernetesListKubernetesClusters(params *KubernetesListKubernetesClustersParams) (*KubernetesListKubernetesClustersOK, error)

	KubernetesRegisterKubernetesCluster(params *KubernetesRegisterKubernetesClusterParams) (*KubernetesRegisterKubernetesClusterOK, error)

	KubernetesUnregisterKubernetesCluster(params *KubernetesUnregisterKubernetesClusterParams) (*KubernetesUnregisterKubernetesClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  KubernetesListKubernetesClusters lists kubernetes clusters returns a list of all registered kubernetes clusters
*/
func (a *Client) KubernetesListKubernetesClusters(params *KubernetesListKubernetesClustersParams) (*KubernetesListKubernetesClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesListKubernetesClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Kubernetes_ListKubernetesClusters",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Kubernetes/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KubernetesListKubernetesClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesListKubernetesClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KubernetesListKubernetesClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  KubernetesRegisterKubernetesCluster registers kubernetes cluster registers an existing kubernetes cluster in PMM
*/
func (a *Client) KubernetesRegisterKubernetesCluster(params *KubernetesRegisterKubernetesClusterParams) (*KubernetesRegisterKubernetesClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesRegisterKubernetesClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Kubernetes_RegisterKubernetesCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Kubernetes/Register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KubernetesRegisterKubernetesClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesRegisterKubernetesClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KubernetesRegisterKubernetesClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  KubernetesUnregisterKubernetesCluster unregisters kubernetes cluster removes a registered kubernetes cluster from PMM
*/
func (a *Client) KubernetesUnregisterKubernetesCluster(params *KubernetesUnregisterKubernetesClusterParams) (*KubernetesUnregisterKubernetesClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesUnregisterKubernetesClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Kubernetes_UnregisterKubernetesCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Kubernetes/Unregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KubernetesUnregisterKubernetesClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesUnregisterKubernetesClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KubernetesUnregisterKubernetesClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
