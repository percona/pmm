// Code generated by go-swagger; DO NOT EDIT.

package postgresql_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreatePostgresqlClusterReader is a Reader for the CreatePostgresqlCluster structure.
type CreatePostgresqlClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePostgresqlClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePostgresqlClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreatePostgresqlClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreatePostgresqlClusterOK creates a CreatePostgresqlClusterOK with default headers values
func NewCreatePostgresqlClusterOK() *CreatePostgresqlClusterOK {
	return &CreatePostgresqlClusterOK{}
}

/*
CreatePostgresqlClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreatePostgresqlClusterOK struct {
	Payload interface{}
}

func (o *CreatePostgresqlClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Create][%d] createPostgresqlClusterOk  %+v", 200, o.Payload)
}

func (o *CreatePostgresqlClusterOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CreatePostgresqlClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePostgresqlClusterDefault creates a CreatePostgresqlClusterDefault with default headers values
func NewCreatePostgresqlClusterDefault(code int) *CreatePostgresqlClusterDefault {
	return &CreatePostgresqlClusterDefault{
		_statusCode: code,
	}
}

/*
CreatePostgresqlClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreatePostgresqlClusterDefault struct {
	_statusCode int

	Payload *CreatePostgresqlClusterDefaultBody
}

// Code gets the status code for the create postgresql cluster default response
func (o *CreatePostgresqlClusterDefault) Code() int {
	return o._statusCode
}

func (o *CreatePostgresqlClusterDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Create][%d] CreatePostgresqlCluster default  %+v", o._statusCode, o.Payload)
}

func (o *CreatePostgresqlClusterDefault) GetPayload() *CreatePostgresqlClusterDefaultBody {
	return o.Payload
}

func (o *CreatePostgresqlClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(CreatePostgresqlClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreatePostgresqlClusterBody create postgresql cluster body
swagger:model CreatePostgresqlClusterBody
*/
type CreatePostgresqlClusterBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// Postgresql cluster name.
	// a DNS-1035 label must consist of lower case alphanumeric characters or '-',
	// start with an alphabetic character, and end with an alphanumeric character
	// (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
	Name string `json:"name,omitempty"`

	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `json:"expose,omitempty"`

	// Make DB cluster accessible via public internet.
	InternetFacing bool `json:"internet_facing,omitempty"`

	// Apply IP source ranges against the cluster.
	SourceRanges []string `json:"source_ranges"`

	// params
	Params *CreatePostgresqlClusterParamsBodyParams `json:"params,omitempty"`

	// template
	Template *CreatePostgresqlClusterParamsBodyTemplate `json:"template,omitempty"`
}

// Validate validates this create postgresql cluster body
func (o *CreatePostgresqlClusterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterBody) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create postgresql cluster body based on the context it is used
func (o *CreatePostgresqlClusterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterBody) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {
	if o.Template != nil {
		if err := o.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterBody) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterDefaultBody create postgresql cluster default body
swagger:model CreatePostgresqlClusterDefaultBody
*/
type CreatePostgresqlClusterDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*CreatePostgresqlClusterDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this create postgresql cluster default body
func (o *CreatePostgresqlClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CreatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create postgresql cluster default body based on the context it is used
func (o *CreatePostgresqlClusterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CreatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterDefaultBodyDetailsItems0 create postgresql cluster default body details items0
swagger:model CreatePostgresqlClusterDefaultBodyDetailsItems0
*/
type CreatePostgresqlClusterDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this create postgresql cluster default body details items0
func (o *CreatePostgresqlClusterDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster default body details items0 based on context it is used
func (o *CreatePostgresqlClusterDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParams PostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
swagger:model CreatePostgresqlClusterParamsBodyParams
*/
type CreatePostgresqlClusterParamsBodyParams struct {
	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// backup
	Backup *CreatePostgresqlClusterParamsBodyParamsBackup `json:"backup,omitempty"`

	// instance
	Instance *CreatePostgresqlClusterParamsBodyParamsInstance `json:"instance,omitempty"`

	// pgbouncer
	Pgbouncer *CreatePostgresqlClusterParamsBodyParamsPgbouncer `json:"pgbouncer,omitempty"`

	// restore
	Restore *CreatePostgresqlClusterParamsBodyParamsRestore `json:"restore,omitempty"`
}

// Validate validates this create postgresql cluster params body params
func (o *CreatePostgresqlClusterParamsBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePgbouncer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) validateInstance(formats strfmt.Registry) error {
	if swag.IsZero(o.Instance) { // not required
		return nil
	}

	if o.Instance != nil {
		if err := o.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) validatePgbouncer(formats strfmt.Registry) error {
	if swag.IsZero(o.Pgbouncer) { // not required
		return nil
	}

	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create postgresql cluster params body params based on the context it is used
func (o *CreatePostgresqlClusterParamsBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePgbouncer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {
	if o.Instance != nil {
		if err := o.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) contextValidatePgbouncer(ctx context.Context, formats strfmt.Registry) error {
	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParams) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParams) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsBackup Backup configuration for a database cluster
swagger:model CreatePostgresqlClusterParamsBodyParamsBackup
*/
type CreatePostgresqlClusterParamsBodyParamsBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this create postgresql cluster params body params backup
func (o *CreatePostgresqlClusterParamsBodyParamsBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster params body params backup based on context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsBackup) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsInstance Instance container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model CreatePostgresqlClusterParamsBodyParamsInstance
*/
type CreatePostgresqlClusterParamsBodyParamsInstance struct {
	// Docker image used for Instance.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// Configuration for Postgresql cluster
	Configuration string `json:"configuration,omitempty"`

	// Storage Class for Postgresql cluster.
	StorageClass string `json:"storage_class,omitempty"`

	// compute resources
	ComputeResources *CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this create postgresql cluster params body params instance
func (o *CreatePostgresqlClusterParamsBodyParamsInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParamsInstance) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create postgresql cluster params body params instance based on the context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParamsInstance) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsInstance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsInstance) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources
*/
type CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this create postgresql cluster params body params instance compute resources
func (o *CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster params body params instance compute resources based on context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsInstanceComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsPgbouncer PGBouncer container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model CreatePostgresqlClusterParamsBodyParamsPgbouncer
*/
type CreatePostgresqlClusterParamsBodyParamsPgbouncer struct {
	// Docker image used for PGBouncer.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// compute resources
	ComputeResources *CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this create postgresql cluster params body params pgbouncer
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create postgresql cluster params body params pgbouncer based on the context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncer) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsPgbouncer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources
*/
type CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this create postgresql cluster params body params pgbouncer compute resources
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster params body params pgbouncer compute resources based on context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyParamsRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model CreatePostgresqlClusterParamsBodyParamsRestore
*/
type CreatePostgresqlClusterParamsBodyParamsRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this create postgresql cluster params body params restore
func (o *CreatePostgresqlClusterParamsBodyParamsRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster params body params restore based on context it is used
func (o *CreatePostgresqlClusterParamsBodyParamsRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyParamsRestore) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyParamsRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePostgresqlClusterParamsBodyTemplate create postgresql cluster params body template
swagger:model CreatePostgresqlClusterParamsBodyTemplate
*/
type CreatePostgresqlClusterParamsBodyTemplate struct {
	// Template CR name.
	Name string `json:"name,omitempty"`

	// Template CR kind.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this create postgresql cluster params body template
func (o *CreatePostgresqlClusterParamsBodyTemplate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create postgresql cluster params body template based on context it is used
func (o *CreatePostgresqlClusterParamsBodyTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyTemplate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePostgresqlClusterParamsBodyTemplate) UnmarshalBinary(b []byte) error {
	var res CreatePostgresqlClusterParamsBodyTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
