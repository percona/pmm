// Code generated by go-swagger; DO NOT EDIT.

package postgresql_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatePostgresqlClusterReader is a Reader for the UpdatePostgresqlCluster structure.
type UpdatePostgresqlClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePostgresqlClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePostgresqlClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdatePostgresqlClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePostgresqlClusterOK creates a UpdatePostgresqlClusterOK with default headers values
func NewUpdatePostgresqlClusterOK() *UpdatePostgresqlClusterOK {
	return &UpdatePostgresqlClusterOK{}
}

/*
UpdatePostgresqlClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdatePostgresqlClusterOK struct {
	Payload interface{}
}

func (o *UpdatePostgresqlClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Update][%d] updatePostgresqlClusterOk  %+v", 200, o.Payload)
}

func (o *UpdatePostgresqlClusterOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdatePostgresqlClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePostgresqlClusterDefault creates a UpdatePostgresqlClusterDefault with default headers values
func NewUpdatePostgresqlClusterDefault(code int) *UpdatePostgresqlClusterDefault {
	return &UpdatePostgresqlClusterDefault{
		_statusCode: code,
	}
}

/*
UpdatePostgresqlClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdatePostgresqlClusterDefault struct {
	_statusCode int

	Payload *UpdatePostgresqlClusterDefaultBody
}

// Code gets the status code for the update postgresql cluster default response
func (o *UpdatePostgresqlClusterDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePostgresqlClusterDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Update][%d] UpdatePostgresqlCluster default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePostgresqlClusterDefault) GetPayload() *UpdatePostgresqlClusterDefaultBody {
	return o.Payload
}

func (o *UpdatePostgresqlClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(UpdatePostgresqlClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdatePostgresqlClusterBody update postgresql cluster body
swagger:model UpdatePostgresqlClusterBody
*/
type UpdatePostgresqlClusterBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// Postgresql cluster name.
	Name string `json:"name,omitempty"`

	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `json:"expose,omitempty"`

	// Make DB cluster accessible via public internet.
	InternetFacing bool `json:"internet_facing,omitempty"`

	// Apply IP source ranges against the cluster.
	SourceRanges []string `json:"source_ranges"`

	// params
	Params *UpdatePostgresqlClusterParamsBodyParams `json:"params,omitempty"`

	// template
	Template *UpdatePostgresqlClusterParamsBodyTemplate `json:"template,omitempty"`
}

// Validate validates this update postgresql cluster body
func (o *UpdatePostgresqlClusterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePostgresqlClusterBody) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update postgresql cluster body based on the context it is used
func (o *UpdatePostgresqlClusterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePostgresqlClusterBody) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {
	if o.Template != nil {
		if err := o.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterBody) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterDefaultBody update postgresql cluster default body
swagger:model UpdatePostgresqlClusterDefaultBody
*/
type UpdatePostgresqlClusterDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*UpdatePostgresqlClusterDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this update postgresql cluster default body
func (o *UpdatePostgresqlClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update postgresql cluster default body based on the context it is used
func (o *UpdatePostgresqlClusterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdatePostgresqlCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterDefaultBodyDetailsItems0 update postgresql cluster default body details items0
swagger:model UpdatePostgresqlClusterDefaultBodyDetailsItems0
*/
type UpdatePostgresqlClusterDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this update postgresql cluster default body details items0
func (o *UpdatePostgresqlClusterDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update postgresql cluster default body details items0 based on context it is used
func (o *UpdatePostgresqlClusterDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyParams UpdatePostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
swagger:model UpdatePostgresqlClusterParamsBodyParams
*/
type UpdatePostgresqlClusterParamsBodyParams struct {
	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// Suspend cluster `pause: true`.
	Suspend bool `json:"suspend,omitempty"`

	// Resume cluster `pause: false`.
	Resume bool `json:"resume,omitempty"`

	// instance
	Instance *UpdatePostgresqlClusterParamsBodyParamsInstance `json:"instance,omitempty"`

	// pgbouncer
	Pgbouncer *UpdatePostgresqlClusterParamsBodyParamsPgbouncer `json:"pgbouncer,omitempty"`
}

// Validate validates this update postgresql cluster params body params
func (o *UpdatePostgresqlClusterParamsBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePgbouncer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParams) validateInstance(formats strfmt.Registry) error {
	if swag.IsZero(o.Instance) { // not required
		return nil
	}

	if o.Instance != nil {
		if err := o.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParams) validatePgbouncer(formats strfmt.Registry) error {
	if swag.IsZero(o.Pgbouncer) { // not required
		return nil
	}

	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update postgresql cluster params body params based on the context it is used
func (o *UpdatePostgresqlClusterParamsBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePgbouncer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParams) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {
	if o.Instance != nil {
		if err := o.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParams) contextValidatePgbouncer(ctx context.Context, formats strfmt.Registry) error {
	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParams) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyParamsInstance Instance container parameters.
swagger:model UpdatePostgresqlClusterParamsBodyParamsInstance
*/
type UpdatePostgresqlClusterParamsBodyParamsInstance struct {
	// Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
	// in given tag is triggered. If entirely different image is given, error is returned.
	Image string `json:"image,omitempty"`

	// Configuration for Postgresql cluster
	Configuration string `json:"configuration,omitempty"`

	// Storage Class for Postgresql cluster.
	StorageClass string `json:"storage_class,omitempty"`

	// compute resources
	ComputeResources *UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this update postgresql cluster params body params instance
func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update postgresql cluster params body params instance based on the context it is used
func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsInstance) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyParamsInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources
*/
type UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this update postgresql cluster params body params instance compute resources
func (o *UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update postgresql cluster params body params instance compute resources based on context it is used
func (o *UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyParamsInstanceComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyParamsPgbouncer PGBouncer container parameters.
swagger:model UpdatePostgresqlClusterParamsBodyParamsPgbouncer
*/
type UpdatePostgresqlClusterParamsBodyParamsPgbouncer struct {
	// compute resources
	ComputeResources *UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this update postgresql cluster params body params pgbouncer
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update postgresql cluster params body params pgbouncer based on the context it is used
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncer) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyParamsPgbouncer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources
*/
type UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this update postgresql cluster params body params pgbouncer compute resources
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update postgresql cluster params body params pgbouncer compute resources based on context it is used
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyParamsPgbouncerComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePostgresqlClusterParamsBodyTemplate update postgresql cluster params body template
swagger:model UpdatePostgresqlClusterParamsBodyTemplate
*/
type UpdatePostgresqlClusterParamsBodyTemplate struct {
	// Template CR name.
	Name string `json:"name,omitempty"`

	// Template CR kind.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this update postgresql cluster params body template
func (o *UpdatePostgresqlClusterParamsBodyTemplate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update postgresql cluster params body template based on context it is used
func (o *UpdatePostgresqlClusterParamsBodyTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyTemplate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePostgresqlClusterParamsBodyTemplate) UnmarshalBinary(b []byte) error {
	var res UpdatePostgresqlClusterParamsBodyTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
