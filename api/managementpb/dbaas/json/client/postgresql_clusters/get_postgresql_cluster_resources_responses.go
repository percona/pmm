// Code generated by go-swagger; DO NOT EDIT.

package postgresql_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetPostgresqlClusterResourcesReader is a Reader for the GetPostgresqlClusterResources structure.
type GetPostgresqlClusterResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPostgresqlClusterResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPostgresqlClusterResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetPostgresqlClusterResourcesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPostgresqlClusterResourcesOK creates a GetPostgresqlClusterResourcesOK with default headers values
func NewGetPostgresqlClusterResourcesOK() *GetPostgresqlClusterResourcesOK {
	return &GetPostgresqlClusterResourcesOK{}
}

/*
GetPostgresqlClusterResourcesOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetPostgresqlClusterResourcesOK struct {
	Payload *GetPostgresqlClusterResourcesOKBody
}

func (o *GetPostgresqlClusterResourcesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Resources/Get][%d] getPostgresqlClusterResourcesOk  %+v", 200, o.Payload)
}

func (o *GetPostgresqlClusterResourcesOK) GetPayload() *GetPostgresqlClusterResourcesOKBody {
	return o.Payload
}

func (o *GetPostgresqlClusterResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetPostgresqlClusterResourcesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPostgresqlClusterResourcesDefault creates a GetPostgresqlClusterResourcesDefault with default headers values
func NewGetPostgresqlClusterResourcesDefault(code int) *GetPostgresqlClusterResourcesDefault {
	return &GetPostgresqlClusterResourcesDefault{
		_statusCode: code,
	}
}

/*
GetPostgresqlClusterResourcesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetPostgresqlClusterResourcesDefault struct {
	_statusCode int

	Payload *GetPostgresqlClusterResourcesDefaultBody
}

// Code gets the status code for the get postgresql cluster resources default response
func (o *GetPostgresqlClusterResourcesDefault) Code() int {
	return o._statusCode
}

func (o *GetPostgresqlClusterResourcesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PostgresqlCluster/Resources/Get][%d] GetPostgresqlClusterResources default  %+v", o._statusCode, o.Payload)
}

func (o *GetPostgresqlClusterResourcesDefault) GetPayload() *GetPostgresqlClusterResourcesDefaultBody {
	return o.Payload
}

func (o *GetPostgresqlClusterResourcesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetPostgresqlClusterResourcesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetPostgresqlClusterResourcesBody get postgresql cluster resources body
swagger:model GetPostgresqlClusterResourcesBody
*/
type GetPostgresqlClusterResourcesBody struct {
	// params
	Params *GetPostgresqlClusterResourcesParamsBodyParams `json:"params,omitempty"`
}

// Validate validates this get postgresql cluster resources body
func (o *GetPostgresqlClusterResourcesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources body based on the context it is used
func (o *GetPostgresqlClusterResourcesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesBody) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesDefaultBody get postgresql cluster resources default body
swagger:model GetPostgresqlClusterResourcesDefaultBody
*/
type GetPostgresqlClusterResourcesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetPostgresqlClusterResourcesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get postgresql cluster resources default body
func (o *GetPostgresqlClusterResourcesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetPostgresqlClusterResources default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetPostgresqlClusterResources default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources default body based on the context it is used
func (o *GetPostgresqlClusterResourcesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetPostgresqlClusterResources default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetPostgresqlClusterResources default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesDefaultBodyDetailsItems0 get postgresql cluster resources default body details items0
swagger:model GetPostgresqlClusterResourcesDefaultBodyDetailsItems0
*/
type GetPostgresqlClusterResourcesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get postgresql cluster resources default body details items0
func (o *GetPostgresqlClusterResourcesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources default body details items0 based on context it is used
func (o *GetPostgresqlClusterResourcesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesOKBody get postgresql cluster resources OK body
swagger:model GetPostgresqlClusterResourcesOKBody
*/
type GetPostgresqlClusterResourcesOKBody struct {
	// expected
	Expected *GetPostgresqlClusterResourcesOKBodyExpected `json:"expected,omitempty"`
}

// Validate validates this get postgresql cluster resources OK body
func (o *GetPostgresqlClusterResourcesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesOKBody) validateExpected(formats strfmt.Registry) error {
	if swag.IsZero(o.Expected) { // not required
		return nil
	}

	if o.Expected != nil {
		if err := o.Expected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPostgresqlClusterResourcesOk" + "." + "expected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPostgresqlClusterResourcesOk" + "." + "expected")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources OK body based on the context it is used
func (o *GetPostgresqlClusterResourcesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExpected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesOKBody) contextValidateExpected(ctx context.Context, formats strfmt.Registry) error {
	if o.Expected != nil {
		if err := o.Expected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPostgresqlClusterResourcesOk" + "." + "expected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPostgresqlClusterResourcesOk" + "." + "expected")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesOKBody) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesOKBodyExpected Resources contains Kubernetes cluster resources.
swagger:model GetPostgresqlClusterResourcesOKBodyExpected
*/
type GetPostgresqlClusterResourcesOKBodyExpected struct {
	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`

	// CPU in millicpus. For example 0.1 of CPU is equivalent to 100 millicpus.
	// See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
	CPUm string `json:"cpu_m,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`
}

// Validate validates this get postgresql cluster resources OK body expected
func (o *GetPostgresqlClusterResourcesOKBodyExpected) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources OK body expected based on context it is used
func (o *GetPostgresqlClusterResourcesOKBodyExpected) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesOKBodyExpected) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesOKBodyExpected) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesOKBodyExpected
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParams PostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
swagger:model GetPostgresqlClusterResourcesParamsBodyParams
*/
type GetPostgresqlClusterResourcesParamsBodyParams struct {
	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// backup
	Backup *GetPostgresqlClusterResourcesParamsBodyParamsBackup `json:"backup,omitempty"`

	// instance
	Instance *GetPostgresqlClusterResourcesParamsBodyParamsInstance `json:"instance,omitempty"`

	// pgbouncer
	Pgbouncer *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer `json:"pgbouncer,omitempty"`

	// restore
	Restore *GetPostgresqlClusterResourcesParamsBodyParamsRestore `json:"restore,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params
func (o *GetPostgresqlClusterResourcesParamsBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePgbouncer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(o.Backup) { // not required
		return nil
	}

	if o.Backup != nil {
		if err := o.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) validateInstance(formats strfmt.Registry) error {
	if swag.IsZero(o.Instance) { // not required
		return nil
	}

	if o.Instance != nil {
		if err := o.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) validatePgbouncer(formats strfmt.Registry) error {
	if swag.IsZero(o.Pgbouncer) { // not required
		return nil
	}

	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) validateRestore(formats strfmt.Registry) error {
	if swag.IsZero(o.Restore) { // not required
		return nil
	}

	if o.Restore != nil {
		if err := o.Restore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources params body params based on the context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePgbouncer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {
	if o.Backup != nil {
		if err := o.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {
	if o.Instance != nil {
		if err := o.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) contextValidatePgbouncer(ctx context.Context, formats strfmt.Registry) error {
	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParams) contextValidateRestore(ctx context.Context, formats strfmt.Registry) error {
	if o.Restore != nil {
		if err := o.Restore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "restore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "restore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParams) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsBackup Backup configuration for a database cluster
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsBackup
*/
type GetPostgresqlClusterResourcesParamsBodyParamsBackup struct {
	// Backup Location id of stored backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Keep copies represents how many copies should retain.
	KeepCopies int32 `json:"keep_copies,omitempty"`

	// Cron expression represents cron expression
	CronExpression string `json:"cron_expression,omitempty"`

	// Service acccount used for backups
	ServiceAccount string `json:"service_account,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params backup
func (o *GetPostgresqlClusterResourcesParamsBodyParamsBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources params body params backup based on context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsBackup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsBackup) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsInstance Instance container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsInstance
*/
type GetPostgresqlClusterResourcesParamsBodyParamsInstance struct {
	// Docker image used for Instance.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// Configuration for Postgresql cluster
	Configuration string `json:"configuration,omitempty"`

	// Storage Class for Postgresql cluster.
	StorageClass string `json:"storage_class,omitempty"`

	// compute resources
	ComputeResources *GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params instance
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources params body params instance based on the context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "instance" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstance) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources
*/
type GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params instance compute resources
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources params body params instance compute resources based on context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsInstanceComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer PGBouncer container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer
*/
type GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer struct {
	// Docker image used for PGBouncer.
	Image string `json:"image,omitempty"`

	// Disk size in bytes.
	DiskSize string `json:"disk_size,omitempty"`

	// compute resources
	ComputeResources *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params pgbouncer
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) validateComputeResources(formats strfmt.Registry) error {
	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get postgresql cluster resources params body params pgbouncer based on the context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComputeResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) contextValidateComputeResources(ctx context.Context, formats strfmt.Registry) error {
	if o.ComputeResources != nil {
		if err := o.ComputeResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "params" + "." + "pgbouncer" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsPgbouncer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources
*/
type GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources struct {
	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params pgbouncer compute resources
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources params body params pgbouncer compute resources based on context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsPgbouncerComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPostgresqlClusterResourcesParamsBodyParamsRestore Restore represents restoration payload to restore a database cluster from backup
swagger:model GetPostgresqlClusterResourcesParamsBodyParamsRestore
*/
type GetPostgresqlClusterResourcesParamsBodyParamsRestore struct {
	// Backup location in PMM.
	LocationID string `json:"location_id,omitempty"`

	// Destination filename.
	Destination string `json:"destination,omitempty"`

	// K8s Secrets name.
	SecretsName string `json:"secrets_name,omitempty"`
}

// Validate validates this get postgresql cluster resources params body params restore
func (o *GetPostgresqlClusterResourcesParamsBodyParamsRestore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get postgresql cluster resources params body params restore based on context it is used
func (o *GetPostgresqlClusterResourcesParamsBodyParamsRestore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsRestore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPostgresqlClusterResourcesParamsBodyParamsRestore) UnmarshalBinary(b []byte) error {
	var res GetPostgresqlClusterResourcesParamsBodyParamsRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
