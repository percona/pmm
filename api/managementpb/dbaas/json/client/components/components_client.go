// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new components API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for components API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ComponentsChangePSMDBComponents(params *ComponentsChangePSMDBComponentsParams) (*ComponentsChangePSMDBComponentsOK, error)

	ComponentsChangePXCComponents(params *ComponentsChangePXCComponentsParams) (*ComponentsChangePXCComponentsOK, error)

	ComponentsCheckForOperatorUpdate(params *ComponentsCheckForOperatorUpdateParams) (*ComponentsCheckForOperatorUpdateOK, error)

	ComponentsGetPSMDBComponents(params *ComponentsGetPSMDBComponentsParams) (*ComponentsGetPSMDBComponentsOK, error)

	ComponentsGetPXCComponents(params *ComponentsGetPXCComponentsParams) (*ComponentsGetPXCComponentsOK, error)

	ComponentsInstallOperator(params *ComponentsInstallOperatorParams) (*ComponentsInstallOperatorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ComponentsChangePSMDBComponents changes PSMDB components manages PSMDB related components
*/
func (a *Client) ComponentsChangePSMDBComponents(params *ComponentsChangePSMDBComponentsParams) (*ComponentsChangePSMDBComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsChangePSMDBComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_ChangePSMDBComponents",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/ChangePSMDB",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsChangePSMDBComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsChangePSMDBComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsChangePSMDBComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ComponentsChangePXCComponents changes PXC components manages PXC related components
*/
func (a *Client) ComponentsChangePXCComponents(params *ComponentsChangePXCComponentsParams) (*ComponentsChangePXCComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsChangePXCComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_ChangePXCComponents",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/ChangePXC",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsChangePXCComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsChangePXCComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsChangePXCComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ComponentsCheckForOperatorUpdate checks for operator update checks if a new version of an operator is available
*/
func (a *Client) ComponentsCheckForOperatorUpdate(params *ComponentsCheckForOperatorUpdateParams) (*ComponentsCheckForOperatorUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsCheckForOperatorUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_CheckForOperatorUpdate",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/CheckForOperatorUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsCheckForOperatorUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsCheckForOperatorUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsCheckForOperatorUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ComponentsGetPSMDBComponents gets PSMDB components returns list of available components for PSMDB clusters
*/
func (a *Client) ComponentsGetPSMDBComponents(params *ComponentsGetPSMDBComponentsParams) (*ComponentsGetPSMDBComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsGetPSMDBComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_GetPSMDBComponents",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/GetPSMDB",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsGetPSMDBComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsGetPSMDBComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsGetPSMDBComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ComponentsGetPXCComponents gets PXC components returns list of available components for PXC clusters
*/
func (a *Client) ComponentsGetPXCComponents(params *ComponentsGetPXCComponentsParams) (*ComponentsGetPXCComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsGetPXCComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_GetPXCComponents",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/GetPXC",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsGetPXCComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsGetPXCComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsGetPXCComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ComponentsInstallOperator installs operator installs given operator in given version
*/
func (a *Client) ComponentsInstallOperator(params *ComponentsInstallOperatorParams) (*ComponentsInstallOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComponentsInstallOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Components_InstallOperator",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/Components/InstallOperator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComponentsInstallOperatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComponentsInstallOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComponentsInstallOperatorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
