// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangePGComponentsReader is a Reader for the ChangePGComponents structure.
type ChangePGComponentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePGComponentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangePGComponentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangePGComponentsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangePGComponentsOK creates a ChangePGComponentsOK with default headers values
func NewChangePGComponentsOK() *ChangePGComponentsOK {
	return &ChangePGComponentsOK{}
}

/*
ChangePGComponentsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ChangePGComponentsOK struct {
	Payload interface{}
}

func (o *ChangePGComponentsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/ChangePG][%d] changePGComponentsOk  %+v", 200, o.Payload)
}

func (o *ChangePGComponentsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ChangePGComponentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePGComponentsDefault creates a ChangePGComponentsDefault with default headers values
func NewChangePGComponentsDefault(code int) *ChangePGComponentsDefault {
	return &ChangePGComponentsDefault{
		_statusCode: code,
	}
}

/*
ChangePGComponentsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ChangePGComponentsDefault struct {
	_statusCode int

	Payload *ChangePGComponentsDefaultBody
}

// Code gets the status code for the change p g components default response
func (o *ChangePGComponentsDefault) Code() int {
	return o._statusCode
}

func (o *ChangePGComponentsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/ChangePG][%d] ChangePGComponents default  %+v", o._statusCode, o.Payload)
}

func (o *ChangePGComponentsDefault) GetPayload() *ChangePGComponentsDefaultBody {
	return o.Payload
}

func (o *ChangePGComponentsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ChangePGComponentsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ChangePGComponentsBody change p g components body
swagger:model ChangePGComponentsBody
*/
type ChangePGComponentsBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// pgbackrest
	Pgbackrest *ChangePGComponentsParamsBodyPgbackrest `json:"pgbackrest,omitempty"`

	// pgbouncer
	Pgbouncer *ChangePGComponentsParamsBodyPgbouncer `json:"pgbouncer,omitempty"`

	// postgresql
	Postgresql *ChangePGComponentsParamsBodyPostgresql `json:"postgresql,omitempty"`
}

// Validate validates this change p g components body
func (o *ChangePGComponentsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePgbackrest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePgbouncer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsBody) validatePgbackrest(formats strfmt.Registry) error {
	if swag.IsZero(o.Pgbackrest) { // not required
		return nil
	}

	if o.Pgbackrest != nil {
		if err := o.Pgbackrest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pgbackrest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pgbackrest")
			}
			return err
		}
	}

	return nil
}

func (o *ChangePGComponentsBody) validatePgbouncer(formats strfmt.Registry) error {
	if swag.IsZero(o.Pgbouncer) { // not required
		return nil
	}

	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *ChangePGComponentsBody) validatePostgresql(formats strfmt.Registry) error {
	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change p g components body based on the context it is used
func (o *ChangePGComponentsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePgbackrest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePgbouncer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsBody) contextValidatePgbackrest(ctx context.Context, formats strfmt.Registry) error {
	if o.Pgbackrest != nil {
		if err := o.Pgbackrest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pgbackrest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pgbackrest")
			}
			return err
		}
	}

	return nil
}

func (o *ChangePGComponentsBody) contextValidatePgbouncer(ctx context.Context, formats strfmt.Registry) error {
	if o.Pgbouncer != nil {
		if err := o.Pgbouncer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pgbouncer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pgbouncer")
			}
			return err
		}
	}

	return nil
}

func (o *ChangePGComponentsBody) contextValidatePostgresql(ctx context.Context, formats strfmt.Registry) error {
	if o.Postgresql != nil {
		if err := o.Postgresql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsBody) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsDefaultBody change p g components default body
swagger:model ChangePGComponentsDefaultBody
*/
type ChangePGComponentsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ChangePGComponentsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this change p g components default body
func (o *ChangePGComponentsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangePGComponents default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangePGComponents default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change p g components default body based on the context it is used
func (o *ChangePGComponentsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangePGComponents default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChangePGComponents default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsDefaultBodyDetailsItems0 change p g components default body details items0
swagger:model ChangePGComponentsDefaultBodyDetailsItems0
*/
type ChangePGComponentsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this change p g components default body details items0
func (o *ChangePGComponentsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change p g components default body details items0 based on context it is used
func (o *ChangePGComponentsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPgbackrest ChangeComponent contains fields to manage components.
swagger:model ChangePGComponentsParamsBodyPgbackrest
*/
type ChangePGComponentsParamsBodyPgbackrest struct {
	// default version
	DefaultVersion string `json:"default_version,omitempty"`

	// versions
	Versions []*ChangePGComponentsParamsBodyPgbackrestVersionsItems0 `json:"versions"`
}

// Validate validates this change p g components params body pgbackrest
func (o *ChangePGComponentsParamsBodyPgbackrest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPgbackrest) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.Versions) { // not required
		return nil
	}

	for i := 0; i < len(o.Versions); i++ {
		if swag.IsZero(o.Versions[i]) { // not required
			continue
		}

		if o.Versions[i] != nil {
			if err := o.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "pgbackrest" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "pgbackrest" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change p g components params body pgbackrest based on the context it is used
func (o *ChangePGComponentsParamsBodyPgbackrest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPgbackrest) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Versions); i++ {
		if o.Versions[i] != nil {
			if err := o.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "pgbackrest" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "pgbackrest" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbackrest) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbackrest) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPgbackrest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPgbackrestVersionsItems0 ComponentVersion contains operations which should be done with component version.
swagger:model ChangePGComponentsParamsBodyPgbackrestVersionsItems0
*/
type ChangePGComponentsParamsBodyPgbackrestVersionsItems0 struct {
	// version
	Version string `json:"version,omitempty"`

	// disable
	Disable bool `json:"disable,omitempty"`

	// enable
	Enable bool `json:"enable,omitempty"`
}

// Validate validates this change p g components params body pgbackrest versions items0
func (o *ChangePGComponentsParamsBodyPgbackrestVersionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change p g components params body pgbackrest versions items0 based on context it is used
func (o *ChangePGComponentsParamsBodyPgbackrestVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbackrestVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbackrestVersionsItems0) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPgbackrestVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPgbouncer ChangeComponent contains fields to manage components.
swagger:model ChangePGComponentsParamsBodyPgbouncer
*/
type ChangePGComponentsParamsBodyPgbouncer struct {
	// default version
	DefaultVersion string `json:"default_version,omitempty"`

	// versions
	Versions []*ChangePGComponentsParamsBodyPgbouncerVersionsItems0 `json:"versions"`
}

// Validate validates this change p g components params body pgbouncer
func (o *ChangePGComponentsParamsBodyPgbouncer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPgbouncer) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.Versions) { // not required
		return nil
	}

	for i := 0; i < len(o.Versions); i++ {
		if swag.IsZero(o.Versions[i]) { // not required
			continue
		}

		if o.Versions[i] != nil {
			if err := o.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "pgbouncer" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "pgbouncer" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change p g components params body pgbouncer based on the context it is used
func (o *ChangePGComponentsParamsBodyPgbouncer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPgbouncer) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Versions); i++ {
		if o.Versions[i] != nil {
			if err := o.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "pgbouncer" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "pgbouncer" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbouncer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbouncer) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPgbouncer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPgbouncerVersionsItems0 ComponentVersion contains operations which should be done with component version.
swagger:model ChangePGComponentsParamsBodyPgbouncerVersionsItems0
*/
type ChangePGComponentsParamsBodyPgbouncerVersionsItems0 struct {
	// version
	Version string `json:"version,omitempty"`

	// disable
	Disable bool `json:"disable,omitempty"`

	// enable
	Enable bool `json:"enable,omitempty"`
}

// Validate validates this change p g components params body pgbouncer versions items0
func (o *ChangePGComponentsParamsBodyPgbouncerVersionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change p g components params body pgbouncer versions items0 based on context it is used
func (o *ChangePGComponentsParamsBodyPgbouncerVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbouncerVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPgbouncerVersionsItems0) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPgbouncerVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPostgresql ChangeComponent contains fields to manage components.
swagger:model ChangePGComponentsParamsBodyPostgresql
*/
type ChangePGComponentsParamsBodyPostgresql struct {
	// default version
	DefaultVersion string `json:"default_version,omitempty"`

	// versions
	Versions []*ChangePGComponentsParamsBodyPostgresqlVersionsItems0 `json:"versions"`
}

// Validate validates this change p g components params body postgresql
func (o *ChangePGComponentsParamsBodyPostgresql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPostgresql) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.Versions) { // not required
		return nil
	}

	for i := 0; i < len(o.Versions); i++ {
		if swag.IsZero(o.Versions[i]) { // not required
			continue
		}

		if o.Versions[i] != nil {
			if err := o.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "postgresql" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "postgresql" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this change p g components params body postgresql based on the context it is used
func (o *ChangePGComponentsParamsBodyPostgresql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePGComponentsParamsBodyPostgresql) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Versions); i++ {
		if o.Versions[i] != nil {
			if err := o.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "postgresql" + "." + "versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "postgresql" + "." + "versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ChangePGComponentsParamsBodyPostgresqlVersionsItems0 ComponentVersion contains operations which should be done with component version.
swagger:model ChangePGComponentsParamsBodyPostgresqlVersionsItems0
*/
type ChangePGComponentsParamsBodyPostgresqlVersionsItems0 struct {
	// version
	Version string `json:"version,omitempty"`

	// disable
	Disable bool `json:"disable,omitempty"`

	// enable
	Enable bool `json:"enable,omitempty"`
}

// Validate validates this change p g components params body postgresql versions items0
func (o *ChangePGComponentsParamsBodyPostgresqlVersionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this change p g components params body postgresql versions items0 based on context it is used
func (o *ChangePGComponentsParamsBodyPostgresqlVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPostgresqlVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePGComponentsParamsBodyPostgresqlVersionsItems0) UnmarshalBinary(b []byte) error {
	var res ChangePGComponentsParamsBodyPostgresqlVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
