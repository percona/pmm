// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComponentsCheckForOperatorUpdateReader is a Reader for the ComponentsCheckForOperatorUpdate structure.
type ComponentsCheckForOperatorUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ComponentsCheckForOperatorUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewComponentsCheckForOperatorUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewComponentsCheckForOperatorUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewComponentsCheckForOperatorUpdateOK creates a ComponentsCheckForOperatorUpdateOK with default headers values
func NewComponentsCheckForOperatorUpdateOK() *ComponentsCheckForOperatorUpdateOK {
	return &ComponentsCheckForOperatorUpdateOK{}
}

/*ComponentsCheckForOperatorUpdateOK handles this case with default header values.

A successful response.
*/
type ComponentsCheckForOperatorUpdateOK struct {
	Payload *ComponentsCheckForOperatorUpdateOKBody
}

func (o *ComponentsCheckForOperatorUpdateOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/CheckForOperatorUpdate][%d] componentsCheckForOperatorUpdateOk  %+v", 200, o.Payload)
}

func (o *ComponentsCheckForOperatorUpdateOK) GetPayload() *ComponentsCheckForOperatorUpdateOKBody {
	return o.Payload
}

func (o *ComponentsCheckForOperatorUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ComponentsCheckForOperatorUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewComponentsCheckForOperatorUpdateDefault creates a ComponentsCheckForOperatorUpdateDefault with default headers values
func NewComponentsCheckForOperatorUpdateDefault(code int) *ComponentsCheckForOperatorUpdateDefault {
	return &ComponentsCheckForOperatorUpdateDefault{
		_statusCode: code,
	}
}

/*ComponentsCheckForOperatorUpdateDefault handles this case with default header values.

An unexpected error response.
*/
type ComponentsCheckForOperatorUpdateDefault struct {
	_statusCode int

	Payload *ComponentsCheckForOperatorUpdateDefaultBody
}

// Code gets the status code for the components check for operator update default response
func (o *ComponentsCheckForOperatorUpdateDefault) Code() int {
	return o._statusCode
}

func (o *ComponentsCheckForOperatorUpdateDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/CheckForOperatorUpdate][%d] Components_CheckForOperatorUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *ComponentsCheckForOperatorUpdateDefault) GetPayload() *ComponentsCheckForOperatorUpdateDefaultBody {
	return o.Payload
}

func (o *ComponentsCheckForOperatorUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ComponentsCheckForOperatorUpdateDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ClusterToComponentsAnon ComponentsUpdateInformation contains info about components and their available latest versions.
swagger:model ClusterToComponentsAnon
*/
type ClusterToComponentsAnon struct {

	// component_to_update_information stores, under the name of the component, information about the update.
	// "pxc-operator", "psmdb-operator" are names used by backend for our operators.
	ComponentToUpdateInformation map[string]ClusterToComponentsAnonComponentToUpdateInformationAnon `json:"component_to_update_information,omitempty"`
}

// Validate validates this cluster to components anon
func (o *ClusterToComponentsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComponentToUpdateInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClusterToComponentsAnon) validateComponentToUpdateInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ComponentToUpdateInformation) { // not required
		return nil
	}

	for k := range o.ComponentToUpdateInformation {

		if swag.IsZero(o.ComponentToUpdateInformation[k]) { // not required
			continue
		}
		if val, ok := o.ComponentToUpdateInformation[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClusterToComponentsAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClusterToComponentsAnon) UnmarshalBinary(b []byte) error {
	var res ClusterToComponentsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ClusterToComponentsAnonComponentToUpdateInformationAnon ComponentUpdateInformation contains version we can update to for certain component.
swagger:model ClusterToComponentsAnonComponentToUpdateInformationAnon
*/
type ClusterToComponentsAnonComponentToUpdateInformationAnon struct {

	// available version
	AvailableVersion string `json:"available_version,omitempty"`
}

// Validate validates this cluster to components anon component to update information anon
func (o *ClusterToComponentsAnonComponentToUpdateInformationAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ClusterToComponentsAnonComponentToUpdateInformationAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClusterToComponentsAnonComponentToUpdateInformationAnon) UnmarshalBinary(b []byte) error {
	var res ClusterToComponentsAnonComponentToUpdateInformationAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ComponentsCheckForOperatorUpdateDefaultBody components check for operator update default body
swagger:model ComponentsCheckForOperatorUpdateDefaultBody
*/
type ComponentsCheckForOperatorUpdateDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this components check for operator update default body
func (o *ComponentsCheckForOperatorUpdateDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ComponentsCheckForOperatorUpdateDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Components_CheckForOperatorUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ComponentsCheckForOperatorUpdateDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ComponentsCheckForOperatorUpdateDefaultBody) UnmarshalBinary(b []byte) error {
	var res ComponentsCheckForOperatorUpdateDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ComponentsCheckForOperatorUpdateOKBody components check for operator update OK body
swagger:model ComponentsCheckForOperatorUpdateOKBody
*/
type ComponentsCheckForOperatorUpdateOKBody struct {

	// The cluster name is used as a key for this map, value contains components and their inforamtion about update.
	ClusterToComponents map[string]ClusterToComponentsAnon `json:"cluster_to_components,omitempty"`
}

// Validate validates this components check for operator update OK body
func (o *ComponentsCheckForOperatorUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterToComponents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ComponentsCheckForOperatorUpdateOKBody) validateClusterToComponents(formats strfmt.Registry) error {

	if swag.IsZero(o.ClusterToComponents) { // not required
		return nil
	}

	for k := range o.ClusterToComponents {

		if swag.IsZero(o.ClusterToComponents[k]) { // not required
			continue
		}
		if val, ok := o.ClusterToComponents[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ComponentsCheckForOperatorUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ComponentsCheckForOperatorUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res ComponentsCheckForOperatorUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
