// Code generated by go-swagger; DO NOT EDIT.

package pxc_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PXCClustersUpdatePXCClusterReader is a Reader for the PXCClustersUpdatePXCCluster structure.
type PXCClustersUpdatePXCClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PXCClustersUpdatePXCClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPXCClustersUpdatePXCClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPXCClustersUpdatePXCClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPXCClustersUpdatePXCClusterOK creates a PXCClustersUpdatePXCClusterOK with default headers values
func NewPXCClustersUpdatePXCClusterOK() *PXCClustersUpdatePXCClusterOK {
	return &PXCClustersUpdatePXCClusterOK{}
}

/*PXCClustersUpdatePXCClusterOK handles this case with default header values.

A successful response.
*/
type PXCClustersUpdatePXCClusterOK struct {
	Payload interface{}
}

func (o *PXCClustersUpdatePXCClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PXCCluster/Update][%d] pxcClustersUpdatePxcClusterOk  %+v", 200, o.Payload)
}

func (o *PXCClustersUpdatePXCClusterOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PXCClustersUpdatePXCClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPXCClustersUpdatePXCClusterDefault creates a PXCClustersUpdatePXCClusterDefault with default headers values
func NewPXCClustersUpdatePXCClusterDefault(code int) *PXCClustersUpdatePXCClusterDefault {
	return &PXCClustersUpdatePXCClusterDefault{
		_statusCode: code,
	}
}

/*PXCClustersUpdatePXCClusterDefault handles this case with default header values.

An unexpected error response.
*/
type PXCClustersUpdatePXCClusterDefault struct {
	_statusCode int

	Payload *PXCClustersUpdatePXCClusterDefaultBody
}

// Code gets the status code for the PXC clusters update PXC cluster default response
func (o *PXCClustersUpdatePXCClusterDefault) Code() int {
	return o._statusCode
}

func (o *PXCClustersUpdatePXCClusterDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/PXCCluster/Update][%d] PXCClusters_UpdatePXCCluster default  %+v", o._statusCode, o.Payload)
}

func (o *PXCClustersUpdatePXCClusterDefault) GetPayload() *PXCClustersUpdatePXCClusterDefaultBody {
	return o.Payload
}

func (o *PXCClustersUpdatePXCClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PXCClustersUpdatePXCClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PXCClustersUpdatePXCClusterBody PXC clusters update PXC cluster body
swagger:model PXCClustersUpdatePXCClusterBody
*/
type PXCClustersUpdatePXCClusterBody struct {

	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// PXC cluster name.
	Name string `json:"name,omitempty"`

	// params
	Params *PXCClustersUpdatePXCClusterParamsBodyParams `json:"params,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster body
func (o *PXCClustersUpdatePXCClusterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterBody) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterBody) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterDefaultBody PXC clusters update PXC cluster default body
swagger:model PXCClustersUpdatePXCClusterDefaultBody
*/
type PXCClustersUpdatePXCClusterDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this PXC clusters update PXC cluster default body
func (o *PXCClustersUpdatePXCClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PXCClusters_UpdatePXCCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParams UpdatePXCClusterParams represents PXC cluster parameters that can be updated.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParams
*/
type PXCClustersUpdatePXCClusterParamsBodyParams struct {

	// Cluster size.
	ClusterSize int32 `json:"cluster_size,omitempty"`

	// Suspend cluster `pause: true`.
	Suspend bool `json:"suspend,omitempty"`

	// Resume cluster `pause: false`.
	Resume bool `json:"resume,omitempty"`

	// haproxy
	Haproxy *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy `json:"haproxy,omitempty"`

	// proxysql
	Proxysql *PXCClustersUpdatePXCClusterParamsBodyParamsProxysql `json:"proxysql,omitempty"`

	// pxc
	PXC *PXCClustersUpdatePXCClusterParamsBodyParamsPXC `json:"pxc,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params
func (o *PXCClustersUpdatePXCClusterParamsBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePXC(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParams) validateHaproxy(formats strfmt.Registry) error {

	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParams) validateProxysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParams) validatePXC(formats strfmt.Registry) error {

	if swag.IsZero(o.PXC) { // not required
		return nil
	}

	if o.PXC != nil {
		if err := o.PXC.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pxc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParams) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy HAProxy container parameters.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy struct {

	// compute resources
	ComputeResources *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params haproxy
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "haproxy" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params haproxy compute resources
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsHaproxyComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsPXC PXC container parameters.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsPXC
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsPXC struct {

	// Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
	// in given tag is triggered. If entirely different image is given, error is returned.
	Image string `json:"image,omitempty"`

	// compute resources
	ComputeResources *PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params PXC
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXC) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "pxc" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXC) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXC) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsPXC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params PXC compute resources
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsPXCComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsProxysql ProxySQL container parameters.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsProxysql
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsProxysql struct {

	// compute resources
	ComputeResources *PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources `json:"compute_resources,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params proxysql
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysql) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(o.ComputeResources) { // not required
		return nil
	}

	if o.ComputeResources != nil {
		if err := o.ComputeResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "params" + "." + "proxysql" + "." + "compute_resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysql) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources ComputeResources represents container computer resources requests or limits.
swagger:model PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources
*/
type PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources struct {

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CPUm int32 `json:"cpu_m,omitempty"`

	// Memory in bytes.
	MemoryBytes string `json:"memory_bytes,omitempty"`
}

// Validate validates this PXC clusters update PXC cluster params body params proxysql compute resources
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources) UnmarshalBinary(b []byte) error {
	var res PXCClustersUpdatePXCClusterParamsBodyParamsProxysqlComputeResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
