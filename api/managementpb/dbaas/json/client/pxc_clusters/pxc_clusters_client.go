// Code generated by go-swagger; DO NOT EDIT.

package pxc_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pxc clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pxc clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PXCClustersCreatePXCCluster(params *PXCClustersCreatePXCClusterParams) (*PXCClustersCreatePXCClusterOK, error)

	PXCClustersGetPXCClusterCredentials(params *PXCClustersGetPXCClusterCredentialsParams) (*PXCClustersGetPXCClusterCredentialsOK, error)

	PXCClustersGetPXCClusterResources(params *PXCClustersGetPXCClusterResourcesParams) (*PXCClustersGetPXCClusterResourcesOK, error)

	PXCClustersUpdatePXCCluster(params *PXCClustersUpdatePXCClusterParams) (*PXCClustersUpdatePXCClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PXCClustersCreatePXCCluster creates PXC cluster creates a new PXC cluster
*/
func (a *Client) PXCClustersCreatePXCCluster(params *PXCClustersCreatePXCClusterParams) (*PXCClustersCreatePXCClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPXCClustersCreatePXCClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PXCClusters_CreatePXCCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PXCCluster/Create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PXCClustersCreatePXCClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PXCClustersCreatePXCClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PXCClustersCreatePXCClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PXCClustersGetPXCClusterCredentials gets PXC cluster credentials returns a PXC cluster credentials by cluster name
*/
func (a *Client) PXCClustersGetPXCClusterCredentials(params *PXCClustersGetPXCClusterCredentialsParams) (*PXCClustersGetPXCClusterCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPXCClustersGetPXCClusterCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PXCClusters_GetPXCClusterCredentials",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PXCClusters/GetCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PXCClustersGetPXCClusterCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PXCClustersGetPXCClusterCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PXCClustersGetPXCClusterCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PXCClustersGetPXCClusterResources gets PXC cluster resources returns expected resources to be consumed by the cluster
*/
func (a *Client) PXCClustersGetPXCClusterResources(params *PXCClustersGetPXCClusterResourcesParams) (*PXCClustersGetPXCClusterResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPXCClustersGetPXCClusterResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PXCClusters_GetPXCClusterResources",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PXCCluster/Resources/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PXCClustersGetPXCClusterResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PXCClustersGetPXCClusterResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PXCClustersGetPXCClusterResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PXCClustersUpdatePXCCluster updates PXC cluster updates existing PXC cluster
*/
func (a *Client) PXCClustersUpdatePXCCluster(params *PXCClustersUpdatePXCClusterParams) (*PXCClustersUpdatePXCClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPXCClustersUpdatePXCClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PXCClusters_UpdatePXCCluster",
		Method:             "POST",
		PathPattern:        "/v1/management/DBaaS/PXCCluster/Update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PXCClustersUpdatePXCClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PXCClustersUpdatePXCClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PXCClustersUpdatePXCClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
