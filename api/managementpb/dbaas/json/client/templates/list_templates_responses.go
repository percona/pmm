// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListTemplatesReader is a Reader for the ListTemplates structure.
type ListTemplatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTemplatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTemplatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListTemplatesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTemplatesOK creates a ListTemplatesOK with default headers values
func NewListTemplatesOK() *ListTemplatesOK {
	return &ListTemplatesOK{}
}

/*
ListTemplatesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListTemplatesOK struct {
	Payload *ListTemplatesOKBody
}

func (o *ListTemplatesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Templates/List][%d] listTemplatesOk  %+v", 200, o.Payload)
}

func (o *ListTemplatesOK) GetPayload() *ListTemplatesOKBody {
	return o.Payload
}

func (o *ListTemplatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTemplatesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTemplatesDefault creates a ListTemplatesDefault with default headers values
func NewListTemplatesDefault(code int) *ListTemplatesDefault {
	return &ListTemplatesDefault{
		_statusCode: code,
	}
}

/*
ListTemplatesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListTemplatesDefault struct {
	_statusCode int

	Payload *ListTemplatesDefaultBody
}

// Code gets the status code for the list templates default response
func (o *ListTemplatesDefault) Code() int {
	return o._statusCode
}

func (o *ListTemplatesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Templates/List][%d] ListTemplates default  %+v", o._statusCode, o.Payload)
}

func (o *ListTemplatesDefault) GetPayload() *ListTemplatesDefaultBody {
	return o.Payload
}

func (o *ListTemplatesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTemplatesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListTemplatesBody list templates body
swagger:model ListTemplatesBody
*/
type ListTemplatesBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// DBClusterType represents database cluster type.
	//
	//  - DB_CLUSTER_TYPE_INVALID: DB_CLUSTER_TYPE_INVALID represents unknown cluster type.
	//  - DB_CLUSTER_TYPE_PXC: DB_CLUSTER_TYPE_PXC represents pxc cluster type.
	//  - DB_CLUSTER_TYPE_PSMDB: DB_CLUSTER_TYPE_PSMDB represents psmdb cluster type.
	//  - DB_CLUSTER_TYPE_POSTGRESQL: DB_CLUSTER_TYPE_POSTGRESQL represents postgresql cluster type.
	// Enum: [DB_CLUSTER_TYPE_INVALID DB_CLUSTER_TYPE_PXC DB_CLUSTER_TYPE_PSMDB DB_CLUSTER_TYPE_POSTGRESQL]
	ClusterType *string `json:"cluster_type,omitempty"`
}

// Validate validates this list templates body
func (o *ListTemplatesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listTemplatesBodyTypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_TYPE_INVALID","DB_CLUSTER_TYPE_PXC","DB_CLUSTER_TYPE_PSMDB","DB_CLUSTER_TYPE_POSTGRESQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesBodyTypeClusterTypePropEnum = append(listTemplatesBodyTypeClusterTypePropEnum, v)
	}
}

const (

	// ListTemplatesBodyClusterTypeDBCLUSTERTYPEINVALID captures enum value "DB_CLUSTER_TYPE_INVALID"
	ListTemplatesBodyClusterTypeDBCLUSTERTYPEINVALID string = "DB_CLUSTER_TYPE_INVALID"

	// ListTemplatesBodyClusterTypeDBCLUSTERTYPEPXC captures enum value "DB_CLUSTER_TYPE_PXC"
	ListTemplatesBodyClusterTypeDBCLUSTERTYPEPXC string = "DB_CLUSTER_TYPE_PXC"

	// ListTemplatesBodyClusterTypeDBCLUSTERTYPEPSMDB captures enum value "DB_CLUSTER_TYPE_PSMDB"
	ListTemplatesBodyClusterTypeDBCLUSTERTYPEPSMDB string = "DB_CLUSTER_TYPE_PSMDB"

	// ListTemplatesBodyClusterTypeDBCLUSTERTYPEPOSTGRESQL captures enum value "DB_CLUSTER_TYPE_POSTGRESQL"
	ListTemplatesBodyClusterTypeDBCLUSTERTYPEPOSTGRESQL string = "DB_CLUSTER_TYPE_POSTGRESQL"
)

// prop value enum
func (o *ListTemplatesBody) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesBodyTypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesBody) validateClusterType(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterType) { // not required
		return nil
	}

	// value enum
	if err := o.validateClusterTypeEnum("body"+"."+"cluster_type", "body", *o.ClusterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list templates body based on context it is used
func (o *ListTemplatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTemplatesDefaultBody list templates default body
swagger:model ListTemplatesDefaultBody
*/
type ListTemplatesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListTemplatesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list templates default body
func (o *ListTemplatesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list templates default body based on the context it is used
func (o *ListTemplatesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTemplatesDefaultBodyDetailsItems0 list templates default body details items0
swagger:model ListTemplatesDefaultBodyDetailsItems0
*/
type ListTemplatesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list templates default body details items0
func (o *ListTemplatesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates default body details items0 based on context it is used
func (o *ListTemplatesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListTemplatesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTemplatesOKBody list templates OK body
swagger:model ListTemplatesOKBody
*/
type ListTemplatesOKBody struct {
	// templates
	Templates []*ListTemplatesOKBodyTemplatesItems0 `json:"templates"`
}

// Validate validates this list templates OK body
func (o *ListTemplatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBody) validateTemplates(formats strfmt.Registry) error {
	if swag.IsZero(o.Templates) { // not required
		return nil
	}

	for i := 0; i < len(o.Templates); i++ {
		if swag.IsZero(o.Templates[i]) { // not required
			continue
		}

		if o.Templates[i] != nil {
			if err := o.Templates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list templates OK body based on the context it is used
func (o *ListTemplatesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBody) contextValidateTemplates(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Templates); i++ {
		if o.Templates[i] != nil {
			if err := o.Templates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListTemplatesOKBodyTemplatesItems0 list templates OK body templates items0
swagger:model ListTemplatesOKBodyTemplatesItems0
*/
type ListTemplatesOKBodyTemplatesItems0 struct {
	// Template CR name.
	Name string `json:"name,omitempty"`

	// Template CR kind.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this list templates OK body templates items0
func (o *ListTemplatesOKBodyTemplatesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates OK body templates items0 based on context it is used
func (o *ListTemplatesOKBodyTemplatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
