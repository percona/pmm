// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/dbaas.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RunningOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RunningOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunningOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunningOperationMultiError, or nil if none found.
func (m *RunningOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *RunningOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FinishedSteps

	// no validation rules for Message

	// no validation rules for TotalSteps

	if len(errors) > 0 {
		return RunningOperationMultiError(errors)
	}

	return nil
}

// RunningOperationMultiError is an error wrapping multiple validation errors
// returned by RunningOperation.ValidateAll() if the designated constraints
// aren't met.
type RunningOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunningOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunningOperationMultiError) AllErrors() []error { return m }

// RunningOperationValidationError is the validation error returned by
// RunningOperation.Validate if the designated constraints aren't met.
type RunningOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunningOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunningOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunningOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunningOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunningOperationValidationError) ErrorName() string { return "RunningOperationValidationError" }

// Error satisfies the builtin error interface
func (e RunningOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunningOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunningOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunningOperationValidationError{}

// Validate checks the field values on ComputeResources with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComputeResources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputeResources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComputeResourcesMultiError, or nil if none found.
func (m *ComputeResources) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputeResources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuM

	// no validation rules for MemoryBytes

	if len(errors) > 0 {
		return ComputeResourcesMultiError(errors)
	}

	return nil
}

// ComputeResourcesMultiError is an error wrapping multiple validation errors
// returned by ComputeResources.ValidateAll() if the designated constraints
// aren't met.
type ComputeResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputeResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputeResourcesMultiError) AllErrors() []error { return m }

// ComputeResourcesValidationError is the validation error returned by
// ComputeResources.Validate if the designated constraints aren't met.
type ComputeResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputeResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputeResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputeResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputeResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputeResourcesValidationError) ErrorName() string { return "ComputeResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ComputeResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputeResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputeResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputeResourcesValidationError{}

// Validate checks the field values on Backup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Backup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Backup with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BackupMultiError, or nil if none found.
func (m *Backup) ValidateAll() error {
	return m.validate(true)
}

func (m *Backup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	// no validation rules for KeepCopies

	// no validation rules for CronExpression

	// no validation rules for ServiceAccount

	if len(errors) > 0 {
		return BackupMultiError(errors)
	}

	return nil
}

// BackupMultiError is an error wrapping multiple validation errors returned by
// Backup.ValidateAll() if the designated constraints aren't met.
type BackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackupMultiError) AllErrors() []error { return m }

// BackupValidationError is the validation error returned by Backup.Validate if
// the designated constraints aren't met.
type BackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupValidationError) ErrorName() string { return "BackupValidationError" }

// Error satisfies the builtin error interface
func (e BackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupValidationError{}

// Validate checks the field values on Restore with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Restore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Restore with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RestoreMultiError, or nil if none found.
func (m *Restore) ValidateAll() error {
	return m.validate(true)
}

func (m *Restore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	// no validation rules for Destination

	// no validation rules for SecretsName

	if len(errors) > 0 {
		return RestoreMultiError(errors)
	}

	return nil
}

// RestoreMultiError is an error wrapping multiple validation errors returned
// by Restore.ValidateAll() if the designated constraints aren't met.
type RestoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreMultiError) AllErrors() []error { return m }

// RestoreValidationError is the validation error returned by Restore.Validate
// if the designated constraints aren't met.
type RestoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreValidationError) ErrorName() string { return "RestoreValidationError" }

// Error satisfies the builtin error interface
func (e RestoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreValidationError{}

// Validate checks the field values on Resources with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resources with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcesMultiError, or nil
// if none found.
func (m *Resources) ValidateAll() error {
	return m.validate(true)
}

func (m *Resources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemoryBytes

	// no validation rules for CpuM

	// no validation rules for DiskSize

	if len(errors) > 0 {
		return ResourcesMultiError(errors)
	}

	return nil
}

// ResourcesMultiError is an error wrapping multiple validation errors returned
// by Resources.ValidateAll() if the designated constraints aren't met.
type ResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesMultiError) AllErrors() []error { return m }

// ResourcesValidationError is the validation error returned by
// Resources.Validate if the designated constraints aren't met.
type ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesValidationError) ErrorName() string { return "ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesValidationError{}
