// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/psmdb_clusters.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PSMDBClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PSMDBClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PSMDBClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PSMDBClusterParamsMultiError, or nil if none found.
func (m *PSMDBClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *PSMDBClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetReplicaset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Replicaset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Replicaset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicaset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterParamsValidationError{
				field:  "Replicaset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetBackup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterParamsValidationError{
				field:  "Backup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRestore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterParamsValidationError{
				field:  "Restore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PSMDBClusterParamsMultiError(errors)
	}

	return nil
}

// PSMDBClusterParamsMultiError is an error wrapping multiple validation errors
// returned by PSMDBClusterParams.ValidateAll() if the designated constraints
// aren't met.
type PSMDBClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PSMDBClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PSMDBClusterParamsMultiError) AllErrors() []error { return m }

// PSMDBClusterParamsValidationError is the validation error returned by
// PSMDBClusterParams.Validate if the designated constraints aren't met.
type PSMDBClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PSMDBClusterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PSMDBClusterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PSMDBClusterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PSMDBClusterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PSMDBClusterParamsValidationError) ErrorName() string {
	return "PSMDBClusterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e PSMDBClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPSMDBClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PSMDBClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PSMDBClusterParamsValidationError{}

// Validate checks the field values on GetPSMDBClusterCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPSMDBClusterCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBClusterCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPSMDBClusterCredentialsRequestMultiError, or nil if none found.
func (m *GetPSMDBClusterCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBClusterCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetPSMDBClusterCredentialsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetPSMDBClusterCredentialsRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPSMDBClusterCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetPSMDBClusterCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPSMDBClusterCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPSMDBClusterCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBClusterCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBClusterCredentialsRequestMultiError) AllErrors() []error { return m }

// GetPSMDBClusterCredentialsRequestValidationError is the validation error
// returned by GetPSMDBClusterCredentialsRequest.Validate if the designated
// constraints aren't met.
type GetPSMDBClusterCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBClusterCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBClusterCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBClusterCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBClusterCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBClusterCredentialsRequestValidationError) ErrorName() string {
	return "GetPSMDBClusterCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBClusterCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBClusterCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBClusterCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBClusterCredentialsRequestValidationError{}

// Validate checks the field values on GetPSMDBClusterCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPSMDBClusterCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBClusterCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPSMDBClusterCredentialsResponseMultiError, or nil if none found.
func (m *GetPSMDBClusterCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBClusterCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnectionCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPSMDBClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPSMDBClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectionCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPSMDBClusterCredentialsResponseValidationError{
				field:  "ConnectionCredentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPSMDBClusterCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetPSMDBClusterCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPSMDBClusterCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPSMDBClusterCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBClusterCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBClusterCredentialsResponseMultiError) AllErrors() []error { return m }

// GetPSMDBClusterCredentialsResponseValidationError is the validation error
// returned by GetPSMDBClusterCredentialsResponse.Validate if the designated
// constraints aren't met.
type GetPSMDBClusterCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBClusterCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBClusterCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBClusterCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBClusterCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBClusterCredentialsResponseValidationError) ErrorName() string {
	return "GetPSMDBClusterCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBClusterCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBClusterCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBClusterCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBClusterCredentialsResponseValidationError{}

// Validate checks the field values on CreatePSMDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePSMDBClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePSMDBClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePSMDBClusterRequestMultiError, or nil if none found.
func (m *CreatePSMDBClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePSMDBClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := CreatePSMDBClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePSMDBClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePSMDBClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePSMDBClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePSMDBClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePSMDBClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePSMDBClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePSMDBClusterRequestMultiError(errors)
	}

	return nil
}

// CreatePSMDBClusterRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePSMDBClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePSMDBClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePSMDBClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePSMDBClusterRequestMultiError) AllErrors() []error { return m }

// CreatePSMDBClusterRequestValidationError is the validation error returned by
// CreatePSMDBClusterRequest.Validate if the designated constraints aren't met.
type CreatePSMDBClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePSMDBClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePSMDBClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePSMDBClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePSMDBClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePSMDBClusterRequestValidationError) ErrorName() string {
	return "CreatePSMDBClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePSMDBClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePSMDBClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePSMDBClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePSMDBClusterRequestValidationError{}

// Validate checks the field values on CreatePSMDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePSMDBClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePSMDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePSMDBClusterResponseMultiError, or nil if none found.
func (m *CreatePSMDBClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePSMDBClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePSMDBClusterResponseMultiError(errors)
	}

	return nil
}

// CreatePSMDBClusterResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePSMDBClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePSMDBClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePSMDBClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePSMDBClusterResponseMultiError) AllErrors() []error { return m }

// CreatePSMDBClusterResponseValidationError is the validation error returned
// by CreatePSMDBClusterResponse.Validate if the designated constraints aren't met.
type CreatePSMDBClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePSMDBClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePSMDBClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePSMDBClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePSMDBClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePSMDBClusterResponseValidationError) ErrorName() string {
	return "CreatePSMDBClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePSMDBClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePSMDBClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePSMDBClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePSMDBClusterResponseValidationError{}

// Validate checks the field values on UpdatePSMDBClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePSMDBClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePSMDBClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePSMDBClusterRequestMultiError, or nil if none found.
func (m *UpdatePSMDBClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePSMDBClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := UpdatePSMDBClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePSMDBClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePSMDBClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePSMDBClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePSMDBClusterRequestMultiError(errors)
	}

	return nil
}

// UpdatePSMDBClusterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePSMDBClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePSMDBClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePSMDBClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePSMDBClusterRequestMultiError) AllErrors() []error { return m }

// UpdatePSMDBClusterRequestValidationError is the validation error returned by
// UpdatePSMDBClusterRequest.Validate if the designated constraints aren't met.
type UpdatePSMDBClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePSMDBClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePSMDBClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePSMDBClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePSMDBClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePSMDBClusterRequestValidationError) ErrorName() string {
	return "UpdatePSMDBClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePSMDBClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePSMDBClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePSMDBClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePSMDBClusterRequestValidationError{}

// Validate checks the field values on UpdatePSMDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePSMDBClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePSMDBClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePSMDBClusterResponseMultiError, or nil if none found.
func (m *UpdatePSMDBClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePSMDBClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePSMDBClusterResponseMultiError(errors)
	}

	return nil
}

// UpdatePSMDBClusterResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePSMDBClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePSMDBClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePSMDBClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePSMDBClusterResponseMultiError) AllErrors() []error { return m }

// UpdatePSMDBClusterResponseValidationError is the validation error returned
// by UpdatePSMDBClusterResponse.Validate if the designated constraints aren't met.
type UpdatePSMDBClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePSMDBClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePSMDBClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePSMDBClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePSMDBClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePSMDBClusterResponseValidationError) ErrorName() string {
	return "UpdatePSMDBClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePSMDBClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePSMDBClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePSMDBClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePSMDBClusterResponseValidationError{}

// Validate checks the field values on GetPSMDBClusterResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPSMDBClusterResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBClusterResourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPSMDBClusterResourcesRequestMultiError, or nil if none found.
func (m *GetPSMDBClusterResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBClusterResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPSMDBClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPSMDBClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPSMDBClusterResourcesRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPSMDBClusterResourcesRequestMultiError(errors)
	}

	return nil
}

// GetPSMDBClusterResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by GetPSMDBClusterResourcesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPSMDBClusterResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBClusterResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBClusterResourcesRequestMultiError) AllErrors() []error { return m }

// GetPSMDBClusterResourcesRequestValidationError is the validation error
// returned by GetPSMDBClusterResourcesRequest.Validate if the designated
// constraints aren't met.
type GetPSMDBClusterResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBClusterResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBClusterResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBClusterResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBClusterResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBClusterResourcesRequestValidationError) ErrorName() string {
	return "GetPSMDBClusterResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBClusterResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBClusterResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBClusterResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBClusterResourcesRequestValidationError{}

// Validate checks the field values on GetPSMDBClusterResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPSMDBClusterResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPSMDBClusterResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPSMDBClusterResourcesResponseMultiError, or nil if none found.
func (m *GetPSMDBClusterResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBClusterResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpected()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPSMDBClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPSMDBClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpected()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPSMDBClusterResourcesResponseValidationError{
				field:  "Expected",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPSMDBClusterResourcesResponseMultiError(errors)
	}

	return nil
}

// GetPSMDBClusterResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPSMDBClusterResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPSMDBClusterResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBClusterResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBClusterResourcesResponseMultiError) AllErrors() []error { return m }

// GetPSMDBClusterResourcesResponseValidationError is the validation error
// returned by GetPSMDBClusterResourcesResponse.Validate if the designated
// constraints aren't met.
type GetPSMDBClusterResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBClusterResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPSMDBClusterResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPSMDBClusterResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPSMDBClusterResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBClusterResourcesResponseValidationError) ErrorName() string {
	return "GetPSMDBClusterResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBClusterResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBClusterResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBClusterResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBClusterResourcesResponseValidationError{}

// Validate checks the field values on PSMDBClusterParams_ReplicaSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PSMDBClusterParams_ReplicaSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PSMDBClusterParams_ReplicaSet with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PSMDBClusterParams_ReplicaSetMultiError, or nil if none found.
func (m *PSMDBClusterParams_ReplicaSet) ValidateAll() error {
	return m.validate(true)
}

func (m *PSMDBClusterParams_ReplicaSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSMDBClusterParams_ReplicaSetValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSMDBClusterParams_ReplicaSetValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSMDBClusterParams_ReplicaSetValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskSize

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return PSMDBClusterParams_ReplicaSetMultiError(errors)
	}

	return nil
}

// PSMDBClusterParams_ReplicaSetMultiError is an error wrapping multiple
// validation errors returned by PSMDBClusterParams_ReplicaSet.ValidateAll()
// if the designated constraints aren't met.
type PSMDBClusterParams_ReplicaSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PSMDBClusterParams_ReplicaSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PSMDBClusterParams_ReplicaSetMultiError) AllErrors() []error { return m }

// PSMDBClusterParams_ReplicaSetValidationError is the validation error
// returned by PSMDBClusterParams_ReplicaSet.Validate if the designated
// constraints aren't met.
type PSMDBClusterParams_ReplicaSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PSMDBClusterParams_ReplicaSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PSMDBClusterParams_ReplicaSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PSMDBClusterParams_ReplicaSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PSMDBClusterParams_ReplicaSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PSMDBClusterParams_ReplicaSetValidationError) ErrorName() string {
	return "PSMDBClusterParams_ReplicaSetValidationError"
}

// Error satisfies the builtin error interface
func (e PSMDBClusterParams_ReplicaSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPSMDBClusterParams_ReplicaSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PSMDBClusterParams_ReplicaSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PSMDBClusterParams_ReplicaSetValidationError{}

// Validate checks the field values on
// GetPSMDBClusterCredentialsResponse_PSMDBCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPSMDBClusterCredentialsResponse_PSMDBCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError, or nil if
// none found.
func (m *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPSMDBClusterCredentialsResponse_PSMDBCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Replicaset

	if len(errors) > 0 {
		return GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError(errors)
	}

	return nil
}

// GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError is an error
// wrapping multiple validation errors returned by
// GetPSMDBClusterCredentialsResponse_PSMDBCredentials.ValidateAll() if the
// designated constraints aren't met.
type GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPSMDBClusterCredentialsResponse_PSMDBCredentialsMultiError) AllErrors() []error { return m }

// GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError is the
// validation error returned by
// GetPSMDBClusterCredentialsResponse_PSMDBCredentials.Validate if the
// designated constraints aren't met.
type GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) ErrorName() string {
	return "GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPSMDBClusterCredentialsResponse_PSMDBCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPSMDBClusterCredentialsResponse_PSMDBCredentialsValidationError{}

// Validate checks the field values on
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError, or nil if
// none found.
func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetReplicaset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError{
					field:  "Replicaset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError{
					field:  "Replicaset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicaset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError{
				field:  "Replicaset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Suspend

	// no validation rules for Resume

	// no validation rules for Image

	if len(errors) > 0 {
		return UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError(errors)
	}

	return nil
}

// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError is an error
// wrapping multiple validation errors returned by
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams.ValidateAll() if the
// designated constraints aren't met.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsMultiError) AllErrors() []error { return m }

// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError is the
// validation error returned by
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams.Validate if the
// designated constraints aren't met.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) ErrorName() string {
	return "UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePSMDBClusterRequest_UpdatePSMDBClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParamsValidationError{}

// Validate checks the field values on
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError, or
// nil if none found.
func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError(errors)
	}

	return nil
}

// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError is
// an error wrapping multiple validation errors returned by
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet.ValidateAll()
// if the designated constraints aren't met.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetMultiError) AllErrors() []error {
	return m
}

// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError
// is the validation error returned by
// UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet.Validate if
// the designated constraints aren't met.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) ErrorName() string {
	return "UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSetValidationError{}
