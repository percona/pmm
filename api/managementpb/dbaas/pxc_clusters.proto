syntax = "proto3";

package dbaas.v1beta1;

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "managementpb/dbaas/dbaas.proto";

// TODO move it to parent directory / package once API is v1-stable

// PXCBackupState represents PXC backup CR state.
enum PXCBackupState {
  // PXC_BACKUP_STATE_INVALID represents unknown state.
  PXC_BACKUP_STATE_INVALID = 0;
  // PXC_BACKUP_STATE_RUNNING represents running backup.
  PXC_BACKUP_STATE_RUNNING = 1;
  // PXC_BACKUP_STATE_SUCCEEDED represents succeeded backup.
  PXC_BACKUP_STATE_SUCCEEDED = 2;
  // PXC_BACKUP_STATE_FAILED represents failed backup.
  PXC_BACKUP_STATE_FAILED = 3;
}

// PXCClusterParams represents PXC cluster parameters that can be updated.
message PXCClusterParams {
  // PXC container parameters.
  // TODO Do not use inner messages in all public APIs (for consistency).
  message PXC {
    // Docker image used for PXC.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1;
    // Disk size in bytes.
    int64 disk_size = 2;
  }
  // ProxySQL container parameters.
  // TODO Do not use inner messages in all public APIs (for consistency).
  message ProxySQL {
    // Docker image used for ProxySQL.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1;
    // Disk size in bytes.
    int64 disk_size = 2;
  }
  // HAProxy container parameters.
  // NOTE: HAProxy does not need disk size as ProxySQL does because the container does not require it.
  message HAProxy {
    // Docker image used for HAProxy.
    string image = 1;
    // Requested compute resources.
    ComputeResources compute_resources = 2;
  }
  // Cluster size.
  int32 cluster_size = 1;
  // PXC container parameters.
  PXC pxc = 2;
  // NOTE: Only one of fields proxysql or haproxy has to be set, we check this in the code.
  // ProxySQL container parameters.
  ProxySQL proxysql = 3;
  // HAProxy container parameters.
  HAProxy haproxy = 4;
}

message GetPXCClusterCredentialsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PXC cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// PXCClusterConnectionCredentials is cluster connection credentials.
message PXCClusterConnectionCredentials {
  // PXC username.
  string username = 1;
  // PXC password.
  string password = 2;
  // PXC host.
  string host = 3;
  // PXC port.
  int32 port = 4;
}

message GetPXCClusterCredentialsResponse {
  // Cluster connection credentials.
  PXCClusterConnectionCredentials connection_credentials = 1;
}

message CreatePXCClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PXC cluster name.
  // a DNS-1035 label must consist of lower case alphanumeric characters or '-',
  // start with an alphabetic character, and end with an alphanumeric character
  // (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
  string name = 2;
  // Cluster parameters.
  PXCClusterParams params = 3;
  // Make DB cluster accessible outside of K8s cluster.
  bool expose = 4;
}

message CreatePXCClusterResponse {}

message UpdatePXCClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PXC cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // UpdatePXCClusterParams represents PXC cluster parameters that can be updated.
  message UpdatePXCClusterParams {
    // PXC container parameters.
    message PXC {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
      // Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
      // in given tag is triggered. If entirely different image is given, error is returned.
      string image = 2;
    }
    // ProxySQL container parameters.
    message ProxySQL {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // HAProxy container parameters.
    message HAProxy {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // Cluster size.
    int32 cluster_size = 1;
    // PXC container parameters.
    PXC pxc = 2;
    // ProxySQL container parameters.
    ProxySQL proxysql = 3;
    // Suspend cluster `pause: true`.
    bool suspend = 4;
    // Resume cluster `pause: false`.
    bool resume = 5;
    // HAProxy container parameters.
    HAProxy haproxy = 6;
  }
  // Cluster parameters.
  UpdatePXCClusterParams params = 3;
}

message UpdatePXCClusterResponse {}

message GetPXCClusterResourcesRequest {
  // Cluster parameters.
  PXCClusterParams params = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
}

message GetPXCClusterResourcesResponse {
  // Expected resources to be consumed by the cluster.
  Resources expected = 1;
}

// PXCClusters service provides public methods for managing PXC clusters.
service PXCClusters {
  // GetPXCClusterCredentials returns a PXC cluster credentials by cluster name.
  rpc GetPXCClusterCredentials(GetPXCClusterCredentialsRequest) returns (GetPXCClusterCredentialsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PXCClusters/GetCredentials"
      body: "*"
    };
  }
  // CreatePXCCluster creates a new PXC cluster.
  rpc CreatePXCCluster(CreatePXCClusterRequest) returns (CreatePXCClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PXCCluster/Create"
      body: "*"
    };
  }
  // UpdatePXCCluster updates existing PXC cluster.
  rpc UpdatePXCCluster(UpdatePXCClusterRequest) returns (UpdatePXCClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PXCCluster/Update"
      body: "*"
    };
  }
  // GetPXCClusterResources returns expected resources to be consumed by the cluster.
  rpc GetPXCClusterResources(GetPXCClusterResourcesRequest) returns (GetPXCClusterResourcesResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PXCCluster/Resources/Get"
      body: "*"
    };
  }
}
