// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: managementpb/dbaas/postgresql_clusters.proto

package dbaasv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostgresqlClusters_GetPostgresqlClusterCredentials_FullMethodName = "/dbaas.v1beta1.PostgresqlClusters/GetPostgresqlClusterCredentials"
	PostgresqlClusters_CreatePostgresqlCluster_FullMethodName         = "/dbaas.v1beta1.PostgresqlClusters/CreatePostgresqlCluster"
	PostgresqlClusters_UpdatePostgresqlCluster_FullMethodName         = "/dbaas.v1beta1.PostgresqlClusters/UpdatePostgresqlCluster"
	PostgresqlClusters_GetPostgresqlClusterResources_FullMethodName   = "/dbaas.v1beta1.PostgresqlClusters/GetPostgresqlClusterResources"
)

// PostgresqlClustersClient is the client API for PostgresqlClusters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresqlClustersClient interface {
	// GetPostgresqlClusterCredentials returns a Postgresql cluster credentials by cluster name.
	GetPostgresqlClusterCredentials(ctx context.Context, in *GetPostgresqlClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPostgresqlClusterCredentialsResponse, error)
	// CreatePostgresqlCluster creates a new Postgresql cluster.
	CreatePostgresqlCluster(ctx context.Context, in *CreatePostgresqlClusterRequest, opts ...grpc.CallOption) (*CreatePostgresqlClusterResponse, error)
	// UpdatePostgresqlCluster updates existing Postgresql cluster.
	UpdatePostgresqlCluster(ctx context.Context, in *UpdatePostgresqlClusterRequest, opts ...grpc.CallOption) (*UpdatePostgresqlClusterResponse, error)
	// GetPostgresqlClusterResources returns expected resources to be consumed by the cluster.
	GetPostgresqlClusterResources(ctx context.Context, in *GetPostgresqlClusterResourcesRequest, opts ...grpc.CallOption) (*GetPostgresqlClusterResourcesResponse, error)
}

type postgresqlClustersClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresqlClustersClient(cc grpc.ClientConnInterface) PostgresqlClustersClient {
	return &postgresqlClustersClient{cc}
}

func (c *postgresqlClustersClient) GetPostgresqlClusterCredentials(ctx context.Context, in *GetPostgresqlClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPostgresqlClusterCredentialsResponse, error) {
	out := new(GetPostgresqlClusterCredentialsResponse)
	err := c.cc.Invoke(ctx, PostgresqlClusters_GetPostgresqlClusterCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresqlClustersClient) CreatePostgresqlCluster(ctx context.Context, in *CreatePostgresqlClusterRequest, opts ...grpc.CallOption) (*CreatePostgresqlClusterResponse, error) {
	out := new(CreatePostgresqlClusterResponse)
	err := c.cc.Invoke(ctx, PostgresqlClusters_CreatePostgresqlCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresqlClustersClient) UpdatePostgresqlCluster(ctx context.Context, in *UpdatePostgresqlClusterRequest, opts ...grpc.CallOption) (*UpdatePostgresqlClusterResponse, error) {
	out := new(UpdatePostgresqlClusterResponse)
	err := c.cc.Invoke(ctx, PostgresqlClusters_UpdatePostgresqlCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresqlClustersClient) GetPostgresqlClusterResources(ctx context.Context, in *GetPostgresqlClusterResourcesRequest, opts ...grpc.CallOption) (*GetPostgresqlClusterResourcesResponse, error) {
	out := new(GetPostgresqlClusterResourcesResponse)
	err := c.cc.Invoke(ctx, PostgresqlClusters_GetPostgresqlClusterResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresqlClustersServer is the server API for PostgresqlClusters service.
// All implementations must embed UnimplementedPostgresqlClustersServer
// for forward compatibility
type PostgresqlClustersServer interface {
	// GetPostgresqlClusterCredentials returns a Postgresql cluster credentials by cluster name.
	GetPostgresqlClusterCredentials(context.Context, *GetPostgresqlClusterCredentialsRequest) (*GetPostgresqlClusterCredentialsResponse, error)
	// CreatePostgresqlCluster creates a new Postgresql cluster.
	CreatePostgresqlCluster(context.Context, *CreatePostgresqlClusterRequest) (*CreatePostgresqlClusterResponse, error)
	// UpdatePostgresqlCluster updates existing Postgresql cluster.
	UpdatePostgresqlCluster(context.Context, *UpdatePostgresqlClusterRequest) (*UpdatePostgresqlClusterResponse, error)
	// GetPostgresqlClusterResources returns expected resources to be consumed by the cluster.
	GetPostgresqlClusterResources(context.Context, *GetPostgresqlClusterResourcesRequest) (*GetPostgresqlClusterResourcesResponse, error)
	mustEmbedUnimplementedPostgresqlClustersServer()
}

// UnimplementedPostgresqlClustersServer must be embedded to have forward compatible implementations.
type UnimplementedPostgresqlClustersServer struct{}

func (UnimplementedPostgresqlClustersServer) GetPostgresqlClusterCredentials(context.Context, *GetPostgresqlClusterCredentialsRequest) (*GetPostgresqlClusterCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostgresqlClusterCredentials not implemented")
}

func (UnimplementedPostgresqlClustersServer) CreatePostgresqlCluster(context.Context, *CreatePostgresqlClusterRequest) (*CreatePostgresqlClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostgresqlCluster not implemented")
}

func (UnimplementedPostgresqlClustersServer) UpdatePostgresqlCluster(context.Context, *UpdatePostgresqlClusterRequest) (*UpdatePostgresqlClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostgresqlCluster not implemented")
}

func (UnimplementedPostgresqlClustersServer) GetPostgresqlClusterResources(context.Context, *GetPostgresqlClusterResourcesRequest) (*GetPostgresqlClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostgresqlClusterResources not implemented")
}
func (UnimplementedPostgresqlClustersServer) mustEmbedUnimplementedPostgresqlClustersServer() {}

// UnsafePostgresqlClustersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresqlClustersServer will
// result in compilation errors.
type UnsafePostgresqlClustersServer interface {
	mustEmbedUnimplementedPostgresqlClustersServer()
}

func RegisterPostgresqlClustersServer(s grpc.ServiceRegistrar, srv PostgresqlClustersServer) {
	s.RegisterService(&PostgresqlClusters_ServiceDesc, srv)
}

func _PostgresqlClusters_GetPostgresqlClusterCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostgresqlClusterCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlClustersServer).GetPostgresqlClusterCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresqlClusters_GetPostgresqlClusterCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlClustersServer).GetPostgresqlClusterCredentials(ctx, req.(*GetPostgresqlClusterCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresqlClusters_CreatePostgresqlCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostgresqlClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlClustersServer).CreatePostgresqlCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresqlClusters_CreatePostgresqlCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlClustersServer).CreatePostgresqlCluster(ctx, req.(*CreatePostgresqlClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresqlClusters_UpdatePostgresqlCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostgresqlClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlClustersServer).UpdatePostgresqlCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresqlClusters_UpdatePostgresqlCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlClustersServer).UpdatePostgresqlCluster(ctx, req.(*UpdatePostgresqlClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresqlClusters_GetPostgresqlClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostgresqlClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlClustersServer).GetPostgresqlClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresqlClusters_GetPostgresqlClusterResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlClustersServer).GetPostgresqlClusterResources(ctx, req.(*GetPostgresqlClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgresqlClusters_ServiceDesc is the grpc.ServiceDesc for PostgresqlClusters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgresqlClusters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbaas.v1beta1.PostgresqlClusters",
	HandlerType: (*PostgresqlClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostgresqlClusterCredentials",
			Handler:    _PostgresqlClusters_GetPostgresqlClusterCredentials_Handler,
		},
		{
			MethodName: "CreatePostgresqlCluster",
			Handler:    _PostgresqlClusters_CreatePostgresqlCluster_Handler,
		},
		{
			MethodName: "UpdatePostgresqlCluster",
			Handler:    _PostgresqlClusters_UpdatePostgresqlCluster_Handler,
		},
		{
			MethodName: "GetPostgresqlClusterResources",
			Handler:    _PostgresqlClusters_GetPostgresqlClusterResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/dbaas/postgresql_clusters.proto",
}
