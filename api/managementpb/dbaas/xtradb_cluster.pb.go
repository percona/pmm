// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: managementpb/dbaas/xtradb_cluster.proto

package dbaasv1beta1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// XtraDBClusterState represents XtraDB cluster CR state.
type XtraDBClusterState int32

const (
	// XTRA_DB_CLUSTER_STATE_INVALID represents unknown state.
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_INVALID XtraDBClusterState = 0
	// XTRA_DB_CLUSTER_STATE_CHANGING represents a cluster being changed (initializing).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_CHANGING XtraDBClusterState = 1
	// XTRA_DB_CLUSTER_STATE_READY represents a cluster without pending changes (ready).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_READY XtraDBClusterState = 2
	// XTRA_DB_CLUSTER_STATE_FAILED represents a failed cluster (error).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_FAILED XtraDBClusterState = 3
	// XTRA_DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_DELETING XtraDBClusterState = 4
)

// Enum value maps for XtraDBClusterState.
var (
	XtraDBClusterState_name = map[int32]string{
		0: "XTRA_DB_CLUSTER_STATE_INVALID",
		1: "XTRA_DB_CLUSTER_STATE_CHANGING",
		2: "XTRA_DB_CLUSTER_STATE_READY",
		3: "XTRA_DB_CLUSTER_STATE_FAILED",
		4: "XTRA_DB_CLUSTER_STATE_DELETING",
	}
	XtraDBClusterState_value = map[string]int32{
		"XTRA_DB_CLUSTER_STATE_INVALID":  0,
		"XTRA_DB_CLUSTER_STATE_CHANGING": 1,
		"XTRA_DB_CLUSTER_STATE_READY":    2,
		"XTRA_DB_CLUSTER_STATE_FAILED":   3,
		"XTRA_DB_CLUSTER_STATE_DELETING": 4,
	}
)

func (x XtraDBClusterState) Enum() *XtraDBClusterState {
	p := new(XtraDBClusterState)
	*p = x
	return p
}

func (x XtraDBClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtraDBClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_managementpb_dbaas_xtradb_cluster_proto_enumTypes[0].Descriptor()
}

func (XtraDBClusterState) Type() protoreflect.EnumType {
	return &file_managementpb_dbaas_xtradb_cluster_proto_enumTypes[0]
}

func (x XtraDBClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtraDBClusterState.Descriptor instead.
func (XtraDBClusterState) EnumDescriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{0}
}

// XtraDBBackupState represents XtraDB backup CR state.
type XtraDBBackupState int32

const (
	// XTRA_DB_BACKUP_STATE_INVALID represents unknown state.
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_INVALID XtraDBBackupState = 0
	// XTRA_DB_BACKUP_STATE_RUNNING represents running backup (Starting, Running).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_RUNNING XtraDBBackupState = 1
	// XTRA_DB_BACKUP_STATE_SUCCEEDED represents succeeded backup (Succeeded).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_SUCCEEDED XtraDBBackupState = 2
	// XTRA_DB_BACKUP_STATE_FAILED represents failed backup (Failed).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_FAILED XtraDBBackupState = 3
)

// Enum value maps for XtraDBBackupState.
var (
	XtraDBBackupState_name = map[int32]string{
		0: "XTRA_DB_BACKUP_STATE_INVALID",
		1: "XTRA_DB_BACKUP_STATE_RUNNING",
		2: "XTRA_DB_BACKUP_STATE_SUCCEEDED",
		3: "XTRA_DB_BACKUP_STATE_FAILED",
	}
	XtraDBBackupState_value = map[string]int32{
		"XTRA_DB_BACKUP_STATE_INVALID":   0,
		"XTRA_DB_BACKUP_STATE_RUNNING":   1,
		"XTRA_DB_BACKUP_STATE_SUCCEEDED": 2,
		"XTRA_DB_BACKUP_STATE_FAILED":    3,
	}
)

func (x XtraDBBackupState) Enum() *XtraDBBackupState {
	p := new(XtraDBBackupState)
	*p = x
	return p
}

func (x XtraDBBackupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtraDBBackupState) Descriptor() protoreflect.EnumDescriptor {
	return file_managementpb_dbaas_xtradb_cluster_proto_enumTypes[1].Descriptor()
}

func (XtraDBBackupState) Type() protoreflect.EnumType {
	return &file_managementpb_dbaas_xtradb_cluster_proto_enumTypes[1]
}

func (x XtraDBBackupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtraDBBackupState.Descriptor instead.
func (XtraDBBackupState) EnumDescriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{1}
}

// RunningOperation respresents a long-running operation.
type RunningOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Progress from 0.0 to 1.0; can decrease compared to the previous value.
	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// Text describing the current operation progress step.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RunningOperation) Reset() {
	*x = RunningOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningOperation) ProtoMessage() {}

func (x *RunningOperation) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningOperation.ProtoReflect.Descriptor instead.
func (*RunningOperation) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *RunningOperation) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *RunningOperation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ComputeResources represents container computer resources requests or limits.
type ComputeResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPUs in milliCPUs; 1000m = 1 vCPU.
	CpuM int32 `protobuf:"varint,1,opt,name=cpu_m,json=cpuM,proto3" json:"cpu_m,omitempty"`
	// Memory in bytes.
	MemoryBytes int64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
}

func (x *ComputeResources) Reset() {
	*x = ComputeResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeResources) ProtoMessage() {}

func (x *ComputeResources) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeResources.ProtoReflect.Descriptor instead.
func (*ComputeResources) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ComputeResources) GetCpuM() int32 {
	if x != nil {
		return x.CpuM
	}
	return 0
}

func (x *ComputeResources) GetMemoryBytes() int64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

// XtraDBClusterParams represents XtraDB cluster parameters that can be updated.
type XtraDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *XtraDBClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// ProxySQL container parameters.
	Proxysql *XtraDBClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
}

func (x *XtraDBClusterParams) Reset() {
	*x = XtraDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams) ProtoMessage() {}

func (x *XtraDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *XtraDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *XtraDBClusterParams) GetPxc() *XtraDBClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *XtraDBClusterParams) GetProxysql() *XtraDBClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

type ListXtraDBClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
}

func (x *ListXtraDBClustersRequest) Reset() {
	*x = ListXtraDBClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersRequest) ProtoMessage() {}

func (x *ListXtraDBClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersRequest.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ListXtraDBClustersRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

type ListXtraDBClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XtraDB clusters information.
	Clusters []*ListXtraDBClustersResponse_Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListXtraDBClustersResponse) Reset() {
	*x = ListXtraDBClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersResponse) ProtoMessage() {}

func (x *ListXtraDBClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersResponse.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *ListXtraDBClustersResponse) GetClusters() []*ListXtraDBClustersResponse_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ShowXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// XtraDB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShowXtraDBClusterRequest) Reset() {
	*x = ShowXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowXtraDBClusterRequest) ProtoMessage() {}

func (x *ShowXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*ShowXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *ShowXtraDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *ShowXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ShowXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State XtraDBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=dbaas.v1beta1.XtraDBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// ProxySQL username.
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// ProxySQL password.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// ProxySQL host.
	Host string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	// ProxySQL port.
	Port int32 `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ShowXtraDBClusterResponse) Reset() {
	*x = ShowXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowXtraDBClusterResponse) ProtoMessage() {}

func (x *ShowXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*ShowXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ShowXtraDBClusterResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowXtraDBClusterResponse) GetState() XtraDBClusterState {
	if x != nil {
		return x.State
	}
	return XtraDBClusterState_XTRA_DB_CLUSTER_STATE_INVALID
}

func (x *ShowXtraDBClusterResponse) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *ShowXtraDBClusterResponse) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ShowXtraDBClusterResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ShowXtraDBClusterResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ShowXtraDBClusterResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ShowXtraDBClusterResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CreateXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// XtraDB cluster name.
	// a DNS-1035 label must consist of lower case alphanumeric characters or '-',
	// start with an alphabetic character, and end with an alphanumeric character
	// (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateXtraDBClusterRequest) Reset() {
	*x = CreateXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXtraDBClusterRequest) ProtoMessage() {}

func (x *CreateXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *CreateXtraDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *CreateXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateXtraDBClusterRequest) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type CreateXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateXtraDBClusterResponse) Reset() {
	*x = CreateXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXtraDBClusterResponse) ProtoMessage() {}

func (x *CreateXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{8}
}

type UpdateXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// XtraDB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateXtraDBClusterRequest) Reset() {
	*x = UpdateXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateXtraDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *UpdateXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateXtraDBClusterRequest) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateXtraDBClusterResponse) Reset() {
	*x = UpdateXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterResponse) ProtoMessage() {}

func (x *UpdateXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{10}
}

type DeleteXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// XtraDB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteXtraDBClusterRequest) Reset() {
	*x = DeleteXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXtraDBClusterRequest) ProtoMessage() {}

func (x *DeleteXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteXtraDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *DeleteXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteXtraDBClusterResponse) Reset() {
	*x = DeleteXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXtraDBClusterResponse) ProtoMessage() {}

func (x *DeleteXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{12}
}

// PXC container parameters.
type XtraDBClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources. Do not pass for minikube.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *XtraDBClusterParams_PXC) Reset() {
	*x = XtraDBClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams_PXC) ProtoMessage() {}

func (x *XtraDBClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{2, 0}
}

func (x *XtraDBClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// ProxySQL container parameters.
type XtraDBClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources. Do not pass for minikube.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *XtraDBClusterParams_ProxySQL) Reset() {
	*x = XtraDBClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams_ProxySQL) ProtoMessage() {}

func (x *XtraDBClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{2, 1}
}

func (x *XtraDBClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// Cluster represents XtraDB cluster information.
type ListXtraDBClustersResponse_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State XtraDBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=dbaas.v1beta1.XtraDBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ListXtraDBClustersResponse_Cluster) Reset() {
	*x = ListXtraDBClustersResponse_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersResponse_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersResponse_Cluster) ProtoMessage() {}

func (x *ListXtraDBClustersResponse_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersResponse_Cluster.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersResponse_Cluster) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListXtraDBClustersResponse_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListXtraDBClustersResponse_Cluster) GetState() XtraDBClusterState {
	if x != nil {
		return x.State
	}
	return XtraDBClusterState_XTRA_DB_CLUSTER_STATE_INVALID
}

func (x *ListXtraDBClustersResponse_Cluster) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *ListXtraDBClustersResponse_Cluster) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_managementpb_dbaas_xtradb_cluster_proto protoreflect.FileDescriptor

var file_managementpb_dbaas_xtradb_cluster_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2f, 0x78, 0x74, 0x72, 0x61, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48,
	0x0a, 0x10, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05,
	0x63, 0x70, 0x75, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x70, 0x75,
	0x4d, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x13, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x70, 0x78, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x58, 0x43, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x70, 0x78, 0x63, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x1a, 0x53, 0x0a, 0x03, 0x50, 0x58,
	0x43, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x58, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x4c, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x58,
	0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xd1, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72,
	0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x76, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc3, 0x02, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x0a, 0x1c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xc2, 0x01, 0x0a, 0x12, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44,
	0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x9c, 0x01, 0x0a,
	0x11, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44,
	0x42, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x58, 0x54,
	0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xbd, 0x06, 0x0a, 0x0d,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x9e, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9b,
	0x01, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x53, 0x68, 0x6f, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x58,
	0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42,
	0x61, 0x61, 0x53, 0x2f, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x25, 0x5a, 0x23, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x3b, 0x64, 0x62, 0x61, 0x61, 0x73, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managementpb_dbaas_xtradb_cluster_proto_rawDescOnce sync.Once
	file_managementpb_dbaas_xtradb_cluster_proto_rawDescData = file_managementpb_dbaas_xtradb_cluster_proto_rawDesc
)

func file_managementpb_dbaas_xtradb_cluster_proto_rawDescGZIP() []byte {
	file_managementpb_dbaas_xtradb_cluster_proto_rawDescOnce.Do(func() {
		file_managementpb_dbaas_xtradb_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_managementpb_dbaas_xtradb_cluster_proto_rawDescData)
	})
	return file_managementpb_dbaas_xtradb_cluster_proto_rawDescData
}

var file_managementpb_dbaas_xtradb_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_managementpb_dbaas_xtradb_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_managementpb_dbaas_xtradb_cluster_proto_goTypes = []interface{}{
	(XtraDBClusterState)(0),                    // 0: dbaas.v1beta1.XtraDBClusterState
	(XtraDBBackupState)(0),                     // 1: dbaas.v1beta1.XtraDBBackupState
	(*RunningOperation)(nil),                   // 2: dbaas.v1beta1.RunningOperation
	(*ComputeResources)(nil),                   // 3: dbaas.v1beta1.ComputeResources
	(*XtraDBClusterParams)(nil),                // 4: dbaas.v1beta1.XtraDBClusterParams
	(*ListXtraDBClustersRequest)(nil),          // 5: dbaas.v1beta1.ListXtraDBClustersRequest
	(*ListXtraDBClustersResponse)(nil),         // 6: dbaas.v1beta1.ListXtraDBClustersResponse
	(*ShowXtraDBClusterRequest)(nil),           // 7: dbaas.v1beta1.ShowXtraDBClusterRequest
	(*ShowXtraDBClusterResponse)(nil),          // 8: dbaas.v1beta1.ShowXtraDBClusterResponse
	(*CreateXtraDBClusterRequest)(nil),         // 9: dbaas.v1beta1.CreateXtraDBClusterRequest
	(*CreateXtraDBClusterResponse)(nil),        // 10: dbaas.v1beta1.CreateXtraDBClusterResponse
	(*UpdateXtraDBClusterRequest)(nil),         // 11: dbaas.v1beta1.UpdateXtraDBClusterRequest
	(*UpdateXtraDBClusterResponse)(nil),        // 12: dbaas.v1beta1.UpdateXtraDBClusterResponse
	(*DeleteXtraDBClusterRequest)(nil),         // 13: dbaas.v1beta1.DeleteXtraDBClusterRequest
	(*DeleteXtraDBClusterResponse)(nil),        // 14: dbaas.v1beta1.DeleteXtraDBClusterResponse
	(*XtraDBClusterParams_PXC)(nil),            // 15: dbaas.v1beta1.XtraDBClusterParams.PXC
	(*XtraDBClusterParams_ProxySQL)(nil),       // 16: dbaas.v1beta1.XtraDBClusterParams.ProxySQL
	(*ListXtraDBClustersResponse_Cluster)(nil), // 17: dbaas.v1beta1.ListXtraDBClustersResponse.Cluster
}
var file_managementpb_dbaas_xtradb_cluster_proto_depIdxs = []int32{
	15, // 0: dbaas.v1beta1.XtraDBClusterParams.pxc:type_name -> dbaas.v1beta1.XtraDBClusterParams.PXC
	16, // 1: dbaas.v1beta1.XtraDBClusterParams.proxysql:type_name -> dbaas.v1beta1.XtraDBClusterParams.ProxySQL
	17, // 2: dbaas.v1beta1.ListXtraDBClustersResponse.clusters:type_name -> dbaas.v1beta1.ListXtraDBClustersResponse.Cluster
	0,  // 3: dbaas.v1beta1.ShowXtraDBClusterResponse.state:type_name -> dbaas.v1beta1.XtraDBClusterState
	2,  // 4: dbaas.v1beta1.ShowXtraDBClusterResponse.operation:type_name -> dbaas.v1beta1.RunningOperation
	4,  // 5: dbaas.v1beta1.ShowXtraDBClusterResponse.params:type_name -> dbaas.v1beta1.XtraDBClusterParams
	4,  // 6: dbaas.v1beta1.CreateXtraDBClusterRequest.params:type_name -> dbaas.v1beta1.XtraDBClusterParams
	4,  // 7: dbaas.v1beta1.UpdateXtraDBClusterRequest.params:type_name -> dbaas.v1beta1.XtraDBClusterParams
	3,  // 8: dbaas.v1beta1.XtraDBClusterParams.PXC.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	3,  // 9: dbaas.v1beta1.XtraDBClusterParams.ProxySQL.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	0,  // 10: dbaas.v1beta1.ListXtraDBClustersResponse.Cluster.state:type_name -> dbaas.v1beta1.XtraDBClusterState
	2,  // 11: dbaas.v1beta1.ListXtraDBClustersResponse.Cluster.operation:type_name -> dbaas.v1beta1.RunningOperation
	4,  // 12: dbaas.v1beta1.ListXtraDBClustersResponse.Cluster.params:type_name -> dbaas.v1beta1.XtraDBClusterParams
	5,  // 13: dbaas.v1beta1.XtraDBCluster.ListXtraDBClusters:input_type -> dbaas.v1beta1.ListXtraDBClustersRequest
	7,  // 14: dbaas.v1beta1.XtraDBCluster.ShowXtraDBCluster:input_type -> dbaas.v1beta1.ShowXtraDBClusterRequest
	9,  // 15: dbaas.v1beta1.XtraDBCluster.CreateXtraDBCluster:input_type -> dbaas.v1beta1.CreateXtraDBClusterRequest
	11, // 16: dbaas.v1beta1.XtraDBCluster.UpdateXtraDBCluster:input_type -> dbaas.v1beta1.UpdateXtraDBClusterRequest
	13, // 17: dbaas.v1beta1.XtraDBCluster.DeleteXtraDBCluster:input_type -> dbaas.v1beta1.DeleteXtraDBClusterRequest
	6,  // 18: dbaas.v1beta1.XtraDBCluster.ListXtraDBClusters:output_type -> dbaas.v1beta1.ListXtraDBClustersResponse
	8,  // 19: dbaas.v1beta1.XtraDBCluster.ShowXtraDBCluster:output_type -> dbaas.v1beta1.ShowXtraDBClusterResponse
	10, // 20: dbaas.v1beta1.XtraDBCluster.CreateXtraDBCluster:output_type -> dbaas.v1beta1.CreateXtraDBClusterResponse
	12, // 21: dbaas.v1beta1.XtraDBCluster.UpdateXtraDBCluster:output_type -> dbaas.v1beta1.UpdateXtraDBClusterResponse
	14, // 22: dbaas.v1beta1.XtraDBCluster.DeleteXtraDBCluster:output_type -> dbaas.v1beta1.DeleteXtraDBClusterResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_managementpb_dbaas_xtradb_cluster_proto_init() }
func file_managementpb_dbaas_xtradb_cluster_proto_init() {
	if File_managementpb_dbaas_xtradb_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_xtradb_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersResponse_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managementpb_dbaas_xtradb_cluster_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managementpb_dbaas_xtradb_cluster_proto_goTypes,
		DependencyIndexes: file_managementpb_dbaas_xtradb_cluster_proto_depIdxs,
		EnumInfos:         file_managementpb_dbaas_xtradb_cluster_proto_enumTypes,
		MessageInfos:      file_managementpb_dbaas_xtradb_cluster_proto_msgTypes,
	}.Build()
	File_managementpb_dbaas_xtradb_cluster_proto = out.File
	file_managementpb_dbaas_xtradb_cluster_proto_rawDesc = nil
	file_managementpb_dbaas_xtradb_cluster_proto_goTypes = nil
	file_managementpb_dbaas_xtradb_cluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XtraDBClusterClient is the client API for XtraDBCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XtraDBClusterClient interface {
	// ListXtraDBClusters returns a list of XtraDB clusters.
	ListXtraDBClusters(ctx context.Context, in *ListXtraDBClustersRequest, opts ...grpc.CallOption) (*ListXtraDBClustersResponse, error)
	// ShowXtraDBCluster returns a XtraDB cluster by name.
	ShowXtraDBCluster(ctx context.Context, in *ShowXtraDBClusterRequest, opts ...grpc.CallOption) (*ShowXtraDBClusterResponse, error)
	// CreateXtraDBCluster creates a new XtraDB cluster.
	CreateXtraDBCluster(ctx context.Context, in *CreateXtraDBClusterRequest, opts ...grpc.CallOption) (*CreateXtraDBClusterResponse, error)
	// UpdateXtraDBCluster updates existing XtraDB cluster.
	UpdateXtraDBCluster(ctx context.Context, in *UpdateXtraDBClusterRequest, opts ...grpc.CallOption) (*UpdateXtraDBClusterResponse, error)
	// DeleteXtraDBCluster deletes XtraDB cluster.
	DeleteXtraDBCluster(ctx context.Context, in *DeleteXtraDBClusterRequest, opts ...grpc.CallOption) (*DeleteXtraDBClusterResponse, error)
}

type xtraDBClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewXtraDBClusterClient(cc grpc.ClientConnInterface) XtraDBClusterClient {
	return &xtraDBClusterClient{cc}
}

func (c *xtraDBClusterClient) ListXtraDBClusters(ctx context.Context, in *ListXtraDBClustersRequest, opts ...grpc.CallOption) (*ListXtraDBClustersResponse, error) {
	out := new(ListXtraDBClustersResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.XtraDBCluster/ListXtraDBClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterClient) ShowXtraDBCluster(ctx context.Context, in *ShowXtraDBClusterRequest, opts ...grpc.CallOption) (*ShowXtraDBClusterResponse, error) {
	out := new(ShowXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.XtraDBCluster/ShowXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterClient) CreateXtraDBCluster(ctx context.Context, in *CreateXtraDBClusterRequest, opts ...grpc.CallOption) (*CreateXtraDBClusterResponse, error) {
	out := new(CreateXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.XtraDBCluster/CreateXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterClient) UpdateXtraDBCluster(ctx context.Context, in *UpdateXtraDBClusterRequest, opts ...grpc.CallOption) (*UpdateXtraDBClusterResponse, error) {
	out := new(UpdateXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.XtraDBCluster/UpdateXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterClient) DeleteXtraDBCluster(ctx context.Context, in *DeleteXtraDBClusterRequest, opts ...grpc.CallOption) (*DeleteXtraDBClusterResponse, error) {
	out := new(DeleteXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.XtraDBCluster/DeleteXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XtraDBClusterServer is the server API for XtraDBCluster service.
type XtraDBClusterServer interface {
	// ListXtraDBClusters returns a list of XtraDB clusters.
	ListXtraDBClusters(context.Context, *ListXtraDBClustersRequest) (*ListXtraDBClustersResponse, error)
	// ShowXtraDBCluster returns a XtraDB cluster by name.
	ShowXtraDBCluster(context.Context, *ShowXtraDBClusterRequest) (*ShowXtraDBClusterResponse, error)
	// CreateXtraDBCluster creates a new XtraDB cluster.
	CreateXtraDBCluster(context.Context, *CreateXtraDBClusterRequest) (*CreateXtraDBClusterResponse, error)
	// UpdateXtraDBCluster updates existing XtraDB cluster.
	UpdateXtraDBCluster(context.Context, *UpdateXtraDBClusterRequest) (*UpdateXtraDBClusterResponse, error)
	// DeleteXtraDBCluster deletes XtraDB cluster.
	DeleteXtraDBCluster(context.Context, *DeleteXtraDBClusterRequest) (*DeleteXtraDBClusterResponse, error)
}

// UnimplementedXtraDBClusterServer can be embedded to have forward compatible implementations.
type UnimplementedXtraDBClusterServer struct {
}

func (*UnimplementedXtraDBClusterServer) ListXtraDBClusters(context.Context, *ListXtraDBClustersRequest) (*ListXtraDBClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXtraDBClusters not implemented")
}
func (*UnimplementedXtraDBClusterServer) ShowXtraDBCluster(context.Context, *ShowXtraDBClusterRequest) (*ShowXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterServer) CreateXtraDBCluster(context.Context, *CreateXtraDBClusterRequest) (*CreateXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterServer) UpdateXtraDBCluster(context.Context, *UpdateXtraDBClusterRequest) (*UpdateXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterServer) DeleteXtraDBCluster(context.Context, *DeleteXtraDBClusterRequest) (*DeleteXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXtraDBCluster not implemented")
}

func RegisterXtraDBClusterServer(s *grpc.Server, srv XtraDBClusterServer) {
	s.RegisterService(&_XtraDBCluster_serviceDesc, srv)
}

func _XtraDBCluster_ListXtraDBClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXtraDBClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterServer).ListXtraDBClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.XtraDBCluster/ListXtraDBClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterServer).ListXtraDBClusters(ctx, req.(*ListXtraDBClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBCluster_ShowXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterServer).ShowXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.XtraDBCluster/ShowXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterServer).ShowXtraDBCluster(ctx, req.(*ShowXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBCluster_CreateXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterServer).CreateXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.XtraDBCluster/CreateXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterServer).CreateXtraDBCluster(ctx, req.(*CreateXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBCluster_UpdateXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterServer).UpdateXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.XtraDBCluster/UpdateXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterServer).UpdateXtraDBCluster(ctx, req.(*UpdateXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBCluster_DeleteXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterServer).DeleteXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.XtraDBCluster/DeleteXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterServer).DeleteXtraDBCluster(ctx, req.(*DeleteXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _XtraDBCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbaas.v1beta1.XtraDBCluster",
	HandlerType: (*XtraDBClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListXtraDBClusters",
			Handler:    _XtraDBCluster_ListXtraDBClusters_Handler,
		},
		{
			MethodName: "ShowXtraDBCluster",
			Handler:    _XtraDBCluster_ShowXtraDBCluster_Handler,
		},
		{
			MethodName: "CreateXtraDBCluster",
			Handler:    _XtraDBCluster_CreateXtraDBCluster_Handler,
		},
		{
			MethodName: "UpdateXtraDBCluster",
			Handler:    _XtraDBCluster_UpdateXtraDBCluster_Handler,
		},
		{
			MethodName: "DeleteXtraDBCluster",
			Handler:    _XtraDBCluster_DeleteXtraDBCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/dbaas/xtradb_cluster.proto",
}
