syntax = "proto3";

package dbaas.v1beta1;

import "google/api/annotations.proto";
import "managementpb/dbaas/dbaas.proto";
import "managementpb/dbaas/templates.proto";
import "validate/validate.proto";

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

// PostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
message PostgresqlClusterParams {
  // Instance container parameters.
  // TODO Do not use inner messages in all public APIs (for consistency).
  message Instance {
    // Docker image used for Instance.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1;
    // Disk size in bytes.
    int64 disk_size = 2;
    // Configuration for Postgresql cluster
    string configuration = 4;
    // Storage Class for Postgresql cluster.
    string storage_class = 5;
  }
  // PGBouncer container parameters.
  // TODO Do not use inner messages in all public APIs (for consistency).
  message PGBouncer {
    // Docker image used for PGBouncer.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1;
    // Disk size in bytes.
    int64 disk_size = 2;
  }
  // Cluster size.
  int32 cluster_size = 1;
  // Instance container parameters.
  Instance instance = 2;
  // PGBouncer container parameters.
  PGBouncer pgbouncer = 3;
  // Backup configuration parameters.
  Backup backup = 4;
  // Restore configuration parameters.
  Restore restore = 5;
}

message GetPostgresqlClusterCredentialsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // Postgresql cluster name.
  string name = 2 [(validate.rules).string.min_len = 1];
}

// PostgresqlClusterConnectionCredentials is cluster connection credentials.
message PostgresqlClusterConnectionCredentials {
  // Postgresql username.
  string username = 1;
  // Postgresql password.
  string password = 2;
  // Postgresql host.
  string host = 3;
  // Postgresql port.
  int32 port = 4;
}

message GetPostgresqlClusterCredentialsResponse {
  // Cluster connection credentials.
  PostgresqlClusterConnectionCredentials connection_credentials = 1;
}

message CreatePostgresqlClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // Postgresql cluster name.
  // a DNS-1035 label must consist of lower case alphanumeric characters or '-',
  // start with an alphabetic character, and end with an alphanumeric character
  // (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
  string name = 2;
  // Cluster parameters.
  PostgresqlClusterParams params = 3;
  // Make DB cluster accessible outside of K8s cluster.
  bool expose = 4;
  // Make DB cluster accessible via public internet.
  bool internet_facing = 5;
  // Apply IP source ranges against the cluster.
  repeated string source_ranges = 6;
  // Configuration template.
  Template template = 7;
}

message CreatePostgresqlClusterResponse {}

message UpdatePostgresqlClusterRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [(validate.rules).string.min_len = 1];
  // Postgresql cluster name.
  string name = 2 [(validate.rules).string.min_len = 1];
  // UpdatePostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
  message UpdatePostgresqlClusterParams {
    // Instance container parameters.
    message Instance {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
      // Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
      // in given tag is triggered. If entirely different image is given, error is returned.
      string image = 2;
      // Configuration for Postgresql cluster
      string configuration = 4;
      // Storage Class for Postgresql cluster.
      string storage_class = 5;
    }
    // PGBouncer container parameters.
    message PGBouncer {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // Cluster size.
    int32 cluster_size = 1;
    // Instance container parameters.
    Instance instance = 2;
    // PGBouncer container parameters.
    PGBouncer pgbouncer = 3;
    // Suspend cluster `pause: true`.
    bool suspend = 4;
    // Resume cluster `pause: false`.
    bool resume = 5;
  }
  // Cluster parameters.
  UpdatePostgresqlClusterParams params = 3;
  // Make DB cluster accessible outside of K8s cluster.
  bool expose = 4;
  // Make DB cluster accessible via public internet.
  bool internet_facing = 5;
  // Apply IP source ranges against the cluster.
  repeated string source_ranges = 6;
  // Configuration template.
  Template template = 7;
}

message UpdatePostgresqlClusterResponse {}

message GetPostgresqlClusterResourcesRequest {
  // Cluster parameters.
  PostgresqlClusterParams params = 1 [(validate.rules).message.required = true];
}

message GetPostgresqlClusterResourcesResponse {
  // Expected resources to be consumed by the cluster.
  Resources expected = 1;
}

// PostgresqlClusters service provides public methods for managing Postgresql clusters.
service PostgresqlClusters {
  // GetPostgresqlClusterCredentials returns a Postgresql cluster credentials by cluster name.
  rpc GetPostgresqlClusterCredentials(GetPostgresqlClusterCredentialsRequest) returns (GetPostgresqlClusterCredentialsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PostgresqlCluster/GetCredentials"
      body: "*"
    };
  }
  // CreatePostgresqlCluster creates a new Postgresql cluster.
  rpc CreatePostgresqlCluster(CreatePostgresqlClusterRequest) returns (CreatePostgresqlClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PostgresqlCluster/Create"
      body: "*"
    };
  }
  // UpdatePostgresqlCluster updates existing Postgresql cluster.
  rpc UpdatePostgresqlCluster(UpdatePostgresqlClusterRequest) returns (UpdatePostgresqlClusterResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PostgresqlCluster/Update"
      body: "*"
    };
  }
  // GetPostgresqlClusterResources returns expected resources to be consumed by the cluster.
  rpc GetPostgresqlClusterResources(GetPostgresqlClusterResourcesRequest) returns (GetPostgresqlClusterResourcesResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/PostgresqlCluster/Resources/Get"
      body: "*"
    };
  }
}
