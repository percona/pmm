// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: managementpb/dbaas/postgresql_clusters.proto

package dbaasv1beta1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
type PostgresqlClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// Instance container parameters.
	Instance *PostgresqlClusterParams_Instance `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// PGBouncer container parameters.
	Pgbouncer *PostgresqlClusterParams_PGBouncer `protobuf:"bytes,3,opt,name=pgbouncer,proto3" json:"pgbouncer,omitempty"`
	// Backup configuration parameters.
	Backup *Backup `protobuf:"bytes,4,opt,name=backup,proto3" json:"backup,omitempty"`
	// Restore configuration parameters.
	Restore *Restore `protobuf:"bytes,5,opt,name=restore,proto3" json:"restore,omitempty"`
}

func (x *PostgresqlClusterParams) Reset() {
	*x = PostgresqlClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlClusterParams) ProtoMessage() {}

func (x *PostgresqlClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlClusterParams.ProtoReflect.Descriptor instead.
func (*PostgresqlClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresqlClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *PostgresqlClusterParams) GetInstance() *PostgresqlClusterParams_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *PostgresqlClusterParams) GetPgbouncer() *PostgresqlClusterParams_PGBouncer {
	if x != nil {
		return x.Pgbouncer
	}
	return nil
}

func (x *PostgresqlClusterParams) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *PostgresqlClusterParams) GetRestore() *Restore {
	if x != nil {
		return x.Restore
	}
	return nil
}

type GetPostgresqlClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// Postgresql cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPostgresqlClusterCredentialsRequest) Reset() {
	*x = GetPostgresqlClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostgresqlClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostgresqlClusterCredentialsRequest) ProtoMessage() {}

func (x *GetPostgresqlClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostgresqlClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetPostgresqlClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *GetPostgresqlClusterCredentialsRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *GetPostgresqlClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PostgresqlClusterConnectionCredentials is cluster connection credentials.
type PostgresqlClusterConnectionCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Postgresql username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Postgresql password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Postgresql host.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Postgresql port.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PostgresqlClusterConnectionCredentials) Reset() {
	*x = PostgresqlClusterConnectionCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlClusterConnectionCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlClusterConnectionCredentials) ProtoMessage() {}

func (x *PostgresqlClusterConnectionCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlClusterConnectionCredentials.ProtoReflect.Descriptor instead.
func (*PostgresqlClusterConnectionCredentials) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *PostgresqlClusterConnectionCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostgresqlClusterConnectionCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresqlClusterConnectionCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresqlClusterConnectionCredentials) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetPostgresqlClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster connection credentials.
	ConnectionCredentials *PostgresqlClusterConnectionCredentials `protobuf:"bytes,1,opt,name=connection_credentials,json=connectionCredentials,proto3" json:"connection_credentials,omitempty"`
}

func (x *GetPostgresqlClusterCredentialsResponse) Reset() {
	*x = GetPostgresqlClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostgresqlClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostgresqlClusterCredentialsResponse) ProtoMessage() {}

func (x *GetPostgresqlClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostgresqlClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetPostgresqlClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *GetPostgresqlClusterCredentialsResponse) GetConnectionCredentials() *PostgresqlClusterConnectionCredentials {
	if x != nil {
		return x.ConnectionCredentials
	}
	return nil
}

type CreatePostgresqlClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// Postgresql cluster name.
	// a DNS-1035 label must consist of lower case alphanumeric characters or '-',
	// start with an alphabetic character, and end with an alphanumeric character
	// (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *PostgresqlClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,4,opt,name=expose,proto3" json:"expose,omitempty"`
	// Make DB cluster accessible via public internet.
	InternetFacing bool `protobuf:"varint,5,opt,name=internet_facing,json=internetFacing,proto3" json:"internet_facing,omitempty"`
	// Apply IP source ranges against the cluster.
	SourceRanges []string `protobuf:"bytes,6,rep,name=source_ranges,json=sourceRanges,proto3" json:"source_ranges,omitempty"`
	// Configuration template.
	Template *Template `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CreatePostgresqlClusterRequest) Reset() {
	*x = CreatePostgresqlClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostgresqlClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostgresqlClusterRequest) ProtoMessage() {}

func (x *CreatePostgresqlClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostgresqlClusterRequest.ProtoReflect.Descriptor instead.
func (*CreatePostgresqlClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePostgresqlClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *CreatePostgresqlClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePostgresqlClusterRequest) GetParams() *PostgresqlClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreatePostgresqlClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

func (x *CreatePostgresqlClusterRequest) GetInternetFacing() bool {
	if x != nil {
		return x.InternetFacing
	}
	return false
}

func (x *CreatePostgresqlClusterRequest) GetSourceRanges() []string {
	if x != nil {
		return x.SourceRanges
	}
	return nil
}

func (x *CreatePostgresqlClusterRequest) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreatePostgresqlClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePostgresqlClusterResponse) Reset() {
	*x = CreatePostgresqlClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostgresqlClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostgresqlClusterResponse) ProtoMessage() {}

func (x *CreatePostgresqlClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostgresqlClusterResponse.ProtoReflect.Descriptor instead.
func (*CreatePostgresqlClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{5}
}

type UpdatePostgresqlClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// Postgresql cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,4,opt,name=expose,proto3" json:"expose,omitempty"`
	// Make DB cluster accessible via public internet.
	InternetFacing bool `protobuf:"varint,5,opt,name=internet_facing,json=internetFacing,proto3" json:"internet_facing,omitempty"`
	// Apply IP source ranges against the cluster.
	SourceRanges []string `protobuf:"bytes,6,rep,name=source_ranges,json=sourceRanges,proto3" json:"source_ranges,omitempty"`
	// Configuration template.
	Template *Template `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *UpdatePostgresqlClusterRequest) Reset() {
	*x = UpdatePostgresqlClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresqlClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresqlClusterRequest) ProtoMessage() {}

func (x *UpdatePostgresqlClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresqlClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePostgresqlClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePostgresqlClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *UpdatePostgresqlClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePostgresqlClusterRequest) GetParams() *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdatePostgresqlClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

func (x *UpdatePostgresqlClusterRequest) GetInternetFacing() bool {
	if x != nil {
		return x.InternetFacing
	}
	return false
}

func (x *UpdatePostgresqlClusterRequest) GetSourceRanges() []string {
	if x != nil {
		return x.SourceRanges
	}
	return nil
}

func (x *UpdatePostgresqlClusterRequest) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type UpdatePostgresqlClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePostgresqlClusterResponse) Reset() {
	*x = UpdatePostgresqlClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresqlClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresqlClusterResponse) ProtoMessage() {}

func (x *UpdatePostgresqlClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresqlClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePostgresqlClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{7}
}

type GetPostgresqlClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster parameters.
	Params *PostgresqlClusterParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GetPostgresqlClusterResourcesRequest) Reset() {
	*x = GetPostgresqlClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostgresqlClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostgresqlClusterResourcesRequest) ProtoMessage() {}

func (x *GetPostgresqlClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostgresqlClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetPostgresqlClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *GetPostgresqlClusterResourcesRequest) GetParams() *PostgresqlClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetPostgresqlClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected resources to be consumed by the cluster.
	Expected *Resources `protobuf:"bytes,1,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *GetPostgresqlClusterResourcesResponse) Reset() {
	*x = GetPostgresqlClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostgresqlClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostgresqlClusterResourcesResponse) ProtoMessage() {}

func (x *GetPostgresqlClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostgresqlClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetPostgresqlClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{9}
}

func (x *GetPostgresqlClusterResourcesResponse) GetExpected() *Resources {
	if x != nil {
		return x.Expected
	}
	return nil
}

// Instance container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
type PostgresqlClusterParams_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for Instance.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Configuration for Postgresql cluster
	Configuration string `protobuf:"bytes,4,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Storage Class for Postgresql cluster.
	StorageClass string `protobuf:"bytes,5,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
}

func (x *PostgresqlClusterParams_Instance) Reset() {
	*x = PostgresqlClusterParams_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlClusterParams_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlClusterParams_Instance) ProtoMessage() {}

func (x *PostgresqlClusterParams_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlClusterParams_Instance.ProtoReflect.Descriptor instead.
func (*PostgresqlClusterParams_Instance) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PostgresqlClusterParams_Instance) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PostgresqlClusterParams_Instance) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *PostgresqlClusterParams_Instance) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *PostgresqlClusterParams_Instance) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *PostgresqlClusterParams_Instance) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

// PGBouncer container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
type PostgresqlClusterParams_PGBouncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for PGBouncer.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *PostgresqlClusterParams_PGBouncer) Reset() {
	*x = PostgresqlClusterParams_PGBouncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlClusterParams_PGBouncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlClusterParams_PGBouncer) ProtoMessage() {}

func (x *PostgresqlClusterParams_PGBouncer) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlClusterParams_PGBouncer.ProtoReflect.Descriptor instead.
func (*PostgresqlClusterParams_PGBouncer) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PostgresqlClusterParams_PGBouncer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PostgresqlClusterParams_PGBouncer) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *PostgresqlClusterParams_PGBouncer) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// UpdatePostgresqlClusterParams represents Postgresql cluster parameters that can be updated.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// Instance container parameters.
	Instance *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// PGBouncer container parameters.
	Pgbouncer *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer `protobuf:"bytes,3,opt,name=pgbouncer,proto3" json:"pgbouncer,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,4,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) Reset() {
	*x = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) ProtoMessage() {}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams.ProtoReflect.Descriptor instead.
func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) GetInstance() *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) GetPgbouncer() *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer {
	if x != nil {
		return x.Pgbouncer
	}
	return nil
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

// Instance container parameters.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
	// in given tag is triggered. If entirely different image is given, error is returned.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Configuration for Postgresql cluster
	Configuration string `protobuf:"bytes,4,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Storage Class for Postgresql cluster.
	StorageClass string `protobuf:"bytes,5,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) Reset() {
	*x = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) ProtoMessage() {}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance.ProtoReflect.Descriptor instead.
func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

// PGBouncer container parameters.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) Reset() {
	*x = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) ProtoMessage() {}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer.ProtoReflect.Descriptor instead.
func (*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_managementpb_dbaas_postgresql_clusters_proto protoreflect.FileDescriptor

var file_managementpb_dbaas_postgresql_clusters_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2f,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x05, 0x0a, 0x17, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x50, 0x47, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0xd6, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x8c,
	0x01, 0x0a, 0x09, 0x50, 0x47, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x26, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x97, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x21,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf3, 0x07, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x1a, 0xf2, 0x04, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x70, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x09, 0x70, 0x67, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x47, 0x42, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x1a, 0xb9, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x59, 0x0a, 0x09,
	0x50, 0x47, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xa1, 0x06, 0x0a, 0x12,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x35, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a,
	0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42,
	0x61, 0x61, 0x53, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a,
	0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0xcb, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x42,
	0xbd, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x3b,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x44,
	0x58, 0x58, 0xaa, 0x02, 0x0d, 0x44, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xca, 0x02, 0x0d, 0x44, 0x62, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xe2, 0x02, 0x19, 0x44, 0x62, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0e, 0x44, 0x62, 0x61, 0x61, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managementpb_dbaas_postgresql_clusters_proto_rawDescOnce sync.Once
	file_managementpb_dbaas_postgresql_clusters_proto_rawDescData = file_managementpb_dbaas_postgresql_clusters_proto_rawDesc
)

func file_managementpb_dbaas_postgresql_clusters_proto_rawDescGZIP() []byte {
	file_managementpb_dbaas_postgresql_clusters_proto_rawDescOnce.Do(func() {
		file_managementpb_dbaas_postgresql_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_managementpb_dbaas_postgresql_clusters_proto_rawDescData)
	})
	return file_managementpb_dbaas_postgresql_clusters_proto_rawDescData
}

var (
	file_managementpb_dbaas_postgresql_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
	file_managementpb_dbaas_postgresql_clusters_proto_goTypes  = []interface{}{
		(*PostgresqlClusterParams)(nil),                                                // 0: dbaas.v1beta1.PostgresqlClusterParams
		(*GetPostgresqlClusterCredentialsRequest)(nil),                                 // 1: dbaas.v1beta1.GetPostgresqlClusterCredentialsRequest
		(*PostgresqlClusterConnectionCredentials)(nil),                                 // 2: dbaas.v1beta1.PostgresqlClusterConnectionCredentials
		(*GetPostgresqlClusterCredentialsResponse)(nil),                                // 3: dbaas.v1beta1.GetPostgresqlClusterCredentialsResponse
		(*CreatePostgresqlClusterRequest)(nil),                                         // 4: dbaas.v1beta1.CreatePostgresqlClusterRequest
		(*CreatePostgresqlClusterResponse)(nil),                                        // 5: dbaas.v1beta1.CreatePostgresqlClusterResponse
		(*UpdatePostgresqlClusterRequest)(nil),                                         // 6: dbaas.v1beta1.UpdatePostgresqlClusterRequest
		(*UpdatePostgresqlClusterResponse)(nil),                                        // 7: dbaas.v1beta1.UpdatePostgresqlClusterResponse
		(*GetPostgresqlClusterResourcesRequest)(nil),                                   // 8: dbaas.v1beta1.GetPostgresqlClusterResourcesRequest
		(*GetPostgresqlClusterResourcesResponse)(nil),                                  // 9: dbaas.v1beta1.GetPostgresqlClusterResourcesResponse
		(*PostgresqlClusterParams_Instance)(nil),                                       // 10: dbaas.v1beta1.PostgresqlClusterParams.Instance
		(*PostgresqlClusterParams_PGBouncer)(nil),                                      // 11: dbaas.v1beta1.PostgresqlClusterParams.PGBouncer
		(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams)(nil),           // 12: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams
		(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance)(nil),  // 13: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.Instance
		(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer)(nil), // 14: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.PGBouncer
		(*Backup)(nil),           // 15: dbaas.v1beta1.Backup
		(*Restore)(nil),          // 16: dbaas.v1beta1.Restore
		(*Template)(nil),         // 17: dbaas.v1beta1.Template
		(*Resources)(nil),        // 18: dbaas.v1beta1.Resources
		(*ComputeResources)(nil), // 19: dbaas.v1beta1.ComputeResources
	}
)

var file_managementpb_dbaas_postgresql_clusters_proto_depIdxs = []int32{
	10, // 0: dbaas.v1beta1.PostgresqlClusterParams.instance:type_name -> dbaas.v1beta1.PostgresqlClusterParams.Instance
	11, // 1: dbaas.v1beta1.PostgresqlClusterParams.pgbouncer:type_name -> dbaas.v1beta1.PostgresqlClusterParams.PGBouncer
	15, // 2: dbaas.v1beta1.PostgresqlClusterParams.backup:type_name -> dbaas.v1beta1.Backup
	16, // 3: dbaas.v1beta1.PostgresqlClusterParams.restore:type_name -> dbaas.v1beta1.Restore
	2,  // 4: dbaas.v1beta1.GetPostgresqlClusterCredentialsResponse.connection_credentials:type_name -> dbaas.v1beta1.PostgresqlClusterConnectionCredentials
	0,  // 5: dbaas.v1beta1.CreatePostgresqlClusterRequest.params:type_name -> dbaas.v1beta1.PostgresqlClusterParams
	17, // 6: dbaas.v1beta1.CreatePostgresqlClusterRequest.template:type_name -> dbaas.v1beta1.Template
	12, // 7: dbaas.v1beta1.UpdatePostgresqlClusterRequest.params:type_name -> dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams
	17, // 8: dbaas.v1beta1.UpdatePostgresqlClusterRequest.template:type_name -> dbaas.v1beta1.Template
	0,  // 9: dbaas.v1beta1.GetPostgresqlClusterResourcesRequest.params:type_name -> dbaas.v1beta1.PostgresqlClusterParams
	18, // 10: dbaas.v1beta1.GetPostgresqlClusterResourcesResponse.expected:type_name -> dbaas.v1beta1.Resources
	19, // 11: dbaas.v1beta1.PostgresqlClusterParams.Instance.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 12: dbaas.v1beta1.PostgresqlClusterParams.PGBouncer.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	13, // 13: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.instance:type_name -> dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.Instance
	14, // 14: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.pgbouncer:type_name -> dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.PGBouncer
	19, // 15: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.Instance.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 16: dbaas.v1beta1.UpdatePostgresqlClusterRequest.UpdatePostgresqlClusterParams.PGBouncer.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	1,  // 17: dbaas.v1beta1.PostgresqlClusters.GetPostgresqlClusterCredentials:input_type -> dbaas.v1beta1.GetPostgresqlClusterCredentialsRequest
	4,  // 18: dbaas.v1beta1.PostgresqlClusters.CreatePostgresqlCluster:input_type -> dbaas.v1beta1.CreatePostgresqlClusterRequest
	6,  // 19: dbaas.v1beta1.PostgresqlClusters.UpdatePostgresqlCluster:input_type -> dbaas.v1beta1.UpdatePostgresqlClusterRequest
	8,  // 20: dbaas.v1beta1.PostgresqlClusters.GetPostgresqlClusterResources:input_type -> dbaas.v1beta1.GetPostgresqlClusterResourcesRequest
	3,  // 21: dbaas.v1beta1.PostgresqlClusters.GetPostgresqlClusterCredentials:output_type -> dbaas.v1beta1.GetPostgresqlClusterCredentialsResponse
	5,  // 22: dbaas.v1beta1.PostgresqlClusters.CreatePostgresqlCluster:output_type -> dbaas.v1beta1.CreatePostgresqlClusterResponse
	7,  // 23: dbaas.v1beta1.PostgresqlClusters.UpdatePostgresqlCluster:output_type -> dbaas.v1beta1.UpdatePostgresqlClusterResponse
	9,  // 24: dbaas.v1beta1.PostgresqlClusters.GetPostgresqlClusterResources:output_type -> dbaas.v1beta1.GetPostgresqlClusterResourcesResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_managementpb_dbaas_postgresql_clusters_proto_init() }
func file_managementpb_dbaas_postgresql_clusters_proto_init() {
	if File_managementpb_dbaas_postgresql_clusters_proto != nil {
		return
	}
	file_managementpb_dbaas_dbaas_proto_init()
	file_managementpb_dbaas_templates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostgresqlClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlClusterConnectionCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostgresqlClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostgresqlClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostgresqlClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresqlClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresqlClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostgresqlClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostgresqlClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlClusterParams_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlClusterParams_PGBouncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_postgresql_clusters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managementpb_dbaas_postgresql_clusters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managementpb_dbaas_postgresql_clusters_proto_goTypes,
		DependencyIndexes: file_managementpb_dbaas_postgresql_clusters_proto_depIdxs,
		MessageInfos:      file_managementpb_dbaas_postgresql_clusters_proto_msgTypes,
	}.Build()
	File_managementpb_dbaas_postgresql_clusters_proto = out.File
	file_managementpb_dbaas_postgresql_clusters_proto_rawDesc = nil
	file_managementpb_dbaas_postgresql_clusters_proto_goTypes = nil
	file_managementpb_dbaas_postgresql_clusters_proto_depIdxs = nil
}
