syntax = "proto3";

package dbaas.v1beta1;

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

// RunningOperation respresents a long-running operation.
message RunningOperation {
  // Finished steps of the operaion; can decrease or increase compared to the previous value.
  int32 finished_steps = 1;
  // Text describing the current operation progress step.
  string message = 2;
  // Total steps needed to finish the operation; can decrease or increase compared to the previous value.
  int32 total_steps = 3;
}

// ComputeResources represents container computer resources requests or limits.
message ComputeResources {
  // CPUs in milliCPUs; 1000m = 1 vCPU.
  int32 cpu_m = 1;
  // Memory in bytes.
  int64 memory_bytes = 2;
}

// Backup configuration for a database cluster
message Backup {
  // Backup Location id of stored backup location in PMM.
  string location_id = 1;
  // Keep copies represents how many copies should retain.
  int32 keep_copies = 2;
  // Cron expression represents cron expression
  string cron_expression = 3;
  // Service acccount used for backups
  string service_account = 4;
}

// Restore represents restoration payload to restore a database cluster from backup
message Restore {
  // Backup location in PMM.
  string location_id = 1;
  // Destination filename.
  string destination = 2;
  // K8s Secrets name.
  string secrets_name = 3;
}

// Resources contains Kubernetes cluster resources.
message Resources {
  // Memory in bytes.
  uint64 memory_bytes = 1;
  // CPU in millicpus. For example 0.1 of CPU is equivalent to 100 millicpus.
  // See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
  uint64 cpu_m = 2;
  // Disk size in bytes.
  uint64 disk_size = 3;
}

// DBClusterType represents database cluster type.
enum DBClusterType {
  // DB_CLUSTER_TYPE_INVALID represents unknown cluster type.
  DB_CLUSTER_TYPE_INVALID = 0;
  // DB_CLUSTER_TYPE_PXC represents pxc cluster type.
  DB_CLUSTER_TYPE_PXC = 1;
  // DB_CLUSTER_TYPE_PSMDB represents psmdb cluster type.
  DB_CLUSTER_TYPE_PSMDB = 2;
  // DB_CLUSTER_TYPE_POSTGRESQL represents postgresql cluster type.
  DB_CLUSTER_TYPE_POSTGRESQL = 3;
}

// OperatorsStatus defines status of operators installed in Kubernetes cluster.
enum OperatorsStatus {
  // OPERATORS_STATUS_INVALID represents unknown state.
  OPERATORS_STATUS_INVALID = 0;
  // OPERATORS_STATUS_OK represents that operators are installed and have supported API version.
  OPERATORS_STATUS_OK = 1;
  // OPERATORS_STATUS_UNSUPPORTED represents that operators are installed, but doesn't have supported API version.
  OPERATORS_STATUS_UNSUPPORTED = 2;
  // OPERATORS_STATUS_NOT_INSTALLED represents that operators are not installed.
  OPERATORS_STATUS_NOT_INSTALLED = 3;
}
