// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: managementpb/dbaas/components.proto

package dbaasv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentsClient is the client API for Components service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentsClient interface {
	// GetPSMDBComponents returns list of available components for PSMDB Clusters.
	GetPSMDBComponents(ctx context.Context, in *GetPSMDBComponentsRequest, opts ...grpc.CallOption) (*GetPSMDBComponentsResponse, error)
	// GetPXCComponents returns list of available components for PXC Clusters.
	GetPXCComponents(ctx context.Context, in *GetPXCComponentsRequest, opts ...grpc.CallOption) (*GetPXCComponentsResponse, error)
	// ChangePSMDBComponents manages PSMDB related components.
	ChangePSMDBComponents(ctx context.Context, in *ChangePSMDBComponentsRequest, opts ...grpc.CallOption) (*ChangePSMDBComponentsResponse, error)
	// ChangePXCComponents manages PXC related components.
	ChangePXCComponents(ctx context.Context, in *ChangePXCComponentsRequest, opts ...grpc.CallOption) (*ChangePXCComponentsResponse, error)
	// InstallOperator installs given operator in given version.
	InstallOperator(ctx context.Context, in *InstallOperatorRequest, opts ...grpc.CallOption) (*InstallOperatorResponse, error)
	// CheckForOperatorUpdate checks if a new version of an operator is available.
	CheckForOperatorUpdate(ctx context.Context, in *CheckForOperatorUpdateRequest, opts ...grpc.CallOption) (*CheckForOperatorUpdateResponse, error)
}

type componentsClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentsClient(cc grpc.ClientConnInterface) ComponentsClient {
	return &componentsClient{cc}
}

func (c *componentsClient) GetPSMDBComponents(ctx context.Context, in *GetPSMDBComponentsRequest, opts ...grpc.CallOption) (*GetPSMDBComponentsResponse, error) {
	out := new(GetPSMDBComponentsResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/GetPSMDBComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) GetPXCComponents(ctx context.Context, in *GetPXCComponentsRequest, opts ...grpc.CallOption) (*GetPXCComponentsResponse, error) {
	out := new(GetPXCComponentsResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/GetPXCComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) ChangePSMDBComponents(ctx context.Context, in *ChangePSMDBComponentsRequest, opts ...grpc.CallOption) (*ChangePSMDBComponentsResponse, error) {
	out := new(ChangePSMDBComponentsResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/ChangePSMDBComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) ChangePXCComponents(ctx context.Context, in *ChangePXCComponentsRequest, opts ...grpc.CallOption) (*ChangePXCComponentsResponse, error) {
	out := new(ChangePXCComponentsResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/ChangePXCComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) InstallOperator(ctx context.Context, in *InstallOperatorRequest, opts ...grpc.CallOption) (*InstallOperatorResponse, error) {
	out := new(InstallOperatorResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/InstallOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) CheckForOperatorUpdate(ctx context.Context, in *CheckForOperatorUpdateRequest, opts ...grpc.CallOption) (*CheckForOperatorUpdateResponse, error) {
	out := new(CheckForOperatorUpdateResponse)
	err := c.cc.Invoke(ctx, "/dbaas.v1beta1.Components/CheckForOperatorUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentsServer is the server API for Components service.
// All implementations must embed UnimplementedComponentsServer
// for forward compatibility
type ComponentsServer interface {
	// GetPSMDBComponents returns list of available components for PSMDB Clusters.
	GetPSMDBComponents(context.Context, *GetPSMDBComponentsRequest) (*GetPSMDBComponentsResponse, error)
	// GetPXCComponents returns list of available components for PXC Clusters.
	GetPXCComponents(context.Context, *GetPXCComponentsRequest) (*GetPXCComponentsResponse, error)
	// ChangePSMDBComponents manages PSMDB related components.
	ChangePSMDBComponents(context.Context, *ChangePSMDBComponentsRequest) (*ChangePSMDBComponentsResponse, error)
	// ChangePXCComponents manages PXC related components.
	ChangePXCComponents(context.Context, *ChangePXCComponentsRequest) (*ChangePXCComponentsResponse, error)
	// InstallOperator installs given operator in given version.
	InstallOperator(context.Context, *InstallOperatorRequest) (*InstallOperatorResponse, error)
	// CheckForOperatorUpdate checks if a new version of an operator is available.
	CheckForOperatorUpdate(context.Context, *CheckForOperatorUpdateRequest) (*CheckForOperatorUpdateResponse, error)
	mustEmbedUnimplementedComponentsServer()
}

// UnimplementedComponentsServer must be embedded to have forward compatible implementations.
type UnimplementedComponentsServer struct{}

func (UnimplementedComponentsServer) GetPSMDBComponents(context.Context, *GetPSMDBComponentsRequest) (*GetPSMDBComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSMDBComponents not implemented")
}

func (UnimplementedComponentsServer) GetPXCComponents(context.Context, *GetPXCComponentsRequest) (*GetPXCComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPXCComponents not implemented")
}

func (UnimplementedComponentsServer) ChangePSMDBComponents(context.Context, *ChangePSMDBComponentsRequest) (*ChangePSMDBComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePSMDBComponents not implemented")
}

func (UnimplementedComponentsServer) ChangePXCComponents(context.Context, *ChangePXCComponentsRequest) (*ChangePXCComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePXCComponents not implemented")
}

func (UnimplementedComponentsServer) InstallOperator(context.Context, *InstallOperatorRequest) (*InstallOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallOperator not implemented")
}

func (UnimplementedComponentsServer) CheckForOperatorUpdate(context.Context, *CheckForOperatorUpdateRequest) (*CheckForOperatorUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForOperatorUpdate not implemented")
}
func (UnimplementedComponentsServer) mustEmbedUnimplementedComponentsServer() {}

// UnsafeComponentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentsServer will
// result in compilation errors.
type UnsafeComponentsServer interface {
	mustEmbedUnimplementedComponentsServer()
}

func RegisterComponentsServer(s grpc.ServiceRegistrar, srv ComponentsServer) {
	s.RegisterService(&Components_ServiceDesc, srv)
}

func _Components_GetPSMDBComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPSMDBComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).GetPSMDBComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/GetPSMDBComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).GetPSMDBComponents(ctx, req.(*GetPSMDBComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_GetPXCComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPXCComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).GetPXCComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/GetPXCComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).GetPXCComponents(ctx, req.(*GetPXCComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_ChangePSMDBComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePSMDBComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).ChangePSMDBComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/ChangePSMDBComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).ChangePSMDBComponents(ctx, req.(*ChangePSMDBComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_ChangePXCComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePXCComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).ChangePXCComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/ChangePXCComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).ChangePXCComponents(ctx, req.(*ChangePXCComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_InstallOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).InstallOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/InstallOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).InstallOperator(ctx, req.(*InstallOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_CheckForOperatorUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckForOperatorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).CheckForOperatorUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbaas.v1beta1.Components/CheckForOperatorUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).CheckForOperatorUpdate(ctx, req.(*CheckForOperatorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Components_ServiceDesc is the grpc.ServiceDesc for Components service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Components_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbaas.v1beta1.Components",
	HandlerType: (*ComponentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPSMDBComponents",
			Handler:    _Components_GetPSMDBComponents_Handler,
		},
		{
			MethodName: "GetPXCComponents",
			Handler:    _Components_GetPXCComponents_Handler,
		},
		{
			MethodName: "ChangePSMDBComponents",
			Handler:    _Components_ChangePSMDBComponents_Handler,
		},
		{
			MethodName: "ChangePXCComponents",
			Handler:    _Components_ChangePXCComponents_Handler,
		},
		{
			MethodName: "InstallOperator",
			Handler:    _Components_InstallOperator_Handler,
		},
		{
			MethodName: "CheckForOperatorUpdate",
			Handler:    _Components_CheckForOperatorUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/dbaas/components.proto",
}
