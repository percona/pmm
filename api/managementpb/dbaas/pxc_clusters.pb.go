// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: managementpb/dbaas/pxc_clusters.proto

package dbaasv1beta1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PXCBackupState represents PXC backup CR state.
type PXCBackupState int32

const (
	// PXC_BACKUP_STATE_INVALID represents unknown state.
	PXCBackupState_PXC_BACKUP_STATE_INVALID PXCBackupState = 0
	// PXC_BACKUP_STATE_RUNNING represents running backup.
	PXCBackupState_PXC_BACKUP_STATE_RUNNING PXCBackupState = 1
	// PXC_BACKUP_STATE_SUCCEEDED represents succeeded backup.
	PXCBackupState_PXC_BACKUP_STATE_SUCCEEDED PXCBackupState = 2
	// PXC_BACKUP_STATE_FAILED represents failed backup.
	PXCBackupState_PXC_BACKUP_STATE_FAILED PXCBackupState = 3
)

// Enum value maps for PXCBackupState.
var (
	PXCBackupState_name = map[int32]string{
		0: "PXC_BACKUP_STATE_INVALID",
		1: "PXC_BACKUP_STATE_RUNNING",
		2: "PXC_BACKUP_STATE_SUCCEEDED",
		3: "PXC_BACKUP_STATE_FAILED",
	}
	PXCBackupState_value = map[string]int32{
		"PXC_BACKUP_STATE_INVALID":   0,
		"PXC_BACKUP_STATE_RUNNING":   1,
		"PXC_BACKUP_STATE_SUCCEEDED": 2,
		"PXC_BACKUP_STATE_FAILED":    3,
	}
)

func (x PXCBackupState) Enum() *PXCBackupState {
	p := new(PXCBackupState)
	*p = x
	return p
}

func (x PXCBackupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PXCBackupState) Descriptor() protoreflect.EnumDescriptor {
	return file_managementpb_dbaas_pxc_clusters_proto_enumTypes[0].Descriptor()
}

func (PXCBackupState) Type() protoreflect.EnumType {
	return &file_managementpb_dbaas_pxc_clusters_proto_enumTypes[0]
}

func (x PXCBackupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PXCBackupState.Descriptor instead.
func (PXCBackupState) EnumDescriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{0}
}

// PXCClusterParams represents PXC cluster parameters that can be updated.
type PXCClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *PXCClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// NOTE: Only one of fields proxysql or haproxy has to be set, we check this in the code.
	// ProxySQL container parameters.
	Proxysql *PXCClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
	// HAProxy container parameters.
	Haproxy *PXCClusterParams_HAProxy `protobuf:"bytes,4,opt,name=haproxy,proto3" json:"haproxy,omitempty"`
}

func (x *PXCClusterParams) Reset() {
	*x = PXCClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCClusterParams) ProtoMessage() {}

func (x *PXCClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCClusterParams.ProtoReflect.Descriptor instead.
func (*PXCClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *PXCClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *PXCClusterParams) GetPxc() *PXCClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *PXCClusterParams) GetProxysql() *PXCClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *PXCClusterParams) GetHaproxy() *PXCClusterParams_HAProxy {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

type GetPXCClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PXC cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPXCClusterCredentialsRequest) Reset() {
	*x = GetPXCClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterCredentialsRequest) ProtoMessage() {}

func (x *GetPXCClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetPXCClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *GetPXCClusterCredentialsRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *GetPXCClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PXCClusterConnectionCredentials is cluster connection credentials.
type PXCClusterConnectionCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PXC username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// PXC password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// PXC host.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// PXC port.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PXCClusterConnectionCredentials) Reset() {
	*x = PXCClusterConnectionCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCClusterConnectionCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCClusterConnectionCredentials) ProtoMessage() {}

func (x *PXCClusterConnectionCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCClusterConnectionCredentials.ProtoReflect.Descriptor instead.
func (*PXCClusterConnectionCredentials) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *PXCClusterConnectionCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PXCClusterConnectionCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PXCClusterConnectionCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PXCClusterConnectionCredentials) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetPXCClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster connection credentials.
	ConnectionCredentials *PXCClusterConnectionCredentials `protobuf:"bytes,1,opt,name=connection_credentials,json=connectionCredentials,proto3" json:"connection_credentials,omitempty"`
}

func (x *GetPXCClusterCredentialsResponse) Reset() {
	*x = GetPXCClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterCredentialsResponse) ProtoMessage() {}

func (x *GetPXCClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetPXCClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *GetPXCClusterCredentialsResponse) GetConnectionCredentials() *PXCClusterConnectionCredentials {
	if x != nil {
		return x.ConnectionCredentials
	}
	return nil
}

type CreatePXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PXC cluster name.
	// a DNS-1035 label must consist of lower case alphanumeric characters or '-',
	// start with an alphabetic character, and end with an alphanumeric character
	// (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?')
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *PXCClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,4,opt,name=expose,proto3" json:"expose,omitempty"`
}

func (x *CreatePXCClusterRequest) Reset() {
	*x = CreatePXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterRequest) ProtoMessage() {}

func (x *CreatePXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterRequest.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePXCClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *CreatePXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePXCClusterRequest) GetParams() *PXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreatePXCClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

type CreatePXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePXCClusterResponse) Reset() {
	*x = CreatePXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterResponse) ProtoMessage() {}

func (x *CreatePXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterResponse.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{5}
}

type UpdatePXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PXC cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdatePXCClusterRequest_UpdatePXCClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdatePXCClusterRequest) Reset() {
	*x = UpdatePXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest) ProtoMessage() {}

func (x *UpdatePXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePXCClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *UpdatePXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePXCClusterRequest) GetParams() *UpdatePXCClusterRequest_UpdatePXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdatePXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePXCClusterResponse) Reset() {
	*x = UpdatePXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterResponse) ProtoMessage() {}

func (x *UpdatePXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{7}
}

type GetPXCClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster parameters.
	Params *PXCClusterParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GetPXCClusterResourcesRequest) Reset() {
	*x = GetPXCClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterResourcesRequest) ProtoMessage() {}

func (x *GetPXCClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetPXCClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *GetPXCClusterResourcesRequest) GetParams() *PXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetPXCClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected resources to be consumed by the cluster.
	Expected *Resources `protobuf:"bytes,1,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *GetPXCClusterResourcesResponse) Reset() {
	*x = GetPXCClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterResourcesResponse) ProtoMessage() {}

func (x *GetPXCClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetPXCClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{9}
}

func (x *GetPXCClusterResourcesResponse) GetExpected() *Resources {
	if x != nil {
		return x.Expected
	}
	return nil
}

// PXC container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
type PXCClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for PXC.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *PXCClusterParams_PXC) Reset() {
	*x = PXCClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCClusterParams_PXC) ProtoMessage() {}

func (x *PXCClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*PXCClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PXCClusterParams_PXC) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PXCClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *PXCClusterParams_PXC) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// ProxySQL container parameters.
// TODO Do not use inner messages in all public APIs (for consistency).
type PXCClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for ProxySQL.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *PXCClusterParams_ProxySQL) Reset() {
	*x = PXCClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCClusterParams_ProxySQL) ProtoMessage() {}

func (x *PXCClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*PXCClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PXCClusterParams_ProxySQL) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PXCClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *PXCClusterParams_ProxySQL) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// HAProxy container parameters.
// NOTE: HAProxy does not need disk size as ProxySQL does because the container does not require it.
type PXCClusterParams_HAProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for HAProxy.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,2,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *PXCClusterParams_HAProxy) Reset() {
	*x = PXCClusterParams_HAProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCClusterParams_HAProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCClusterParams_HAProxy) ProtoMessage() {}

func (x *PXCClusterParams_HAProxy) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCClusterParams_HAProxy.ProtoReflect.Descriptor instead.
func (*PXCClusterParams_HAProxy) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PXCClusterParams_HAProxy) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PXCClusterParams_HAProxy) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// UpdatePXCClusterParams represents PXC cluster parameters that can be updated.
type UpdatePXCClusterRequest_UpdatePXCClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// ProxySQL container parameters.
	Proxysql *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,4,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,5,opt,name=resume,proto3" json:"resume,omitempty"`
	// HAProxy container parameters.
	Haproxy *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy `protobuf:"bytes,6,opt,name=haproxy,proto3" json:"haproxy,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetPxc() *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetProxysql() *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetHaproxy() *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

// PXC container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Image to use. If it's the same image but with different version tag, upgrade of database cluster to version
	// in given tag is triggered. If entirely different image is given, error is returned.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ProxySQL container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// HAProxy container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_pxc_clusters_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP(), []int{6, 0, 2}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_managementpb_dbaas_pxc_clusters_proto protoreflect.FileDescriptor

var file_managementpb_dbaas_pxc_clusters_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x78, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x04, 0x0a,
	0x10, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x70, 0x78, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x50, 0x58, 0x43, 0x52, 0x03, 0x70, 0x78, 0x63, 0x12, 0x44, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71,
	0x6c, 0x12, 0x41, 0x0a, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x68, 0x61, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x1a, 0x86, 0x01, 0x0a, 0x03, 0x50, 0x58, 0x43, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x8b, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x6d, 0x0a, 0x07, 0x48,
	0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x06, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0xa5, 0x05, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x70, 0x78, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x50, 0x58, 0x43, 0x52, 0x03, 0x70, 0x78, 0x63, 0x12, 0x62, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x51, 0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x5f,
	0x0a, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x48,
	0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a,
	0x69, 0x0a, 0x03, 0x50, 0x58, 0x43, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x07, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x1a, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x2a, 0x89, 0x01, 0x0a, 0x0e, 0x50, 0x58, 0x43, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x58, 0x43, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x58, 0x43, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x58, 0x43, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x58, 0x43, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32,
	0xab, 0x05, 0x0a, 0x0b, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xb7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x58, 0x43, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xaf, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61,
	0x53, 0x2f, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x47, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0xb6, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x42, 0x10, 0x50, 0x78, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x3b, 0x64, 0x62, 0x61, 0x61, 0x73, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x44, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x44, 0x62, 0x61, 0x61,
	0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x44, 0x62, 0x61, 0x61,
	0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x44, 0x62, 0x61, 0x61, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managementpb_dbaas_pxc_clusters_proto_rawDescOnce sync.Once
	file_managementpb_dbaas_pxc_clusters_proto_rawDescData = file_managementpb_dbaas_pxc_clusters_proto_rawDesc
)

func file_managementpb_dbaas_pxc_clusters_proto_rawDescGZIP() []byte {
	file_managementpb_dbaas_pxc_clusters_proto_rawDescOnce.Do(func() {
		file_managementpb_dbaas_pxc_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_managementpb_dbaas_pxc_clusters_proto_rawDescData)
	})
	return file_managementpb_dbaas_pxc_clusters_proto_rawDescData
}

var (
	file_managementpb_dbaas_pxc_clusters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_managementpb_dbaas_pxc_clusters_proto_msgTypes  = make([]protoimpl.MessageInfo, 17)
	file_managementpb_dbaas_pxc_clusters_proto_goTypes   = []interface{}{
		(PXCBackupState)(0),                                             // 0: dbaas.v1beta1.PXCBackupState
		(*PXCClusterParams)(nil),                                        // 1: dbaas.v1beta1.PXCClusterParams
		(*GetPXCClusterCredentialsRequest)(nil),                         // 2: dbaas.v1beta1.GetPXCClusterCredentialsRequest
		(*PXCClusterConnectionCredentials)(nil),                         // 3: dbaas.v1beta1.PXCClusterConnectionCredentials
		(*GetPXCClusterCredentialsResponse)(nil),                        // 4: dbaas.v1beta1.GetPXCClusterCredentialsResponse
		(*CreatePXCClusterRequest)(nil),                                 // 5: dbaas.v1beta1.CreatePXCClusterRequest
		(*CreatePXCClusterResponse)(nil),                                // 6: dbaas.v1beta1.CreatePXCClusterResponse
		(*UpdatePXCClusterRequest)(nil),                                 // 7: dbaas.v1beta1.UpdatePXCClusterRequest
		(*UpdatePXCClusterResponse)(nil),                                // 8: dbaas.v1beta1.UpdatePXCClusterResponse
		(*GetPXCClusterResourcesRequest)(nil),                           // 9: dbaas.v1beta1.GetPXCClusterResourcesRequest
		(*GetPXCClusterResourcesResponse)(nil),                          // 10: dbaas.v1beta1.GetPXCClusterResourcesResponse
		(*PXCClusterParams_PXC)(nil),                                    // 11: dbaas.v1beta1.PXCClusterParams.PXC
		(*PXCClusterParams_ProxySQL)(nil),                               // 12: dbaas.v1beta1.PXCClusterParams.ProxySQL
		(*PXCClusterParams_HAProxy)(nil),                                // 13: dbaas.v1beta1.PXCClusterParams.HAProxy
		(*UpdatePXCClusterRequest_UpdatePXCClusterParams)(nil),          // 14: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams
		(*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC)(nil),      // 15: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC
		(*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL)(nil), // 16: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL
		(*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy)(nil),  // 17: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy
		(*Resources)(nil),                                               // 18: dbaas.v1beta1.Resources
		(*ComputeResources)(nil),                                        // 19: dbaas.v1beta1.ComputeResources
	}
)

var file_managementpb_dbaas_pxc_clusters_proto_depIdxs = []int32{
	11, // 0: dbaas.v1beta1.PXCClusterParams.pxc:type_name -> dbaas.v1beta1.PXCClusterParams.PXC
	12, // 1: dbaas.v1beta1.PXCClusterParams.proxysql:type_name -> dbaas.v1beta1.PXCClusterParams.ProxySQL
	13, // 2: dbaas.v1beta1.PXCClusterParams.haproxy:type_name -> dbaas.v1beta1.PXCClusterParams.HAProxy
	3,  // 3: dbaas.v1beta1.GetPXCClusterCredentialsResponse.connection_credentials:type_name -> dbaas.v1beta1.PXCClusterConnectionCredentials
	1,  // 4: dbaas.v1beta1.CreatePXCClusterRequest.params:type_name -> dbaas.v1beta1.PXCClusterParams
	14, // 5: dbaas.v1beta1.UpdatePXCClusterRequest.params:type_name -> dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams
	1,  // 6: dbaas.v1beta1.GetPXCClusterResourcesRequest.params:type_name -> dbaas.v1beta1.PXCClusterParams
	18, // 7: dbaas.v1beta1.GetPXCClusterResourcesResponse.expected:type_name -> dbaas.v1beta1.Resources
	19, // 8: dbaas.v1beta1.PXCClusterParams.PXC.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 9: dbaas.v1beta1.PXCClusterParams.ProxySQL.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 10: dbaas.v1beta1.PXCClusterParams.HAProxy.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	15, // 11: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.pxc:type_name -> dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC
	16, // 12: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.proxysql:type_name -> dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL
	17, // 13: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.haproxy:type_name -> dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy
	19, // 14: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 15: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	19, // 16: dbaas.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy.compute_resources:type_name -> dbaas.v1beta1.ComputeResources
	2,  // 17: dbaas.v1beta1.PXCClusters.GetPXCClusterCredentials:input_type -> dbaas.v1beta1.GetPXCClusterCredentialsRequest
	5,  // 18: dbaas.v1beta1.PXCClusters.CreatePXCCluster:input_type -> dbaas.v1beta1.CreatePXCClusterRequest
	7,  // 19: dbaas.v1beta1.PXCClusters.UpdatePXCCluster:input_type -> dbaas.v1beta1.UpdatePXCClusterRequest
	9,  // 20: dbaas.v1beta1.PXCClusters.GetPXCClusterResources:input_type -> dbaas.v1beta1.GetPXCClusterResourcesRequest
	4,  // 21: dbaas.v1beta1.PXCClusters.GetPXCClusterCredentials:output_type -> dbaas.v1beta1.GetPXCClusterCredentialsResponse
	6,  // 22: dbaas.v1beta1.PXCClusters.CreatePXCCluster:output_type -> dbaas.v1beta1.CreatePXCClusterResponse
	8,  // 23: dbaas.v1beta1.PXCClusters.UpdatePXCCluster:output_type -> dbaas.v1beta1.UpdatePXCClusterResponse
	10, // 24: dbaas.v1beta1.PXCClusters.GetPXCClusterResources:output_type -> dbaas.v1beta1.GetPXCClusterResourcesResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_managementpb_dbaas_pxc_clusters_proto_init() }
func file_managementpb_dbaas_pxc_clusters_proto_init() {
	if File_managementpb_dbaas_pxc_clusters_proto != nil {
		return
	}
	file_managementpb_dbaas_dbaas_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCClusterConnectionCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCClusterParams_HAProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_pxc_clusters_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managementpb_dbaas_pxc_clusters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managementpb_dbaas_pxc_clusters_proto_goTypes,
		DependencyIndexes: file_managementpb_dbaas_pxc_clusters_proto_depIdxs,
		EnumInfos:         file_managementpb_dbaas_pxc_clusters_proto_enumTypes,
		MessageInfos:      file_managementpb_dbaas_pxc_clusters_proto_msgTypes,
	}.Build()
	File_managementpb_dbaas_pxc_clusters_proto = out.File
	file_managementpb_dbaas_pxc_clusters_proto_rawDesc = nil
	file_managementpb_dbaas_pxc_clusters_proto_goTypes = nil
	file_managementpb_dbaas_pxc_clusters_proto_depIdxs = nil
}
