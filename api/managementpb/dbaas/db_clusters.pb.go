// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: managementpb/dbaas/db_clusters.proto

package dbaasv1beta1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DBClusterState represents DB cluster CR state.
type DBClusterState int32

const (
	// DB_CLUSTER_STATE_INVALID represents unknown state.
	DBClusterState_DB_CLUSTER_STATE_INVALID DBClusterState = 0
	// DB_CLUSTER_STATE_CHANGING represents a cluster being changed.
	DBClusterState_DB_CLUSTER_STATE_CHANGING DBClusterState = 1
	// DB_CLUSTER_STATE_READY represents a cluster without pending changes.
	DBClusterState_DB_CLUSTER_STATE_READY DBClusterState = 2
	// DB_CLUSTER_STATE_FAILED represents a failed cluster.
	DBClusterState_DB_CLUSTER_STATE_FAILED DBClusterState = 3
	// DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	DBClusterState_DB_CLUSTER_STATE_DELETING DBClusterState = 4
	// DB_CLUSTER_STATE_PAUSED represents a cluster is paused.
	DBClusterState_DB_CLUSTER_STATE_PAUSED DBClusterState = 5
	// DB_CLUSTER_STATE_UPGRADING is a special case of DB_CLUSTER_STATE_CHANGING.
	// It indicates database cluster upgrade is ongoing.
	DBClusterState_DB_CLUSTER_STATE_UPGRADING DBClusterState = 6
)

// Enum value maps for DBClusterState.
var (
	DBClusterState_name = map[int32]string{
		0: "DB_CLUSTER_STATE_INVALID",
		1: "DB_CLUSTER_STATE_CHANGING",
		2: "DB_CLUSTER_STATE_READY",
		3: "DB_CLUSTER_STATE_FAILED",
		4: "DB_CLUSTER_STATE_DELETING",
		5: "DB_CLUSTER_STATE_PAUSED",
		6: "DB_CLUSTER_STATE_UPGRADING",
	}
	DBClusterState_value = map[string]int32{
		"DB_CLUSTER_STATE_INVALID":   0,
		"DB_CLUSTER_STATE_CHANGING":  1,
		"DB_CLUSTER_STATE_READY":     2,
		"DB_CLUSTER_STATE_FAILED":    3,
		"DB_CLUSTER_STATE_DELETING":  4,
		"DB_CLUSTER_STATE_PAUSED":    5,
		"DB_CLUSTER_STATE_UPGRADING": 6,
	}
)

func (x DBClusterState) Enum() *DBClusterState {
	p := new(DBClusterState)
	*p = x
	return p
}

func (x DBClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_managementpb_dbaas_db_clusters_proto_enumTypes[0].Descriptor()
}

func (DBClusterState) Type() protoreflect.EnumType {
	return &file_managementpb_dbaas_db_clusters_proto_enumTypes[0]
}

func (x DBClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBClusterState.Descriptor instead.
func (DBClusterState) EnumDescriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{0}
}

// PSMDBCluster represents PSMDB cluster information.
type PSMDBCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State DBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=dbaas.v1beta1.DBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *PSMDBClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// DB cluster accessible outside of K8s cluster.
	Exposed bool `protobuf:"varint,5,opt,name=exposed,proto3" json:"exposed,omitempty"`
	// Installed PSMDB image.
	InstalledImage string `protobuf:"bytes,6,opt,name=installed_image,json=installedImage,proto3" json:"installed_image,omitempty"`
	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `protobuf:"bytes,7,opt,name=available_image,json=availableImage,proto3" json:"available_image,omitempty"`
	// Is DB cluster accessible via public internet.
	InternetFacing bool `protobuf:"varint,8,opt,name=internet_facing,json=internetFacing,proto3" json:"internet_facing,omitempty"`
	// Backup configuration parameters.
	Backup *Backup `protobuf:"bytes,9,opt,name=backup,proto3" json:"backup,omitempty"`
	// Restore configuration parameters.
	Restore *Restore `protobuf:"bytes,10,opt,name=restore,proto3" json:"restore,omitempty"`
	// Apply IP source ranges against the cluster.
	SourceRanges []string `protobuf:"bytes,12,rep,name=source_ranges,json=sourceRanges,proto3" json:"source_ranges,omitempty"`
	// Configuration template.
	Template *Template `protobuf:"bytes,11,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *PSMDBCluster) Reset() {
	*x = PSMDBCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSMDBCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSMDBCluster) ProtoMessage() {}

func (x *PSMDBCluster) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSMDBCluster.ProtoReflect.Descriptor instead.
func (*PSMDBCluster) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *PSMDBCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PSMDBCluster) GetState() DBClusterState {
	if x != nil {
		return x.State
	}
	return DBClusterState_DB_CLUSTER_STATE_INVALID
}

func (x *PSMDBCluster) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *PSMDBCluster) GetParams() *PSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PSMDBCluster) GetExposed() bool {
	if x != nil {
		return x.Exposed
	}
	return false
}

func (x *PSMDBCluster) GetInstalledImage() string {
	if x != nil {
		return x.InstalledImage
	}
	return ""
}

func (x *PSMDBCluster) GetAvailableImage() string {
	if x != nil {
		return x.AvailableImage
	}
	return ""
}

func (x *PSMDBCluster) GetInternetFacing() bool {
	if x != nil {
		return x.InternetFacing
	}
	return false
}

func (x *PSMDBCluster) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *PSMDBCluster) GetRestore() *Restore {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *PSMDBCluster) GetSourceRanges() []string {
	if x != nil {
		return x.SourceRanges
	}
	return nil
}

func (x *PSMDBCluster) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

// PXCCluster represents PXC cluster information.
type PXCCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State DBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=dbaas.v1beta1.DBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *PXCClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// DB cluster accessible outside of K8s cluster.
	Exposed bool `protobuf:"varint,5,opt,name=exposed,proto3" json:"exposed,omitempty"`
	// Installed XtraDB image.
	InstalledImage string `protobuf:"bytes,6,opt,name=installed_image,json=installedImage,proto3" json:"installed_image,omitempty"`
	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `protobuf:"bytes,7,opt,name=available_image,json=availableImage,proto3" json:"available_image,omitempty"`
	// Is DB cluster accessible via public internet.
	InternetFacing bool `protobuf:"varint,8,opt,name=internet_facing,json=internetFacing,proto3" json:"internet_facing,omitempty"`
	// Backup configuration parameters.
	Backup *Backup `protobuf:"bytes,9,opt,name=backup,proto3" json:"backup,omitempty"`
	// Restore configuration parameters.
	Restore *Restore `protobuf:"bytes,10,opt,name=restore,proto3" json:"restore,omitempty"`
	// Apply IP source ranges against the cluster.
	SourceRanges []string `protobuf:"bytes,12,rep,name=source_ranges,json=sourceRanges,proto3" json:"source_ranges,omitempty"`
	// Configuration template.
	Template *Template `protobuf:"bytes,11,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *PXCCluster) Reset() {
	*x = PXCCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXCCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXCCluster) ProtoMessage() {}

func (x *PXCCluster) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXCCluster.ProtoReflect.Descriptor instead.
func (*PXCCluster) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *PXCCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PXCCluster) GetState() DBClusterState {
	if x != nil {
		return x.State
	}
	return DBClusterState_DB_CLUSTER_STATE_INVALID
}

func (x *PXCCluster) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *PXCCluster) GetParams() *PXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PXCCluster) GetExposed() bool {
	if x != nil {
		return x.Exposed
	}
	return false
}

func (x *PXCCluster) GetInstalledImage() string {
	if x != nil {
		return x.InstalledImage
	}
	return ""
}

func (x *PXCCluster) GetAvailableImage() string {
	if x != nil {
		return x.AvailableImage
	}
	return ""
}

func (x *PXCCluster) GetInternetFacing() bool {
	if x != nil {
		return x.InternetFacing
	}
	return false
}

func (x *PXCCluster) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *PXCCluster) GetRestore() *Restore {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *PXCCluster) GetSourceRanges() []string {
	if x != nil {
		return x.SourceRanges
	}
	return nil
}

func (x *PXCCluster) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type ListDBClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
}

func (x *ListDBClustersRequest) Reset() {
	*x = ListDBClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDBClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDBClustersRequest) ProtoMessage() {}

func (x *ListDBClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDBClustersRequest.ProtoReflect.Descriptor instead.
func (*ListDBClustersRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *ListDBClustersRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

type ListDBClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PXC clusters information.
	PxcClusters []*PXCCluster `protobuf:"bytes,1,rep,name=pxc_clusters,json=pxcClusters,proto3" json:"pxc_clusters,omitempty"`
	// PSMDB clusters information.
	PsmdbClusters []*PSMDBCluster `protobuf:"bytes,2,rep,name=psmdb_clusters,json=psmdbClusters,proto3" json:"psmdb_clusters,omitempty"`
}

func (x *ListDBClustersResponse) Reset() {
	*x = ListDBClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDBClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDBClustersResponse) ProtoMessage() {}

func (x *ListDBClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDBClustersResponse.ProtoReflect.Descriptor instead.
func (*ListDBClustersResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *ListDBClustersResponse) GetPxcClusters() []*PXCCluster {
	if x != nil {
		return x.PxcClusters
	}
	return nil
}

func (x *ListDBClustersResponse) GetPsmdbClusters() []*PSMDBCluster {
	if x != nil {
		return x.PsmdbClusters
	}
	return nil
}

type RestartDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// PXC cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DB cluster type.
	ClusterType DBClusterType `protobuf:"varint,3,opt,name=cluster_type,json=clusterType,proto3,enum=dbaas.v1beta1.DBClusterType" json:"cluster_type,omitempty"`
}

func (x *RestartDBClusterRequest) Reset() {
	*x = RestartDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDBClusterRequest) ProtoMessage() {}

func (x *RestartDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDBClusterRequest.ProtoReflect.Descriptor instead.
func (*RestartDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *RestartDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *RestartDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestartDBClusterRequest) GetClusterType() DBClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DBClusterType_DB_CLUSTER_TYPE_INVALID
}

type RestartDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartDBClusterResponse) Reset() {
	*x = RestartDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDBClusterResponse) ProtoMessage() {}

func (x *RestartDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDBClusterResponse.ProtoReflect.Descriptor instead.
func (*RestartDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{5}
}

type GetDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// DB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDBClusterRequest) Reset() {
	*x = GetDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBClusterRequest) ProtoMessage() {}

func (x *GetDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDBClusterRequest.ProtoReflect.Descriptor instead.
func (*GetDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *GetDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *GetDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PXC cluster information.
	PxcCluster *PXCCluster `protobuf:"bytes,1,opt,name=pxc_cluster,json=pxcCluster,proto3" json:"pxc_cluster,omitempty"`
	// PSMDB cluster information.
	PsmdbCluster *PSMDBCluster `protobuf:"bytes,2,opt,name=psmdb_cluster,json=psmdbCluster,proto3" json:"psmdb_cluster,omitempty"`
}

func (x *GetDBClusterResponse) Reset() {
	*x = GetDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBClusterResponse) ProtoMessage() {}

func (x *GetDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDBClusterResponse.ProtoReflect.Descriptor instead.
func (*GetDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{7}
}

func (x *GetDBClusterResponse) GetPxcCluster() *PXCCluster {
	if x != nil {
		return x.PxcCluster
	}
	return nil
}

func (x *GetDBClusterResponse) GetPsmdbCluster() *PSMDBCluster {
	if x != nil {
		return x.PsmdbCluster
	}
	return nil
}

type DeleteDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
	// DB cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DB cluster type.
	ClusterType DBClusterType `protobuf:"varint,3,opt,name=cluster_type,json=clusterType,proto3,enum=dbaas.v1beta1.DBClusterType" json:"cluster_type,omitempty"`
}

func (x *DeleteDBClusterRequest) Reset() {
	*x = DeleteDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDBClusterRequest) ProtoMessage() {}

func (x *DeleteDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDBClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDBClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *DeleteDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDBClusterRequest) GetClusterType() DBClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DBClusterType_DB_CLUSTER_TYPE_INVALID
}

type DeleteDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDBClusterResponse) Reset() {
	*x = DeleteDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDBClusterResponse) ProtoMessage() {}

func (x *DeleteDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDBClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{9}
}

type S3Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key of a filename on s3.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *S3Item) Reset() {
	*x = S3Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Item) ProtoMessage() {}

func (x *S3Item) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Item.ProtoReflect.Descriptor instead.
func (*S3Item) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{10}
}

func (x *S3Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ListS3BackupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup Location ID to list backups from
	LocationId string `protobuf:"bytes,1,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
}

func (x *ListS3BackupsRequest) Reset() {
	*x = ListS3BackupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListS3BackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListS3BackupsRequest) ProtoMessage() {}

func (x *ListS3BackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListS3BackupsRequest.ProtoReflect.Descriptor instead.
func (*ListS3BackupsRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{11}
}

func (x *ListS3BackupsRequest) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

type ListS3BackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup list.
	Backups []*S3Item `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
}

func (x *ListS3BackupsResponse) Reset() {
	*x = ListS3BackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListS3BackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListS3BackupsResponse) ProtoMessage() {}

func (x *ListS3BackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListS3BackupsResponse.ProtoReflect.Descriptor instead.
func (*ListS3BackupsResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{12}
}

func (x *ListS3BackupsResponse) GetBackups() []*S3Item {
	if x != nil {
		return x.Backups
	}
	return nil
}

type ListSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes cluster name.
	KubernetesClusterName string `protobuf:"bytes,1,opt,name=kubernetes_cluster_name,json=kubernetesClusterName,proto3" json:"kubernetes_cluster_name,omitempty"`
}

func (x *ListSecretsRequest) Reset() {
	*x = ListSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsRequest) ProtoMessage() {}

func (x *ListSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsRequest.ProtoReflect.Descriptor instead.
func (*ListSecretsRequest) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{13}
}

func (x *ListSecretsRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a secret
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{14}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Secret list.
	Secrets []*Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *ListSecretsResponse) Reset() {
	*x = ListSecretsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResponse) ProtoMessage() {}

func (x *ListSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managementpb_dbaas_db_clusters_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResponse.ProtoReflect.Descriptor instead.
func (*ListSecretsResponse) Descriptor() ([]byte, []int) {
	return file_managementpb_dbaas_db_clusters_proto_rawDescGZIP(), []int{15}
}

func (x *ListSecretsResponse) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

var File_managementpb_dbaas_db_clusters_proto protoreflect.FileDescriptor

var file_managementpb_dbaas_db_clusters_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x73, 0x6d, 0x64, 0x62, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2f, 0x70, 0x78, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa1, 0x04, 0x0a, 0x0c, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x78, 0x63,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x78, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x73, 0x6d, 0x64, 0x62,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x73,
	0x6d, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x78,
	0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x78, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x73, 0x6d, 0x64, 0x62, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53,
	0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x73, 0x6d, 0x64,
	0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x06, 0x53, 0x33, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x33, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x33, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x17,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x2a, 0xe2, 0x01, 0x0a, 0x0e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x42, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x32, 0xe7, 0x06, 0x0a, 0x0a, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42,
	0x61, 0x61, 0x53, 0x2f, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x47,
	0x65, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x93, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53,
	0x2f, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x33, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x33,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x42, 0x61, 0x61, 0x53,
	0x2f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x82, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x44, 0x42, 0x61, 0x61, 0x53, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0xb5, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0f, 0x44, 0x62, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f,
	0x70, 0x6d, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x62, 0x61, 0x61, 0x73, 0x3b, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0d,
	0x44, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0d,
	0x44, 0x62, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x19,
	0x44, 0x62, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x44, 0x62, 0x61, 0x61,
	0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_managementpb_dbaas_db_clusters_proto_rawDescOnce sync.Once
	file_managementpb_dbaas_db_clusters_proto_rawDescData = file_managementpb_dbaas_db_clusters_proto_rawDesc
)

func file_managementpb_dbaas_db_clusters_proto_rawDescGZIP() []byte {
	file_managementpb_dbaas_db_clusters_proto_rawDescOnce.Do(func() {
		file_managementpb_dbaas_db_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_managementpb_dbaas_db_clusters_proto_rawDescData)
	})
	return file_managementpb_dbaas_db_clusters_proto_rawDescData
}

var (
	file_managementpb_dbaas_db_clusters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_managementpb_dbaas_db_clusters_proto_msgTypes  = make([]protoimpl.MessageInfo, 16)
	file_managementpb_dbaas_db_clusters_proto_goTypes   = []interface{}{
		(DBClusterState)(0),              // 0: dbaas.v1beta1.DBClusterState
		(*PSMDBCluster)(nil),             // 1: dbaas.v1beta1.PSMDBCluster
		(*PXCCluster)(nil),               // 2: dbaas.v1beta1.PXCCluster
		(*ListDBClustersRequest)(nil),    // 3: dbaas.v1beta1.ListDBClustersRequest
		(*ListDBClustersResponse)(nil),   // 4: dbaas.v1beta1.ListDBClustersResponse
		(*RestartDBClusterRequest)(nil),  // 5: dbaas.v1beta1.RestartDBClusterRequest
		(*RestartDBClusterResponse)(nil), // 6: dbaas.v1beta1.RestartDBClusterResponse
		(*GetDBClusterRequest)(nil),      // 7: dbaas.v1beta1.GetDBClusterRequest
		(*GetDBClusterResponse)(nil),     // 8: dbaas.v1beta1.GetDBClusterResponse
		(*DeleteDBClusterRequest)(nil),   // 9: dbaas.v1beta1.DeleteDBClusterRequest
		(*DeleteDBClusterResponse)(nil),  // 10: dbaas.v1beta1.DeleteDBClusterResponse
		(*S3Item)(nil),                   // 11: dbaas.v1beta1.S3Item
		(*ListS3BackupsRequest)(nil),     // 12: dbaas.v1beta1.ListS3BackupsRequest
		(*ListS3BackupsResponse)(nil),    // 13: dbaas.v1beta1.ListS3BackupsResponse
		(*ListSecretsRequest)(nil),       // 14: dbaas.v1beta1.ListSecretsRequest
		(*Secret)(nil),                   // 15: dbaas.v1beta1.Secret
		(*ListSecretsResponse)(nil),      // 16: dbaas.v1beta1.ListSecretsResponse
		(*RunningOperation)(nil),         // 17: dbaas.v1beta1.RunningOperation
		(*PSMDBClusterParams)(nil),       // 18: dbaas.v1beta1.PSMDBClusterParams
		(*Backup)(nil),                   // 19: dbaas.v1beta1.Backup
		(*Restore)(nil),                  // 20: dbaas.v1beta1.Restore
		(*Template)(nil),                 // 21: dbaas.v1beta1.Template
		(*PXCClusterParams)(nil),         // 22: dbaas.v1beta1.PXCClusterParams
		(DBClusterType)(0),               // 23: dbaas.v1beta1.DBClusterType
	}
)

var file_managementpb_dbaas_db_clusters_proto_depIdxs = []int32{
	0,  // 0: dbaas.v1beta1.PSMDBCluster.state:type_name -> dbaas.v1beta1.DBClusterState
	17, // 1: dbaas.v1beta1.PSMDBCluster.operation:type_name -> dbaas.v1beta1.RunningOperation
	18, // 2: dbaas.v1beta1.PSMDBCluster.params:type_name -> dbaas.v1beta1.PSMDBClusterParams
	19, // 3: dbaas.v1beta1.PSMDBCluster.backup:type_name -> dbaas.v1beta1.Backup
	20, // 4: dbaas.v1beta1.PSMDBCluster.restore:type_name -> dbaas.v1beta1.Restore
	21, // 5: dbaas.v1beta1.PSMDBCluster.template:type_name -> dbaas.v1beta1.Template
	0,  // 6: dbaas.v1beta1.PXCCluster.state:type_name -> dbaas.v1beta1.DBClusterState
	17, // 7: dbaas.v1beta1.PXCCluster.operation:type_name -> dbaas.v1beta1.RunningOperation
	22, // 8: dbaas.v1beta1.PXCCluster.params:type_name -> dbaas.v1beta1.PXCClusterParams
	19, // 9: dbaas.v1beta1.PXCCluster.backup:type_name -> dbaas.v1beta1.Backup
	20, // 10: dbaas.v1beta1.PXCCluster.restore:type_name -> dbaas.v1beta1.Restore
	21, // 11: dbaas.v1beta1.PXCCluster.template:type_name -> dbaas.v1beta1.Template
	2,  // 12: dbaas.v1beta1.ListDBClustersResponse.pxc_clusters:type_name -> dbaas.v1beta1.PXCCluster
	1,  // 13: dbaas.v1beta1.ListDBClustersResponse.psmdb_clusters:type_name -> dbaas.v1beta1.PSMDBCluster
	23, // 14: dbaas.v1beta1.RestartDBClusterRequest.cluster_type:type_name -> dbaas.v1beta1.DBClusterType
	2,  // 15: dbaas.v1beta1.GetDBClusterResponse.pxc_cluster:type_name -> dbaas.v1beta1.PXCCluster
	1,  // 16: dbaas.v1beta1.GetDBClusterResponse.psmdb_cluster:type_name -> dbaas.v1beta1.PSMDBCluster
	23, // 17: dbaas.v1beta1.DeleteDBClusterRequest.cluster_type:type_name -> dbaas.v1beta1.DBClusterType
	11, // 18: dbaas.v1beta1.ListS3BackupsResponse.backups:type_name -> dbaas.v1beta1.S3Item
	15, // 19: dbaas.v1beta1.ListSecretsResponse.secrets:type_name -> dbaas.v1beta1.Secret
	3,  // 20: dbaas.v1beta1.DBClusters.ListDBClusters:input_type -> dbaas.v1beta1.ListDBClustersRequest
	7,  // 21: dbaas.v1beta1.DBClusters.GetDBCluster:input_type -> dbaas.v1beta1.GetDBClusterRequest
	5,  // 22: dbaas.v1beta1.DBClusters.RestartDBCluster:input_type -> dbaas.v1beta1.RestartDBClusterRequest
	9,  // 23: dbaas.v1beta1.DBClusters.DeleteDBCluster:input_type -> dbaas.v1beta1.DeleteDBClusterRequest
	12, // 24: dbaas.v1beta1.DBClusters.ListS3Backups:input_type -> dbaas.v1beta1.ListS3BackupsRequest
	14, // 25: dbaas.v1beta1.DBClusters.ListSecrets:input_type -> dbaas.v1beta1.ListSecretsRequest
	4,  // 26: dbaas.v1beta1.DBClusters.ListDBClusters:output_type -> dbaas.v1beta1.ListDBClustersResponse
	8,  // 27: dbaas.v1beta1.DBClusters.GetDBCluster:output_type -> dbaas.v1beta1.GetDBClusterResponse
	6,  // 28: dbaas.v1beta1.DBClusters.RestartDBCluster:output_type -> dbaas.v1beta1.RestartDBClusterResponse
	10, // 29: dbaas.v1beta1.DBClusters.DeleteDBCluster:output_type -> dbaas.v1beta1.DeleteDBClusterResponse
	13, // 30: dbaas.v1beta1.DBClusters.ListS3Backups:output_type -> dbaas.v1beta1.ListS3BackupsResponse
	16, // 31: dbaas.v1beta1.DBClusters.ListSecrets:output_type -> dbaas.v1beta1.ListSecretsResponse
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_managementpb_dbaas_db_clusters_proto_init() }
func file_managementpb_dbaas_db_clusters_proto_init() {
	if File_managementpb_dbaas_db_clusters_proto != nil {
		return
	}
	file_managementpb_dbaas_dbaas_proto_init()
	file_managementpb_dbaas_psmdb_clusters_proto_init()
	file_managementpb_dbaas_pxc_clusters_proto_init()
	file_managementpb_dbaas_templates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_managementpb_dbaas_db_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSMDBCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXCCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDBClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDBClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListS3BackupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListS3BackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managementpb_dbaas_db_clusters_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managementpb_dbaas_db_clusters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managementpb_dbaas_db_clusters_proto_goTypes,
		DependencyIndexes: file_managementpb_dbaas_db_clusters_proto_depIdxs,
		EnumInfos:         file_managementpb_dbaas_db_clusters_proto_enumTypes,
		MessageInfos:      file_managementpb_dbaas_db_clusters_proto_msgTypes,
	}.Build()
	File_managementpb_dbaas_db_clusters_proto = out.File
	file_managementpb_dbaas_db_clusters_proto_rawDesc = nil
	file_managementpb_dbaas_db_clusters_proto_goTypes = nil
	file_managementpb_dbaas_db_clusters_proto_depIdxs = nil
}
