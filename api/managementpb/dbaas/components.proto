syntax = "proto3";

package dbaas.v1beta1;

option go_package = "api/managementpb/dbaas;dbaasv1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "managementpb/dbaas/dbaas.proto";

// TODO move it to parent directory / package once API is v1-stable

// Component contains information about component.
message Component {
  string image_path = 1;
  string image_hash = 2;
  string status = 3;
  bool critical = 4;
  bool default = 5;
  bool disabled = 6;
}

// Matrix contains all available components.
message Matrix {
  map<string, Component> mongod = 1;
  map<string, Component> pxc = 2;
  map<string, Component> pmm = 3;
  map<string, Component> proxysql = 4;
  map<string, Component> haproxy = 5;
  map<string, Component> backup = 6;
  map<string, Component> operator = 7;
  map<string, Component> log_collector = 8;
}

// OperatorVersion contains information about operator and components matrix.
message OperatorVersion {
  string product = 1;
  string operator = 2;
  Matrix matrix = 3;
}

message GetPSMDBComponentsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1;
  // Version of DB.
  string db_version = 2;
}

message GetPSMDBComponentsResponse {
  repeated OperatorVersion versions = 1;
}

message GetPXCComponentsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1;
  // Version of DB.
  string db_version = 2;
}

message GetPXCComponentsResponse {
  repeated OperatorVersion versions = 1;
}

// ChangeComponent contains fields to manage components.
message ChangeComponent {
  string default_version = 1;
  // ComponentVersion contains operations which should be done with component version.
  message ComponentVersion {
    string version = 1 [
      (validator.field) = {
        string_not_empty: true
      }
    ];
    bool disable = 2;
    bool enable = 3;
  }
  repeated ComponentVersion versions = 2;
}

message ChangePSMDBComponentsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeComponent mongod = 2;
}

message ChangePSMDBComponentsResponse {}

message ChangePXCComponentsRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeComponent pxc = 2;
  ChangeComponent proxysql = 3;
  ChangeComponent haproxy = 4;
}

message ChangePXCComponentsResponse {}

message InstallOperatorRequest {
  // Kubernetes cluster name.
  string kubernetes_cluster_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // operator_type tells what operator we are interested in updating.
  string operator_type = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // version tells what version of the operator we should update to.
  string version = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message InstallOperatorResponse {
  // Status tells if installation was successfull.
  OperatorsStatus status = 1;
}

message CheckForOperatorUpdateRequest {}

// ComponentUpdateInformation contains version we can update to for certain component.
message ComponentUpdateInformation {
  string available_version = 1;
}

// ComponentsUpdateInformation contains info about components and their available latest versions.
message ComponentsUpdateInformation {
  // component_to_update_information stores, under the name of the component, information about the update.
  // "pxc-operator", "psmdb-operator" are names used by backend for our operators.
  map<string, ComponentUpdateInformation> component_to_update_information = 1;
}

message CheckForOperatorUpdateResponse {
  // The cluster name is used as a key for this map, value contains components and their inforamtion about update.
  map<string, ComponentsUpdateInformation> cluster_to_components = 1;
}

// Components service provides public methods for managing components.
service Components {
  // GetPSMDBComponents returns list of available components for PSMDB Clusters.
  rpc GetPSMDBComponents(GetPSMDBComponentsRequest) returns (GetPSMDBComponentsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/GetPSMDB"
      body: "*"
    };
  }
  // GetPXCComponents returns list of available components for PXC Clusters.
  rpc GetPXCComponents(GetPXCComponentsRequest) returns (GetPXCComponentsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/GetPXC"
      body: "*"
    };
  }
  // ChangePSMDBComponents manages PSMDB related components.
  rpc ChangePSMDBComponents(ChangePSMDBComponentsRequest) returns (ChangePSMDBComponentsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/ChangePSMDB"
      body: "*"
    };
  }
  // ChangePXCComponents manages PXC related components.
  rpc ChangePXCComponents(ChangePXCComponentsRequest) returns (ChangePXCComponentsResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/ChangePXC"
      body: "*"
    };
  }
  // InstallOperator installs given operator in given version.
  rpc InstallOperator(InstallOperatorRequest) returns (InstallOperatorResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/InstallOperator"
      body: "*"
    };
  }
  // CheckForOperatorUpdate checks if a new version of an operator is available.
  rpc CheckForOperatorUpdate(CheckForOperatorUpdateRequest) returns (CheckForOperatorUpdateResponse) {
    option (google.api.http) = {
      post: "/v1/management/DBaaS/Components/CheckForOperatorUpdate"
      body: "*"
    };
  }
}
