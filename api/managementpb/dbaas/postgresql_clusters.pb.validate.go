// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/postgresql_clusters.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PostgresqlClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresqlClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresqlClusterParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresqlClusterParamsMultiError, or nil if none found.
func (m *PostgresqlClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresqlClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParamsValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPgbouncer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgbouncer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParamsValidationError{
				field:  "Pgbouncer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBackup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParamsValidationError{
				field:  "Backup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRestore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParamsValidationError{
				field:  "Restore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostgresqlClusterParamsMultiError(errors)
	}

	return nil
}

// PostgresqlClusterParamsMultiError is an error wrapping multiple validation
// errors returned by PostgresqlClusterParams.ValidateAll() if the designated
// constraints aren't met.
type PostgresqlClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresqlClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresqlClusterParamsMultiError) AllErrors() []error { return m }

// PostgresqlClusterParamsValidationError is the validation error returned by
// PostgresqlClusterParams.Validate if the designated constraints aren't met.
type PostgresqlClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresqlClusterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresqlClusterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresqlClusterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresqlClusterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresqlClusterParamsValidationError) ErrorName() string {
	return "PostgresqlClusterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresqlClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresqlClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresqlClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresqlClusterParamsValidationError{}

// Validate checks the field values on GetPostgresqlClusterCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPostgresqlClusterCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPostgresqlClusterCredentialsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPostgresqlClusterCredentialsRequestMultiError, or nil if none found.
func (m *GetPostgresqlClusterCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostgresqlClusterCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetPostgresqlClusterCredentialsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetPostgresqlClusterCredentialsRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostgresqlClusterCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetPostgresqlClusterCredentialsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetPostgresqlClusterCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostgresqlClusterCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostgresqlClusterCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostgresqlClusterCredentialsRequestMultiError) AllErrors() []error { return m }

// GetPostgresqlClusterCredentialsRequestValidationError is the validation
// error returned by GetPostgresqlClusterCredentialsRequest.Validate if the
// designated constraints aren't met.
type GetPostgresqlClusterCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostgresqlClusterCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostgresqlClusterCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostgresqlClusterCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostgresqlClusterCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostgresqlClusterCredentialsRequestValidationError) ErrorName() string {
	return "GetPostgresqlClusterCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostgresqlClusterCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostgresqlClusterCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostgresqlClusterCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostgresqlClusterCredentialsRequestValidationError{}

// Validate checks the field values on PostgresqlClusterConnectionCredentials
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PostgresqlClusterConnectionCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PostgresqlClusterConnectionCredentials with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PostgresqlClusterConnectionCredentialsMultiError, or nil if none found.
func (m *PostgresqlClusterConnectionCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresqlClusterConnectionCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return PostgresqlClusterConnectionCredentialsMultiError(errors)
	}

	return nil
}

// PostgresqlClusterConnectionCredentialsMultiError is an error wrapping
// multiple validation errors returned by
// PostgresqlClusterConnectionCredentials.ValidateAll() if the designated
// constraints aren't met.
type PostgresqlClusterConnectionCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresqlClusterConnectionCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresqlClusterConnectionCredentialsMultiError) AllErrors() []error { return m }

// PostgresqlClusterConnectionCredentialsValidationError is the validation
// error returned by PostgresqlClusterConnectionCredentials.Validate if the
// designated constraints aren't met.
type PostgresqlClusterConnectionCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresqlClusterConnectionCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresqlClusterConnectionCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresqlClusterConnectionCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresqlClusterConnectionCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresqlClusterConnectionCredentialsValidationError) ErrorName() string {
	return "PostgresqlClusterConnectionCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresqlClusterConnectionCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresqlClusterConnectionCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresqlClusterConnectionCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresqlClusterConnectionCredentialsValidationError{}

// Validate checks the field values on GetPostgresqlClusterCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPostgresqlClusterCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPostgresqlClusterCredentialsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPostgresqlClusterCredentialsResponseMultiError, or nil if none found.
func (m *GetPostgresqlClusterCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostgresqlClusterCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnectionCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostgresqlClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostgresqlClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectionCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostgresqlClusterCredentialsResponseValidationError{
				field:  "ConnectionCredentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostgresqlClusterCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetPostgresqlClusterCredentialsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPostgresqlClusterCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostgresqlClusterCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostgresqlClusterCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostgresqlClusterCredentialsResponseMultiError) AllErrors() []error { return m }

// GetPostgresqlClusterCredentialsResponseValidationError is the validation
// error returned by GetPostgresqlClusterCredentialsResponse.Validate if the
// designated constraints aren't met.
type GetPostgresqlClusterCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostgresqlClusterCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostgresqlClusterCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostgresqlClusterCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostgresqlClusterCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostgresqlClusterCredentialsResponseValidationError) ErrorName() string {
	return "GetPostgresqlClusterCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostgresqlClusterCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostgresqlClusterCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostgresqlClusterCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostgresqlClusterCredentialsResponseValidationError{}

// Validate checks the field values on CreatePostgresqlClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostgresqlClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostgresqlClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePostgresqlClusterRequestMultiError, or nil if none found.
func (m *CreatePostgresqlClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostgresqlClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := CreatePostgresqlClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostgresqlClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostgresqlClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostgresqlClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostgresqlClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostgresqlClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostgresqlClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostgresqlClusterRequestMultiError(errors)
	}

	return nil
}

// CreatePostgresqlClusterRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePostgresqlClusterRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePostgresqlClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostgresqlClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostgresqlClusterRequestMultiError) AllErrors() []error { return m }

// CreatePostgresqlClusterRequestValidationError is the validation error
// returned by CreatePostgresqlClusterRequest.Validate if the designated
// constraints aren't met.
type CreatePostgresqlClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostgresqlClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostgresqlClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostgresqlClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostgresqlClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostgresqlClusterRequestValidationError) ErrorName() string {
	return "CreatePostgresqlClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostgresqlClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostgresqlClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostgresqlClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostgresqlClusterRequestValidationError{}

// Validate checks the field values on CreatePostgresqlClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostgresqlClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostgresqlClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePostgresqlClusterResponseMultiError, or nil if none found.
func (m *CreatePostgresqlClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostgresqlClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePostgresqlClusterResponseMultiError(errors)
	}

	return nil
}

// CreatePostgresqlClusterResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePostgresqlClusterResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePostgresqlClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostgresqlClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostgresqlClusterResponseMultiError) AllErrors() []error { return m }

// CreatePostgresqlClusterResponseValidationError is the validation error
// returned by CreatePostgresqlClusterResponse.Validate if the designated
// constraints aren't met.
type CreatePostgresqlClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostgresqlClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostgresqlClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostgresqlClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostgresqlClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostgresqlClusterResponseValidationError) ErrorName() string {
	return "CreatePostgresqlClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostgresqlClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostgresqlClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostgresqlClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostgresqlClusterResponseValidationError{}

// Validate checks the field values on UpdatePostgresqlClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostgresqlClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostgresqlClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePostgresqlClusterRequestMultiError, or nil if none found.
func (m *UpdatePostgresqlClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostgresqlClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := UpdatePostgresqlClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePostgresqlClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostgresqlClusterRequestMultiError(errors)
	}

	return nil
}

// UpdatePostgresqlClusterRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePostgresqlClusterRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostgresqlClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostgresqlClusterRequestMultiError) AllErrors() []error { return m }

// UpdatePostgresqlClusterRequestValidationError is the validation error
// returned by UpdatePostgresqlClusterRequest.Validate if the designated
// constraints aren't met.
type UpdatePostgresqlClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostgresqlClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostgresqlClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostgresqlClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostgresqlClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostgresqlClusterRequestValidationError) ErrorName() string {
	return "UpdatePostgresqlClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostgresqlClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostgresqlClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostgresqlClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostgresqlClusterRequestValidationError{}

// Validate checks the field values on UpdatePostgresqlClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostgresqlClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostgresqlClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePostgresqlClusterResponseMultiError, or nil if none found.
func (m *UpdatePostgresqlClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostgresqlClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePostgresqlClusterResponseMultiError(errors)
	}

	return nil
}

// UpdatePostgresqlClusterResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePostgresqlClusterResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePostgresqlClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostgresqlClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostgresqlClusterResponseMultiError) AllErrors() []error { return m }

// UpdatePostgresqlClusterResponseValidationError is the validation error
// returned by UpdatePostgresqlClusterResponse.Validate if the designated
// constraints aren't met.
type UpdatePostgresqlClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostgresqlClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostgresqlClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostgresqlClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostgresqlClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostgresqlClusterResponseValidationError) ErrorName() string {
	return "UpdatePostgresqlClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostgresqlClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostgresqlClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostgresqlClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostgresqlClusterResponseValidationError{}

// Validate checks the field values on GetPostgresqlClusterResourcesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPostgresqlClusterResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostgresqlClusterResourcesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPostgresqlClusterResourcesRequestMultiError, or nil if none found.
func (m *GetPostgresqlClusterResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostgresqlClusterResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParams() == nil {
		err := GetPostgresqlClusterResourcesRequestValidationError{
			field:  "Params",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostgresqlClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostgresqlClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostgresqlClusterResourcesRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostgresqlClusterResourcesRequestMultiError(errors)
	}

	return nil
}

// GetPostgresqlClusterResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPostgresqlClusterResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostgresqlClusterResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostgresqlClusterResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostgresqlClusterResourcesRequestMultiError) AllErrors() []error { return m }

// GetPostgresqlClusterResourcesRequestValidationError is the validation error
// returned by GetPostgresqlClusterResourcesRequest.Validate if the designated
// constraints aren't met.
type GetPostgresqlClusterResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostgresqlClusterResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostgresqlClusterResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostgresqlClusterResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostgresqlClusterResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostgresqlClusterResourcesRequestValidationError) ErrorName() string {
	return "GetPostgresqlClusterResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostgresqlClusterResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostgresqlClusterResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostgresqlClusterResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostgresqlClusterResourcesRequestValidationError{}

// Validate checks the field values on GetPostgresqlClusterResourcesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPostgresqlClusterResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostgresqlClusterResourcesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPostgresqlClusterResourcesResponseMultiError, or nil if none found.
func (m *GetPostgresqlClusterResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostgresqlClusterResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpected()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostgresqlClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostgresqlClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpected()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostgresqlClusterResourcesResponseValidationError{
				field:  "Expected",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostgresqlClusterResourcesResponseMultiError(errors)
	}

	return nil
}

// GetPostgresqlClusterResourcesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPostgresqlClusterResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostgresqlClusterResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostgresqlClusterResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostgresqlClusterResourcesResponseMultiError) AllErrors() []error { return m }

// GetPostgresqlClusterResourcesResponseValidationError is the validation error
// returned by GetPostgresqlClusterResourcesResponse.Validate if the
// designated constraints aren't met.
type GetPostgresqlClusterResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostgresqlClusterResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostgresqlClusterResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostgresqlClusterResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostgresqlClusterResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostgresqlClusterResourcesResponseValidationError) ErrorName() string {
	return "GetPostgresqlClusterResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostgresqlClusterResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostgresqlClusterResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostgresqlClusterResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostgresqlClusterResourcesResponseValidationError{}

// Validate checks the field values on PostgresqlClusterParams_Instance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PostgresqlClusterParams_Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresqlClusterParams_Instance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PostgresqlClusterParams_InstanceMultiError, or nil if none found.
func (m *PostgresqlClusterParams_Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresqlClusterParams_Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParams_InstanceValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParams_InstanceValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParams_InstanceValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskSize

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return PostgresqlClusterParams_InstanceMultiError(errors)
	}

	return nil
}

// PostgresqlClusterParams_InstanceMultiError is an error wrapping multiple
// validation errors returned by
// PostgresqlClusterParams_Instance.ValidateAll() if the designated
// constraints aren't met.
type PostgresqlClusterParams_InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresqlClusterParams_InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresqlClusterParams_InstanceMultiError) AllErrors() []error { return m }

// PostgresqlClusterParams_InstanceValidationError is the validation error
// returned by PostgresqlClusterParams_Instance.Validate if the designated
// constraints aren't met.
type PostgresqlClusterParams_InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresqlClusterParams_InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresqlClusterParams_InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresqlClusterParams_InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresqlClusterParams_InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresqlClusterParams_InstanceValidationError) ErrorName() string {
	return "PostgresqlClusterParams_InstanceValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresqlClusterParams_InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresqlClusterParams_Instance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresqlClusterParams_InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresqlClusterParams_InstanceValidationError{}

// Validate checks the field values on PostgresqlClusterParams_PGBouncer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PostgresqlClusterParams_PGBouncer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresqlClusterParams_PGBouncer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PostgresqlClusterParams_PGBouncerMultiError, or nil if none found.
func (m *PostgresqlClusterParams_PGBouncer) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresqlClusterParams_PGBouncer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresqlClusterParams_PGBouncerValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresqlClusterParams_PGBouncerValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresqlClusterParams_PGBouncerValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskSize

	if len(errors) > 0 {
		return PostgresqlClusterParams_PGBouncerMultiError(errors)
	}

	return nil
}

// PostgresqlClusterParams_PGBouncerMultiError is an error wrapping multiple
// validation errors returned by
// PostgresqlClusterParams_PGBouncer.ValidateAll() if the designated
// constraints aren't met.
type PostgresqlClusterParams_PGBouncerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresqlClusterParams_PGBouncerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresqlClusterParams_PGBouncerMultiError) AllErrors() []error { return m }

// PostgresqlClusterParams_PGBouncerValidationError is the validation error
// returned by PostgresqlClusterParams_PGBouncer.Validate if the designated
// constraints aren't met.
type PostgresqlClusterParams_PGBouncerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresqlClusterParams_PGBouncerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresqlClusterParams_PGBouncerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresqlClusterParams_PGBouncerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresqlClusterParams_PGBouncerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresqlClusterParams_PGBouncerValidationError) ErrorName() string {
	return "PostgresqlClusterParams_PGBouncerValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresqlClusterParams_PGBouncerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresqlClusterParams_PGBouncer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresqlClusterParams_PGBouncerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresqlClusterParams_PGBouncerValidationError{}

// Validate checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError, or
// nil if none found.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPgbouncer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
					field:  "Pgbouncer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgbouncer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{
				field:  "Pgbouncer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Suspend

	// no validation rules for Resume

	if len(errors) > 0 {
		return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError(errors)
	}

	return nil
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError is an
// error wrapping multiple validation errors returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams.ValidateAll()
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsMultiError) AllErrors() []error {
	return m
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError
// is the validation error returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams.Validate if
// the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) ErrorName() string {
	return "UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParamsValidationError{}

// Validate checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError,
// or nil if none found.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Image

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError(errors)
	}

	return nil
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError
// is an error wrapping multiple validation errors returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance.ValidateAll()
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceMultiError) AllErrors() []error {
	return m
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError
// is the validation error returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance.Validate
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) ErrorName() string {
	return "UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_Instance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_InstanceValidationError{}

// Validate checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError,
// or nil if none found.
func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError(errors)
	}

	return nil
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError
// is an error wrapping multiple validation errors returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer.ValidateAll()
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerMultiError) AllErrors() []error {
	return m
}

// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError
// is the validation error returned by
// UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer.Validate
// if the designated constraints aren't met.
type UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) ErrorName() string {
	return "UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostgresqlClusterRequest_UpdatePostgresqlClusterParams_PGBouncerValidationError{}
