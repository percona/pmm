// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/dbaas/pxc_clusters.proto

package dbaasv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PXCClusterParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PXCClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCClusterParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PXCClusterParamsMultiError, or nil if none found.
func (m *PXCClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetPxc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPxc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParamsValidationError{
				field:  "Pxc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProxysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParamsValidationError{
				field:  "Proxysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHaproxy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParamsValidationError{
				field:  "Haproxy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBackup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Backup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParamsValidationError{
				field:  "Backup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRestore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParamsValidationError{
					field:  "Restore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParamsValidationError{
				field:  "Restore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PXCClusterParamsMultiError(errors)
	}

	return nil
}

// PXCClusterParamsMultiError is an error wrapping multiple validation errors
// returned by PXCClusterParams.ValidateAll() if the designated constraints
// aren't met.
type PXCClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterParamsMultiError) AllErrors() []error { return m }

// PXCClusterParamsValidationError is the validation error returned by
// PXCClusterParams.Validate if the designated constraints aren't met.
type PXCClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterParamsValidationError) ErrorName() string { return "PXCClusterParamsValidationError" }

// Error satisfies the builtin error interface
func (e PXCClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterParamsValidationError{}

// Validate checks the field values on GetPXCClusterCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPXCClusterCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCClusterCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPXCClusterCredentialsRequestMultiError, or nil if none found.
func (m *GetPXCClusterCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCClusterCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := GetPXCClusterCredentialsRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetPXCClusterCredentialsRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPXCClusterCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetPXCClusterCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by GetPXCClusterCredentialsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPXCClusterCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCClusterCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCClusterCredentialsRequestMultiError) AllErrors() []error { return m }

// GetPXCClusterCredentialsRequestValidationError is the validation error
// returned by GetPXCClusterCredentialsRequest.Validate if the designated
// constraints aren't met.
type GetPXCClusterCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCClusterCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCClusterCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCClusterCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCClusterCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCClusterCredentialsRequestValidationError) ErrorName() string {
	return "GetPXCClusterCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCClusterCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCClusterCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCClusterCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCClusterCredentialsRequestValidationError{}

// Validate checks the field values on PXCClusterConnectionCredentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PXCClusterConnectionCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCClusterConnectionCredentials with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PXCClusterConnectionCredentialsMultiError, or nil if none found.
func (m *PXCClusterConnectionCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCClusterConnectionCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return PXCClusterConnectionCredentialsMultiError(errors)
	}

	return nil
}

// PXCClusterConnectionCredentialsMultiError is an error wrapping multiple
// validation errors returned by PXCClusterConnectionCredentials.ValidateAll()
// if the designated constraints aren't met.
type PXCClusterConnectionCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterConnectionCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterConnectionCredentialsMultiError) AllErrors() []error { return m }

// PXCClusterConnectionCredentialsValidationError is the validation error
// returned by PXCClusterConnectionCredentials.Validate if the designated
// constraints aren't met.
type PXCClusterConnectionCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterConnectionCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterConnectionCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterConnectionCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterConnectionCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterConnectionCredentialsValidationError) ErrorName() string {
	return "PXCClusterConnectionCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e PXCClusterConnectionCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCClusterConnectionCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterConnectionCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterConnectionCredentialsValidationError{}

// Validate checks the field values on GetPXCClusterCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPXCClusterCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCClusterCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPXCClusterCredentialsResponseMultiError, or nil if none found.
func (m *GetPXCClusterCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCClusterCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnectionCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPXCClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPXCClusterCredentialsResponseValidationError{
					field:  "ConnectionCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectionCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPXCClusterCredentialsResponseValidationError{
				field:  "ConnectionCredentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPXCClusterCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetPXCClusterCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPXCClusterCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPXCClusterCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCClusterCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCClusterCredentialsResponseMultiError) AllErrors() []error { return m }

// GetPXCClusterCredentialsResponseValidationError is the validation error
// returned by GetPXCClusterCredentialsResponse.Validate if the designated
// constraints aren't met.
type GetPXCClusterCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCClusterCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCClusterCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCClusterCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCClusterCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCClusterCredentialsResponseValidationError) ErrorName() string {
	return "GetPXCClusterCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCClusterCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCClusterCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCClusterCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCClusterCredentialsResponseValidationError{}

// Validate checks the field values on CreatePXCClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePXCClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePXCClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePXCClusterRequestMultiError, or nil if none found.
func (m *CreatePXCClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePXCClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := CreatePXCClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePXCClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePXCClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePXCClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePXCClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePXCClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePXCClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePXCClusterRequestMultiError(errors)
	}

	return nil
}

// CreatePXCClusterRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePXCClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePXCClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePXCClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePXCClusterRequestMultiError) AllErrors() []error { return m }

// CreatePXCClusterRequestValidationError is the validation error returned by
// CreatePXCClusterRequest.Validate if the designated constraints aren't met.
type CreatePXCClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePXCClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePXCClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePXCClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePXCClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePXCClusterRequestValidationError) ErrorName() string {
	return "CreatePXCClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePXCClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePXCClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePXCClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePXCClusterRequestValidationError{}

// Validate checks the field values on CreatePXCClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePXCClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePXCClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePXCClusterResponseMultiError, or nil if none found.
func (m *CreatePXCClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePXCClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePXCClusterResponseMultiError(errors)
	}

	return nil
}

// CreatePXCClusterResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePXCClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePXCClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePXCClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePXCClusterResponseMultiError) AllErrors() []error { return m }

// CreatePXCClusterResponseValidationError is the validation error returned by
// CreatePXCClusterResponse.Validate if the designated constraints aren't met.
type CreatePXCClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePXCClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePXCClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePXCClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePXCClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePXCClusterResponseValidationError) ErrorName() string {
	return "CreatePXCClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePXCClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePXCClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePXCClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePXCClusterResponseValidationError{}

// Validate checks the field values on UpdatePXCClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePXCClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePXCClusterRequestMultiError, or nil if none found.
func (m *UpdatePXCClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKubernetesClusterName()) < 1 {
		err := UpdatePXCClusterRequestValidationError{
			field:  "KubernetesClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePXCClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expose

	// no validation rules for InternetFacing

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePXCClusterRequestMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePXCClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePXCClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterRequestMultiError) AllErrors() []error { return m }

// UpdatePXCClusterRequestValidationError is the validation error returned by
// UpdatePXCClusterRequest.Validate if the designated constraints aren't met.
type UpdatePXCClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePXCClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePXCClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePXCClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePXCClusterRequestValidationError) ErrorName() string {
	return "UpdatePXCClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterRequestValidationError{}

// Validate checks the field values on UpdatePXCClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePXCClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePXCClusterResponseMultiError, or nil if none found.
func (m *UpdatePXCClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePXCClusterResponseMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePXCClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePXCClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterResponseMultiError) AllErrors() []error { return m }

// UpdatePXCClusterResponseValidationError is the validation error returned by
// UpdatePXCClusterResponse.Validate if the designated constraints aren't met.
type UpdatePXCClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePXCClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePXCClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePXCClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePXCClusterResponseValidationError) ErrorName() string {
	return "UpdatePXCClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterResponseValidationError{}

// Validate checks the field values on GetPXCClusterResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPXCClusterResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCClusterResourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPXCClusterResourcesRequestMultiError, or nil if none found.
func (m *GetPXCClusterResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCClusterResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParams() == nil {
		err := GetPXCClusterResourcesRequestValidationError{
			field:  "Params",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPXCClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPXCClusterResourcesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPXCClusterResourcesRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPXCClusterResourcesRequestMultiError(errors)
	}

	return nil
}

// GetPXCClusterResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by GetPXCClusterResourcesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPXCClusterResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCClusterResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCClusterResourcesRequestMultiError) AllErrors() []error { return m }

// GetPXCClusterResourcesRequestValidationError is the validation error
// returned by GetPXCClusterResourcesRequest.Validate if the designated
// constraints aren't met.
type GetPXCClusterResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCClusterResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCClusterResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCClusterResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCClusterResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCClusterResourcesRequestValidationError) ErrorName() string {
	return "GetPXCClusterResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCClusterResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCClusterResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCClusterResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCClusterResourcesRequestValidationError{}

// Validate checks the field values on GetPXCClusterResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPXCClusterResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPXCClusterResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPXCClusterResourcesResponseMultiError, or nil if none found.
func (m *GetPXCClusterResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPXCClusterResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpected()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPXCClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPXCClusterResourcesResponseValidationError{
					field:  "Expected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpected()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPXCClusterResourcesResponseValidationError{
				field:  "Expected",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPXCClusterResourcesResponseMultiError(errors)
	}

	return nil
}

// GetPXCClusterResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by GetPXCClusterResourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPXCClusterResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPXCClusterResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPXCClusterResourcesResponseMultiError) AllErrors() []error { return m }

// GetPXCClusterResourcesResponseValidationError is the validation error
// returned by GetPXCClusterResourcesResponse.Validate if the designated
// constraints aren't met.
type GetPXCClusterResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPXCClusterResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPXCClusterResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPXCClusterResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPXCClusterResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPXCClusterResourcesResponseValidationError) ErrorName() string {
	return "GetPXCClusterResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPXCClusterResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPXCClusterResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPXCClusterResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPXCClusterResourcesResponseValidationError{}

// Validate checks the field values on PXCClusterParams_PXC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PXCClusterParams_PXC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCClusterParams_PXC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PXCClusterParams_PXCMultiError, or nil if none found.
func (m *PXCClusterParams_PXC) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCClusterParams_PXC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParams_PXCValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParams_PXCValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParams_PXCValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskSize

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return PXCClusterParams_PXCMultiError(errors)
	}

	return nil
}

// PXCClusterParams_PXCMultiError is an error wrapping multiple validation
// errors returned by PXCClusterParams_PXC.ValidateAll() if the designated
// constraints aren't met.
type PXCClusterParams_PXCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterParams_PXCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterParams_PXCMultiError) AllErrors() []error { return m }

// PXCClusterParams_PXCValidationError is the validation error returned by
// PXCClusterParams_PXC.Validate if the designated constraints aren't met.
type PXCClusterParams_PXCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterParams_PXCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterParams_PXCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterParams_PXCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterParams_PXCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterParams_PXCValidationError) ErrorName() string {
	return "PXCClusterParams_PXCValidationError"
}

// Error satisfies the builtin error interface
func (e PXCClusterParams_PXCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCClusterParams_PXC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterParams_PXCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterParams_PXCValidationError{}

// Validate checks the field values on PXCClusterParams_ProxySQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PXCClusterParams_ProxySQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCClusterParams_ProxySQL with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PXCClusterParams_ProxySQLMultiError, or nil if none found.
func (m *PXCClusterParams_ProxySQL) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCClusterParams_ProxySQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParams_ProxySQLValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParams_ProxySQLValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParams_ProxySQLValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskSize

	if len(errors) > 0 {
		return PXCClusterParams_ProxySQLMultiError(errors)
	}

	return nil
}

// PXCClusterParams_ProxySQLMultiError is an error wrapping multiple validation
// errors returned by PXCClusterParams_ProxySQL.ValidateAll() if the
// designated constraints aren't met.
type PXCClusterParams_ProxySQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterParams_ProxySQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterParams_ProxySQLMultiError) AllErrors() []error { return m }

// PXCClusterParams_ProxySQLValidationError is the validation error returned by
// PXCClusterParams_ProxySQL.Validate if the designated constraints aren't met.
type PXCClusterParams_ProxySQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterParams_ProxySQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterParams_ProxySQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterParams_ProxySQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterParams_ProxySQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterParams_ProxySQLValidationError) ErrorName() string {
	return "PXCClusterParams_ProxySQLValidationError"
}

// Error satisfies the builtin error interface
func (e PXCClusterParams_ProxySQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCClusterParams_ProxySQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterParams_ProxySQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterParams_ProxySQLValidationError{}

// Validate checks the field values on PXCClusterParams_HAProxy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PXCClusterParams_HAProxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PXCClusterParams_HAProxy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PXCClusterParams_HAProxyMultiError, or nil if none found.
func (m *PXCClusterParams_HAProxy) ValidateAll() error {
	return m.validate(true)
}

func (m *PXCClusterParams_HAProxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PXCClusterParams_HAProxyValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PXCClusterParams_HAProxyValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PXCClusterParams_HAProxyValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PXCClusterParams_HAProxyMultiError(errors)
	}

	return nil
}

// PXCClusterParams_HAProxyMultiError is an error wrapping multiple validation
// errors returned by PXCClusterParams_HAProxy.ValidateAll() if the designated
// constraints aren't met.
type PXCClusterParams_HAProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PXCClusterParams_HAProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PXCClusterParams_HAProxyMultiError) AllErrors() []error { return m }

// PXCClusterParams_HAProxyValidationError is the validation error returned by
// PXCClusterParams_HAProxy.Validate if the designated constraints aren't met.
type PXCClusterParams_HAProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PXCClusterParams_HAProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PXCClusterParams_HAProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PXCClusterParams_HAProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PXCClusterParams_HAProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PXCClusterParams_HAProxyValidationError) ErrorName() string {
	return "PXCClusterParams_HAProxyValidationError"
}

// Error satisfies the builtin error interface
func (e PXCClusterParams_HAProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPXCClusterParams_HAProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PXCClusterParams_HAProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PXCClusterParams_HAProxyValidationError{}

// Validate checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError, or nil if none found.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterSize

	if all {
		switch v := interface{}(m.GetPxc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Pxc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPxc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
				field:  "Pxc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProxysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
				field:  "Proxysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Suspend

	// no validation rules for Resume

	if all {
		switch v := interface{}(m.GetHaproxy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{
				field:  "Haproxy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError is an error
// wrapping multiple validation errors returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams.ValidateAll() if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParamsMultiError) AllErrors() []error { return m }

// UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError is the
// validation error returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams.Validate if the designated
// constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) ErrorName() string {
	return "UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterRequest_UpdatePXCClusterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterRequest_UpdatePXCClusterParamsValidationError{}

// Validate checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError, or nil if
// none found.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Image

	// no validation rules for Configuration

	// no validation rules for StorageClass

	if len(errors) > 0 {
		return UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError is an error
// wrapping multiple validation errors returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC.ValidateAll() if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCMultiError) AllErrors() []error { return m }

// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError is the
// validation error returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC.Validate if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) ErrorName() string {
	return "UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterRequest_UpdatePXCClusterParams_PXC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterRequest_UpdatePXCClusterParams_PXCValidationError{}

// Validate checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError, or nil
// if none found.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError is an
// error wrapping multiple validation errors returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL.ValidateAll() if
// the designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLMultiError) AllErrors() []error {
	return m
}

// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError is
// the validation error returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL.Validate if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) ErrorName() string {
	return "UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQLValidationError{}

// Validate checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError, or nil if
// none found.
func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComputeResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError{
					field:  "ComputeResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError{
				field:  "ComputeResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError(errors)
	}

	return nil
}

// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError is an error
// wrapping multiple validation errors returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy.ValidateAll() if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyMultiError) AllErrors() []error {
	return m
}

// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError is the
// validation error returned by
// UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy.Validate if the
// designated constraints aren't met.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) ErrorName() string {
	return "UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxyValidationError{}
