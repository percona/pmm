// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: managementpb/ia/rules.proto

package iav1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	managementpb "github.com/percona/pmm/api/managementpb"
	alertingv1 "github.com/percona/pmm/api/managementpb/alerting"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = alertingv1.ParamType(0)

	_ = managementpb.Severity(0)
)

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on ParamValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParamValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParamValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParamValueMultiError, or
// nil if none found.
func (m *ParamValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ParamValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ParamValueValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	switch v := m.Value.(type) {
	case *ParamValue_Bool:
		if v == nil {
			err := ParamValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bool
	case *ParamValue_Float:
		if v == nil {
			err := ParamValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Float
	case *ParamValue_String_:
		if v == nil {
			err := ParamValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for String_
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ParamValueMultiError(errors)
	}

	return nil
}

// ParamValueMultiError is an error wrapping multiple validation errors
// returned by ParamValue.ValidateAll() if the designated constraints aren't met.
type ParamValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParamValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParamValueMultiError) AllErrors() []error { return m }

// ParamValueValidationError is the validation error returned by
// ParamValue.Validate if the designated constraints aren't met.
type ParamValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamValueValidationError) ErrorName() string { return "ParamValueValidationError" }

// Error satisfies the builtin error interface
func (e ParamValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParamValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamValueValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for Name

	// no validation rules for Summary

	// no validation rules for TemplateName

	// no validation rules for Disabled

	// no validation rules for ExprTemplate

	// no validation rules for Expr

	for idx, item := range m.GetParamsDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("ParamsDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("ParamsDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("ParamsDefinitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetParamsValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("ParamsValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("ParamsValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("ParamsValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDefaultFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "DefaultFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "DefaultFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "DefaultFor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "For",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DefaultSeverity

	// no validation rules for Severity

	// no validation rules for CustomLabels

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on ListAlertRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlertRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertRulesRequestMultiError, or nil if none found.
func (m *ListAlertRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlertRulesRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlertRulesRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlertRulesRequestValidationError{
				field:  "PageParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAlertRulesRequestMultiError(errors)
	}

	return nil
}

// ListAlertRulesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAlertRulesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAlertRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertRulesRequestMultiError) AllErrors() []error { return m }

// ListAlertRulesRequestValidationError is the validation error returned by
// ListAlertRulesRequest.Validate if the designated constraints aren't met.
type ListAlertRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertRulesRequestValidationError) ErrorName() string {
	return "ListAlertRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertRulesRequestValidationError{}

// Validate checks the field values on ListAlertRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlertRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertRulesResponseMultiError, or nil if none found.
func (m *ListAlertRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAlertRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAlertRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlertRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTotals()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlertRulesResponseValidationError{
					field:  "Totals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlertRulesResponseValidationError{
					field:  "Totals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotals()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlertRulesResponseValidationError{
				field:  "Totals",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAlertRulesResponseMultiError(errors)
	}

	return nil
}

// ListAlertRulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAlertRulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAlertRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertRulesResponseMultiError) AllErrors() []error { return m }

// ListAlertRulesResponseValidationError is the validation error returned by
// ListAlertRulesResponse.Validate if the designated constraints aren't met.
type ListAlertRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertRulesResponseValidationError) ErrorName() string {
	return "ListAlertRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertRulesResponseValidationError{}

// Validate checks the field values on CreateAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRuleRequestMultiError, or nil if none found.
func (m *CreateAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateName

	// no validation rules for SourceRuleId

	// no validation rules for Name

	// no validation rules for Disabled

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRuleRequestValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertRuleRequestValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertRuleRequestValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertRuleRequestValidationError{
				field:  "For",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	// no validation rules for CustomLabels

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRuleRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAlertRuleRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRuleRequestMultiError) AllErrors() []error { return m }

// CreateAlertRuleRequestValidationError is the validation error returned by
// CreateAlertRuleRequest.Validate if the designated constraints aren't met.
type CreateAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRuleRequestValidationError) ErrorName() string {
	return "CreateAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRuleRequestValidationError{}

// Validate checks the field values on CreateAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRuleResponseMultiError, or nil if none found.
func (m *CreateAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	if len(errors) > 0 {
		return CreateAlertRuleResponseMultiError(errors)
	}

	return nil
}

// CreateAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRuleResponseMultiError) AllErrors() []error { return m }

// CreateAlertRuleResponseValidationError is the validation error returned by
// CreateAlertRuleResponse.Validate if the designated constraints aren't met.
type CreateAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRuleResponseValidationError) ErrorName() string {
	return "CreateAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRuleResponseValidationError{}

// Validate checks the field values on UpdateAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertRuleRequestMultiError, or nil if none found.
func (m *UpdateAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRuleId()) < 1 {
		err := UpdateAlertRuleRequestValidationError{
			field:  "RuleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Disabled

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRuleRequestValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlertRuleRequestValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlertRuleRequestValidationError{
					field:  "For",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertRuleRequestValidationError{
				field:  "For",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	// no validation rules for CustomLabels

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRuleRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRuleRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAlertRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRuleRequestMultiError) AllErrors() []error { return m }

// UpdateAlertRuleRequestValidationError is the validation error returned by
// UpdateAlertRuleRequest.Validate if the designated constraints aren't met.
type UpdateAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRuleRequestValidationError) ErrorName() string {
	return "UpdateAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRuleRequestValidationError{}

// Validate checks the field values on UpdateAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertRuleResponseMultiError, or nil if none found.
func (m *UpdateAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertRuleResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRuleResponseMultiError) AllErrors() []error { return m }

// UpdateAlertRuleResponseValidationError is the validation error returned by
// UpdateAlertRuleResponse.Validate if the designated constraints aren't met.
type UpdateAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRuleResponseValidationError) ErrorName() string {
	return "UpdateAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRuleResponseValidationError{}

// Validate checks the field values on ToggleAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleAlertRuleRequestMultiError, or nil if none found.
func (m *ToggleAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRuleId()) < 1 {
		err := ToggleAlertRuleRequestValidationError{
			field:  "RuleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Disabled

	if len(errors) > 0 {
		return ToggleAlertRuleRequestMultiError(errors)
	}

	return nil
}

// ToggleAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleAlertRuleRequestMultiError) AllErrors() []error { return m }

// ToggleAlertRuleRequestValidationError is the validation error returned by
// ToggleAlertRuleRequest.Validate if the designated constraints aren't met.
type ToggleAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleAlertRuleRequestValidationError) ErrorName() string {
	return "ToggleAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleAlertRuleRequestValidationError{}

// Validate checks the field values on ToggleAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleAlertRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleAlertRuleResponseMultiError, or nil if none found.
func (m *ToggleAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleAlertRuleResponseMultiError(errors)
	}

	return nil
}

// ToggleAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type ToggleAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleAlertRuleResponseMultiError) AllErrors() []error { return m }

// ToggleAlertRuleResponseValidationError is the validation error returned by
// ToggleAlertRuleResponse.Validate if the designated constraints aren't met.
type ToggleAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleAlertRuleResponseValidationError) ErrorName() string {
	return "ToggleAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleAlertRuleResponseValidationError{}

// Validate checks the field values on DeleteAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertRuleRequestMultiError, or nil if none found.
func (m *DeleteAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRuleId()) < 1 {
		err := DeleteAlertRuleRequestValidationError{
			field:  "RuleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAlertRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertRuleRequestMultiError) AllErrors() []error { return m }

// DeleteAlertRuleRequestValidationError is the validation error returned by
// DeleteAlertRuleRequest.Validate if the designated constraints aren't met.
type DeleteAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertRuleRequestValidationError) ErrorName() string {
	return "DeleteAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertRuleRequestValidationError{}

// Validate checks the field values on DeleteAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertRuleResponseMultiError, or nil if none found.
func (m *DeleteAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAlertRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertRuleResponseMultiError) AllErrors() []error { return m }

// DeleteAlertRuleResponseValidationError is the validation error returned by
// DeleteAlertRuleResponse.Validate if the designated constraints aren't met.
type DeleteAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertRuleResponseValidationError) ErrorName() string {
	return "DeleteAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertRuleResponseValidationError{}
