syntax = "proto3";

package ia.v1beta1;

option go_package = "api/managementpb/ia;iav1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "managementpb/ia/boolean_flag.proto";
import "managementpb/ia/channels.proto";
import "managementpb/ia/params.proto";
import "managementpb/ia/templates.proto";
import "managementpb/pagination.proto";
import "managementpb/severity.proto";

// TODO move it to parent directory / package once API is v1-stable

// FilterType represents filter matching type.
enum FilterType {
  FILTER_TYPE_INVALID = 0;
  // =
  EQUAL = 1;
  // !=
  // NOT_EQUAL = 2;

  // =~
  REGEX = 3;
  // !~
  // NOT_REGEX = 4;

}

// Filter repsents a single filter condition.
message Filter {
  FilterType type = 1;
  string key = 2;
  string value = 3;
}

// ParamValue represents a single rule parameter value for List, Change and Update APIs.
message ParamValue {
  // Machine-readable name (ID) that is used in expression.
  string name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Parameter type.
  ParamType type = 2;
  // Parameter value.
  oneof value {
    // Bool value.
    bool bool = 3;
    // Float value.
    double float = 4;
    // String value.
    string string = 5;
  }
}

// Rule represents Alert Rule.
message Rule {
  // Rule ID.
  string rule_id = 1;
  // Rule name.
  string name = 2;
  // Rule human-readable summary.
  string summary = 3;
  // Template used for this rule.
  string template_name = 4;
  // True if that rule is disabled.
  bool disabled = 5;
  // Expression template.
  string expr_template = 6;
  // Expression filled with parameters.
  string expr = 7;
  // Expression parameters definitions.
  repeated ParamDefinition params_definitions = 8;
  // Expression parameters values.
  repeated ParamValue params_values = 9;
  // Default for duration.
  google.protobuf.Duration default_for = 10;
  // For duration.
  google.protobuf.Duration for = 11;
  // Default severity.
  management.Severity default_severity = 12;
  // Severity.
  management.Severity severity = 13;
  // Custom labels.
  map<string, string> custom_labels = 14;
  // Labels.
  map<string, string> labels = 15;
  // Annotations.
  map<string, string> annotations = 16;
  // Filters.
  repeated Filter filters = 17;
  // Channels.
  repeated Channel channels = 18;
  // Rule creation time.
  google.protobuf.Timestamp created_at = 19;
}

message ListAlertRulesRequest {
  // Page request.
  management.PageParams page_params = 1;
}

message ListAlertRulesResponse {
  repeated Rule rules = 1;
  // Total items and pages.
  management.PageTotals totals = 2;
}

message CreateAlertRuleRequest {
  // Template name. Can't be specified simultaneously with source_rule_id.
  string template_name = 1;
  // ID of the rule that will be used as source. Can't be specified simultaneously with template_name.
  string source_rule_id = 2;
  // Rule name.
  string name = 3;
  // New rule status.
  bool disabled = 4;
  // Rule parameters. All template parameters should be set.
  repeated ParamValue params = 5;
  // Rule duration. Should be set.
  google.protobuf.Duration for = 6;
  // Rule severity. Should be set.
  management.Severity severity = 7;
  // All custom labels to add or remove (with empty values) to default labels from template.
  map<string, string> custom_labels = 8;
  // Filters. Should be set.
  repeated Filter filters = 9;
  // Channels. Should be set.
  repeated string channel_ids = 10;
}

message CreateAlertRuleResponse {
  // Rule ID.
  string rule_id = 1;
}

message UpdateAlertRuleRequest {
  // Rule ID.
  string rule_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Rule name. Should be set.
  string name = 2;
  // New rule status. Should be set.
  bool disabled = 3;
  // Rule parameters. All template parameters should be set.
  repeated ParamValue params = 4;
  // Rule duration. Should be set.
  google.protobuf.Duration for = 5;
  // Rule severity. Should be set.
  management.Severity severity = 6;
  // All custom labels to add or remove (with empty values) to default labels from template.
  map<string, string> custom_labels = 7;
  // Filters. Should be set.
  repeated Filter filters = 8;
  // Channels. Should be set.
  repeated string channel_ids = 9;
}

message UpdateAlertRuleResponse {}

message ToggleAlertRuleRequest {
  // Rule ID.
  string rule_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // New rule status, if set.
  BooleanFlag disabled = 2;
}

message ToggleAlertRuleResponse {}

message DeleteAlertRuleRequest {
  // Rule ID.
  string rule_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message DeleteAlertRuleResponse {}

// Rules service provides public methods for managing Alerting rules.
service Rules {
  // ListAlertRules returns a list of all Alerting rules.
  rpc ListAlertRules(ListAlertRulesRequest) returns (ListAlertRulesResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/List"
      body: "*"
    };
  }
  // CreateAlertRule creates Alerting rule.
  rpc CreateAlertRule(CreateAlertRuleRequest) returns (CreateAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Create"
      body: "*"
    };
  }
  // UpdateAlertRule updates Alerting rule.
  rpc UpdateAlertRule(UpdateAlertRuleRequest) returns (UpdateAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Update"
      body: "*"
    };
  }
  // ToggleAlertRule allows to switch between disabled and enabled states of an Alert Rule.
  rpc ToggleAlertRule(ToggleAlertRuleRequest) returns (ToggleAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Toggle"
      body: "*"
    };
  }
  // DeleteAlertRule deletes Alerting rule.
  rpc DeleteAlertRule(DeleteAlertRuleRequest) returns (DeleteAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Delete"
      body: "*"
    };
  }
}
