syntax = "proto3";

package ia.v1beta1;

option go_package = "api/managementpb/ia;iav1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "managementpb/checks.proto";
import "managementpb/ia/boolean_flag.proto";
import "managementpb/ia/channels.proto";
import "managementpb/ia/params.proto";
import "managementpb/ia/templates.proto";

// TODO move it to parent directory / package once API is v1-stable

// FilterType represents filter matching type.
enum FilterType {
  FILTER_TYPE_INVALID = 0;
  // =
  EQUAL = 1;
  // !=
  NOT_EQUAL = 2;
  // =~
  REGEX = 3;
  // !~
  NOT_REGEX = 4;
}

// Filter repsents a single filter condition.
message Filter {
  FilterType type = 1;
  string key = 2;
  string value = 3;
}

// RuleParam represents a single rule parameter for List, Change and Update APIs.
message RuleParam {
  // Machine-readable name (ID) that is used in expression.
  string name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Parameter type.
  ParamType type = 2;
  // For List API, true if the value wasn't set explicitly and has default value from the template.
  // For Change and Update APIs, true if the value should be reset to the default value from the template.
  bool default = 3;
  // Parameter value.
  oneof value {
    // Bool value.
    bool bool = 4;
    // Float value.
    float float = 5;
    // String value.
    string string = 6;
  }
}

// Rule represents Alert Rule.
message Rule {
  // Template used to create that rule.
  Template template = 1;
  // Rule ID.
  string rule_id = 2;
  // True if that rule is disabled.
  bool disabled = 3;
  // Rule human-readable summary.
  string summary = 4;
  // Rule parameters.
  repeated RuleParam params = 5;
  // Rule duration.
  google.protobuf.Duration for = 6;
  // True if duration wasn't set explicitly and has default value from template.
  bool default_for = 7;
  // Rule severity.
  management.Severity severity = 8;
  // True if severity wasn't set explicitly and has default value from template.
  bool default_severity = 9;
  // Custom labels.
  map<string, string> custom_labels = 10;
  // Filters.
  repeated Filter filters = 11;
  // Channels.
  repeated Channel channels = 12;
  // Rule creation time.
  google.protobuf.Timestamp created_at = 13;
}

message ListAlertRulesRequest {
  // If true, rule files will be re-read from disk.
  bool reload = 1;
}

message ListAlertRulesResponse {
  repeated Rule rules = 1;
}

message CreateAlertRuleRequest {
  // Template name.
  string template_name = 1;
  // New rule status.
  bool disabled = 2;
  // Parameters to change from the default values. Missing parameters will not be changed.
  repeated RuleParam params = 3;
  // Rule set duration. Zero value will use default value.
  google.protobuf.Duration for = 4;
  // Rule severity. Zero value will use default value.
  management.Severity severity = 5;
  // Custom labels to add or remove (with empty values) to default labels.
  map<string, string> custom_labels = 6;
  // Filters.
  repeated Filter filters = 7;
  // Channels.
  repeated string channel_ids = 8;
}

message CreateAlertRuleResponse {}

message UpdateAlertRuleRequest {
  // Rule ID.
  string rule_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // New rule status, if set.
  BooleanFlag disabled = 2;
  // Parameters to change. Missing parameters will not be changed.
  repeated RuleParam params = 3;
  // Rule set duration. Zero value will not change it.
  google.protobuf.Duration for = 4;
  // Remove set duration (reset to default).
  bool remove_for = 5;
  // Severity.
  management.Severity severity = 6;
  // Remove set severity (reset to default).
  bool remove_severity = 7;
  // Replace all custom user-assigned labels.
  // TODO aleksi
  map<string, string> custom_labels = 8;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 9;
  // Filters.
  repeated Filter filters = 10;
  // TODO remove all

  // Channels TODO.
  repeated string channel_names = 11;
  // TODO remove all

}

message UpdateAlertRuleResponse {}

message DeleteAlertRuleRequest {
  string name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message DeleteAlertRuleResponse {}

// Rules service provides public methods for managing Integrated Alerting rules.
service Rules {
  // ListAlertRules returns a list of all Integrated Alerting rules.
  rpc ListAlertRules(ListAlertRulesRequest) returns (ListAlertRulesResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/List"
      body: "*"
    };
  }
  // CreateAlertRule changes Integrated Alerting rule.
  rpc CreateAlertRule(CreateAlertRuleRequest) returns (CreateAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Create"
      body: "*"
    };
  }
  // UpdateAlertRule changes Integrated Alerting rule.
  rpc UpdateAlertRule(UpdateAlertRuleRequest) returns (UpdateAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Update"
      body: "*"
    };
  }
  // DeleteAlertRule changes Integrated Alerting rule.
  rpc DeleteAlertRule(DeleteAlertRuleRequest) returns (DeleteAlertRuleResponse) {
    option (google.api.http) = {
      post: "/v1/management/ia/Rules/Delete"
      body: "*"
    };
  }
}
