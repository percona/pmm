// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAlertsReader is a Reader for the ListAlerts structure.
type ListAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListAlertsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAlertsOK creates a ListAlertsOK with default headers values
func NewListAlertsOK() *ListAlertsOK {
	return &ListAlertsOK{}
}

/*ListAlertsOK handles this case with default header values.

A successful response.
*/
type ListAlertsOK struct {
	Payload *ListAlertsOKBody
}

func (o *ListAlertsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Alerts/List][%d] listAlertsOk  %+v", 200, o.Payload)
}

func (o *ListAlertsOK) GetPayload() *ListAlertsOKBody {
	return o.Payload
}

func (o *ListAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertsDefault creates a ListAlertsDefault with default headers values
func NewListAlertsDefault(code int) *ListAlertsDefault {
	return &ListAlertsDefault{
		_statusCode: code,
	}
}

/*ListAlertsDefault handles this case with default header values.

An unexpected error response.
*/
type ListAlertsDefault struct {
	_statusCode int

	Payload *ListAlertsDefaultBody
}

// Code gets the status code for the list alerts default response
func (o *ListAlertsDefault) Code() int {
	return o._statusCode
}

func (o *ListAlertsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Alerts/List][%d] ListAlerts default  %+v", o._statusCode, o.Payload)
}

func (o *ListAlertsDefault) GetPayload() *ListAlertsDefaultBody {
	return o.Payload
}

func (o *ListAlertsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AlertsItems0 Alert represents Alert.
swagger:model AlertsItems0
*/
type AlertsItems0 struct {

	// ID.
	AlertID string `json:"alert_id,omitempty"`

	// Human-readable summary.
	Summary string `json:"summary,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// Status represents Alert Rule's and Alert's combined status.
	//
	//  - CLEAR: No alert.
	//  - PENDING: Pending, but not triggering alert.
	//  - TRIGGERING: Triggering (firing) alert.
	//  - SILENCED: Silenced alert.
	// Enum: [STATUS_INVALID CLEAR PENDING TRIGGERING SILENCED]
	Status *string `json:"status,omitempty"`

	// Combined labels.
	Labels map[string]string `json:"labels,omitempty"`
}

// Validate validates this alerts items0
func (o *AlertsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertsItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertsItems0TypeSeverityPropEnum = append(alertsItems0TypeSeverityPropEnum, v)
	}
}

const (

	// AlertsItems0SeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	AlertsItems0SeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// AlertsItems0SeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	AlertsItems0SeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// AlertsItems0SeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	AlertsItems0SeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// AlertsItems0SeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	AlertsItems0SeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// AlertsItems0SeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	AlertsItems0SeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// AlertsItems0SeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	AlertsItems0SeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// AlertsItems0SeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	AlertsItems0SeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// AlertsItems0SeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	AlertsItems0SeveritySEVERITYINFO string = "SEVERITY_INFO"

	// AlertsItems0SeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	AlertsItems0SeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *AlertsItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertsItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AlertsItems0) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

var alertsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_INVALID","CLEAR","PENDING","TRIGGERING","SILENCED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertsItems0TypeStatusPropEnum = append(alertsItems0TypeStatusPropEnum, v)
	}
}

const (

	// AlertsItems0StatusSTATUSINVALID captures enum value "STATUS_INVALID"
	AlertsItems0StatusSTATUSINVALID string = "STATUS_INVALID"

	// AlertsItems0StatusCLEAR captures enum value "CLEAR"
	AlertsItems0StatusCLEAR string = "CLEAR"

	// AlertsItems0StatusPENDING captures enum value "PENDING"
	AlertsItems0StatusPENDING string = "PENDING"

	// AlertsItems0StatusTRIGGERING captures enum value "TRIGGERING"
	AlertsItems0StatusTRIGGERING string = "TRIGGERING"

	// AlertsItems0StatusSILENCED captures enum value "SILENCED"
	AlertsItems0StatusSILENCED string = "SILENCED"
)

// prop value enum
func (o *AlertsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AlertsItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AlertsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AlertsItems0) UnmarshalBinary(b []byte) error {
	var res AlertsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertsDefaultBody list alerts default body
swagger:model ListAlertsDefaultBody
*/
type ListAlertsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list alerts default body
func (o *ListAlertsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAlerts default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAlertsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertsOKBody list alerts OK body
swagger:model ListAlertsOKBody
*/
type ListAlertsOKBody struct {

	// alerts
	Alerts []*AlertsItems0 `json:"alerts"`
}

// Validate validates this list alerts OK body
func (o *ListAlertsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertsOKBody) validateAlerts(formats strfmt.Registry) error {

	if swag.IsZero(o.Alerts) { // not required
		return nil
	}

	for i := 0; i < len(o.Alerts); i++ {
		if swag.IsZero(o.Alerts[i]) { // not required
			continue
		}

		if o.Alerts[i] != nil {
			if err := o.Alerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAlertsOk" + "." + "alerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertsOKBody) UnmarshalBinary(b []byte) error {
	var res ListAlertsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
