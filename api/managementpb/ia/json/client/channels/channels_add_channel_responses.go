// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChannelsAddChannelReader is a Reader for the ChannelsAddChannel structure.
type ChannelsAddChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChannelsAddChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChannelsAddChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChannelsAddChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChannelsAddChannelOK creates a ChannelsAddChannelOK with default headers values
func NewChannelsAddChannelOK() *ChannelsAddChannelOK {
	return &ChannelsAddChannelOK{}
}

/*ChannelsAddChannelOK handles this case with default header values.

A successful response.
*/
type ChannelsAddChannelOK struct {
	Payload *ChannelsAddChannelOKBody
}

func (o *ChannelsAddChannelOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/Add][%d] channelsAddChannelOk  %+v", 200, o.Payload)
}

func (o *ChannelsAddChannelOK) GetPayload() *ChannelsAddChannelOKBody {
	return o.Payload
}

func (o *ChannelsAddChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsAddChannelOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsAddChannelDefault creates a ChannelsAddChannelDefault with default headers values
func NewChannelsAddChannelDefault(code int) *ChannelsAddChannelDefault {
	return &ChannelsAddChannelDefault{
		_statusCode: code,
	}
}

/*ChannelsAddChannelDefault handles this case with default header values.

An unexpected error response.
*/
type ChannelsAddChannelDefault struct {
	_statusCode int

	Payload *ChannelsAddChannelDefaultBody
}

// Code gets the status code for the channels add channel default response
func (o *ChannelsAddChannelDefault) Code() int {
	return o._statusCode
}

func (o *ChannelsAddChannelDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/Add][%d] Channels_AddChannel default  %+v", o._statusCode, o.Payload)
}

func (o *ChannelsAddChannelDefault) GetPayload() *ChannelsAddChannelDefaultBody {
	return o.Payload
}

func (o *ChannelsAddChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsAddChannelDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsAddChannelBody channels add channel body
swagger:model ChannelsAddChannelBody
*/
type ChannelsAddChannelBody struct {

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// New channel status.
	Disabled bool `json:"disabled,omitempty"`

	// email config
	EmailConfig *ChannelsAddChannelParamsBodyEmailConfig `json:"email_config,omitempty"`

	// pagerduty config
	PagerdutyConfig *ChannelsAddChannelParamsBodyPagerdutyConfig `json:"pagerduty_config,omitempty"`

	// slack config
	SlackConfig *ChannelsAddChannelParamsBodySlackConfig `json:"slack_config,omitempty"`

	// webhook config
	WebhookConfig *ChannelsAddChannelParamsBodyWebhookConfig `json:"webhook_config,omitempty"`
}

// Validate validates this channels add channel body
func (o *ChannelsAddChannelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagerdutyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsAddChannelBody) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsAddChannelBody) validatePagerdutyConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.PagerdutyConfig) { // not required
		return nil
	}

	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsAddChannelBody) validateSlackConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfig) { // not required
		return nil
	}

	if o.SlackConfig != nil {
		if err := o.SlackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsAddChannelBody) validateWebhookConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfig) { // not required
		return nil
	}

	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelBody) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelDefaultBody channels add channel default body
swagger:model ChannelsAddChannelDefaultBody
*/
type ChannelsAddChannelDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this channels add channel default body
func (o *ChannelsAddChannelDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsAddChannelDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Channels_AddChannel default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelOKBody channels add channel OK body
swagger:model ChannelsAddChannelOKBody
*/
type ChannelsAddChannelOKBody struct {

	// Machine-readable ID.
	ChannelID string `json:"channel_id,omitempty"`
}

// Validate validates this channels add channel OK body
func (o *ChannelsAddChannelOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelOKBody) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyEmailConfig EmailConfig represents email configuration.
swagger:model ChannelsAddChannelParamsBodyEmailConfig
*/
type ChannelsAddChannelParamsBodyEmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To []string `json:"to"`
}

// Validate validates this channels add channel params body email config
func (o *ChannelsAddChannelParamsBodyEmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyEmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyEmailConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyEmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyPagerdutyConfig PagerDutyConfig represents PagerDuty configuration.
swagger:model ChannelsAddChannelParamsBodyPagerdutyConfig
*/
type ChannelsAddChannelParamsBodyPagerdutyConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// The PagerDuty key for "Events API v2" integration type. Exactly one key should be set.
	RoutingKey string `json:"routing_key,omitempty"`

	// The PagerDuty key for "Prometheus" integration type. Exactly one key should be set.
	ServiceKey string `json:"service_key,omitempty"`
}

// Validate validates this channels add channel params body pagerduty config
func (o *ChannelsAddChannelParamsBodyPagerdutyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyPagerdutyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyPagerdutyConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyPagerdutyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodySlackConfig SlackConfig represents Slack configuration.
swagger:model ChannelsAddChannelParamsBodySlackConfig
*/
type ChannelsAddChannelParamsBodySlackConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this channels add channel params body slack config
func (o *ChannelsAddChannelParamsBodySlackConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodySlackConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodySlackConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodySlackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyWebhookConfig WebhookConfig represents webhook configuration.
swagger:model ChannelsAddChannelParamsBodyWebhookConfig
*/
type ChannelsAddChannelParamsBodyWebhookConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this channels add channel params body webhook config
func (o *ChannelsAddChannelParamsBodyWebhookConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsAddChannelParamsBodyWebhookConfig) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyWebhookConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig HTTPConfig represents HTTP client configuration.
swagger:model ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig
*/
type ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this channels add channel params body webhook config HTTP config
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyWebhookConfigHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth BasicAuth represents basic HTTP auth configuration.
swagger:model ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth
*/
type ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this channels add channel params body webhook config HTTP config basic auth
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig TLSConfig represents TLS configuration for alertmanager
// https://prometheus.io/docs/alerting/latest/configuration/#tls_config
swagger:model ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig
*/
type ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig struct {

	// A path to the CA certificate file to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFile string `json:"ca_file,omitempty"`

	// A path to the certificate file for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFile string `json:"cert_file,omitempty"`

	// A path to the key file for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFile string `json:"key_file,omitempty"`

	// Name of the server.
	ServerName string `json:"server_name,omitempty"`

	// Disable validation of the server certificate.
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`

	// CA certificate to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFileContent string `json:"ca_file_content,omitempty"`

	// A certificate for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFileContent string `json:"cert_file_content,omitempty"`

	// A key for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFileContent string `json:"key_file_content,omitempty"`
}

// Validate validates this channels add channel params body webhook config HTTP config TLS config
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsAddChannelParamsBodyWebhookConfigHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
