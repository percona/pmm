// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChannelsChangeChannelReader is a Reader for the ChannelsChangeChannel structure.
type ChannelsChangeChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChannelsChangeChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChannelsChangeChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChannelsChangeChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChannelsChangeChannelOK creates a ChannelsChangeChannelOK with default headers values
func NewChannelsChangeChannelOK() *ChannelsChangeChannelOK {
	return &ChannelsChangeChannelOK{}
}

/*ChannelsChangeChannelOK handles this case with default header values.

A successful response.
*/
type ChannelsChangeChannelOK struct {
	Payload interface{}
}

func (o *ChannelsChangeChannelOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/Change][%d] channelsChangeChannelOk  %+v", 200, o.Payload)
}

func (o *ChannelsChangeChannelOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ChannelsChangeChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsChangeChannelDefault creates a ChannelsChangeChannelDefault with default headers values
func NewChannelsChangeChannelDefault(code int) *ChannelsChangeChannelDefault {
	return &ChannelsChangeChannelDefault{
		_statusCode: code,
	}
}

/*ChannelsChangeChannelDefault handles this case with default header values.

An unexpected error response.
*/
type ChannelsChangeChannelDefault struct {
	_statusCode int

	Payload *ChannelsChangeChannelDefaultBody
}

// Code gets the status code for the channels change channel default response
func (o *ChannelsChangeChannelDefault) Code() int {
	return o._statusCode
}

func (o *ChannelsChangeChannelDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/Change][%d] Channels_ChangeChannel default  %+v", o._statusCode, o.Payload)
}

func (o *ChannelsChangeChannelDefault) GetPayload() *ChannelsChangeChannelDefaultBody {
	return o.Payload
}

func (o *ChannelsChangeChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsChangeChannelDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsChangeChannelBody channels change channel body
swagger:model ChannelsChangeChannelBody
*/
type ChannelsChangeChannelBody struct {

	// Machine-readable ID.
	ChannelID string `json:"channel_id,omitempty"`

	// Short human-readable summary. Empty value will not change it.
	Summary string `json:"summary,omitempty"`

	// Enables or disables that channel. Should be set.
	Disabled bool `json:"disabled,omitempty"`

	// email config
	EmailConfig *ChannelsChangeChannelParamsBodyEmailConfig `json:"email_config,omitempty"`

	// pagerduty config
	PagerdutyConfig *ChannelsChangeChannelParamsBodyPagerdutyConfig `json:"pagerduty_config,omitempty"`

	// slack config
	SlackConfig *ChannelsChangeChannelParamsBodySlackConfig `json:"slack_config,omitempty"`

	// webhook config
	WebhookConfig *ChannelsChangeChannelParamsBodyWebhookConfig `json:"webhook_config,omitempty"`
}

// Validate validates this channels change channel body
func (o *ChannelsChangeChannelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagerdutyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsChangeChannelBody) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsChangeChannelBody) validatePagerdutyConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.PagerdutyConfig) { // not required
		return nil
	}

	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsChangeChannelBody) validateSlackConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfig) { // not required
		return nil
	}

	if o.SlackConfig != nil {
		if err := o.SlackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsChangeChannelBody) validateWebhookConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfig) { // not required
		return nil
	}

	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelBody) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelDefaultBody channels change channel default body
swagger:model ChannelsChangeChannelDefaultBody
*/
type ChannelsChangeChannelDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this channels change channel default body
func (o *ChannelsChangeChannelDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsChangeChannelDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Channels_ChangeChannel default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyEmailConfig EmailConfig represents email configuration.
swagger:model ChannelsChangeChannelParamsBodyEmailConfig
*/
type ChannelsChangeChannelParamsBodyEmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To []string `json:"to"`
}

// Validate validates this channels change channel params body email config
func (o *ChannelsChangeChannelParamsBodyEmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyEmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyEmailConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyEmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyPagerdutyConfig PagerDutyConfig represents PagerDuty configuration.
swagger:model ChannelsChangeChannelParamsBodyPagerdutyConfig
*/
type ChannelsChangeChannelParamsBodyPagerdutyConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// The PagerDuty key for "Events API v2" integration type. Exactly one key should be set.
	RoutingKey string `json:"routing_key,omitempty"`

	// The PagerDuty key for "Prometheus" integration type. Exactly one key should be set.
	ServiceKey string `json:"service_key,omitempty"`
}

// Validate validates this channels change channel params body pagerduty config
func (o *ChannelsChangeChannelParamsBodyPagerdutyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyPagerdutyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyPagerdutyConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyPagerdutyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodySlackConfig SlackConfig represents Slack configuration.
swagger:model ChannelsChangeChannelParamsBodySlackConfig
*/
type ChannelsChangeChannelParamsBodySlackConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this channels change channel params body slack config
func (o *ChannelsChangeChannelParamsBodySlackConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodySlackConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodySlackConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodySlackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyWebhookConfig WebhookConfig represents webhook configuration.
swagger:model ChannelsChangeChannelParamsBodyWebhookConfig
*/
type ChannelsChangeChannelParamsBodyWebhookConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this channels change channel params body webhook config
func (o *ChannelsChangeChannelParamsBodyWebhookConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsChangeChannelParamsBodyWebhookConfig) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyWebhookConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig HTTPConfig represents HTTP client configuration.
swagger:model ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig
*/
type ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this channels change channel params body webhook config HTTP config
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth BasicAuth represents basic HTTP auth configuration.
swagger:model ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth
*/
type ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this channels change channel params body webhook config HTTP config basic auth
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig TLSConfig represents TLS configuration for alertmanager
// https://prometheus.io/docs/alerting/latest/configuration/#tls_config
swagger:model ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig
*/
type ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig struct {

	// A path to the CA certificate file to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFile string `json:"ca_file,omitempty"`

	// A path to the certificate file for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFile string `json:"cert_file,omitempty"`

	// A path to the key file for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFile string `json:"key_file,omitempty"`

	// Name of the server.
	ServerName string `json:"server_name,omitempty"`

	// Disable validation of the server certificate.
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`

	// CA certificate to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFileContent string `json:"ca_file_content,omitempty"`

	// A certificate for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFileContent string `json:"cert_file_content,omitempty"`

	// A key for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFileContent string `json:"key_file_content,omitempty"`
}

// Validate validates this channels change channel params body webhook config HTTP config TLS config
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsChangeChannelParamsBodyWebhookConfigHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
