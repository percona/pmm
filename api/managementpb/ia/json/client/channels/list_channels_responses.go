// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListChannelsReader is a Reader for the ListChannels structure.
type ListChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListChannelsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListChannelsOK creates a ListChannelsOK with default headers values
func NewListChannelsOK() *ListChannelsOK {
	return &ListChannelsOK{}
}

/*ListChannelsOK handles this case with default header values.

A successful response.
*/
type ListChannelsOK struct {
	Payload *ListChannelsOKBody
}

func (o *ListChannelsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/List][%d] listChannelsOk  %+v", 200, o.Payload)
}

func (o *ListChannelsOK) GetPayload() *ListChannelsOKBody {
	return o.Payload
}

func (o *ListChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListChannelsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListChannelsDefault creates a ListChannelsDefault with default headers values
func NewListChannelsDefault(code int) *ListChannelsDefault {
	return &ListChannelsDefault{
		_statusCode: code,
	}
}

/*ListChannelsDefault handles this case with default header values.

An unexpected error response.
*/
type ListChannelsDefault struct {
	_statusCode int

	Payload *ListChannelsDefaultBody
}

// Code gets the status code for the list channels default response
func (o *ListChannelsDefault) Code() int {
	return o._statusCode
}

func (o *ListChannelsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Channels/List][%d] ListChannels default  %+v", o._statusCode, o.Payload)
}

func (o *ListChannelsDefault) GetPayload() *ListChannelsDefaultBody {
	return o.Payload
}

func (o *ListChannelsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListChannelsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsItems0 Channel represents a single Notification Channel.
swagger:model ChannelsItems0
*/
type ChannelsItems0 struct {

	// Machine-readable ID.
	ChannelID string `json:"channel_id,omitempty"`

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// True if that channel is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// email config
	EmailConfig *ChannelsItems0EmailConfig `json:"email_config,omitempty"`

	// pagerduty config
	PagerdutyConfig *ChannelsItems0PagerdutyConfig `json:"pagerduty_config,omitempty"`

	// slack config
	SlackConfig *ChannelsItems0SlackConfig `json:"slack_config,omitempty"`

	// webhook config
	WebhookConfig *ChannelsItems0WebhookConfig `json:"webhook_config,omitempty"`
}

// Validate validates this channels items0
func (o *ChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagerdutyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0) validatePagerdutyConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.PagerdutyConfig) { // not required
		return nil
	}

	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0) validateSlackConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfig) { // not required
		return nil
	}

	if o.SlackConfig != nil {
		if err := o.SlackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0) validateWebhookConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfig) { // not required
		return nil
	}

	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0EmailConfig EmailConfig represents email configuration.
swagger:model ChannelsItems0EmailConfig
*/
type ChannelsItems0EmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To []string `json:"to"`
}

// Validate validates this channels items0 email config
func (o *ChannelsItems0EmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0EmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0EmailConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0EmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0PagerdutyConfig PagerDutyConfig represents PagerDuty configuration.
swagger:model ChannelsItems0PagerdutyConfig
*/
type ChannelsItems0PagerdutyConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// The PagerDuty key for "Events API v2" integration type. Exactly one key should be set.
	RoutingKey string `json:"routing_key,omitempty"`

	// The PagerDuty key for "Prometheus" integration type. Exactly one key should be set.
	ServiceKey string `json:"service_key,omitempty"`
}

// Validate validates this channels items0 pagerduty config
func (o *ChannelsItems0PagerdutyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0PagerdutyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0PagerdutyConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0PagerdutyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0SlackConfig SlackConfig represents Slack configuration.
swagger:model ChannelsItems0SlackConfig
*/
type ChannelsItems0SlackConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this channels items0 slack config
func (o *ChannelsItems0SlackConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0SlackConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0SlackConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0SlackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfig WebhookConfig represents webhook configuration.
swagger:model ChannelsItems0WebhookConfig
*/
type ChannelsItems0WebhookConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ChannelsItems0WebhookConfigHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this channels items0 webhook config
func (o *ChannelsItems0WebhookConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0WebhookConfig) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigHTTPConfig HTTPConfig represents HTTP client configuration.
swagger:model ChannelsItems0WebhookConfigHTTPConfig
*/
type ChannelsItems0WebhookConfigHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ChannelsItems0WebhookConfigHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *ChannelsItems0WebhookConfigHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this channels items0 webhook config HTTP config
func (o *ChannelsItems0WebhookConfigHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0WebhookConfigHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0WebhookConfigHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigHTTPConfigBasicAuth BasicAuth represents basic HTTP auth configuration.
swagger:model ChannelsItems0WebhookConfigHTTPConfigBasicAuth
*/
type ChannelsItems0WebhookConfigHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this channels items0 webhook config HTTP config basic auth
func (o *ChannelsItems0WebhookConfigHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigHTTPConfigTLSConfig TLSConfig represents TLS configuration.
swagger:model ChannelsItems0WebhookConfigHTTPConfigTLSConfig
*/
type ChannelsItems0WebhookConfigHTTPConfigTLSConfig struct {

	// ca file
	CaFile string `json:"ca_file,omitempty"`

	// cert file
	CertFile string `json:"cert_file,omitempty"`

	// key file
	KeyFile string `json:"key_file,omitempty"`

	// server name
	ServerName string `json:"server_name,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`
}

// Validate validates this channels items0 webhook config HTTP config TLS config
func (o *ChannelsItems0WebhookConfigHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListChannelsDefaultBody list channels default body
swagger:model ListChannelsDefaultBody
*/
type ListChannelsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list channels default body
func (o *ListChannelsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListChannelsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListChannels default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListChannelsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListChannelsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListChannelsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListChannelsOKBody list channels OK body
swagger:model ListChannelsOKBody
*/
type ListChannelsOKBody struct {

	// channels
	Channels []*ChannelsItems0 `json:"channels"`
}

// Validate validates this list channels OK body
func (o *ListChannelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListChannelsOKBody) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(o.Channels) { // not required
		return nil
	}

	for i := 0; i < len(o.Channels); i++ {
		if swag.IsZero(o.Channels[i]) { // not required
			continue
		}

		if o.Channels[i] != nil {
			if err := o.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listChannelsOk" + "." + "channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListChannelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListChannelsOKBody) UnmarshalBinary(b []byte) error {
	var res ListChannelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
