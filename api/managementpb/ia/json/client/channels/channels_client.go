// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChannelsAddChannel(params *ChannelsAddChannelParams) (*ChannelsAddChannelOK, error)

	ChannelsChangeChannel(params *ChannelsChangeChannelParams) (*ChannelsChangeChannelOK, error)

	ChannelsListChannels(params *ChannelsListChannelsParams) (*ChannelsListChannelsOK, error)

	ChannelsRemoveChannel(params *ChannelsRemoveChannelParams) (*ChannelsRemoveChannelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChannelsAddChannel adds channel adds notification channel
*/
func (a *Client) ChannelsAddChannel(params *ChannelsAddChannelParams) (*ChannelsAddChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsAddChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Channels_AddChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Channels/Add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChannelsAddChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsAddChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelsAddChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChannelsChangeChannel changes channel changes notification channel
*/
func (a *Client) ChannelsChangeChannel(params *ChannelsChangeChannelParams) (*ChannelsChangeChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsChangeChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Channels_ChangeChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Channels/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChannelsChangeChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsChangeChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelsChangeChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChannelsListChannels lists channels returns a list of all notifation channels
*/
func (a *Client) ChannelsListChannels(params *ChannelsListChannelsParams) (*ChannelsListChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsListChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Channels_ListChannels",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Channels/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChannelsListChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsListChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelsListChannelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChannelsRemoveChannel removes channel removes notification channel
*/
func (a *Client) ChannelsRemoveChannel(params *ChannelsRemoveChannelParams) (*ChannelsRemoveChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsRemoveChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Channels_RemoveChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Channels/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChannelsRemoveChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsRemoveChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelsRemoveChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
