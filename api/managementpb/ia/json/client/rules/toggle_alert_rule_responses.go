// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ToggleAlertRuleReader is a Reader for the ToggleAlertRule structure.
type ToggleAlertRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ToggleAlertRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewToggleAlertRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewToggleAlertRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewToggleAlertRuleOK creates a ToggleAlertRuleOK with default headers values
func NewToggleAlertRuleOK() *ToggleAlertRuleOK {
	return &ToggleAlertRuleOK{}
}

/* ToggleAlertRuleOK describes a response with status code 200, with default header values.

A successful response.
*/
type ToggleAlertRuleOK struct {
	Payload interface{}
}

func (o *ToggleAlertRuleOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/Toggle][%d] toggleAlertRuleOk  %+v", 200, o.Payload)
}

func (o *ToggleAlertRuleOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ToggleAlertRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleAlertRuleDefault creates a ToggleAlertRuleDefault with default headers values
func NewToggleAlertRuleDefault(code int) *ToggleAlertRuleDefault {
	return &ToggleAlertRuleDefault{
		_statusCode: code,
	}
}

/* ToggleAlertRuleDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ToggleAlertRuleDefault struct {
	_statusCode int

	Payload *ToggleAlertRuleDefaultBody
}

// Code gets the status code for the toggle alert rule default response
func (o *ToggleAlertRuleDefault) Code() int {
	return o._statusCode
}

func (o *ToggleAlertRuleDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/Toggle][%d] ToggleAlertRule default  %+v", o._statusCode, o.Payload)
}

func (o *ToggleAlertRuleDefault) GetPayload() *ToggleAlertRuleDefaultBody {
	return o.Payload
}

func (o *ToggleAlertRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ToggleAlertRuleDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ToggleAlertRuleBody toggle alert rule body
swagger:model ToggleAlertRuleBody
*/
type ToggleAlertRuleBody struct {
	// Rule ID.
	RuleID string `json:"rule_id,omitempty"`

	// BooleanFlag represent a command to set some boolean property to true,
	// to false, or avoid changing that property.
	//
	//  - DO_NOT_CHANGE: Do not change boolean property. Default value.
	//  - TRUE: True.
	//  - FALSE: False.
	// Enum: [DO_NOT_CHANGE TRUE FALSE]
	Disabled *string `json:"disabled,omitempty"`
}

// Validate validates this toggle alert rule body
func (o *ToggleAlertRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var toggleAlertRuleBodyTypeDisabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DO_NOT_CHANGE","TRUE","FALSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		toggleAlertRuleBodyTypeDisabledPropEnum = append(toggleAlertRuleBodyTypeDisabledPropEnum, v)
	}
}

const (

	// ToggleAlertRuleBodyDisabledDONOTCHANGE captures enum value "DO_NOT_CHANGE"
	ToggleAlertRuleBodyDisabledDONOTCHANGE string = "DO_NOT_CHANGE"

	// ToggleAlertRuleBodyDisabledTRUE captures enum value "TRUE"
	ToggleAlertRuleBodyDisabledTRUE string = "TRUE"

	// ToggleAlertRuleBodyDisabledFALSE captures enum value "FALSE"
	ToggleAlertRuleBodyDisabledFALSE string = "FALSE"
)

// prop value enum
func (o *ToggleAlertRuleBody) validateDisabledEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, toggleAlertRuleBodyTypeDisabledPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ToggleAlertRuleBody) validateDisabled(formats strfmt.Registry) error {
	if swag.IsZero(o.Disabled) { // not required
		return nil
	}

	// value enum
	if err := o.validateDisabledEnum("body"+"."+"disabled", "body", *o.Disabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this toggle alert rule body based on context it is used
func (o *ToggleAlertRuleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleAlertRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleAlertRuleBody) UnmarshalBinary(b []byte) error {
	var res ToggleAlertRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ToggleAlertRuleDefaultBody toggle alert rule default body
swagger:model ToggleAlertRuleDefaultBody
*/
type ToggleAlertRuleDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ToggleAlertRuleDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this toggle alert rule default body
func (o *ToggleAlertRuleDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ToggleAlertRuleDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ToggleAlertRule default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ToggleAlertRule default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this toggle alert rule default body based on the context it is used
func (o *ToggleAlertRuleDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ToggleAlertRuleDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ToggleAlertRule default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ToggleAlertRule default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ToggleAlertRuleDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleAlertRuleDefaultBody) UnmarshalBinary(b []byte) error {
	var res ToggleAlertRuleDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ToggleAlertRuleDefaultBodyDetailsItems0 toggle alert rule default body details items0
swagger:model ToggleAlertRuleDefaultBodyDetailsItems0
*/
type ToggleAlertRuleDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this toggle alert rule default body details items0
func (o *ToggleAlertRuleDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this toggle alert rule default body details items0 based on context it is used
func (o *ToggleAlertRuleDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleAlertRuleDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleAlertRuleDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ToggleAlertRuleDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
