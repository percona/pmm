// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAlertRulesReader is a Reader for the ListAlertRules structure.
type ListAlertRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAlertRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAlertRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListAlertRulesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAlertRulesOK creates a ListAlertRulesOK with default headers values
func NewListAlertRulesOK() *ListAlertRulesOK {
	return &ListAlertRulesOK{}
}

/*ListAlertRulesOK handles this case with default header values.

A successful response.
*/
type ListAlertRulesOK struct {
	Payload *ListAlertRulesOKBody
}

func (o *ListAlertRulesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] listAlertRulesOk  %+v", 200, o.Payload)
}

func (o *ListAlertRulesOK) GetPayload() *ListAlertRulesOKBody {
	return o.Payload
}

func (o *ListAlertRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertRulesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertRulesDefault creates a ListAlertRulesDefault with default headers values
func NewListAlertRulesDefault(code int) *ListAlertRulesDefault {
	return &ListAlertRulesDefault{
		_statusCode: code,
	}
}

/*ListAlertRulesDefault handles this case with default header values.

An unexpected error response.
*/
type ListAlertRulesDefault struct {
	_statusCode int

	Payload *ListAlertRulesDefaultBody
}

// Code gets the status code for the list alert rules default response
func (o *ListAlertRulesDefault) Code() int {
	return o._statusCode
}

func (o *ListAlertRulesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] ListAlertRules default  %+v", o._statusCode, o.Payload)
}

func (o *ListAlertRulesDefault) GetPayload() *ListAlertRulesDefaultBody {
	return o.Payload
}

func (o *ListAlertRulesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertRulesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListAlertRulesDefaultBody list alert rules default body
swagger:model ListAlertRulesDefaultBody
*/
type ListAlertRulesDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list alert rules default body
func (o *ListAlertRulesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAlertRules default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBody list alert rules OK body
swagger:model ListAlertRulesOKBody
*/
type ListAlertRulesOKBody struct {

	// rules
	Rules []*RulesItems0 `json:"rules"`
}

// Validate validates this list alert rules OK body
func (o *ListAlertRulesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBody) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAlertRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBody) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0 Rule represents Alert Rule.
swagger:model RulesItems0
*/
type RulesItems0 struct {

	// Rule ID.
	RuleID string `json:"rule_id,omitempty"`

	// True if that rule is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// Rule human-readable summary.
	Summary string `json:"summary,omitempty"`

	// Rule parameters.
	Params []*RulesItems0ParamsItems0 `json:"params"`

	// Rule duration.
	For string `json:"for,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// Custom labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Filters.
	Filters []*RulesItems0FiltersItems0 `json:"filters"`

	// Channels.
	Channels []*RulesItems0ChannelsItems0 `json:"channels"`

	// Rule creation time.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Template expression with rule parameters.
	Expr string `json:"expr,omitempty"`

	// template
	Template *RulesItems0Template `json:"template,omitempty"`
}

// Validate validates this rules items0
func (o *RulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	for i := 0; i < len(o.Params); i++ {
		if swag.IsZero(o.Params[i]) { // not required
			continue
		}

		if o.Params[i] != nil {
			if err := o.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var rulesItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TypeSeverityPropEnum = append(rulesItems0TypeSeverityPropEnum, v)
	}
}

const (

	// RulesItems0SeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	RulesItems0SeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// RulesItems0SeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	RulesItems0SeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// RulesItems0SeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	RulesItems0SeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// RulesItems0SeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	RulesItems0SeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// RulesItems0SeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	RulesItems0SeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// RulesItems0SeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	RulesItems0SeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// RulesItems0SeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	RulesItems0SeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// RulesItems0SeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	RulesItems0SeveritySEVERITYINFO string = "SEVERITY_INFO"

	// RulesItems0SeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	RulesItems0SeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *RulesItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateFilters(formats strfmt.Registry) error {

	if swag.IsZero(o.Filters) { // not required
		return nil
	}

	for i := 0; i < len(o.Filters); i++ {
		if swag.IsZero(o.Filters[i]) { // not required
			continue
		}

		if o.Filters[i] != nil {
			if err := o.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RulesItems0) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(o.Channels) { // not required
		return nil
	}

	for i := 0; i < len(o.Channels); i++ {
		if swag.IsZero(o.Channels[i]) { // not required
			continue
		}

		if o.Channels[i] != nil {
			if err := o.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RulesItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0 Channel represents a single Notification Channel.
swagger:model RulesItems0ChannelsItems0
*/
type RulesItems0ChannelsItems0 struct {

	// Machine-readable ID.
	ChannelID string `json:"channel_id,omitempty"`

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// True if that channel is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// email config
	EmailConfig *RulesItems0ChannelsItems0EmailConfig `json:"email_config,omitempty"`

	// pagerduty config
	PagerdutyConfig *RulesItems0ChannelsItems0PagerdutyConfig `json:"pagerduty_config,omitempty"`

	// slack config
	SlackConfig *RulesItems0ChannelsItems0SlackConfig `json:"slack_config,omitempty"`

	// webhook config
	WebhookConfig *RulesItems0ChannelsItems0WebhookConfig `json:"webhook_config,omitempty"`
}

// Validate validates this rules items0 channels items0
func (o *RulesItems0ChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagerdutyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0ChannelsItems0) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_config")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0ChannelsItems0) validatePagerdutyConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.PagerdutyConfig) { // not required
		return nil
	}

	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0ChannelsItems0) validateSlackConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfig) { // not required
		return nil
	}

	if o.SlackConfig != nil {
		if err := o.SlackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0ChannelsItems0) validateWebhookConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfig) { // not required
		return nil
	}

	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0EmailConfig EmailConfig represents email configuration.
swagger:model RulesItems0ChannelsItems0EmailConfig
*/
type RulesItems0ChannelsItems0EmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To []string `json:"to"`
}

// Validate validates this rules items0 channels items0 email config
func (o *RulesItems0ChannelsItems0EmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0EmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0EmailConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0EmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0PagerdutyConfig PagerDutyConfig represents PagerDuty configuration.
swagger:model RulesItems0ChannelsItems0PagerdutyConfig
*/
type RulesItems0ChannelsItems0PagerdutyConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// The PagerDuty key for "Events API v2" integration type. Exactly one key should be set.
	RoutingKey string `json:"routing_key,omitempty"`

	// The PagerDuty key for "Prometheus" integration type. Exactly one key should be set.
	ServiceKey string `json:"service_key,omitempty"`
}

// Validate validates this rules items0 channels items0 pagerduty config
func (o *RulesItems0ChannelsItems0PagerdutyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0PagerdutyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0PagerdutyConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0PagerdutyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0SlackConfig SlackConfig represents Slack configuration.
swagger:model RulesItems0ChannelsItems0SlackConfig
*/
type RulesItems0ChannelsItems0SlackConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this rules items0 channels items0 slack config
func (o *RulesItems0ChannelsItems0SlackConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0SlackConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0SlackConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0SlackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0WebhookConfig WebhookConfig represents webhook configuration.
swagger:model RulesItems0ChannelsItems0WebhookConfig
*/
type RulesItems0ChannelsItems0WebhookConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *RulesItems0ChannelsItems0WebhookConfigHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this rules items0 channels items0 webhook config
func (o *RulesItems0ChannelsItems0WebhookConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0ChannelsItems0WebhookConfig) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0WebhookConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0WebhookConfigHTTPConfig HTTPConfig represents HTTP client configuration.
swagger:model RulesItems0ChannelsItems0WebhookConfigHTTPConfig
*/
type RulesItems0ChannelsItems0WebhookConfigHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this rules items0 channels items0 webhook config HTTP config
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0WebhookConfigHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth BasicAuth represents basic HTTP auth configuration.
swagger:model RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth
*/
type RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this rules items0 channels items0 webhook config HTTP config basic auth
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig TLSConfig represents TLS configuration.
swagger:model RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig
*/
type RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig struct {

	// ca file
	CaFile string `json:"ca_file,omitempty"`

	// cert file
	CertFile string `json:"cert_file,omitempty"`

	// key file
	KeyFile string `json:"key_file,omitempty"`

	// server name
	ServerName string `json:"server_name,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`
}

// Validate validates this rules items0 channels items0 webhook config HTTP config TLS config
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res RulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0FiltersItems0 Filter repsents a single filter condition.
swagger:model RulesItems0FiltersItems0
*/
type RulesItems0FiltersItems0 struct {

	// FilterType represents filter matching type.
	//
	//  - EQUAL: =
	//  - REGEX: =~
	// Enum: [FILTER_TYPE_INVALID EQUAL REGEX]
	Type *string `json:"type,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this rules items0 filters items0
func (o *RulesItems0FiltersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0FiltersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FILTER_TYPE_INVALID","EQUAL","REGEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0FiltersItems0TypeTypePropEnum = append(rulesItems0FiltersItems0TypeTypePropEnum, v)
	}
}

const (

	// RulesItems0FiltersItems0TypeFILTERTYPEINVALID captures enum value "FILTER_TYPE_INVALID"
	RulesItems0FiltersItems0TypeFILTERTYPEINVALID string = "FILTER_TYPE_INVALID"

	// RulesItems0FiltersItems0TypeEQUAL captures enum value "EQUAL"
	RulesItems0FiltersItems0TypeEQUAL string = "EQUAL"

	// RulesItems0FiltersItems0TypeREGEX captures enum value "REGEX"
	RulesItems0FiltersItems0TypeREGEX string = "REGEX"
)

// prop value enum
func (o *RulesItems0FiltersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0FiltersItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0FiltersItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0FiltersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0FiltersItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0FiltersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ParamsItems0 RuleParam represents a single rule parameter for List, Change and Update APIs.
swagger:model RulesItems0ParamsItems0
*/
type RulesItems0ParamsItems0 struct {

	// Machine-readable name (ID) that is used in expression.
	Name string `json:"name,omitempty"`

	// ParamType represents template parameter type.
	// Enum: [PARAM_TYPE_INVALID BOOL FLOAT STRING]
	Type *string `json:"type,omitempty"`

	// Bool value.
	Bool bool `json:"bool,omitempty"`

	// Float value.
	Float float32 `json:"float,omitempty"`

	// String value.
	String string `json:"string,omitempty"`
}

// Validate validates this rules items0 params items0
func (o *RulesItems0ParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0ParamsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","BOOL","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0ParamsItems0TypeTypePropEnum = append(rulesItems0ParamsItems0TypeTypePropEnum, v)
	}
}

const (

	// RulesItems0ParamsItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	RulesItems0ParamsItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// RulesItems0ParamsItems0TypeBOOL captures enum value "BOOL"
	RulesItems0ParamsItems0TypeBOOL string = "BOOL"

	// RulesItems0ParamsItems0TypeFLOAT captures enum value "FLOAT"
	RulesItems0ParamsItems0TypeFLOAT string = "FLOAT"

	// RulesItems0ParamsItems0TypeSTRING captures enum value "STRING"
	RulesItems0ParamsItems0TypeSTRING string = "STRING"
)

// prop value enum
func (o *RulesItems0ParamsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0ParamsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0ParamsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ParamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ParamsItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0ParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0Template Template represents Alert Template that is used to create Alert Rule.
swagger:model RulesItems0Template
*/
type RulesItems0Template struct {

	// Machine-readable name (ID).
	Name string `json:"name,omitempty"`

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// PromQL query expression with templating parameters.
	Expr string `json:"expr,omitempty"`

	// Query templating parameters.
	Params []*RulesItems0TemplateParamsItems0 `json:"params"`

	// Default duration value.
	For string `json:"for,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// Labels.
	Labels map[string]string `json:"labels,omitempty"`

	// Annotations.
	Annotations map[string]string `json:"annotations,omitempty"`

	// TemplateSource defines template source.
	//
	//  - BUILT_IN: Template that is shipped with PMM Server releases.
	//  - SAAS: Template that is downloaded from check.percona.com.
	//  - USER_FILE: Templated loaded from user-suplied file.
	//  - USER_API: Templated created via API.
	// Enum: [TEMPLATE_SOURCE_INVALID BUILT_IN SAAS USER_FILE USER_API]
	Source *string `json:"source,omitempty"`

	// Template creation time. Empty for built-in and SaaS templates.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// YAML (or JSON) template file content. Empty for built-in and SaaS templates.
	Yaml string `json:"yaml,omitempty"`
}

// Validate validates this rules items0 template
func (o *RulesItems0Template) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0Template) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	for i := 0; i < len(o.Params); i++ {
		if swag.IsZero(o.Params[i]) { // not required
			continue
		}

		if o.Params[i] != nil {
			if err := o.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("template" + "." + "params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var rulesItems0TemplateTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TemplateTypeSeverityPropEnum = append(rulesItems0TemplateTypeSeverityPropEnum, v)
	}
}

const (

	// RulesItems0TemplateSeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	RulesItems0TemplateSeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// RulesItems0TemplateSeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	RulesItems0TemplateSeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// RulesItems0TemplateSeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	RulesItems0TemplateSeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// RulesItems0TemplateSeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	RulesItems0TemplateSeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// RulesItems0TemplateSeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	RulesItems0TemplateSeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// RulesItems0TemplateSeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	RulesItems0TemplateSeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// RulesItems0TemplateSeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	RulesItems0TemplateSeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// RulesItems0TemplateSeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	RulesItems0TemplateSeveritySEVERITYINFO string = "SEVERITY_INFO"

	// RulesItems0TemplateSeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	RulesItems0TemplateSeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *RulesItems0Template) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TemplateTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0Template) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("template"+"."+"severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

var rulesItems0TemplateTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEMPLATE_SOURCE_INVALID","BUILT_IN","SAAS","USER_FILE","USER_API"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TemplateTypeSourcePropEnum = append(rulesItems0TemplateTypeSourcePropEnum, v)
	}
}

const (

	// RulesItems0TemplateSourceTEMPLATESOURCEINVALID captures enum value "TEMPLATE_SOURCE_INVALID"
	RulesItems0TemplateSourceTEMPLATESOURCEINVALID string = "TEMPLATE_SOURCE_INVALID"

	// RulesItems0TemplateSourceBUILTIN captures enum value "BUILT_IN"
	RulesItems0TemplateSourceBUILTIN string = "BUILT_IN"

	// RulesItems0TemplateSourceSAAS captures enum value "SAAS"
	RulesItems0TemplateSourceSAAS string = "SAAS"

	// RulesItems0TemplateSourceUSERFILE captures enum value "USER_FILE"
	RulesItems0TemplateSourceUSERFILE string = "USER_FILE"

	// RulesItems0TemplateSourceUSERAPI captures enum value "USER_API"
	RulesItems0TemplateSourceUSERAPI string = "USER_API"
)

// prop value enum
func (o *RulesItems0Template) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TemplateTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0Template) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(o.Source) { // not required
		return nil
	}

	// value enum
	if err := o.validateSourceEnum("template"+"."+"source", "body", *o.Source); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0Template) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("template"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0Template) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0Template) UnmarshalBinary(b []byte) error {
	var res RulesItems0Template
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0TemplateParamsItems0 TemplateParam represents a single template parameter.
swagger:model RulesItems0TemplateParamsItems0
*/
type RulesItems0TemplateParamsItems0 struct {

	// Machine-readable name (ID) that is used in expression.
	Name string `json:"name,omitempty"`

	// Short human-readable parameter summary.
	Summary string `json:"summary,omitempty"`

	// ParamUnit represents template parameter unit.
	//
	//  - PARAM_UNIT_INVALID: Invalid, unknown or absent.
	//  - PERCENTAGE: %
	//  - SECONDS: s
	// Enum: [PARAM_UNIT_INVALID PERCENTAGE SECONDS]
	Unit *string `json:"unit,omitempty"`

	// ParamType represents template parameter type.
	// Enum: [PARAM_TYPE_INVALID BOOL FLOAT STRING]
	Type *string `json:"type,omitempty"`

	// bool
	Bool *RulesItems0TemplateParamsItems0Bool `json:"bool,omitempty"`

	// float
	Float *RulesItems0TemplateParamsItems0Float `json:"float,omitempty"`

	// string
	String *RulesItems0TemplateParamsItems0String `json:"string,omitempty"`
}

// Validate validates this rules items0 template params items0
func (o *RulesItems0TemplateParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBool(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFloat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0TemplateParamsItems0TypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_UNIT_INVALID","PERCENTAGE","SECONDS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TemplateParamsItems0TypeUnitPropEnum = append(rulesItems0TemplateParamsItems0TypeUnitPropEnum, v)
	}
}

const (

	// RulesItems0TemplateParamsItems0UnitPARAMUNITINVALID captures enum value "PARAM_UNIT_INVALID"
	RulesItems0TemplateParamsItems0UnitPARAMUNITINVALID string = "PARAM_UNIT_INVALID"

	// RulesItems0TemplateParamsItems0UnitPERCENTAGE captures enum value "PERCENTAGE"
	RulesItems0TemplateParamsItems0UnitPERCENTAGE string = "PERCENTAGE"

	// RulesItems0TemplateParamsItems0UnitSECONDS captures enum value "SECONDS"
	RulesItems0TemplateParamsItems0UnitSECONDS string = "SECONDS"
)

// prop value enum
func (o *RulesItems0TemplateParamsItems0) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TemplateParamsItems0TypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0TemplateParamsItems0) validateUnit(formats strfmt.Registry) error {

	if swag.IsZero(o.Unit) { // not required
		return nil
	}

	// value enum
	if err := o.validateUnitEnum("unit", "body", *o.Unit); err != nil {
		return err
	}

	return nil
}

var rulesItems0TemplateParamsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","BOOL","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TemplateParamsItems0TypeTypePropEnum = append(rulesItems0TemplateParamsItems0TypeTypePropEnum, v)
	}
}

const (

	// RulesItems0TemplateParamsItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	RulesItems0TemplateParamsItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// RulesItems0TemplateParamsItems0TypeBOOL captures enum value "BOOL"
	RulesItems0TemplateParamsItems0TypeBOOL string = "BOOL"

	// RulesItems0TemplateParamsItems0TypeFLOAT captures enum value "FLOAT"
	RulesItems0TemplateParamsItems0TypeFLOAT string = "FLOAT"

	// RulesItems0TemplateParamsItems0TypeSTRING captures enum value "STRING"
	RulesItems0TemplateParamsItems0TypeSTRING string = "STRING"
)

// prop value enum
func (o *RulesItems0TemplateParamsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TemplateParamsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0TemplateParamsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0TemplateParamsItems0) validateBool(formats strfmt.Registry) error {

	if swag.IsZero(o.Bool) { // not required
		return nil
	}

	if o.Bool != nil {
		if err := o.Bool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0TemplateParamsItems0) validateFloat(formats strfmt.Registry) error {

	if swag.IsZero(o.Float) { // not required
		return nil
	}

	if o.Float != nil {
		if err := o.Float.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("float")
			}
			return err
		}
	}

	return nil
}

func (o *RulesItems0TemplateParamsItems0) validateString(formats strfmt.Registry) error {

	if swag.IsZero(o.String) { // not required
		return nil
	}

	if o.String != nil {
		if err := o.String.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0TemplateParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0TemplateParamsItems0Bool TemplateBoolParam represents boolean parameter's default value.
swagger:model RulesItems0TemplateParamsItems0Bool
*/
type RulesItems0TemplateParamsItems0Bool struct {

	// BooleanFlag represent a command to set some boolean property to true,
	// to false, or avoid changing that property.
	//
	//  - DO_NOT_CHANGE: Do not change boolean property. Default value.
	//  - TRUE: True.
	//  - FALSE: False.
	// Enum: [DO_NOT_CHANGE TRUE FALSE]
	Default *string `json:"default,omitempty"`
}

// Validate validates this rules items0 template params items0 bool
func (o *RulesItems0TemplateParamsItems0Bool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0TemplateParamsItems0BoolTypeDefaultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DO_NOT_CHANGE","TRUE","FALSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TemplateParamsItems0BoolTypeDefaultPropEnum = append(rulesItems0TemplateParamsItems0BoolTypeDefaultPropEnum, v)
	}
}

const (

	// RulesItems0TemplateParamsItems0BoolDefaultDONOTCHANGE captures enum value "DO_NOT_CHANGE"
	RulesItems0TemplateParamsItems0BoolDefaultDONOTCHANGE string = "DO_NOT_CHANGE"

	// RulesItems0TemplateParamsItems0BoolDefaultTRUE captures enum value "TRUE"
	RulesItems0TemplateParamsItems0BoolDefaultTRUE string = "TRUE"

	// RulesItems0TemplateParamsItems0BoolDefaultFALSE captures enum value "FALSE"
	RulesItems0TemplateParamsItems0BoolDefaultFALSE string = "FALSE"
)

// prop value enum
func (o *RulesItems0TemplateParamsItems0Bool) validateDefaultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0TemplateParamsItems0BoolTypeDefaultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0TemplateParamsItems0Bool) validateDefault(formats strfmt.Registry) error {

	if swag.IsZero(o.Default) { // not required
		return nil
	}

	// value enum
	if err := o.validateDefaultEnum("bool"+"."+"default", "body", *o.Default); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0Bool) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0Bool) UnmarshalBinary(b []byte) error {
	var res RulesItems0TemplateParamsItems0Bool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0TemplateParamsItems0Float TemplateFloatParam represents float parameter's default value and valid range.
swagger:model RulesItems0TemplateParamsItems0Float
*/
type RulesItems0TemplateParamsItems0Float struct {

	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default float32 `json:"default,omitempty"`

	// True if minimal valid value is set.
	HasMin bool `json:"has_min,omitempty"`

	// Minimal valid value (inclusive) if has_min is true.
	Min float32 `json:"min,omitempty"`

	// True if maximal valid value is set.
	HasMax bool `json:"has_max,omitempty"`

	// Maximal valid value (inclusive) if has_max is true.
	Max float32 `json:"max,omitempty"`
}

// Validate validates this rules items0 template params items0 float
func (o *RulesItems0TemplateParamsItems0Float) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0Float) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0Float) UnmarshalBinary(b []byte) error {
	var res RulesItems0TemplateParamsItems0Float
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0TemplateParamsItems0String TemplateStringParam represents string parameter's default value.
swagger:model RulesItems0TemplateParamsItems0String
*/
type RulesItems0TemplateParamsItems0String struct {

	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default string `json:"default,omitempty"`
}

// Validate validates this rules items0 template params items0 string
func (o *RulesItems0TemplateParamsItems0String) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0String) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0TemplateParamsItems0String) UnmarshalBinary(b []byte) error {
	var res RulesItems0TemplateParamsItems0String
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
