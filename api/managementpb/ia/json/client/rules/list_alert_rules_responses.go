// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAlertRulesReader is a Reader for the ListAlertRules structure.
type ListAlertRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAlertRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAlertRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListAlertRulesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAlertRulesOK creates a ListAlertRulesOK with default headers values
func NewListAlertRulesOK() *ListAlertRulesOK {
	return &ListAlertRulesOK{}
}

/* ListAlertRulesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListAlertRulesOK struct {
	Payload *ListAlertRulesOKBody
}

func (o *ListAlertRulesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] listAlertRulesOk  %+v", 200, o.Payload)
}

func (o *ListAlertRulesOK) GetPayload() *ListAlertRulesOKBody {
	return o.Payload
}

func (o *ListAlertRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListAlertRulesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertRulesDefault creates a ListAlertRulesDefault with default headers values
func NewListAlertRulesDefault(code int) *ListAlertRulesDefault {
	return &ListAlertRulesDefault{
		_statusCode: code,
	}
}

/* ListAlertRulesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListAlertRulesDefault struct {
	_statusCode int

	Payload *ListAlertRulesDefaultBody
}

// Code gets the status code for the list alert rules default response
func (o *ListAlertRulesDefault) Code() int {
	return o._statusCode
}

func (o *ListAlertRulesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] ListAlertRules default  %+v", o._statusCode, o.Payload)
}

func (o *ListAlertRulesDefault) GetPayload() *ListAlertRulesDefaultBody {
	return o.Payload
}

func (o *ListAlertRulesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListAlertRulesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListAlertRulesBody list alert rules body
swagger:model ListAlertRulesBody
*/
type ListAlertRulesBody struct {
	// page params
	PageParams *ListAlertRulesParamsBodyPageParams `json:"page_params,omitempty"`
}

// Validate validates this list alert rules body
func (o *ListAlertRulesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePageParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesBody) validatePageParams(formats strfmt.Registry) error {
	if swag.IsZero(o.PageParams) { // not required
		return nil
	}

	if o.PageParams != nil {
		if err := o.PageParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules body based on the context it is used
func (o *ListAlertRulesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePageParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesBody) contextValidatePageParams(ctx context.Context, formats strfmt.Registry) error {
	if o.PageParams != nil {
		if err := o.PageParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesBody) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesDefaultBody list alert rules default body
swagger:model ListAlertRulesDefaultBody
*/
type ListAlertRulesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListAlertRulesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list alert rules default body
func (o *ListAlertRulesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAlertRules default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAlertRules default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list alert rules default body based on the context it is used
func (o *ListAlertRulesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAlertRules default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAlertRules default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesDefaultBodyDetailsItems0 list alert rules default body details items0
swagger:model ListAlertRulesDefaultBodyDetailsItems0
*/
type ListAlertRulesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list alert rules default body details items0
func (o *ListAlertRulesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules default body details items0 based on context it is used
func (o *ListAlertRulesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBody list alert rules OK body
swagger:model ListAlertRulesOKBody
*/
type ListAlertRulesOKBody struct {
	// rules
	Rules []*ListAlertRulesOKBodyRulesItems0 `json:"rules"`

	// totals
	Totals *ListAlertRulesOKBodyTotals `json:"totals,omitempty"`
}

// Validate validates this list alert rules OK body
func (o *ListAlertRulesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAlertRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAlertRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAlertRulesOKBody) validateTotals(formats strfmt.Registry) error {
	if swag.IsZero(o.Totals) { // not required
		return nil
	}

	if o.Totals != nil {
		if err := o.Totals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listAlertRulesOk" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listAlertRulesOk" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules OK body based on the context it is used
func (o *ListAlertRulesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Rules); i++ {
		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAlertRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAlertRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAlertRulesOKBody) contextValidateTotals(ctx context.Context, formats strfmt.Registry) error {
	if o.Totals != nil {
		if err := o.Totals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listAlertRulesOk" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listAlertRulesOk" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBody) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0 Rule represents Alert Rule.
swagger:model ListAlertRulesOKBodyRulesItems0
*/
type ListAlertRulesOKBodyRulesItems0 struct {
	// Rule ID.
	RuleID string `json:"rule_id,omitempty"`

	// Rule name.
	Name string `json:"name,omitempty"`

	// Rule human-readable summary.
	Summary string `json:"summary,omitempty"`

	// Template used for this rule.
	TemplateName string `json:"template_name,omitempty"`

	// True if that rule is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// Expression template.
	ExprTemplate string `json:"expr_template,omitempty"`

	// Expression filled with parameters.
	Expr string `json:"expr,omitempty"`

	// Expression parameters definitions.
	ParamsDefinitions []*ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0 `json:"params_definitions"`

	// Expression parameters values.
	ParamsValues []*ListAlertRulesOKBodyRulesItems0ParamsValuesItems0 `json:"params_values"`

	// Default for duration.
	DefaultFor string `json:"default_for,omitempty"`

	// For duration.
	For string `json:"for,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	DefaultSeverity *string `json:"default_severity,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// Custom labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Labels.
	Labels map[string]string `json:"labels,omitempty"`

	// Annotations.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Filters.
	Filters []*ListAlertRulesOKBodyRulesItems0FiltersItems0 `json:"filters"`

	// Channels.
	Channels []*ListAlertRulesOKBodyRulesItems0ChannelsItems0 `json:"channels"`

	// Rule creation time.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`
}

// Validate validates this list alert rules OK body rules items0
func (o *ListAlertRulesOKBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParamsDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParamsValues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateParamsDefinitions(formats strfmt.Registry) error {
	if swag.IsZero(o.ParamsDefinitions) { // not required
		return nil
	}

	for i := 0; i < len(o.ParamsDefinitions); i++ {
		if swag.IsZero(o.ParamsDefinitions[i]) { // not required
			continue
		}

		if o.ParamsDefinitions[i] != nil {
			if err := o.ParamsDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateParamsValues(formats strfmt.Registry) error {
	if swag.IsZero(o.ParamsValues) { // not required
		return nil
	}

	for i := 0; i < len(o.ParamsValues); i++ {
		if swag.IsZero(o.ParamsValues[i]) { // not required
			continue
		}

		if o.ParamsValues[i] != nil {
			if err := o.ParamsValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var listAlertRulesOkBodyRulesItems0TypeDefaultSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0TypeDefaultSeverityPropEnum = append(listAlertRulesOkBodyRulesItems0TypeDefaultSeverityPropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYINFO string = "SEVERITY_INFO"

	// ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	ListAlertRulesOKBodyRulesItems0DefaultSeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0) validateDefaultSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0TypeDefaultSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateDefaultSeverity(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultSeverity) { // not required
		return nil
	}

	// value enum
	if err := o.validateDefaultSeverityEnum("default_severity", "body", *o.DefaultSeverity); err != nil {
		return err
	}

	return nil
}

var listAlertRulesOkBodyRulesItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0TypeSeverityPropEnum = append(listAlertRulesOkBodyRulesItems0TypeSeverityPropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYINFO string = "SEVERITY_INFO"

	// ListAlertRulesOKBodyRulesItems0SeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	ListAlertRulesOKBodyRulesItems0SeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(o.Filters) { // not required
		return nil
	}

	for i := 0; i < len(o.Filters); i++ {
		if swag.IsZero(o.Filters[i]) { // not required
			continue
		}

		if o.Filters[i] != nil {
			if err := o.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateChannels(formats strfmt.Registry) error {
	if swag.IsZero(o.Channels) { // not required
		return nil
	}

	for i := 0; i < len(o.Channels); i++ {
		if swag.IsZero(o.Channels[i]) { // not required
			continue
		}

		if o.Channels[i] != nil {
			if err := o.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list alert rules OK body rules items0 based on the context it is used
func (o *ListAlertRulesOKBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParamsDefinitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateParamsValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateChannels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) contextValidateParamsDefinitions(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.ParamsDefinitions); i++ {
		if o.ParamsDefinitions[i] != nil {
			if err := o.ParamsDefinitions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) contextValidateParamsValues(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.ParamsValues); i++ {
		if o.ParamsValues[i] != nil {
			if err := o.ParamsValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Filters); i++ {
		if o.Filters[i] != nil {
			if err := o.Filters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0) contextValidateChannels(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Channels); i++ {
		if o.Channels[i] != nil {
			if err := o.Channels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0 Channel represents a single Notification Channel.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0 struct {
	// Machine-readable ID.
	ChannelID string `json:"channel_id,omitempty"`

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// True if that channel is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// email config
	EmailConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig `json:"email_config,omitempty"`

	// pagerduty config
	PagerdutyConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig `json:"pagerduty_config,omitempty"`

	// slack config
	SlackConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig `json:"slack_config,omitempty"`

	// webhook config
	WebhookConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig `json:"webhook_config,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagerdutyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) validateEmailConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) validatePagerdutyConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.PagerdutyConfig) { // not required
		return nil
	}

	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) validateSlackConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.SlackConfig) { // not required
		return nil
	}

	if o.SlackConfig != nil {
		if err := o.SlackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) validateWebhookConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.WebhookConfig) { // not required
		return nil
	}

	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules OK body rules items0 channels items0 based on the context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmailConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagerdutyConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSlackConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWebhookConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) contextValidateEmailConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.EmailConfig != nil {
		if err := o.EmailConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) contextValidatePagerdutyConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.PagerdutyConfig != nil {
		if err := o.PagerdutyConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagerduty_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) contextValidateSlackConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.SlackConfig != nil {
		if err := o.SlackConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack_config")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) contextValidateWebhookConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.WebhookConfig != nil {
		if err := o.WebhookConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig EmailConfig represents email configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig struct {
	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To []string `json:"to"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 email config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 channels items0 email config based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0EmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig PagerDutyConfig represents PagerDuty configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig struct {
	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// The PagerDuty key for "Events API v2" integration type. Exactly one key should be set.
	RoutingKey string `json:"routing_key,omitempty"`

	// The PagerDuty key for "Prometheus" integration type. Exactly one key should be set.
	ServiceKey string `json:"service_key,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 pagerduty config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 channels items0 pagerduty config based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0PagerdutyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig SlackConfig represents Slack configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig struct {
	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 slack config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 channels items0 slack config based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0SlackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig WebhookConfig represents webhook configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig struct {
	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 webhook config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) validateHTTPConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules OK body rules items0 channels items0 webhook config based on the context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHTTPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) contextValidateHTTPConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig HTTPConfig represents HTTP client configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig struct {
	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 webhook config HTTP config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {
	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules OK body rules items0 channels items0 webhook config HTTP config based on the context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBasicAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTLSConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) contextValidateBasicAuth(ctx context.Context, formats strfmt.Registry) error {
	if o.BasicAuth != nil {
		if err := o.BasicAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) contextValidateTLSConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.TLSConfig != nil {
		if err := o.TLSConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_config" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth BasicAuth represents basic HTTP auth configuration.
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth struct {
	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 webhook config HTTP config basic auth
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 channels items0 webhook config HTTP config basic auth based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig TLSConfig represents TLS configuration for alertmanager
// https://prometheus.io/docs/alerting/latest/configuration/#tls_config
swagger:model ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig
*/
type ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig struct {
	// A path to the CA certificate file to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFile string `json:"ca_file,omitempty"`

	// A path to the certificate file for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFile string `json:"cert_file,omitempty"`

	// A path to the key file for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFile string `json:"key_file,omitempty"`

	// Name of the server.
	ServerName string `json:"server_name,omitempty"`

	// Disable validation of the server certificate.
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`

	// CA certificate to validate the server certificate with.
	// ca_file and ca_file_content should not be set at the same time.
	CaFileContent string `json:"ca_file_content,omitempty"`

	// A certificate for client cert authentication to the server.
	// cert_file and cert_file_content should not be set at the same time.
	CertFileContent string `json:"cert_file_content,omitempty"`

	// A key for client cert authentication to the server.
	// key_file and key_file_content should not be set at the same time.
	KeyFileContent string `json:"key_file_content,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 channels items0 webhook config HTTP config TLS config
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 channels items0 webhook config HTTP config TLS config based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ChannelsItems0WebhookConfigHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0FiltersItems0 Filter repsents a single filter condition.
swagger:model ListAlertRulesOKBodyRulesItems0FiltersItems0
*/
type ListAlertRulesOKBodyRulesItems0FiltersItems0 struct {
	// FilterType represents filter matching type.
	//
	//  - EQUAL: =
	//  - REGEX: =~
	// Enum: [FILTER_TYPE_INVALID EQUAL REGEX]
	Type *string `json:"type,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 filters items0
func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAlertRulesOkBodyRulesItems0FiltersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FILTER_TYPE_INVALID","EQUAL","REGEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0FiltersItems0TypeTypePropEnum = append(listAlertRulesOkBodyRulesItems0FiltersItems0TypeTypePropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0FiltersItems0TypeFILTERTYPEINVALID captures enum value "FILTER_TYPE_INVALID"
	ListAlertRulesOKBodyRulesItems0FiltersItems0TypeFILTERTYPEINVALID string = "FILTER_TYPE_INVALID"

	// ListAlertRulesOKBodyRulesItems0FiltersItems0TypeEQUAL captures enum value "EQUAL"
	ListAlertRulesOKBodyRulesItems0FiltersItems0TypeEQUAL string = "EQUAL"

	// ListAlertRulesOKBodyRulesItems0FiltersItems0TypeREGEX captures enum value "REGEX"
	ListAlertRulesOKBodyRulesItems0FiltersItems0TypeREGEX string = "REGEX"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0FiltersItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 filters items0 based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0FiltersItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0FiltersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0 ParamDefinition represents a single query parameter.
swagger:model ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0
*/
type ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0 struct {
	// Machine-readable name (ID) that is used in expression.
	Name string `json:"name,omitempty"`

	// Short human-readable parameter summary.
	Summary string `json:"summary,omitempty"`

	// ParamUnit represents template parameter unit.
	//
	//  - PARAM_UNIT_INVALID: Invalid, unknown or absent.
	//  - PERCENTAGE: %
	//  - SECONDS: s
	// Enum: [PARAM_UNIT_INVALID PERCENTAGE SECONDS]
	Unit *string `json:"unit,omitempty"`

	// ParamType represents template parameter type.
	// Enum: [PARAM_TYPE_INVALID BOOL FLOAT STRING]
	Type *string `json:"type,omitempty"`

	// bool
	Bool *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool `json:"bool,omitempty"`

	// float
	Float *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float `json:"float,omitempty"`

	// string
	String *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String `json:"string,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 params definitions items0
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBool(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFloat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_UNIT_INVALID","PERCENTAGE","SECONDS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeUnitPropEnum = append(listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeUnitPropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitPARAMUNITINVALID captures enum value "PARAM_UNIT_INVALID"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitPARAMUNITINVALID string = "PARAM_UNIT_INVALID"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitPERCENTAGE captures enum value "PERCENTAGE"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitPERCENTAGE string = "PERCENTAGE"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitSECONDS captures enum value "SECONDS"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0UnitSECONDS string = "SECONDS"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(o.Unit) { // not required
		return nil
	}

	// value enum
	if err := o.validateUnitEnum("unit", "body", *o.Unit); err != nil {
		return err
	}

	return nil
}

var listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","BOOL","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeTypePropEnum = append(listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeTypePropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeBOOL captures enum value "BOOL"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeBOOL string = "BOOL"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeFLOAT captures enum value "FLOAT"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeFLOAT string = "FLOAT"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeSTRING captures enum value "STRING"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0TypeSTRING string = "STRING"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateBool(formats strfmt.Registry) error {
	if swag.IsZero(o.Bool) { // not required
		return nil
	}

	if o.Bool != nil {
		if err := o.Bool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateFloat(formats strfmt.Registry) error {
	if swag.IsZero(o.Float) { // not required
		return nil
	}

	if o.Float != nil {
		if err := o.Float.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("float")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("float")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) validateString(formats strfmt.Registry) error {
	if swag.IsZero(o.String) { // not required
		return nil
	}

	if o.String != nil {
		if err := o.String.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("string")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list alert rules OK body rules items0 params definitions items0 based on the context it is used
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFloat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateString(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) contextValidateBool(ctx context.Context, formats strfmt.Registry) error {
	if o.Bool != nil {
		if err := o.Bool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) contextValidateFloat(ctx context.Context, formats strfmt.Registry) error {
	if o.Float != nil {
		if err := o.Float.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("float")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("float")
			}
			return err
		}
	}

	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) contextValidateString(ctx context.Context, formats strfmt.Registry) error {
	if o.String != nil {
		if err := o.String.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("string")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool BoolParamDefinition represents boolean parameter's default value.
swagger:model ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool
*/
type ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool struct {
	// BooleanFlag represent a command to set some boolean property to true,
	// to false, or avoid changing that property.
	//
	//  - DO_NOT_CHANGE: Do not change boolean property. Default value.
	//  - TRUE: True.
	//  - FALSE: False.
	// Enum: [DO_NOT_CHANGE TRUE FALSE]
	Default *string `json:"default,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 params definitions items0 bool
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0BoolTypeDefaultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DO_NOT_CHANGE","TRUE","FALSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0BoolTypeDefaultPropEnum = append(listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0BoolTypeDefaultPropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultDONOTCHANGE captures enum value "DO_NOT_CHANGE"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultDONOTCHANGE string = "DO_NOT_CHANGE"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultTRUE captures enum value "TRUE"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultTRUE string = "TRUE"

	// ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultFALSE captures enum value "FALSE"
	ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0BoolDefaultFALSE string = "FALSE"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) validateDefaultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0ParamsDefinitionsItems0BoolTypeDefaultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) validateDefault(formats strfmt.Registry) error {
	if swag.IsZero(o.Default) { // not required
		return nil
	}

	// value enum
	if err := o.validateDefaultEnum("bool"+"."+"default", "body", *o.Default); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 params definitions items0 bool based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Bool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float FloatParamDefinition represents float parameter's default value and valid range.
swagger:model ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float
*/
type ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float struct {
	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default float64 `json:"default,omitempty"`

	// True if minimal valid value is set.
	HasMin bool `json:"has_min,omitempty"`

	// Minimal valid value (inclusive) if has_min is true.
	Min float64 `json:"min,omitempty"`

	// True if maximal valid value is set.
	HasMax bool `json:"has_max,omitempty"`

	// Maximal valid value (inclusive) if has_max is true.
	Max float64 `json:"max,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 params definitions items0 float
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 params definitions items0 float based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0Float
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String StringParamDefinition represents string parameter's default value.
swagger:model ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String
*/
type ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String struct {
	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default string `json:"default,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 params definitions items0 string
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 params definitions items0 string based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ParamsDefinitionsItems0String
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyRulesItems0ParamsValuesItems0 ParamValue represents a single rule parameter value for List, Change and Update APIs.
swagger:model ListAlertRulesOKBodyRulesItems0ParamsValuesItems0
*/
type ListAlertRulesOKBodyRulesItems0ParamsValuesItems0 struct {
	// Machine-readable name (ID) that is used in expression.
	Name string `json:"name,omitempty"`

	// ParamType represents template parameter type.
	// Enum: [PARAM_TYPE_INVALID BOOL FLOAT STRING]
	Type *string `json:"type,omitempty"`

	// Bool value.
	Bool bool `json:"bool,omitempty"`

	// Float value.
	Float float64 `json:"float,omitempty"`

	// String value.
	String string `json:"string,omitempty"`
}

// Validate validates this list alert rules OK body rules items0 params values items0
func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAlertRulesOkBodyRulesItems0ParamsValuesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","BOOL","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAlertRulesOkBodyRulesItems0ParamsValuesItems0TypeTypePropEnum = append(listAlertRulesOkBodyRulesItems0ParamsValuesItems0TypeTypePropEnum, v)
	}
}

const (

	// ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeBOOL captures enum value "BOOL"
	ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeBOOL string = "BOOL"

	// ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeFLOAT captures enum value "FLOAT"
	ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeFLOAT string = "FLOAT"

	// ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeSTRING captures enum value "STRING"
	ListAlertRulesOKBodyRulesItems0ParamsValuesItems0TypeSTRING string = "STRING"
)

// prop value enum
func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAlertRulesOkBodyRulesItems0ParamsValuesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list alert rules OK body rules items0 params values items0 based on context it is used
func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyRulesItems0ParamsValuesItems0) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyRulesItems0ParamsValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesOKBodyTotals PageTotals represents total values for pagination.
swagger:model ListAlertRulesOKBodyTotals
*/
type ListAlertRulesOKBodyTotals struct {
	// Total number of results.
	TotalItems int32 `json:"total_items,omitempty"`

	// Total number of pages.
	TotalPages int32 `json:"total_pages,omitempty"`
}

// Validate validates this list alert rules OK body totals
func (o *ListAlertRulesOKBodyTotals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules OK body totals based on context it is used
func (o *ListAlertRulesOKBodyTotals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesOKBodyTotals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesOKBodyTotals) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesOKBodyTotals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertRulesParamsBodyPageParams PageParams represents page request parameters for pagination.
swagger:model ListAlertRulesParamsBodyPageParams
*/
type ListAlertRulesParamsBodyPageParams struct {
	// Maximum number of results per page.
	PageSize int32 `json:"page_size,omitempty"`

	// Index of the requested page, starts from 0.
	Index int32 `json:"index,omitempty"`
}

// Validate validates this list alert rules params body page params
func (o *ListAlertRulesParamsBodyPageParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list alert rules params body page params based on context it is used
func (o *ListAlertRulesParamsBodyPageParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertRulesParamsBodyPageParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertRulesParamsBodyPageParams) UnmarshalBinary(b []byte) error {
	var res ListAlertRulesParamsBodyPageParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
