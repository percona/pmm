// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RulesCreateAlertRule(params *RulesCreateAlertRuleParams) (*RulesCreateAlertRuleOK, error)

	RulesDeleteAlertRule(params *RulesDeleteAlertRuleParams) (*RulesDeleteAlertRuleOK, error)

	RulesListAlertRules(params *RulesListAlertRulesParams) (*RulesListAlertRulesOK, error)

	RulesToggleAlertRule(params *RulesToggleAlertRuleParams) (*RulesToggleAlertRuleOK, error)

	RulesUpdateAlertRule(params *RulesUpdateAlertRuleParams) (*RulesUpdateAlertRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RulesCreateAlertRule creates alert rule creates alerting rule
*/
func (a *Client) RulesCreateAlertRule(params *RulesCreateAlertRuleParams) (*RulesCreateAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesCreateAlertRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_CreateAlertRule",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Rules/Create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesCreateAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesCreateAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RulesCreateAlertRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RulesDeleteAlertRule deletes alert rule deletes alerting rule
*/
func (a *Client) RulesDeleteAlertRule(params *RulesDeleteAlertRuleParams) (*RulesDeleteAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesDeleteAlertRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_DeleteAlertRule",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Rules/Delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesDeleteAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesDeleteAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RulesDeleteAlertRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RulesListAlertRules lists alert rules returns a list of all alerting rules
*/
func (a *Client) RulesListAlertRules(params *RulesListAlertRulesParams) (*RulesListAlertRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesListAlertRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_ListAlertRules",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Rules/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesListAlertRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesListAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RulesListAlertRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RulesToggleAlertRule toggles alert rule allows to switch between disabled and enabled states of an alert rule
*/
func (a *Client) RulesToggleAlertRule(params *RulesToggleAlertRuleParams) (*RulesToggleAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesToggleAlertRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_ToggleAlertRule",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Rules/Toggle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesToggleAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesToggleAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RulesToggleAlertRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RulesUpdateAlertRule updates alert rule updates alerting rule
*/
func (a *Client) RulesUpdateAlertRule(params *RulesUpdateAlertRuleParams) (*RulesUpdateAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesUpdateAlertRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_UpdateAlertRule",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Rules/Update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesUpdateAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesUpdateAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RulesUpdateAlertRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
