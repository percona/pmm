// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RulesUpdateAlertRuleReader is a Reader for the RulesUpdateAlertRule structure.
type RulesUpdateAlertRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RulesUpdateAlertRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRulesUpdateAlertRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRulesUpdateAlertRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRulesUpdateAlertRuleOK creates a RulesUpdateAlertRuleOK with default headers values
func NewRulesUpdateAlertRuleOK() *RulesUpdateAlertRuleOK {
	return &RulesUpdateAlertRuleOK{}
}

/*RulesUpdateAlertRuleOK handles this case with default header values.

A successful response.
*/
type RulesUpdateAlertRuleOK struct {
	Payload interface{}
}

func (o *RulesUpdateAlertRuleOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/Update][%d] rulesUpdateAlertRuleOk  %+v", 200, o.Payload)
}

func (o *RulesUpdateAlertRuleOK) GetPayload() interface{} {
	return o.Payload
}

func (o *RulesUpdateAlertRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRulesUpdateAlertRuleDefault creates a RulesUpdateAlertRuleDefault with default headers values
func NewRulesUpdateAlertRuleDefault(code int) *RulesUpdateAlertRuleDefault {
	return &RulesUpdateAlertRuleDefault{
		_statusCode: code,
	}
}

/*RulesUpdateAlertRuleDefault handles this case with default header values.

An unexpected error response.
*/
type RulesUpdateAlertRuleDefault struct {
	_statusCode int

	Payload *RulesUpdateAlertRuleDefaultBody
}

// Code gets the status code for the rules update alert rule default response
func (o *RulesUpdateAlertRuleDefault) Code() int {
	return o._statusCode
}

func (o *RulesUpdateAlertRuleDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/Update][%d] Rules_UpdateAlertRule default  %+v", o._statusCode, o.Payload)
}

func (o *RulesUpdateAlertRuleDefault) GetPayload() *RulesUpdateAlertRuleDefaultBody {
	return o.Payload
}

func (o *RulesUpdateAlertRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RulesUpdateAlertRuleDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RulesUpdateAlertRuleBody rules update alert rule body
swagger:model RulesUpdateAlertRuleBody
*/
type RulesUpdateAlertRuleBody struct {

	// Rule ID.
	RuleID string `json:"rule_id,omitempty"`

	// Rule name. Should be set.
	Name string `json:"name,omitempty"`

	// New rule status. Should be set.
	Disabled bool `json:"disabled,omitempty"`

	// Rule parameters. All template parameters should be set.
	Params []*ParamsItems0 `json:"params"`

	// Rule duration. Should be set.
	For string `json:"for,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// All custom labels to add or remove (with empty values) to default labels from template.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Filters. Should be set.
	Filters []*FiltersItems0 `json:"filters"`

	// Channels. Should be set.
	ChannelIds []string `json:"channel_ids"`
}

// Validate validates this rules update alert rule body
func (o *RulesUpdateAlertRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesUpdateAlertRuleBody) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	for i := 0; i < len(o.Params); i++ {
		if swag.IsZero(o.Params[i]) { // not required
			continue
		}

		if o.Params[i] != nil {
			if err := o.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var rulesUpdateAlertRuleBodyTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesUpdateAlertRuleBodyTypeSeverityPropEnum = append(rulesUpdateAlertRuleBodyTypeSeverityPropEnum, v)
	}
}

const (

	// RulesUpdateAlertRuleBodySeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	RulesUpdateAlertRuleBodySeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// RulesUpdateAlertRuleBodySeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	RulesUpdateAlertRuleBodySeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// RulesUpdateAlertRuleBodySeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	RulesUpdateAlertRuleBodySeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// RulesUpdateAlertRuleBodySeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	RulesUpdateAlertRuleBodySeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// RulesUpdateAlertRuleBodySeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	RulesUpdateAlertRuleBodySeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// RulesUpdateAlertRuleBodySeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	RulesUpdateAlertRuleBodySeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// RulesUpdateAlertRuleBodySeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	RulesUpdateAlertRuleBodySeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// RulesUpdateAlertRuleBodySeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	RulesUpdateAlertRuleBodySeveritySEVERITYINFO string = "SEVERITY_INFO"

	// RulesUpdateAlertRuleBodySeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	RulesUpdateAlertRuleBodySeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *RulesUpdateAlertRuleBody) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesUpdateAlertRuleBodyTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesUpdateAlertRuleBody) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("body"+"."+"severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

func (o *RulesUpdateAlertRuleBody) validateFilters(formats strfmt.Registry) error {

	if swag.IsZero(o.Filters) { // not required
		return nil
	}

	for i := 0; i < len(o.Filters); i++ {
		if swag.IsZero(o.Filters[i]) { // not required
			continue
		}

		if o.Filters[i] != nil {
			if err := o.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesUpdateAlertRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesUpdateAlertRuleBody) UnmarshalBinary(b []byte) error {
	var res RulesUpdateAlertRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesUpdateAlertRuleDefaultBody rules update alert rule default body
swagger:model RulesUpdateAlertRuleDefaultBody
*/
type RulesUpdateAlertRuleDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this rules update alert rule default body
func (o *RulesUpdateAlertRuleDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesUpdateAlertRuleDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Rules_UpdateAlertRule default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesUpdateAlertRuleDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesUpdateAlertRuleDefaultBody) UnmarshalBinary(b []byte) error {
	var res RulesUpdateAlertRuleDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
