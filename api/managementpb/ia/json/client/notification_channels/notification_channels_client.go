// Code generated by go-swagger; DO NOT EDIT.

package notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notification channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notification channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddNotificationChannel(params *AddNotificationChannelParams) (*AddNotificationChannelOK, error)

	ChangeNotificationChannel(params *ChangeNotificationChannelParams) (*ChangeNotificationChannelOK, error)

	ListNotificationChannels(params *ListNotificationChannelsParams) (*ListNotificationChannelsOK, error)

	RemoveNotificationChannel(params *RemoveNotificationChannelParams) (*RemoveNotificationChannelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddNotificationChannel adds notification channel t o d o
*/
func (a *Client) AddNotificationChannel(params *AddNotificationChannelParams) (*AddNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNotificationChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddNotificationChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/NotificationChannels/Add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddNotificationChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChangeNotificationChannel changes notification channel t o d o
*/
func (a *Client) ChangeNotificationChannel(params *ChangeNotificationChannelParams) (*ChangeNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeNotificationChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeNotificationChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/NotificationChannels/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeNotificationChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListNotificationChannels lists notification channels t o d o
*/
func (a *Client) ListNotificationChannels(params *ListNotificationChannelsParams) (*ListNotificationChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotificationChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNotificationChannels",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/NotificationChannels/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListNotificationChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNotificationChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNotificationChannelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveNotificationChannel removes notification channel t o d o
*/
func (a *Client) RemoveNotificationChannel(params *RemoveNotificationChannelParams) (*RemoveNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNotificationChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveNotificationChannel",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/NotificationChannels/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveNotificationChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
