// Code generated by go-swagger; DO NOT EDIT.

package notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddNotificationChannelReader is a Reader for the AddNotificationChannel structure.
type AddNotificationChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddNotificationChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddNotificationChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddNotificationChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddNotificationChannelOK creates a AddNotificationChannelOK with default headers values
func NewAddNotificationChannelOK() *AddNotificationChannelOK {
	return &AddNotificationChannelOK{}
}

/*AddNotificationChannelOK handles this case with default header values.

A successful response.
*/
type AddNotificationChannelOK struct {
	Payload interface{}
}

func (o *AddNotificationChannelOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/Add][%d] addNotificationChannelOk  %+v", 200, o.Payload)
}

func (o *AddNotificationChannelOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AddNotificationChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNotificationChannelDefault creates a AddNotificationChannelDefault with default headers values
func NewAddNotificationChannelDefault(code int) *AddNotificationChannelDefault {
	return &AddNotificationChannelDefault{
		_statusCode: code,
	}
}

/*AddNotificationChannelDefault handles this case with default header values.

An unexpected error response.
*/
type AddNotificationChannelDefault struct {
	_statusCode int

	Payload *AddNotificationChannelDefaultBody
}

// Code gets the status code for the add notification channel default response
func (o *AddNotificationChannelDefault) Code() int {
	return o._statusCode
}

func (o *AddNotificationChannelDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/Add][%d] AddNotificationChannel default  %+v", o._statusCode, o.Payload)
}

func (o *AddNotificationChannelDefault) GetPayload() *AddNotificationChannelDefaultBody {
	return o.Payload
}

func (o *AddNotificationChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddNotificationChannelDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddNotificationChannelBody add notification channel body
swagger:model AddNotificationChannelBody
*/
type AddNotificationChannelBody struct {

	// name
	Name string `json:"name,omitempty"`

	// email config
	EmailConfig *AddNotificationChannelParamsBodyEmailConfig `json:"email_config,omitempty"`

	// slack configs
	SlackConfigs *AddNotificationChannelParamsBodySlackConfigs `json:"slack_configs,omitempty"`

	// webhook configs
	WebhookConfigs *AddNotificationChannelParamsBodyWebhookConfigs `json:"webhook_configs,omitempty"`
}

// Validate validates this add notification channel body
func (o *AddNotificationChannelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddNotificationChannelBody) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "email_config")
			}
			return err
		}
	}

	return nil
}

func (o *AddNotificationChannelBody) validateSlackConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfigs) { // not required
		return nil
	}

	if o.SlackConfigs != nil {
		if err := o.SlackConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "slack_configs")
			}
			return err
		}
	}

	return nil
}

func (o *AddNotificationChannelBody) validateWebhookConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfigs) { // not required
		return nil
	}

	if o.WebhookConfigs != nil {
		if err := o.WebhookConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelBody) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelDefaultBody add notification channel default body
swagger:model AddNotificationChannelDefaultBody
*/
type AddNotificationChannelDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this add notification channel default body
func (o *AddNotificationChannelDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddNotificationChannelDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddNotificationChannel default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodyEmailConfig EmailConfig FIXME.
swagger:model AddNotificationChannelParamsBodyEmailConfig
*/
type AddNotificationChannelParamsBodyEmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this add notification channel params body email config
func (o *AddNotificationChannelParamsBodyEmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyEmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyEmailConfig) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodyEmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodySlackConfigs SlackConfig FIXME.
swagger:model AddNotificationChannelParamsBodySlackConfigs
*/
type AddNotificationChannelParamsBodySlackConfigs struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this add notification channel params body slack configs
func (o *AddNotificationChannelParamsBodySlackConfigs) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodySlackConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodySlackConfigs) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodySlackConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodyWebhookConfigs WebhookConfig FIXME.
swagger:model AddNotificationChannelParamsBodyWebhookConfigs
*/
type AddNotificationChannelParamsBodyWebhookConfigs struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this add notification channel params body webhook configs
func (o *AddNotificationChannelParamsBodyWebhookConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddNotificationChannelParamsBodyWebhookConfigs) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigs) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodyWebhookConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig HTTPConfig FIXME.
swagger:model AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig
*/
type AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this add notification channel params body webhook configs HTTP config
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodyWebhookConfigsHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth BasicAuth FIXME.
swagger:model AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth
*/
type AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this add notification channel params body webhook configs HTTP config basic auth
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig TLSConfig FIXME.
swagger:model AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig
*/
type AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig struct {

	// ca file
	CaFile string `json:"ca_file,omitempty"`

	// cert file
	CertFile string `json:"cert_file,omitempty"`

	// key file
	KeyFile string `json:"key_file,omitempty"`

	// server name
	ServerName string `json:"server_name,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`
}

// Validate validates this add notification channel params body webhook configs HTTP config TLS config
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res AddNotificationChannelParamsBodyWebhookConfigsHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
