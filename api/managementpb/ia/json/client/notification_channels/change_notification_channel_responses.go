// Code generated by go-swagger; DO NOT EDIT.

package notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangeNotificationChannelReader is a Reader for the ChangeNotificationChannel structure.
type ChangeNotificationChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeNotificationChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeNotificationChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangeNotificationChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangeNotificationChannelOK creates a ChangeNotificationChannelOK with default headers values
func NewChangeNotificationChannelOK() *ChangeNotificationChannelOK {
	return &ChangeNotificationChannelOK{}
}

/*ChangeNotificationChannelOK handles this case with default header values.

A successful response.
*/
type ChangeNotificationChannelOK struct {
	Payload interface{}
}

func (o *ChangeNotificationChannelOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/Change][%d] changeNotificationChannelOk  %+v", 200, o.Payload)
}

func (o *ChangeNotificationChannelOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ChangeNotificationChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNotificationChannelDefault creates a ChangeNotificationChannelDefault with default headers values
func NewChangeNotificationChannelDefault(code int) *ChangeNotificationChannelDefault {
	return &ChangeNotificationChannelDefault{
		_statusCode: code,
	}
}

/*ChangeNotificationChannelDefault handles this case with default header values.

An unexpected error response.
*/
type ChangeNotificationChannelDefault struct {
	_statusCode int

	Payload *ChangeNotificationChannelDefaultBody
}

// Code gets the status code for the change notification channel default response
func (o *ChangeNotificationChannelDefault) Code() int {
	return o._statusCode
}

func (o *ChangeNotificationChannelDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/Change][%d] ChangeNotificationChannel default  %+v", o._statusCode, o.Payload)
}

func (o *ChangeNotificationChannelDefault) GetPayload() *ChangeNotificationChannelDefaultBody {
	return o.Payload
}

func (o *ChangeNotificationChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChangeNotificationChannelDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChangeNotificationChannelBody change notification channel body
swagger:model ChangeNotificationChannelBody
*/
type ChangeNotificationChannelBody struct {

	// name
	Name string `json:"name,omitempty"`

	// email config
	EmailConfig *ChangeNotificationChannelParamsBodyEmailConfig `json:"email_config,omitempty"`

	// slack configs
	SlackConfigs *ChangeNotificationChannelParamsBodySlackConfigs `json:"slack_configs,omitempty"`

	// webhook configs
	WebhookConfigs *ChangeNotificationChannelParamsBodyWebhookConfigs `json:"webhook_configs,omitempty"`
}

// Validate validates this change notification channel body
func (o *ChangeNotificationChannelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeNotificationChannelBody) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeNotificationChannelBody) validateSlackConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfigs) { // not required
		return nil
	}

	if o.SlackConfigs != nil {
		if err := o.SlackConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "slack_configs")
			}
			return err
		}
	}

	return nil
}

func (o *ChangeNotificationChannelBody) validateWebhookConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfigs) { // not required
		return nil
	}

	if o.WebhookConfigs != nil {
		if err := o.WebhookConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelBody) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelDefaultBody change notification channel default body
swagger:model ChangeNotificationChannelDefaultBody
*/
type ChangeNotificationChannelDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this change notification channel default body
func (o *ChangeNotificationChannelDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeNotificationChannelDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeNotificationChannel default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelParamsBodyEmailConfig EmailConfig FIXME.
swagger:model ChangeNotificationChannelParamsBodyEmailConfig
*/
type ChangeNotificationChannelParamsBodyEmailConfig struct {

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this change notification channel params body email config
func (o *ChangeNotificationChannelParamsBodyEmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyEmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyEmailConfig) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelParamsBodyEmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelParamsBodySlackConfigs SlackConfig FIXME.
swagger:model ChangeNotificationChannelParamsBodySlackConfigs
*/
type ChangeNotificationChannelParamsBodySlackConfigs struct {

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this change notification channel params body slack configs
func (o *ChangeNotificationChannelParamsBodySlackConfigs) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodySlackConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodySlackConfigs) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelParamsBodySlackConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelParamsBodyWebhookConfigs WebhookConfig FIXME.
swagger:model ChangeNotificationChannelParamsBodyWebhookConfigs
*/
type ChangeNotificationChannelParamsBodyWebhookConfigs struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this change notification channel params body webhook configs
func (o *ChangeNotificationChannelParamsBodyWebhookConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeNotificationChannelParamsBodyWebhookConfigs) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigs) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelParamsBodyWebhookConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig HTTPConfig FIXME.
swagger:model ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig
*/
type ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// TODO TLSConfig tls_config = 4;
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth `json:"basic_auth,omitempty"`
}

// Validate validates this change notification channel params body webhook configs HTTP config
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "webhook_configs" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth BasicAuth FIXME.
swagger:model ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth
*/
type ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this change notification channel params body webhook configs HTTP config basic auth
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ChangeNotificationChannelParamsBodyWebhookConfigsHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
