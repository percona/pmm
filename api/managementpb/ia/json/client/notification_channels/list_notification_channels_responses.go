// Code generated by go-swagger; DO NOT EDIT.

package notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListNotificationChannelsReader is a Reader for the ListNotificationChannels structure.
type ListNotificationChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNotificationChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNotificationChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListNotificationChannelsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListNotificationChannelsOK creates a ListNotificationChannelsOK with default headers values
func NewListNotificationChannelsOK() *ListNotificationChannelsOK {
	return &ListNotificationChannelsOK{}
}

/*ListNotificationChannelsOK handles this case with default header values.

A successful response.
*/
type ListNotificationChannelsOK struct {
	Payload *ListNotificationChannelsOKBody
}

func (o *ListNotificationChannelsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/List][%d] listNotificationChannelsOk  %+v", 200, o.Payload)
}

func (o *ListNotificationChannelsOK) GetPayload() *ListNotificationChannelsOKBody {
	return o.Payload
}

func (o *ListNotificationChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListNotificationChannelsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationChannelsDefault creates a ListNotificationChannelsDefault with default headers values
func NewListNotificationChannelsDefault(code int) *ListNotificationChannelsDefault {
	return &ListNotificationChannelsDefault{
		_statusCode: code,
	}
}

/*ListNotificationChannelsDefault handles this case with default header values.

An unexpected error response.
*/
type ListNotificationChannelsDefault struct {
	_statusCode int

	Payload *ListNotificationChannelsDefaultBody
}

// Code gets the status code for the list notification channels default response
func (o *ListNotificationChannelsDefault) Code() int {
	return o._statusCode
}

func (o *ListNotificationChannelsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/NotificationChannels/List][%d] ListNotificationChannels default  %+v", o._statusCode, o.Payload)
}

func (o *ListNotificationChannelsDefault) GetPayload() *ListNotificationChannelsDefaultBody {
	return o.Payload
}

func (o *ListNotificationChannelsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListNotificationChannelsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsItems0 NotificationChannel represents a single Notification Channel.
swagger:model ChannelsItems0
*/
type ChannelsItems0 struct {

	// TODO or ID?
	Name string `json:"name,omitempty"`

	// email config
	EmailConfig *ChannelsItems0EmailConfig `json:"email_config,omitempty"`

	// slack configs
	SlackConfigs *ChannelsItems0SlackConfigs `json:"slack_configs,omitempty"`

	// webhook configs
	WebhookConfigs *ChannelsItems0WebhookConfigs `json:"webhook_configs,omitempty"`
}

// Validate validates this channels items0
func (o *ChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlackConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhookConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0) validateEmailConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailConfig) { // not required
		return nil
	}

	if o.EmailConfig != nil {
		if err := o.EmailConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_config")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0) validateSlackConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.SlackConfigs) { // not required
		return nil
	}

	if o.SlackConfigs != nil {
		if err := o.SlackConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_configs")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0) validateWebhookConfigs(formats strfmt.Registry) error {

	if swag.IsZero(o.WebhookConfigs) { // not required
		return nil
	}

	if o.WebhookConfigs != nil {
		if err := o.WebhookConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_configs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0EmailConfig EmailConfig FIXME.
swagger:model ChannelsItems0EmailConfig
*/
type ChannelsItems0EmailConfig struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this channels items0 email config
func (o *ChannelsItems0EmailConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0EmailConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0EmailConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0EmailConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0SlackConfigs SlackConfig FIXME.
swagger:model ChannelsItems0SlackConfigs
*/
type ChannelsItems0SlackConfigs struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`
}

// Validate validates this channels items0 slack configs
func (o *ChannelsItems0SlackConfigs) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0SlackConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0SlackConfigs) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0SlackConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigs WebhookConfig FIXME.
swagger:model ChannelsItems0WebhookConfigs
*/
type ChannelsItems0WebhookConfigs struct {

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// max alerts
	MaxAlerts int32 `json:"max_alerts,omitempty"`

	// http config
	HTTPConfig *ChannelsItems0WebhookConfigsHTTPConfig `json:"http_config,omitempty"`
}

// Validate validates this channels items0 webhook configs
func (o *ChannelsItems0WebhookConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0WebhookConfigs) validateHTTPConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HTTPConfig) { // not required
		return nil
	}

	if o.HTTPConfig != nil {
		if err := o.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_configs" + "." + "http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigs) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigsHTTPConfig HTTPConfig FIXME.
swagger:model ChannelsItems0WebhookConfigsHTTPConfig
*/
type ChannelsItems0WebhookConfigsHTTPConfig struct {

	// bearer token
	BearerToken string `json:"bearer_token,omitempty"`

	// bearer token file
	BearerTokenFile string `json:"bearer_token_file,omitempty"`

	// proxy url
	ProxyURL string `json:"proxy_url,omitempty"`

	// basic auth
	BasicAuth *ChannelsItems0WebhookConfigsHTTPConfigBasicAuth `json:"basic_auth,omitempty"`

	// tls config
	TLSConfig *ChannelsItems0WebhookConfigsHTTPConfigTLSConfig `json:"tls_config,omitempty"`
}

// Validate validates this channels items0 webhook configs HTTP config
func (o *ChannelsItems0WebhookConfigsHTTPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsItems0WebhookConfigsHTTPConfig) validateBasicAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.BasicAuth) { // not required
		return nil
	}

	if o.BasicAuth != nil {
		if err := o.BasicAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_configs" + "." + "http_config" + "." + "basic_auth")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsItems0WebhookConfigsHTTPConfig) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.TLSConfig) { // not required
		return nil
	}

	if o.TLSConfig != nil {
		if err := o.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_configs" + "." + "http_config" + "." + "tls_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigsHTTPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigsHTTPConfigBasicAuth BasicAuth FIXME.
// TODO Do not use inner messages in all public APIs (for consistency).
swagger:model ChannelsItems0WebhookConfigsHTTPConfigBasicAuth
*/
type ChannelsItems0WebhookConfigsHTTPConfigBasicAuth struct {

	// username
	Username string `json:"username,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password file
	PasswordFile string `json:"password_file,omitempty"`
}

// Validate validates this channels items0 webhook configs HTTP config basic auth
func (o *ChannelsItems0WebhookConfigsHTTPConfigBasicAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfigBasicAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfigBasicAuth) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigsHTTPConfigBasicAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsItems0WebhookConfigsHTTPConfigTLSConfig TLSConfig FIXME.
swagger:model ChannelsItems0WebhookConfigsHTTPConfigTLSConfig
*/
type ChannelsItems0WebhookConfigsHTTPConfigTLSConfig struct {

	// ca file
	CaFile string `json:"ca_file,omitempty"`

	// cert file
	CertFile string `json:"cert_file,omitempty"`

	// key file
	KeyFile string `json:"key_file,omitempty"`

	// server name
	ServerName string `json:"server_name,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecure_skip_verify,omitempty"`
}

// Validate validates this channels items0 webhook configs HTTP config TLS config
func (o *ChannelsItems0WebhookConfigsHTTPConfigTLSConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfigTLSConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsItems0WebhookConfigsHTTPConfigTLSConfig) UnmarshalBinary(b []byte) error {
	var res ChannelsItems0WebhookConfigsHTTPConfigTLSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListNotificationChannelsDefaultBody list notification channels default body
swagger:model ListNotificationChannelsDefaultBody
*/
type ListNotificationChannelsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list notification channels default body
func (o *ListNotificationChannelsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNotificationChannelsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListNotificationChannels default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNotificationChannelsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNotificationChannelsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListNotificationChannelsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListNotificationChannelsOKBody list notification channels OK body
swagger:model ListNotificationChannelsOKBody
*/
type ListNotificationChannelsOKBody struct {

	// channels
	Channels []*ChannelsItems0 `json:"channels"`
}

// Validate validates this list notification channels OK body
func (o *ListNotificationChannelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNotificationChannelsOKBody) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(o.Channels) { // not required
		return nil
	}

	for i := 0; i < len(o.Channels); i++ {
		if swag.IsZero(o.Channels[i]) { // not required
			continue
		}

		if o.Channels[i] != nil {
			if err := o.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listNotificationChannelsOk" + "." + "channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNotificationChannelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNotificationChannelsOKBody) UnmarshalBinary(b []byte) error {
	var res ListNotificationChannelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
