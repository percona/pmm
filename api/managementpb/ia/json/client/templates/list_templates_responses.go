// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListTemplatesReader is a Reader for the ListTemplates structure.
type ListTemplatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTemplatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTemplatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListTemplatesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTemplatesOK creates a ListTemplatesOK with default headers values
func NewListTemplatesOK() *ListTemplatesOK {
	return &ListTemplatesOK{}
}

/* ListTemplatesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListTemplatesOK struct {
	Payload *ListTemplatesOKBody
}

func (o *ListTemplatesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Templates/List][%d] listTemplatesOk  %+v", 200, o.Payload)
}

func (o *ListTemplatesOK) GetPayload() *ListTemplatesOKBody {
	return o.Payload
}

func (o *ListTemplatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTemplatesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTemplatesDefault creates a ListTemplatesDefault with default headers values
func NewListTemplatesDefault(code int) *ListTemplatesDefault {
	return &ListTemplatesDefault{
		_statusCode: code,
	}
}

/* ListTemplatesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListTemplatesDefault struct {
	_statusCode int

	Payload *ListTemplatesDefaultBody
}

// Code gets the status code for the list templates default response
func (o *ListTemplatesDefault) Code() int {
	return o._statusCode
}

func (o *ListTemplatesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Templates/List][%d] ListTemplates default  %+v", o._statusCode, o.Payload)
}

func (o *ListTemplatesDefault) GetPayload() *ListTemplatesDefaultBody {
	return o.Payload
}

func (o *ListTemplatesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListTemplatesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListTemplatesBody list templates body
swagger:model ListTemplatesBody
*/
type ListTemplatesBody struct {
	// If true, template files will be re-read from disk.
	Reload bool `json:"reload,omitempty"`

	// page params
	PageParams *ListTemplatesParamsBodyPageParams `json:"page_params,omitempty"`
}

// Validate validates this list templates body
func (o *ListTemplatesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePageParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesBody) validatePageParams(formats strfmt.Registry) error {
	if swag.IsZero(o.PageParams) { // not required
		return nil
	}

	if o.PageParams != nil {
		if err := o.PageParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list templates body based on the context it is used
func (o *ListTemplatesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePageParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesBody) contextValidatePageParams(ctx context.Context, formats strfmt.Registry) error {
	if o.PageParams != nil {
		if err := o.PageParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesDefaultBody list templates default body
swagger:model ListTemplatesDefaultBody
*/
type ListTemplatesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListTemplatesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list templates default body
func (o *ListTemplatesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list templates default body based on the context it is used
func (o *ListTemplatesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListTemplates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesDefaultBodyDetailsItems0 list templates default body details items0
swagger:model ListTemplatesDefaultBodyDetailsItems0
*/
type ListTemplatesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list templates default body details items0
func (o *ListTemplatesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates default body details items0 based on context it is used
func (o *ListTemplatesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListTemplatesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBody list templates OK body
swagger:model ListTemplatesOKBody
*/
type ListTemplatesOKBody struct {
	// templates
	Templates []*ListTemplatesOKBodyTemplatesItems0 `json:"templates"`

	// totals
	Totals *ListTemplatesOKBodyTotals `json:"totals,omitempty"`
}

// Validate validates this list templates OK body
func (o *ListTemplatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBody) validateTemplates(formats strfmt.Registry) error {
	if swag.IsZero(o.Templates) { // not required
		return nil
	}

	for i := 0; i < len(o.Templates); i++ {
		if swag.IsZero(o.Templates[i]) { // not required
			continue
		}

		if o.Templates[i] != nil {
			if err := o.Templates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListTemplatesOKBody) validateTotals(formats strfmt.Registry) error {
	if swag.IsZero(o.Totals) { // not required
		return nil
	}

	if o.Totals != nil {
		if err := o.Totals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listTemplatesOk" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listTemplatesOk" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list templates OK body based on the context it is used
func (o *ListTemplatesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBody) contextValidateTemplates(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Templates); i++ {
		if o.Templates[i] != nil {
			if err := o.Templates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listTemplatesOk" + "." + "templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListTemplatesOKBody) contextValidateTotals(ctx context.Context, formats strfmt.Registry) error {
	if o.Totals != nil {
		if err := o.Totals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listTemplatesOk" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listTemplatesOk" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBody) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTemplatesItems0 Template represents Alert Template that is used to create Alert Rule.
swagger:model ListTemplatesOKBodyTemplatesItems0
*/
type ListTemplatesOKBodyTemplatesItems0 struct {
	// Machine-readable name (ID).
	Name string `json:"name,omitempty"`

	// Short human-readable summary.
	Summary string `json:"summary,omitempty"`

	// PromQL query expression with templating parameters.
	Expr string `json:"expr,omitempty"`

	// Query parameters definitions.
	Params []*ListTemplatesOKBodyTemplatesItems0ParamsItems0 `json:"params"`

	// Default duration value.
	For string `json:"for,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// Labels.
	Labels map[string]string `json:"labels,omitempty"`

	// Annotations.
	Annotations map[string]string `json:"annotations,omitempty"`

	// TemplateSource defines template source.
	//
	//  - BUILT_IN: Template that is shipped with PMM Server releases.
	//  - SAAS: Template that is downloaded from check.percona.com.
	//  - USER_FILE: Templated loaded from user-suplied file.
	//  - USER_API: Templated created via API.
	// Enum: [TEMPLATE_SOURCE_INVALID BUILT_IN SAAS USER_FILE USER_API]
	Source *string `json:"source,omitempty"`

	// Template creation time. Empty for built-in and SaaS templates.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// YAML (or JSON) template file content. Empty for built-in and SaaS templates.
	Yaml string `json:"yaml,omitempty"`
}

// Validate validates this list templates OK body templates items0
func (o *ListTemplatesOKBodyTemplatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	for i := 0; i < len(o.Params); i++ {
		if swag.IsZero(o.Params[i]) { // not required
			continue
		}

		if o.Params[i] != nil {
			if err := o.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var listTemplatesOkBodyTemplatesItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesOkBodyTemplatesItems0TypeSeverityPropEnum = append(listTemplatesOkBodyTemplatesItems0TypeSeverityPropEnum, v)
	}
}

const (

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYINFO string = "SEVERITY_INFO"

	// ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	ListTemplatesOKBodyTemplatesItems0SeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *ListTemplatesOKBodyTemplatesItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesOkBodyTemplatesItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

var listTemplatesOkBodyTemplatesItems0TypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEMPLATE_SOURCE_INVALID","BUILT_IN","SAAS","USER_FILE","USER_API"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesOkBodyTemplatesItems0TypeSourcePropEnum = append(listTemplatesOkBodyTemplatesItems0TypeSourcePropEnum, v)
	}
}

const (

	// ListTemplatesOKBodyTemplatesItems0SourceTEMPLATESOURCEINVALID captures enum value "TEMPLATE_SOURCE_INVALID"
	ListTemplatesOKBodyTemplatesItems0SourceTEMPLATESOURCEINVALID string = "TEMPLATE_SOURCE_INVALID"

	// ListTemplatesOKBodyTemplatesItems0SourceBUILTIN captures enum value "BUILT_IN"
	ListTemplatesOKBodyTemplatesItems0SourceBUILTIN string = "BUILT_IN"

	// ListTemplatesOKBodyTemplatesItems0SourceSAAS captures enum value "SAAS"
	ListTemplatesOKBodyTemplatesItems0SourceSAAS string = "SAAS"

	// ListTemplatesOKBodyTemplatesItems0SourceUSERFILE captures enum value "USER_FILE"
	ListTemplatesOKBodyTemplatesItems0SourceUSERFILE string = "USER_FILE"

	// ListTemplatesOKBodyTemplatesItems0SourceUSERAPI captures enum value "USER_API"
	ListTemplatesOKBodyTemplatesItems0SourceUSERAPI string = "USER_API"
)

// prop value enum
func (o *ListTemplatesOKBodyTemplatesItems0) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesOkBodyTemplatesItems0TypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(o.Source) { // not required
		return nil
	}

	// value enum
	if err := o.validateSourceEnum("source", "body", *o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list templates OK body templates items0 based on the context it is used
func (o *ListTemplatesOKBodyTemplatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Params); i++ {
		if o.Params[i] != nil {
			if err := o.Params[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTemplatesItems0ParamsItems0 ParamDefinition represents a single query parameter.
swagger:model ListTemplatesOKBodyTemplatesItems0ParamsItems0
*/
type ListTemplatesOKBodyTemplatesItems0ParamsItems0 struct {
	// Machine-readable name (ID) that is used in expression.
	Name string `json:"name,omitempty"`

	// Short human-readable parameter summary.
	Summary string `json:"summary,omitempty"`

	// ParamUnit represents template parameter unit.
	//
	//  - PARAM_UNIT_INVALID: Invalid, unknown or absent.
	//  - PERCENTAGE: %
	//  - SECONDS: s
	// Enum: [PARAM_UNIT_INVALID PERCENTAGE SECONDS]
	Unit *string `json:"unit,omitempty"`

	// ParamType represents template parameter type.
	// Enum: [PARAM_TYPE_INVALID BOOL FLOAT STRING]
	Type *string `json:"type,omitempty"`

	// bool
	Bool *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool `json:"bool,omitempty"`

	// float
	Float *ListTemplatesOKBodyTemplatesItems0ParamsItems0Float `json:"float,omitempty"`

	// string
	String *ListTemplatesOKBodyTemplatesItems0ParamsItems0String `json:"string,omitempty"`
}

// Validate validates this list templates OK body templates items0 params items0
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBool(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFloat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listTemplatesOkBodyTemplatesItems0ParamsItems0TypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_UNIT_INVALID","PERCENTAGE","SECONDS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesOkBodyTemplatesItems0ParamsItems0TypeUnitPropEnum = append(listTemplatesOkBodyTemplatesItems0ParamsItems0TypeUnitPropEnum, v)
	}
}

const (

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitPARAMUNITINVALID captures enum value "PARAM_UNIT_INVALID"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitPARAMUNITINVALID string = "PARAM_UNIT_INVALID"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitPERCENTAGE captures enum value "PERCENTAGE"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitPERCENTAGE string = "PERCENTAGE"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitSECONDS captures enum value "SECONDS"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0UnitSECONDS string = "SECONDS"
)

// prop value enum
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesOkBodyTemplatesItems0ParamsItems0TypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(o.Unit) { // not required
		return nil
	}

	// value enum
	if err := o.validateUnitEnum("unit", "body", *o.Unit); err != nil {
		return err
	}

	return nil
}

var listTemplatesOkBodyTemplatesItems0ParamsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","BOOL","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesOkBodyTemplatesItems0ParamsItems0TypeTypePropEnum = append(listTemplatesOkBodyTemplatesItems0ParamsItems0TypeTypePropEnum, v)
	}
}

const (

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeBOOL captures enum value "BOOL"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeBOOL string = "BOOL"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeFLOAT captures enum value "FLOAT"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeFLOAT string = "FLOAT"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeSTRING captures enum value "STRING"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0TypeSTRING string = "STRING"
)

// prop value enum
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesOkBodyTemplatesItems0ParamsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateBool(formats strfmt.Registry) error {
	if swag.IsZero(o.Bool) { // not required
		return nil
	}

	if o.Bool != nil {
		if err := o.Bool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateFloat(formats strfmt.Registry) error {
	if swag.IsZero(o.Float) { // not required
		return nil
	}

	if o.Float != nil {
		if err := o.Float.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("float")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("float")
			}
			return err
		}
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) validateString(formats strfmt.Registry) error {
	if swag.IsZero(o.String) { // not required
		return nil
	}

	if o.String != nil {
		if err := o.String.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("string")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list templates OK body templates items0 params items0 based on the context it is used
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFloat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateString(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) contextValidateBool(ctx context.Context, formats strfmt.Registry) error {
	if o.Bool != nil {
		if err := o.Bool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) contextValidateFloat(ctx context.Context, formats strfmt.Registry) error {
	if o.Float != nil {
		if err := o.Float.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("float")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("float")
			}
			return err
		}
	}

	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) contextValidateString(ctx context.Context, formats strfmt.Registry) error {
	if o.String != nil {
		if err := o.String.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("string")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0ParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool BoolParamDefinition represents boolean parameter's default value.
swagger:model ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool
*/
type ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool struct {
	// BooleanFlag represent a command to set some boolean property to true,
	// to false, or avoid changing that property.
	//
	//  - DO_NOT_CHANGE: Do not change boolean property. Default value.
	//  - TRUE: True.
	//  - FALSE: False.
	// Enum: [DO_NOT_CHANGE TRUE FALSE]
	Default *string `json:"default,omitempty"`
}

// Validate validates this list templates OK body templates items0 params items0 bool
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listTemplatesOkBodyTemplatesItems0ParamsItems0BoolTypeDefaultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DO_NOT_CHANGE","TRUE","FALSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplatesOkBodyTemplatesItems0ParamsItems0BoolTypeDefaultPropEnum = append(listTemplatesOkBodyTemplatesItems0ParamsItems0BoolTypeDefaultPropEnum, v)
	}
}

const (

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultDONOTCHANGE captures enum value "DO_NOT_CHANGE"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultDONOTCHANGE string = "DO_NOT_CHANGE"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultTRUE captures enum value "TRUE"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultTRUE string = "TRUE"

	// ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultFALSE captures enum value "FALSE"
	ListTemplatesOKBodyTemplatesItems0ParamsItems0BoolDefaultFALSE string = "FALSE"
)

// prop value enum
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) validateDefaultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTemplatesOkBodyTemplatesItems0ParamsItems0BoolTypeDefaultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) validateDefault(formats strfmt.Registry) error {
	if swag.IsZero(o.Default) { // not required
		return nil
	}

	// value enum
	if err := o.validateDefaultEnum("bool"+"."+"default", "body", *o.Default); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list templates OK body templates items0 params items0 bool based on context it is used
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0ParamsItems0Bool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTemplatesItems0ParamsItems0Float FloatParamDefinition represents float parameter's default value and valid range.
swagger:model ListTemplatesOKBodyTemplatesItems0ParamsItems0Float
*/
type ListTemplatesOKBodyTemplatesItems0ParamsItems0Float struct {
	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default float64 `json:"default,omitempty"`

	// True if minimal valid value is set.
	HasMin bool `json:"has_min,omitempty"`

	// Minimal valid value (inclusive) if has_min is true.
	Min float64 `json:"min,omitempty"`

	// True if maximal valid value is set.
	HasMax bool `json:"has_max,omitempty"`

	// Maximal valid value (inclusive) if has_max is true.
	Max float64 `json:"max,omitempty"`
}

// Validate validates this list templates OK body templates items0 params items0 float
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Float) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates OK body templates items0 params items0 float based on context it is used
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Float) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Float) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0Float) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0ParamsItems0Float
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTemplatesItems0ParamsItems0String StringParamDefinition represents string parameter's default value.
swagger:model ListTemplatesOKBodyTemplatesItems0ParamsItems0String
*/
type ListTemplatesOKBodyTemplatesItems0ParamsItems0String struct {
	// True if default value is set.
	HasDefault bool `json:"has_default,omitempty"`

	// Default value if has_default is true.
	Default string `json:"default,omitempty"`
}

// Validate validates this list templates OK body templates items0 params items0 string
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0String) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates OK body templates items0 params items0 string based on context it is used
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0String) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0String) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTemplatesItems0ParamsItems0String) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTemplatesItems0ParamsItems0String
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesOKBodyTotals PageTotals represents total values for pagination.
swagger:model ListTemplatesOKBodyTotals
*/
type ListTemplatesOKBodyTotals struct {
	// Total number of results.
	TotalItems int32 `json:"total_items,omitempty"`

	// Total number of pages.
	TotalPages int32 `json:"total_pages,omitempty"`
}

// Validate validates this list templates OK body totals
func (o *ListTemplatesOKBodyTotals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates OK body totals based on context it is used
func (o *ListTemplatesOKBodyTotals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesOKBodyTotals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesOKBodyTotals) UnmarshalBinary(b []byte) error {
	var res ListTemplatesOKBodyTotals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTemplatesParamsBodyPageParams PageParams represents page request parameters for pagination.
swagger:model ListTemplatesParamsBodyPageParams
*/
type ListTemplatesParamsBodyPageParams struct {
	// Maximum number of results per page.
	PageSize int32 `json:"page_size,omitempty"`

	// Index of the requested page, starts from 0.
	Index int32 `json:"index,omitempty"`
}

// Validate validates this list templates params body page params
func (o *ListTemplatesParamsBodyPageParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list templates params body page params based on context it is used
func (o *ListTemplatesParamsBodyPageParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplatesParamsBodyPageParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplatesParamsBodyPageParams) UnmarshalBinary(b []byte) error {
	var res ListTemplatesParamsBodyPageParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
