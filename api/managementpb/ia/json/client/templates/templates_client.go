// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TemplatesCreateTemplate(params *TemplatesCreateTemplateParams) (*TemplatesCreateTemplateOK, error)

	TemplatesDeleteTemplate(params *TemplatesDeleteTemplateParams) (*TemplatesDeleteTemplateOK, error)

	TemplatesListTemplates(params *TemplatesListTemplatesParams) (*TemplatesListTemplatesOK, error)

	TemplatesUpdateTemplate(params *TemplatesUpdateTemplateParams) (*TemplatesUpdateTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TemplatesCreateTemplate creates template creates a new template
*/
func (a *Client) TemplatesCreateTemplate(params *TemplatesCreateTemplateParams) (*TemplatesCreateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesCreateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Templates_CreateTemplate",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Templates/Create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesCreateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesCreateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesCreateTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TemplatesDeleteTemplate deletes template deletes existing previously created via API
*/
func (a *Client) TemplatesDeleteTemplate(params *TemplatesDeleteTemplateParams) (*TemplatesDeleteTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesDeleteTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Templates_DeleteTemplate",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Templates/Delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesDeleteTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesDeleteTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesDeleteTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TemplatesListTemplates lists templates returns a list of all collected alert rule templates
*/
func (a *Client) TemplatesListTemplates(params *TemplatesListTemplatesParams) (*TemplatesListTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesListTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Templates_ListTemplates",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Templates/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesListTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesListTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesListTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TemplatesUpdateTemplate updates template updates existing template previously created via API
*/
func (a *Client) TemplatesUpdateTemplate(params *TemplatesUpdateTemplateParams) (*TemplatesUpdateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesUpdateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Templates_UpdateTemplate",
		Method:             "POST",
		PathPattern:        "/v1/management/ia/Templates/Update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesUpdateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesUpdateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesUpdateTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
