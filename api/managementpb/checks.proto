syntax = "proto3";

package management;

option go_package = "api/managementpb;managementpb";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "managementpb/pagination.proto";
import "managementpb/severity.proto";

// SecurityCheckInterval represents possible execution interval values for checks.
enum SecurityCheckInterval {
  SECURITY_CHECK_INTERVAL_INVALID = 0;
  STANDARD = 1;
  FREQUENT = 2;
  RARE = 3;
}

// SecurityCheckResult represents the check result returned from pmm-managed after running the check.
message SecurityCheckResult {
  string summary = 1;
  string description = 2;
  Severity severity = 3;
  map<string, string> labels = 4;
  // URL containing information on how to resolve an issue detected by an STT check.
  string read_more_url = 5;
  // Name of the monitored service on which the check ran.
  string service_name = 6;
}

// CheckResultSummary is a summary of check results.
message CheckResultSummary {
  string service_name = 1;
  string service_id = 2;
  // Number of failed checks for this service with severity level "EMERGENCY".
  uint32 emergency_count = 3;
  // Number of failed checks for this service with severity level "ALERT".
  uint32 alert_count = 4;
  // Number of failed checks for this service with severity level "CRITICAL".
  uint32 critical_count = 5;
  // Number of failed checks for this service with severity level "ERROR".
  uint32 error_count = 6;
  // Number of failed checks for this service with severity level "WARNING".
  uint32 warning_count = 7;
  // Number of failed checks for this service with severity level "NOTICE".
  uint32 notice_count = 8;
  // Number of failed checks for this service with severity level "INFO".
  uint32 info_count = 9;
  // Number of failed checks for this service with severity level "DEBUG".
  uint32 debug_count = 10;
}

// CheckResult represents the check results for a given service.
message CheckResult {
  string summary = 1;
  string description = 2;
  Severity severity = 3;
  map<string, string> labels = 4;
  // URL containing information on how to resolve an issue detected by an STT check.
  string read_more_url = 5;
  // Name of the monitored service on which the check ran.
  string service_name = 6;
  // ID of the monitored service on which the check ran.
  string service_id = 7;
  // Name of the check that failed
  string check_name = 8;
  // ID of the check result as stored in AlertManager
  string alert_id = 9;
  // Silence status of the check result
  bool silenced = 10;
}

// SecurityCheck contains check name and status.
message SecurityCheck {
  // Machine-readable name (ID) that is used in expression.
  string name = 1;
  // True if that check is disabled.
  bool disabled = 2;
  // Long human-readable description.
  string description = 3;
  // Short human-readable summary.
  string summary = 4;
  // Check execution interval.
  SecurityCheckInterval interval = 5;
}

// ChangeSecurityCheckParams specifies a single check parameters.
message ChangeSecurityCheckParams {
  // The name of the check to change.
  string name = 1;
  bool enable = 2;
  bool disable = 3;
  // check execution interval.
  SecurityCheckInterval interval = 4;
}

message GetSecurityCheckResultsRequest {
  option deprecated = true;
}

message GetSecurityCheckResultsResponse {
  option deprecated = true;
  repeated SecurityCheckResult results = 1;
}

message StartSecurityChecksRequest {
  // Names of the checks that should be started.
  repeated string names = 1;
}

message StartSecurityChecksResponse {}

message ListSecurityChecksRequest {}

message ListSecurityChecksResponse {
  repeated SecurityCheck checks = 1;
}

message ChangeSecurityChecksRequest {
  repeated ChangeSecurityCheckParams params = 1;
}

message ChangeSecurityChecksResponse {}

message ListFailedServicesRequest {}

message ListFailedServicesResponse {
  repeated CheckResultSummary result = 1;
}

message GetFailedChecksRequest {
  string service_id = 1;
  PageParams page_params = 2;
}

message GetFailedChecksResponse {
  repeated CheckResult results = 1;
  PageTotals page_totals = 2;
}

message ToggleCheckAlertRequest {
  // Alert ID of the check result.
  string alert_id = 1;
  // Silence the check result if set to true, unsilence otherwise.
  bool silence = 2;
}

message ToggleCheckAlertResponse {}

// SecurityChecks service provides public Management API methods for Security Checks Service.
service SecurityChecks {
  // ListFailedServices returns a list of services with failed checks.
  rpc ListFailedServices(ListFailedServicesRequest) returns (ListFailedServicesResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/ListFailedServices"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Failed Services"
      description: "Returns a list of services with failed checks and a summary of check results."
    };
  }
  // GetFailedChecks returns the checks result for a given service.
  rpc GetFailedChecks(GetFailedChecksRequest) returns (GetFailedChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/FailedChecks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Failed Checks"
      description: "Returns the latest check results for a given service."
    };
  }
  // ToggleCheckAlert allows to switch alerts state for a check result between "silenced" and "unsilenced".
  rpc ToggleCheckAlert(ToggleCheckAlertRequest) returns (ToggleCheckAlertResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/ToggleCheckAlert"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Toggle Check Alert"
      description: "Silence/Unsilence alerts for a specific check result."
    };
  }
  // GetSecurityCheckResults returns Security Thread Tool's latest checks results.
  rpc GetSecurityCheckResults(GetSecurityCheckResultsRequest) returns (GetSecurityCheckResultsResponse) {
    option deprecated = true;
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/GetCheckResults"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Security Check Results"
      description: "Returns Security Thread Tool's latest checks results."
    };
  }
  // StartSecurityChecks executes Security Thread Tool checks and returns when all checks are executed.
  rpc StartSecurityChecks(StartSecurityChecksRequest) returns (StartSecurityChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/Start"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Start Security Checks"
      description: "Executes Security Thread Tool checks and returns when all checks are executed. All available checks will be started if check names aren't specified."
    };
  }
  // ListSecurityChecks returns a list of available Security Thread Tool checks.
  rpc ListSecurityChecks(ListSecurityChecksRequest) returns (ListSecurityChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/List"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Security Checks"
      description: "Returns a list of available Security Thread Tool checks."
    };
  }
  // ChangeSecurityChecks enables/disables Security Thread Tool checks or changes their interval by names.
  rpc ChangeSecurityChecks(ChangeSecurityChecksRequest) returns (ChangeSecurityChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/SecurityChecks/Change"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change Security Checks"
      description: "Enables/disables Security Thread Tool checks or changes their interval by names."
    };
  }
}
