// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: managementpb/dump/dump.proto

package dumpv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dumps_StartDump_FullMethodName   = "/dump.v1beta1.Dumps/StartDump"
	Dumps_ListDumps_FullMethodName   = "/dump.v1beta1.Dumps/ListDumps"
	Dumps_DeleteDump_FullMethodName  = "/dump.v1beta1.Dumps/DeleteDump"
	Dumps_GetDumpLogs_FullMethodName = "/dump.v1beta1.Dumps/GetDumpLogs"
	Dumps_UploadDump_FullMethodName  = "/dump.v1beta1.Dumps/UploadDump"
)

// DumpsClient is the client API for Dumps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DumpsClient interface {
	// StartDump request creates pmm dump.
	StartDump(ctx context.Context, in *StartDumpRequest, opts ...grpc.CallOption) (*StartDumpResponse, error)
	// ListDumps returns a list of all pmm dumps.
	ListDumps(ctx context.Context, in *ListDumpsRequest, opts ...grpc.CallOption) (*ListDumpsResponse, error)
	// DeleteDump deletes specified pmm dump.
	DeleteDump(ctx context.Context, in *DeleteDumpRequest, opts ...grpc.CallOption) (*DeleteDumpResponse, error)
	// GetLogs returns logs from pmm-dump tool.
	GetDumpLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// UploadDump uploads selected dumps to remote server.
	UploadDump(ctx context.Context, in *UploadDumpRequest, opts ...grpc.CallOption) (*UploadDumpResponse, error)
}

type dumpsClient struct {
	cc grpc.ClientConnInterface
}

func NewDumpsClient(cc grpc.ClientConnInterface) DumpsClient {
	return &dumpsClient{cc}
}

func (c *dumpsClient) StartDump(ctx context.Context, in *StartDumpRequest, opts ...grpc.CallOption) (*StartDumpResponse, error) {
	out := new(StartDumpResponse)
	err := c.cc.Invoke(ctx, Dumps_StartDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpsClient) ListDumps(ctx context.Context, in *ListDumpsRequest, opts ...grpc.CallOption) (*ListDumpsResponse, error) {
	out := new(ListDumpsResponse)
	err := c.cc.Invoke(ctx, Dumps_ListDumps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpsClient) DeleteDump(ctx context.Context, in *DeleteDumpRequest, opts ...grpc.CallOption) (*DeleteDumpResponse, error) {
	out := new(DeleteDumpResponse)
	err := c.cc.Invoke(ctx, Dumps_DeleteDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpsClient) GetDumpLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, Dumps_GetDumpLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpsClient) UploadDump(ctx context.Context, in *UploadDumpRequest, opts ...grpc.CallOption) (*UploadDumpResponse, error) {
	out := new(UploadDumpResponse)
	err := c.cc.Invoke(ctx, Dumps_UploadDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DumpsServer is the server API for Dumps service.
// All implementations must embed UnimplementedDumpsServer
// for forward compatibility
type DumpsServer interface {
	// StartDump request creates pmm dump.
	StartDump(context.Context, *StartDumpRequest) (*StartDumpResponse, error)
	// ListDumps returns a list of all pmm dumps.
	ListDumps(context.Context, *ListDumpsRequest) (*ListDumpsResponse, error)
	// DeleteDump deletes specified pmm dump.
	DeleteDump(context.Context, *DeleteDumpRequest) (*DeleteDumpResponse, error)
	// GetLogs returns logs from pmm-dump tool.
	GetDumpLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// UploadDump uploads selected dumps to remote server.
	UploadDump(context.Context, *UploadDumpRequest) (*UploadDumpResponse, error)
	mustEmbedUnimplementedDumpsServer()
}

// UnimplementedDumpsServer must be embedded to have forward compatible implementations.
type UnimplementedDumpsServer struct{}

func (UnimplementedDumpsServer) StartDump(context.Context, *StartDumpRequest) (*StartDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDump not implemented")
}

func (UnimplementedDumpsServer) ListDumps(context.Context, *ListDumpsRequest) (*ListDumpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDumps not implemented")
}

func (UnimplementedDumpsServer) DeleteDump(context.Context, *DeleteDumpRequest) (*DeleteDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDump not implemented")
}

func (UnimplementedDumpsServer) GetDumpLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpLogs not implemented")
}

func (UnimplementedDumpsServer) UploadDump(context.Context, *UploadDumpRequest) (*UploadDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDump not implemented")
}
func (UnimplementedDumpsServer) mustEmbedUnimplementedDumpsServer() {}

// UnsafeDumpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DumpsServer will
// result in compilation errors.
type UnsafeDumpsServer interface {
	mustEmbedUnimplementedDumpsServer()
}

func RegisterDumpsServer(s grpc.ServiceRegistrar, srv DumpsServer) {
	s.RegisterService(&Dumps_ServiceDesc, srv)
}

func _Dumps_StartDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpsServer).StartDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dumps_StartDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpsServer).StartDump(ctx, req.(*StartDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dumps_ListDumps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDumpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpsServer).ListDumps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dumps_ListDumps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpsServer).ListDumps(ctx, req.(*ListDumpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dumps_DeleteDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpsServer).DeleteDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dumps_DeleteDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpsServer).DeleteDump(ctx, req.(*DeleteDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dumps_GetDumpLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpsServer).GetDumpLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dumps_GetDumpLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpsServer).GetDumpLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dumps_UploadDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpsServer).UploadDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dumps_UploadDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpsServer).UploadDump(ctx, req.(*UploadDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dumps_ServiceDesc is the grpc.ServiceDesc for Dumps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dumps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dump.v1beta1.Dumps",
	HandlerType: (*DumpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDump",
			Handler:    _Dumps_StartDump_Handler,
		},
		{
			MethodName: "ListDumps",
			Handler:    _Dumps_ListDumps_Handler,
		},
		{
			MethodName: "DeleteDump",
			Handler:    _Dumps_DeleteDump_Handler,
		},
		{
			MethodName: "GetDumpLogs",
			Handler:    _Dumps_GetDumpLogs_Handler,
		},
		{
			MethodName: "UploadDump",
			Handler:    _Dumps_UploadDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/dump/dump.proto",
}
