// Code generated by protoc-gen-go. DO NOT EDIT.
// source: managementpb/postgresql.proto

package managementpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	inventorypb "github.com/percona/pmm/api/inventorypb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddPostgreSQLRequest struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Create a new Node with those parameters.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	AddNode *AddNodeParams `protobuf:"bytes,3,opt,name=add_node,json=addNode,proto3" json:"add_node,omitempty"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Service Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,18,opt,name=socket,proto3" json:"socket,omitempty"`
	// The "pmm-agent" identifier which should run agents. Required.
	PmmAgentId string `protobuf:"bytes,7,opt,name=pmm_agent_id,json=pmmAgentId,proto3" json:"pmm_agent_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,10,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// PostgreSQL username for scraping metrics.
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	// PostgreSQL password for scraping metrics.
	Password string `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	// If true, adds qan-postgresql-pgstatements-agent for provided service.
	QanPostgresqlPgstatementsAgent bool `protobuf:"varint,13,opt,name=qan_postgresql_pgstatements_agent,json=qanPostgresqlPgstatementsAgent,proto3" json:"qan_postgresql_pgstatements_agent,omitempty"`
	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `protobuf:"bytes,14,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Skip connection check.
	SkipConnectionCheck bool `protobuf:"varint,15,opt,name=skip_connection_check,json=skipConnectionCheck,proto3" json:"skip_connection_check,omitempty"`
	// Use TLS for database connections.
	Tls bool `protobuf:"varint,16,opt,name=tls,proto3" json:"tls,omitempty"`
	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TlsSkipVerify        bool     `protobuf:"varint,17,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPostgreSQLRequest) Reset()         { *m = AddPostgreSQLRequest{} }
func (m *AddPostgreSQLRequest) String() string { return proto.CompactTextString(m) }
func (*AddPostgreSQLRequest) ProtoMessage()    {}
func (*AddPostgreSQLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e72a2ebc60b1270, []int{0}
}

func (m *AddPostgreSQLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPostgreSQLRequest.Unmarshal(m, b)
}
func (m *AddPostgreSQLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPostgreSQLRequest.Marshal(b, m, deterministic)
}
func (m *AddPostgreSQLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostgreSQLRequest.Merge(m, src)
}
func (m *AddPostgreSQLRequest) XXX_Size() int {
	return xxx_messageInfo_AddPostgreSQLRequest.Size(m)
}
func (m *AddPostgreSQLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostgreSQLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostgreSQLRequest proto.InternalMessageInfo

func (m *AddPostgreSQLRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetAddNode() *AddNodeParams {
	if m != nil {
		return m.AddNode
	}
	return nil
}

func (m *AddPostgreSQLRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AddPostgreSQLRequest) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPmmAgentId() string {
	if m != nil {
		return m.PmmAgentId
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetReplicationSet() string {
	if m != nil {
		return m.ReplicationSet
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetQanPostgresqlPgstatementsAgent() bool {
	if m != nil {
		return m.QanPostgresqlPgstatementsAgent
	}
	return false
}

func (m *AddPostgreSQLRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddPostgreSQLRequest) GetSkipConnectionCheck() bool {
	if m != nil {
		return m.SkipConnectionCheck
	}
	return false
}

func (m *AddPostgreSQLRequest) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

func (m *AddPostgreSQLRequest) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

type AddPostgreSQLResponse struct {
	Service                        *inventorypb.PostgreSQLService              `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	PostgresExporter               *inventorypb.PostgresExporter               `protobuf:"bytes,2,opt,name=postgres_exporter,json=postgresExporter,proto3" json:"postgres_exporter,omitempty"`
	QanPostgresqlPgstatementsAgent *inventorypb.QANPostgreSQLPgStatementsAgent `protobuf:"bytes,3,opt,name=qan_postgresql_pgstatements_agent,json=qanPostgresqlPgstatementsAgent,proto3" json:"qan_postgresql_pgstatements_agent,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                                    `json:"-"`
	XXX_unrecognized               []byte                                      `json:"-"`
	XXX_sizecache                  int32                                       `json:"-"`
}

func (m *AddPostgreSQLResponse) Reset()         { *m = AddPostgreSQLResponse{} }
func (m *AddPostgreSQLResponse) String() string { return proto.CompactTextString(m) }
func (*AddPostgreSQLResponse) ProtoMessage()    {}
func (*AddPostgreSQLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e72a2ebc60b1270, []int{1}
}

func (m *AddPostgreSQLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPostgreSQLResponse.Unmarshal(m, b)
}
func (m *AddPostgreSQLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPostgreSQLResponse.Marshal(b, m, deterministic)
}
func (m *AddPostgreSQLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostgreSQLResponse.Merge(m, src)
}
func (m *AddPostgreSQLResponse) XXX_Size() int {
	return xxx_messageInfo_AddPostgreSQLResponse.Size(m)
}
func (m *AddPostgreSQLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostgreSQLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostgreSQLResponse proto.InternalMessageInfo

func (m *AddPostgreSQLResponse) GetService() *inventorypb.PostgreSQLService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *AddPostgreSQLResponse) GetPostgresExporter() *inventorypb.PostgresExporter {
	if m != nil {
		return m.PostgresExporter
	}
	return nil
}

func (m *AddPostgreSQLResponse) GetQanPostgresqlPgstatementsAgent() *inventorypb.QANPostgreSQLPgStatementsAgent {
	if m != nil {
		return m.QanPostgresqlPgstatementsAgent
	}
	return nil
}

func init() {
	proto.RegisterType((*AddPostgreSQLRequest)(nil), "management.AddPostgreSQLRequest")
	proto.RegisterMapType((map[string]string)(nil), "management.AddPostgreSQLRequest.CustomLabelsEntry")
	proto.RegisterType((*AddPostgreSQLResponse)(nil), "management.AddPostgreSQLResponse")
}

func init() { proto.RegisterFile("managementpb/postgresql.proto", fileDescriptor_6e72a2ebc60b1270) }

var fileDescriptor_6e72a2ebc60b1270 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6f, 0xe2, 0x46,
	0x14, 0x96, 0x49, 0x02, 0x64, 0x80, 0xfc, 0x98, 0x26, 0xed, 0x94, 0x24, 0x2d, 0xe1, 0xd0, 0x92,
	0xaa, 0x60, 0x95, 0x56, 0x51, 0x95, 0x4b, 0x45, 0xa2, 0x48, 0x8d, 0x14, 0x45, 0xc4, 0x48, 0x6d,
	0xd5, 0x8b, 0x35, 0xd8, 0xaf, 0x8e, 0x85, 0x3d, 0x33, 0xcc, 0x0c, 0x50, 0x2e, 0x3d, 0xf4, 0x5c,
	0xa9, 0x87, 0xd5, 0xfe, 0x65, 0xfb, 0x07, 0xac, 0xb4, 0xda, 0x3f, 0x64, 0xe5, 0xb1, 0xc1, 0x10,
	0xa4, 0xcd, 0x9e, 0x98, 0xf7, 0xbe, 0x6f, 0xbe, 0xf7, 0xbe, 0x37, 0x0f, 0xa3, 0xb3, 0x98, 0x32,
	0x1a, 0x40, 0x0c, 0x4c, 0x8b, 0xa1, 0x2d, 0xb8, 0xd2, 0x81, 0x04, 0x35, 0x8e, 0x3a, 0x42, 0x72,
	0xcd, 0x31, 0xca, 0xe1, 0xfa, 0x65, 0x10, 0xea, 0xa7, 0xc9, 0xb0, 0xe3, 0xf1, 0xd8, 0x8e, 0x67,
	0xa1, 0x1e, 0xf1, 0x99, 0x1d, 0xf0, 0xb6, 0x21, 0xb6, 0xa7, 0x34, 0x0a, 0x7d, 0xaa, 0xb9, 0x54,
	0xf6, 0xf2, 0x98, 0x6a, 0xd4, 0x4f, 0x03, 0xce, 0x83, 0x08, 0x6c, 0x2a, 0x42, 0x9b, 0x32, 0xc6,
	0x35, 0xd5, 0x21, 0x67, 0x2a, 0x43, 0x49, 0xc8, 0xa6, 0xc0, 0x34, 0x97, 0x73, 0x31, 0xb4, 0x69,
	0x00, 0x4c, 0x2f, 0x90, 0xfa, 0x2a, 0xa2, 0x40, 0x4e, 0x43, 0x0f, 0x96, 0xd8, 0x5a, 0xdb, 0x19,
	0x98, 0x61, 0xdf, 0x9b, 0x1f, 0xaf, 0x1d, 0x00, 0x6b, 0xab, 0x19, 0x0d, 0x02, 0x90, 0x36, 0x17,
	0xa6, 0xe6, 0x66, 0xfd, 0xe6, 0xeb, 0x22, 0x3a, 0xea, 0xf9, 0x7e, 0x3f, 0x75, 0x3e, 0x78, 0xbc,
	0x77, 0x60, 0x3c, 0x01, 0xa5, 0xf1, 0x17, 0xa8, 0xc4, 0xb8, 0x0f, 0x6e, 0xe8, 0x13, 0xab, 0x61,
	0xb5, 0x76, 0x9d, 0x62, 0x12, 0xde, 0xf9, 0xf8, 0x04, 0xed, 0x1a, 0x80, 0xd1, 0x18, 0x48, 0xc1,
	0x40, 0xe5, 0x24, 0xf1, 0x40, 0x63, 0xc0, 0x3f, 0xa1, 0x32, 0xf5, 0x7d, 0x37, 0x89, 0xc9, 0x56,
	0xc3, 0x6a, 0x55, 0xba, 0x5f, 0x76, 0xf2, 0x5e, 0x3b, 0x3d, 0xdf, 0x7f, 0xe0, 0x3e, 0xf4, 0xa9,
	0xa4, 0xb1, 0x72, 0x4a, 0x34, 0x0d, 0xf1, 0x05, 0xaa, 0x66, 0x1e, 0x52, 0xd5, 0xed, 0x44, 0xf5,
	0xba, 0xf8, 0xee, 0xed, 0xd7, 0x85, 0x3f, 0x2c, 0xa7, 0x92, 0x61, 0xa6, 0x00, 0x41, 0xc9, 0x2d,
	0x09, 0x4a, 0x91, 0x1d, 0x53, 0x7b, 0x11, 0x62, 0x8c, 0xb6, 0x05, 0x97, 0x9a, 0x14, 0x1b, 0x56,
	0xab, 0xe6, 0x98, 0x33, 0xfe, 0x1c, 0x15, 0x15, 0xf7, 0x46, 0xa0, 0x09, 0x4e, 0x3d, 0xa4, 0x11,
	0x6e, 0xa1, 0xaa, 0x88, 0x63, 0xd7, 0xcc, 0x3b, 0x71, 0x58, 0x5a, 0x2b, 0x88, 0x44, 0x1c, 0xf7,
	0x12, 0xe8, 0xce, 0xc7, 0x0d, 0x54, 0x01, 0x36, 0x0d, 0x25, 0x67, 0x89, 0x01, 0x52, 0x36, 0x32,
	0xab, 0xa9, 0xa4, 0x23, 0x2f, 0x9a, 0x28, 0x0d, 0x92, 0xec, 0xa6, 0x1d, 0x65, 0x21, 0xfe, 0x16,
	0xed, 0x4b, 0x10, 0x51, 0xe8, 0x99, 0x89, 0xbb, 0x0a, 0x34, 0x41, 0x86, 0xb1, 0xb7, 0x92, 0x1e,
	0x80, 0xc6, 0x4d, 0x54, 0x9e, 0x28, 0x90, 0xc6, 0x7b, 0x65, 0xad, 0x95, 0x65, 0x1e, 0xd7, 0x51,
	0x59, 0x50, 0xa5, 0x66, 0x5c, 0xfa, 0xa4, 0x9a, 0x4e, 0x7d, 0x11, 0xe3, 0x3b, 0x74, 0x3e, 0xa6,
	0xcc, 0xcd, 0xd7, 0xd7, 0x15, 0x81, 0xd2, 0x54, 0x9b, 0xa1, 0xab, 0xd4, 0x26, 0xa9, 0x35, 0xac,
	0x56, 0xd9, 0xf9, 0x6a, 0x4c, 0x59, 0x7f, 0xc9, 0xeb, 0xaf, 0xd0, 0x8c, 0x63, 0xfc, 0x3b, 0xaa,
	0x79, 0x13, 0xa5, 0x79, 0xec, 0x46, 0x74, 0x08, 0x91, 0x22, 0x7b, 0x8d, 0xad, 0x56, 0xa5, 0xdb,
	0x7d, 0xf6, 0x8a, 0x1b, 0xfb, 0xd2, 0xb9, 0x31, 0xb7, 0xee, 0xcd, 0xa5, 0x5b, 0xa6, 0xe5, 0xdc,
	0xa9, 0x7a, 0x2b, 0x29, 0xdc, 0x45, 0xc7, 0x6a, 0x14, 0x0a, 0xd7, 0xe3, 0x8c, 0x81, 0x67, 0x06,
	0xe2, 0x3d, 0x81, 0x37, 0x22, 0xfb, 0xa6, 0xaf, 0xcf, 0x12, 0xf0, 0x66, 0x89, 0xdd, 0x24, 0x10,
	0x3e, 0x40, 0x5b, 0x3a, 0x52, 0xe4, 0xc0, 0x30, 0x92, 0x23, 0xfe, 0x06, 0xed, 0xeb, 0x48, 0xb9,
	0x46, 0x69, 0x0a, 0x32, 0xfc, 0x6b, 0x4e, 0x0e, 0x0d, 0x5a, 0xd3, 0x91, 0x1a, 0x8c, 0x42, 0xf1,
	0x9b, 0x49, 0xd6, 0x7f, 0x41, 0x87, 0x1b, 0x0d, 0x25, 0x72, 0x23, 0x98, 0x67, 0xeb, 0x9c, 0x1c,
	0xf1, 0x11, 0xda, 0x99, 0xd2, 0x68, 0xb2, 0xd8, 0xe3, 0x34, 0xb8, 0x2a, 0xfc, 0x6c, 0x35, 0xff,
	0x2f, 0xa0, 0xe3, 0x67, 0x3e, 0x95, 0xe0, 0x4c, 0x01, 0xbe, 0x44, 0xa5, 0x6c, 0x21, 0x8d, 0x52,
	0xa5, 0x7b, 0xda, 0x59, 0xfe, 0x53, 0x3b, 0x39, 0x7f, 0x90, 0x72, 0x9c, 0x05, 0x19, 0xff, 0x8a,
	0x0e, 0x17, 0x0f, 0xe4, 0xc2, 0xdf, 0xc9, 0x7a, 0x82, 0x34, 0x75, 0x2b, 0xdd, 0x93, 0x4d, 0x05,
	0x75, 0x9b, 0x51, 0x9c, 0x03, 0xf1, 0x2c, 0x83, 0xf5, 0xa7, 0x3c, 0x77, 0xfa, 0xef, 0xbb, 0x58,
	0x51, 0x7e, 0xec, 0x3d, 0xe4, 0xed, 0xf5, 0x83, 0xc1, 0xfa, 0xcb, 0xbf, 0xb4, 0x19, 0xdd, 0xff,
	0x2c, 0x84, 0xf2, 0xfb, 0xf8, 0x1f, 0x54, 0x5b, 0x9b, 0x0f, 0x6e, 0xbc, 0xb4, 0x22, 0xf5, 0xf3,
	0x8f, 0x30, 0xd2, 0xe1, 0x36, 0x5b, 0xff, 0xbe, 0x79, 0xff, 0xaa, 0xd0, 0x6c, 0x9e, 0xd9, 0xd3,
	0x1f, 0xec, 0x9c, 0x6d, 0xe7, 0x54, 0xbb, 0xe7, 0xfb, 0x57, 0xd6, 0x77, 0xd7, 0x7b, 0x7f, 0x56,
	0x57, 0x3f, 0x82, 0xc3, 0xa2, 0xf9, 0x9e, 0xfd, 0xf8, 0x21, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x08,
	0x17, 0xda, 0xd2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PostgreSQLClient is the client API for PostgreSQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostgreSQLClient interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error)
}

type postgreSQLClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgreSQLClient(cc grpc.ClientConnInterface) PostgreSQLClient {
	return &postgreSQLClient{cc}
}

func (c *postgreSQLClient) AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error) {
	out := new(AddPostgreSQLResponse)
	err := c.cc.Invoke(ctx, "/management.PostgreSQL/AddPostgreSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgreSQLServer is the server API for PostgreSQL service.
type PostgreSQLServer interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(context.Context, *AddPostgreSQLRequest) (*AddPostgreSQLResponse, error)
}

// UnimplementedPostgreSQLServer can be embedded to have forward compatible implementations.
type UnimplementedPostgreSQLServer struct {
}

func (*UnimplementedPostgreSQLServer) AddPostgreSQL(ctx context.Context, req *AddPostgreSQLRequest) (*AddPostgreSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostgreSQL not implemented")
}

func RegisterPostgreSQLServer(s *grpc.Server, srv PostgreSQLServer) {
	s.RegisterService(&_PostgreSQL_serviceDesc, srv)
}

func _PostgreSQL_AddPostgreSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostgreSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgreSQLServer).AddPostgreSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.PostgreSQL/AddPostgreSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgreSQLServer).AddPostgreSQL(ctx, req.(*AddPostgreSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostgreSQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.PostgreSQL",
	HandlerType: (*PostgreSQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPostgreSQL",
			Handler:    _PostgreSQL_AddPostgreSQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/postgresql.proto",
}
