// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: managementpb/jobs.proto

package managementpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetJobRequest) Validate() error {
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	return nil
}
func (this *GetJobResponse) Validate() error {
	if oneOfNester, ok := this.GetResult().(*GetJobResponse_Error_); ok {
		if oneOfNester.Error != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Error); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Error", err)
			}
		}
	}
	if oneOfNester, ok := this.GetResult().(*GetJobResponse_Echo_); ok {
		if oneOfNester.Echo != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Echo); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Echo", err)
			}
		}
	}
	return nil
}
func (this *GetJobResponse_Error) Validate() error {
	return nil
}
func (this *GetJobResponse_Echo) Validate() error {
	return nil
}
func (this *StartEchoJobRequest) Validate() error {
	if this.ServiceId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ServiceId", fmt.Errorf(`value '%v' must not be an empty string`, this.ServiceId))
	}
	if this.Timeout != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Timeout); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Timeout", err)
		}
	}
	if this.Delay != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Delay); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Delay", err)
		}
	}
	return nil
}
func (this *StartEchoJobResponse) Validate() error {
	return nil
}
func (this *CancelJobRequest) Validate() error {
	if this.JobId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("JobId", fmt.Errorf(`value '%v' must not be an empty string`, this.JobId))
	}
	return nil
}
func (this *CancelJobResponse) Validate() error {
	return nil
}
