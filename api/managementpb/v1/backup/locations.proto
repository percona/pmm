syntax = "proto3";

package backup.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

// FilesystemLocationConfig represents file system location config.
message FilesystemLocationConfig {
  string path = 1 [(validate.rules).string.min_len = 1];
}

// S3LocationConfig represents S3 bucket configuration.
message S3LocationConfig {
  string endpoint = 1 [(validate.rules).string.min_len = 1];
  string access_key = 2 [(validate.rules).string.min_len = 1];
  string secret_key = 3 [(validate.rules).string.min_len = 1];
  string bucket_name = 4 [(validate.rules).string.min_len = 1];
}

// Location represents single Backup Location.
message Location {
  // Machine-readable ID.
  string location_id = 1;
  // Location name
  string name = 2;
  // Short description
  string description = 3;
  oneof config {
    FilesystemLocationConfig filesystem_config = 4;
    S3LocationConfig s3_config = 5;
  }
}

message ListLocationsRequest {}

message ListLocationsResponse {
  repeated Location locations = 1;
}

message AddLocationRequest {
  // Location name
  string name = 1 [(validate.rules).string.min_len = 1];
  string description = 2;
  // Filesystem location configuration. Exactly one config should be set.
  FilesystemLocationConfig filesystem_config = 3;
  // S3 Bucket configuration. Exactly one config should be set.
  S3LocationConfig s3_config = 4;
}

message AddLocationResponse {
  // Machine-readable ID.
  string location_id = 1;
}

message ChangeLocationRequest {
  // Machine-readable ID.
  string location_id = 1 [(validate.rules).string.min_len = 1];
  // Location name
  string name = 2;
  string description = 3;
  // Filesystem location configuration. Exactly one config should be set.
  FilesystemLocationConfig filesystem_config = 4;
  // S3 Bucket configuration. Exactly one config should be set.
  S3LocationConfig s3_config = 5;
}

message ChangeLocationResponse {}

message RemoveLocationRequest {
  // Machine-readable ID.
  string location_id = 1;
  // Force mode
  bool force = 2;
}

message RemoveLocationResponse {}

message TestLocationConfigRequest {
  // Filesystem location configuration. Exactly one config should be set.
  FilesystemLocationConfig filesystem_config = 1;
  // S3 Bucket configuration. Exactly one config should be set.
  S3LocationConfig s3_config = 2;
}

message TestLocationConfigResponse {}

// Locations service provides access to Backup Locations.
service LocationsService {
  // ListLocations returns a list of all backup locations.
  rpc ListLocations(ListLocationsRequest) returns (ListLocationsResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/List"
      body: "*"
    };
  }
  // AddLocation adds backup location.
  rpc AddLocation(AddLocationRequest) returns (AddLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Add"
      body: "*"
    };
  }
  // ChangeLocation changes backup location.
  rpc ChangeLocation(ChangeLocationRequest) returns (ChangeLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Change"
      body: "*"
    };
  }
  // RemoveLocation removes existing backup location.
  rpc RemoveLocation(RemoveLocationRequest) returns (RemoveLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Remove"
      body: "*"
    };
  }
  // TestLocationConfig tests backup location and credentials.
  rpc TestLocationConfig(TestLocationConfigRequest) returns (TestLocationConfigResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/TestConfig"
      body: "*"
    };
  }
}
