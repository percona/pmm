syntax = "proto3";

package management;

// This option is used to set the default error response for all Swagger APIs generated from this file.
// See also header.json.
// It has to be copy&pasted into each file.
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default"
    value: {
      description: "An error response."
      schema: {
        json_schema: {
          ref: "#/definitions/managementpbErrorResponse"
        }
      }
    }
  }
};
option go_package = "managementpb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/agents.proto";
import "inventorypb/nodes.proto";
import "inventorypb/services.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Add MySQL

message AddMySQLRequest {
  // Node identifier on which a service is been running. Required.
  string node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Unique across all Services user-defined name. Required.
  string service_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node and Service access address (DNS name or IP). Required.
  string address = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service Access port. Required.
  uint32 port = 4 [
    (validator.field) = {
      int_gt: 0
    }
  ];
  // The "pmm-agent" identifier which should run agents. Required.
  string pmm_agent_id = 5 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for scraping metrics.
  string username = 6;
  // MySQL password for scraping metrics.
  string password = 7;
  // FIXME remove
  string qan_username = 8;
  // FIXME remove
  string qan_password = 9;
  // If true, adds mysqld_exporter for provided service.
  bool mysqld_exporter = 10;
  // If true, adds qan-mysql-perfschema-agent for provided service.
  bool qan_mysql_perfschema = 11;
  // If true, adds qan-mysql-slowlog-agent for provided service.
  bool qan_mysql_slowlog = 12;
}

message AddMySQLResponse {
  inventory.MySQLService service = 1;
  inventory.MySQLdExporter mysqld_exporter = 2;
  inventory.QANMySQLPerfSchemaAgent qan_mysql_perfschema = 3;
  inventory.QANMySQLSlowlogAgent qan_mysql_slowlog = 4;
}

// MySQL service provides public Management API methods for MySQL Service.
service MySQL {
  // Add MySQL adds MySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
  // with provided "pmm_agent_id" and other parameters.
  rpc Add(AddMySQLRequest) returns (AddMySQLResponse) {
    option (google.api.http) = {
      post: "/v1/management/MySQL/Add"
      body: "*"
    };
  }
}

// Nodes Management

message RegisterNodeRequest {
  // Type of node which will be registered.
  inventory.NodeType node_type = 1;
  // Unique across all Nodes user-defined name, can be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id. Can't be changed. Must be unique across all Generic Nodes if specified (optional).
  string machine_id = 3;
  // Linux distribution. For Generic nodes (optional).
  string distro = 4;
  // Сontainer identifier. Only for Container Nodes (optional).
  string container_id = 6;
  // Сontainer name. Only for Container Nodes (optional).
  string container_name = 7;
  // Custom user-assigned labels for node (optional).
  map<string, string> custom_labels = 10;
  // Address FIXME https://jira.percona.com/browse/PMM-3786
  string address = 42;
}

message RegisterNodeResponse {
  inventory.GenericNode generic_node = 1;
  inventory.ContainerNode container_node = 2;
  inventory.PMMAgent pmm_agent = 3;
}

// Node service provides public Management API methods for operating with nodes.
service Node {
  // Register do node registration.
  rpc Register(RegisterNodeRequest) returns (RegisterNodeResponse) {
    option (google.api.http) = {
      post: "/v1/management/Node/Register"
      body: "*"
    };
  }
}

// Services Management

message RemoveServiceRequest {
  // Service type.
  inventory.ServiceType service_type = 1;
  // Service ID or Service Name is required.
  // Unique randomly generated instance identifier.
  string service_id = 2;
  // Unique across all Services user-defined name.
  string service_name = 3;
}

message RemoveServiceResponse {}

// Service service provides public methods for managing Services.
service Service {
  // RemoveService removes Service with Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/Service/Remove"
      body: "*"
    };
  }
}
