// Code generated by go-swagger; DO NOT EDIT.

package mgmt_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListNodesReader is a Reader for the ListNodes structure.
type ListNodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListNodesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListNodesOK creates a ListNodesOK with default headers values
func NewListNodesOK() *ListNodesOK {
	return &ListNodesOK{}
}

/*
ListNodesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListNodesOK struct {
	Payload *ListNodesOKBody
}

func (o *ListNodesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Node/List][%d] listNodesOk  %+v", 200, o.Payload)
}

func (o *ListNodesOK) GetPayload() *ListNodesOKBody {
	return o.Payload
}

func (o *ListNodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListNodesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNodesDefault creates a ListNodesDefault with default headers values
func NewListNodesDefault(code int) *ListNodesDefault {
	return &ListNodesDefault{
		_statusCode: code,
	}
}

/*
ListNodesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListNodesDefault struct {
	_statusCode int

	Payload *ListNodesDefaultBody
}

// Code gets the status code for the list nodes default response
func (o *ListNodesDefault) Code() int {
	return o._statusCode
}

func (o *ListNodesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/Node/List][%d] ListNodes default  %+v", o._statusCode, o.Payload)
}

func (o *ListNodesDefault) GetPayload() *ListNodesDefaultBody {
	return o.Payload
}

func (o *ListNodesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListNodesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListNodesBody list nodes body
swagger:model ListNodesBody
*/
type ListNodesBody struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_INVALID GENERIC_NODE CONTAINER_NODE REMOTE_NODE REMOTE_RDS_NODE REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`
}

// Validate validates this list nodes body
func (o *ListNodesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listNodesBodyTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_INVALID","GENERIC_NODE","CONTAINER_NODE","REMOTE_NODE","REMOTE_RDS_NODE","REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listNodesBodyTypeNodeTypePropEnum = append(listNodesBodyTypeNodeTypePropEnum, v)
	}
}

const (

	// ListNodesBodyNodeTypeNODETYPEINVALID captures enum value "NODE_TYPE_INVALID"
	ListNodesBodyNodeTypeNODETYPEINVALID string = "NODE_TYPE_INVALID"

	// ListNodesBodyNodeTypeGENERICNODE captures enum value "GENERIC_NODE"
	ListNodesBodyNodeTypeGENERICNODE string = "GENERIC_NODE"

	// ListNodesBodyNodeTypeCONTAINERNODE captures enum value "CONTAINER_NODE"
	ListNodesBodyNodeTypeCONTAINERNODE string = "CONTAINER_NODE"

	// ListNodesBodyNodeTypeREMOTENODE captures enum value "REMOTE_NODE"
	ListNodesBodyNodeTypeREMOTENODE string = "REMOTE_NODE"

	// ListNodesBodyNodeTypeREMOTERDSNODE captures enum value "REMOTE_RDS_NODE"
	ListNodesBodyNodeTypeREMOTERDSNODE string = "REMOTE_RDS_NODE"

	// ListNodesBodyNodeTypeREMOTEAZUREDATABASENODE captures enum value "REMOTE_AZURE_DATABASE_NODE"
	ListNodesBodyNodeTypeREMOTEAZUREDATABASENODE string = "REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *ListNodesBody) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listNodesBodyTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListNodesBody) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list nodes body based on context it is used
func (o *ListNodesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesBody) UnmarshalBinary(b []byte) error {
	var res ListNodesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesDefaultBody list nodes default body
swagger:model ListNodesDefaultBody
*/
type ListNodesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListNodesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list nodes default body
func (o *ListNodesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes default body based on the context it is used
func (o *ListNodesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListNodesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesDefaultBodyDetailsItems0 list nodes default body details items0
swagger:model ListNodesDefaultBodyDetailsItems0
*/
type ListNodesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list nodes default body details items0
func (o *ListNodesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes default body details items0 based on context it is used
func (o *ListNodesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBody list nodes OK body
swagger:model ListNodesOKBody
*/
type ListNodesOKBody struct {
	// nodes
	Nodes []*ListNodesOKBodyNodesItems0 `json:"nodes"`
}

// Validate validates this list nodes OK body
func (o *ListNodesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBody) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(o.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(o.Nodes); i++ {
		if swag.IsZero(o.Nodes[i]) { // not required
			continue
		}

		if o.Nodes[i] != nil {
			if err := o.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes OK body based on the context it is used
func (o *ListNodesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBody) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Nodes); i++ {
		if o.Nodes[i] != nil {
			if err := o.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBody) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0 list nodes OK body nodes items0
swagger:model ListNodesOKBodyNodesItems0
*/
type ListNodesOKBodyNodesItems0 struct {
	// Unique Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// Node type.
	NodeType string `json:"node_type,omitempty"`

	// User-defined node name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// A node's unique docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Creation timestamp.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Last update timestamp.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// List of agents related to this node.
	Agents []*ListNodesOKBodyNodesItems0AgentsItems0 `json:"agents"`

	// Node status.
	//
	//  - STATUS_INVALID: Invalid status.
	//  - UP: The node is up.
	//  - DOWN: The node is down.
	//  - UNKNOWN: The node's status cannot be known (p.e. there are no metrics yet).
	// Enum: [STATUS_INVALID UP DOWN UNKNOWN]
	Status *string `json:"status,omitempty"`

	// List of services running on this node.
	Services []*ListNodesOKBodyNodesItems0ServicesItems0 `json:"services"`
}

// Validate validates this list nodes OK body nodes items0
func (o *ListNodesOKBodyNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(o.Agents) { // not required
		return nil
	}

	for i := 0; i < len(o.Agents); i++ {
		if swag.IsZero(o.Agents[i]) { // not required
			continue
		}

		if o.Agents[i] != nil {
			if err := o.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var listNodesOkBodyNodesItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_INVALID","UP","DOWN","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listNodesOkBodyNodesItems0TypeStatusPropEnum = append(listNodesOkBodyNodesItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListNodesOKBodyNodesItems0StatusSTATUSINVALID captures enum value "STATUS_INVALID"
	ListNodesOKBodyNodesItems0StatusSTATUSINVALID string = "STATUS_INVALID"

	// ListNodesOKBodyNodesItems0StatusUP captures enum value "UP"
	ListNodesOKBodyNodesItems0StatusUP string = "UP"

	// ListNodesOKBodyNodesItems0StatusDOWN captures enum value "DOWN"
	ListNodesOKBodyNodesItems0StatusDOWN string = "DOWN"

	// ListNodesOKBodyNodesItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListNodesOKBodyNodesItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListNodesOKBodyNodesItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listNodesOkBodyNodesItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(o.Services) { // not required
		return nil
	}

	for i := 0; i < len(o.Services); i++ {
		if swag.IsZero(o.Services[i]) { // not required
			continue
		}

		if o.Services[i] != nil {
			if err := o.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes OK body nodes items0 based on the context it is used
func (o *ListNodesOKBodyNodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Agents); i++ {
		if o.Agents[i] != nil {
			if err := o.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Services); i++ {
		if o.Services[i] != nil {
			if err := o.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0 list nodes OK body nodes items0 agents items0
swagger:model ListNodesOKBodyNodesItems0AgentsItems0
*/
type ListNodesOKBodyNodesItems0AgentsItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// True if the agent password is set.
	IsAgentPasswordSet bool `json:"is_agent_password_set,omitempty"`

	// Agent type.
	AgentType string `json:"agent_type,omitempty"`

	// AWS Access Key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// True if AWS Secret Key is set.
	IsAWSSecretKeySet bool `json:"is_aws_secret_key_set,omitempty"`

	// Creation timestamp.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Log level for exporter.
	LogLevel string `json:"log_level,omitempty"`

	// Limit query length in QAN.
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Limit query log size in QAN.
	MaxQueryLogSize string `json:"max_query_log_size,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	MetricsScheme string `json:"metrics_scheme,omitempty"`

	// A unique node identifier.
	NodeID string `json:"node_id,omitempty"`

	// True if password for connecting the agent to the database is set.
	IsPasswordSet bool `json:"is_password_set,omitempty"`

	// The pmm-agent identifier.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetrics bool `json:"push_metrics,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// True if RDS basic metrics are disdabled.
	RDSBasicMetricsDisabled bool `json:"rds_basic_metrics_disabled,omitempty"`

	// True if RDS enhanced metrics are disdabled.
	RDSEnhancedMetricsDisabled bool `json:"rds_enhanced_metrics_disabled,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Actual Agent status.
	Status string `json:"status,omitempty"`

	// Last known table count.
	TableCount int32 `json:"table_count,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TableCountTablestatsGroupLimit int32 `json:"table_count_tablestats_group_limit,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// Last update timestamp.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Agent version.
	Version string `json:"version,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	IsConnected bool `json:"is_connected,omitempty"`

	// azure options
	AzureOptions *ListNodesOKBodyNodesItems0AgentsItems0AzureOptions `json:"azure_options,omitempty"`

	// mongo db options
	MongoDBOptions *ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions `json:"mongo_db_options,omitempty"`

	// mysql options
	MysqlOptions *ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions `json:"mysql_options,omitempty"`

	// postgresql options
	PostgresqlOptions *ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions `json:"postgresql_options,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0
func (o *ListNodesOKBodyNodesItems0AgentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAzureOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongoDBOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresqlOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validateAzureOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AzureOptions) { // not required
		return nil
	}

	if o.AzureOptions != nil {
		if err := o.AzureOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validateMongoDBOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.MongoDBOptions) { // not required
		return nil
	}

	if o.MongoDBOptions != nil {
		if err := o.MongoDBOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongo_db_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongo_db_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validateMysqlOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlOptions) { // not required
		return nil
	}

	if o.MysqlOptions != nil {
		if err := o.MysqlOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mysql_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mysql_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) validatePostgresqlOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresqlOptions) { // not required
		return nil
	}

	if o.PostgresqlOptions != nil {
		if err := o.PostgresqlOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postgresql_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postgresql_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list nodes OK body nodes items0 agents items0 based on the context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAzureOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMongoDBOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresqlOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) contextValidateAzureOptions(ctx context.Context, formats strfmt.Registry) error {
	if o.AzureOptions != nil {
		if err := o.AzureOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) contextValidateMongoDBOptions(ctx context.Context, formats strfmt.Registry) error {
	if o.MongoDBOptions != nil {
		if err := o.MongoDBOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongo_db_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongo_db_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) contextValidateMysqlOptions(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlOptions != nil {
		if err := o.MysqlOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mysql_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mysql_options")
			}
			return err
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0AgentsItems0) contextValidatePostgresqlOptions(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresqlOptions != nil {
		if err := o.PostgresqlOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postgresql_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postgresql_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0AzureOptions list nodes OK body nodes items0 agents items0 azure options
swagger:model ListNodesOKBodyNodesItems0AgentsItems0AzureOptions
*/
type ListNodesOKBodyNodesItems0AgentsItems0AzureOptions struct {
	// Azure client ID.
	ClientID string `json:"client_id,omitempty"`

	// True if Azure client secret is set.
	IsClientSecretSet bool `json:"is_client_secret_set,omitempty"`

	// Azure resource group.
	ResourceGroup string `json:"resource_group,omitempty"`

	// Azure subscription ID.
	SubscriptionID string `json:"subscription_id,omitempty"`

	// Azure tenant ID.
	TenantID string `json:"tenant_id,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0 azure options
func (o *ListNodesOKBodyNodesItems0AgentsItems0AzureOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 agents items0 azure options based on context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0AzureOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0AzureOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0AzureOptions) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0AzureOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions list nodes OK body nodes items0 agents items0 mongo DB options
swagger:model ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions
*/
type ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions struct {
	// True if TLS certificate is set.
	IsTLSCertificateKeySet bool `json:"is_tls_certificate_key_set,omitempty"`

	// True if TLS certificate file password is set.
	IsTLSCertificateKeyFilePasswordSet bool `json:"is_tls_certificate_key_file_password_set,omitempty"`

	// TLS CA certificate.
	TLSCa string `json:"tls_ca,omitempty"`

	// MongoDB auth mechanism.
	AuthenticationMechanism string `json:"authentication_mechanism,omitempty"`

	// MongoDB auth database.
	AuthenticationDatabase string `json:"authentication_database,omitempty"`

	// MongoDB stats collections.
	StatsCollections []string `json:"stats_collections"`

	// MongoDB collections limit.
	CollectionsLimit int32 `json:"collections_limit,omitempty"`

	// True if all collectors are enabled.
	EnableAllCollectors bool `json:"enable_all_collectors,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0 mongo DB options
func (o *ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 agents items0 mongo DB options based on context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0MongoDBOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions list nodes OK body nodes items0 agents items0 mysql options
swagger:model ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions
*/
type ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions struct {
	// TLS CA certificate.
	TLSCa string `json:"tls_ca,omitempty"`

	// TLS certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// True if TLS key is set.
	IsTLSKeySet bool `json:"is_tls_key_set,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0 mysql options
func (o *ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 agents items0 mysql options based on context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0MysqlOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions list nodes OK body nodes items0 agents items0 postgresql options
swagger:model ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions
*/
type ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions struct {
	// TLS CA certificate.
	SslCa string `json:"ssl_ca,omitempty"`

	// TLS certificate.
	SslCert string `json:"ssl_cert,omitempty"`

	// True if TLS key is set.
	IsSslKeySet bool `json:"is_ssl_key_set,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0 postgresql options
func (o *ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 agents items0 postgresql options based on context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0PostgresqlOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0ServicesItems0 Service represents a service running on a node.
swagger:model ListNodesOKBodyNodesItems0ServicesItems0
*/
type ListNodesOKBodyNodesItems0ServicesItems0 struct {
	// Unique Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Service type.
	ServiceType string `json:"service_type,omitempty"`

	// Service name.
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 services items0
func (o *ListNodesOKBodyNodesItems0ServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 services items0 based on context it is used
func (o *ListNodesOKBodyNodesItems0ServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0ServicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0ServicesItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0ServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
