// Code generated by go-swagger; DO NOT EDIT.

package proxy_sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxySQLAddProxySQLReader is a Reader for the ProxySQLAddProxySQL structure.
type ProxySQLAddProxySQLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProxySQLAddProxySQLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProxySQLAddProxySQLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewProxySQLAddProxySQLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProxySQLAddProxySQLOK creates a ProxySQLAddProxySQLOK with default headers values
func NewProxySQLAddProxySQLOK() *ProxySQLAddProxySQLOK {
	return &ProxySQLAddProxySQLOK{}
}

/*ProxySQLAddProxySQLOK handles this case with default header values.

A successful response.
*/
type ProxySQLAddProxySQLOK struct {
	Payload *ProxySQLAddProxySQLOKBody
}

func (o *ProxySQLAddProxySQLOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ProxySQL/Add][%d] proxySqlAddProxySqlOk  %+v", 200, o.Payload)
}

func (o *ProxySQLAddProxySQLOK) GetPayload() *ProxySQLAddProxySQLOKBody {
	return o.Payload
}

func (o *ProxySQLAddProxySQLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProxySQLAddProxySQLOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxySQLAddProxySQLDefault creates a ProxySQLAddProxySQLDefault with default headers values
func NewProxySQLAddProxySQLDefault(code int) *ProxySQLAddProxySQLDefault {
	return &ProxySQLAddProxySQLDefault{
		_statusCode: code,
	}
}

/*ProxySQLAddProxySQLDefault handles this case with default header values.

An unexpected error response.
*/
type ProxySQLAddProxySQLDefault struct {
	_statusCode int

	Payload *ProxySQLAddProxySQLDefaultBody
}

// Code gets the status code for the proxy SQL add proxy SQL default response
func (o *ProxySQLAddProxySQLDefault) Code() int {
	return o._statusCode
}

func (o *ProxySQLAddProxySQLDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ProxySQL/Add][%d] ProxySQL_AddProxySQL default  %+v", o._statusCode, o.Payload)
}

func (o *ProxySQLAddProxySQLDefault) GetPayload() *ProxySQLAddProxySQLDefaultBody {
	return o.Payload
}

func (o *ProxySQLAddProxySQLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProxySQLAddProxySQLDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLBody proxy SQL add proxy SQL body
swagger:model ProxySQLAddProxySQLBody
*/
type ProxySQLAddProxySQLBody struct {

	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Service Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// ProxySQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	// Enum: [AUTO PULL PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// List of collector names to disable in this exporter.
	DisableCollectors []string `json:"disable_collectors"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// add node
	AddNode *ProxySQLAddProxySQLParamsBodyAddNode `json:"add_node,omitempty"`
}

// Validate validates this proxy SQL add proxy SQL body
func (o *ProxySQLAddProxySQLBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var proxySqlAddProxySqlBodyTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO","PULL","PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxySqlAddProxySqlBodyTypeMetricsModePropEnum = append(proxySqlAddProxySqlBodyTypeMetricsModePropEnum, v)
	}
}

const (

	// ProxySQLAddProxySQLBodyMetricsModeAUTO captures enum value "AUTO"
	ProxySQLAddProxySQLBodyMetricsModeAUTO string = "AUTO"

	// ProxySQLAddProxySQLBodyMetricsModePULL captures enum value "PULL"
	ProxySQLAddProxySQLBodyMetricsModePULL string = "PULL"

	// ProxySQLAddProxySQLBodyMetricsModePUSH captures enum value "PUSH"
	ProxySQLAddProxySQLBodyMetricsModePUSH string = "PUSH"
)

// prop value enum
func (o *ProxySQLAddProxySQLBody) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxySqlAddProxySqlBodyTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProxySQLAddProxySQLBody) validateMetricsMode(formats strfmt.Registry) error {

	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

func (o *ProxySQLAddProxySQLBody) validateAddNode(formats strfmt.Registry) error {

	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLBody) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLDefaultBody proxy SQL add proxy SQL default body
swagger:model ProxySQLAddProxySQLDefaultBody
*/
type ProxySQLAddProxySQLDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this proxy SQL add proxy SQL default body
func (o *ProxySQLAddProxySQLDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProxySQLAddProxySQLDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProxySQL_AddProxySQL default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLDefaultBody) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLOKBody proxy SQL add proxy SQL OK body
swagger:model ProxySQLAddProxySQLOKBody
*/
type ProxySQLAddProxySQLOKBody struct {

	// proxysql exporter
	ProxysqlExporter *ProxySQLAddProxySQLOKBodyProxysqlExporter `json:"proxysql_exporter,omitempty"`

	// service
	Service *ProxySQLAddProxySQLOKBodyService `json:"service,omitempty"`
}

// Validate validates this proxy SQL add proxy SQL OK body
func (o *ProxySQLAddProxySQLOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProxysqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProxySQLAddProxySQLOKBody) validateProxysqlExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxysqlExporter) { // not required
		return nil
	}

	if o.ProxysqlExporter != nil {
		if err := o.ProxysqlExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxySqlAddProxySqlOk" + "." + "proxysql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *ProxySQLAddProxySQLOKBody) validateService(formats strfmt.Registry) error {

	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxySqlAddProxySqlOk" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBody) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLOKBodyProxysqlExporter ProxySQLExporter runs on Generic or Container Node and exposes ProxySQL Service metrics.
swagger:model ProxySQLAddProxySQLOKBodyProxysqlExporter
*/
type ProxySQLAddProxySQLOKBodyProxysqlExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this proxy SQL add proxy SQL OK body proxysql exporter
func (o *ProxySQLAddProxySQLOKBodyProxysqlExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var proxySqlAddProxySqlOkBodyProxysqlExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxySqlAddProxySqlOkBodyProxysqlExporterTypeStatusPropEnum = append(proxySqlAddProxySqlOkBodyProxysqlExporterTypeStatusPropEnum, v)
	}
}

const (

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusSTARTING captures enum value "STARTING"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusSTARTING string = "STARTING"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusRUNNING captures enum value "RUNNING"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusRUNNING string = "RUNNING"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusWAITING captures enum value "WAITING"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusWAITING string = "WAITING"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusSTOPPING captures enum value "STOPPING"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusSTOPPING string = "STOPPING"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusDONE captures enum value "DONE"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusDONE string = "DONE"

	// ProxySQLAddProxySQLOKBodyProxysqlExporterStatusUNKNOWN captures enum value "UNKNOWN"
	ProxySQLAddProxySQLOKBodyProxysqlExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ProxySQLAddProxySQLOKBodyProxysqlExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxySqlAddProxySqlOkBodyProxysqlExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProxySQLAddProxySQLOKBodyProxysqlExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("proxySqlAddProxySqlOk"+"."+"proxysql_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBodyProxysqlExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBodyProxysqlExporter) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLOKBodyProxysqlExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLOKBodyService ProxySQLService represents a generic ProxySQL instance.
swagger:model ProxySQLAddProxySQLOKBodyService
*/
type ProxySQLAddProxySQLOKBodyService struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this proxy SQL add proxy SQL OK body service
func (o *ProxySQLAddProxySQLOKBodyService) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBodyService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLOKBodyService) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLOKBodyService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProxySQLAddProxySQLParamsBodyAddNode AddNodeParams is a params to add new node to inventory while adding new service.
swagger:model ProxySQLAddProxySQLParamsBodyAddNode
*/
type ProxySQLAddProxySQLParamsBodyAddNode struct {

	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_INVALID GENERIC_NODE CONTAINER_NODE REMOTE_NODE REMOTE_RDS_NODE REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this proxy SQL add proxy SQL params body add node
func (o *ProxySQLAddProxySQLParamsBodyAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var proxySqlAddProxySqlParamsBodyAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_INVALID","GENERIC_NODE","CONTAINER_NODE","REMOTE_NODE","REMOTE_RDS_NODE","REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxySqlAddProxySqlParamsBodyAddNodeTypeNodeTypePropEnum = append(proxySqlAddProxySqlParamsBodyAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeNODETYPEINVALID captures enum value "NODE_TYPE_INVALID"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeNODETYPEINVALID string = "NODE_TYPE_INVALID"

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeGENERICNODE captures enum value "GENERIC_NODE"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeGENERICNODE string = "GENERIC_NODE"

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeCONTAINERNODE captures enum value "CONTAINER_NODE"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeCONTAINERNODE string = "CONTAINER_NODE"

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTENODE captures enum value "REMOTE_NODE"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTENODE string = "REMOTE_NODE"

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTERDSNODE captures enum value "REMOTE_RDS_NODE"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTERDSNODE string = "REMOTE_RDS_NODE"

	// ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTEAZUREDATABASENODE captures enum value "REMOTE_AZURE_DATABASE_NODE"
	ProxySQLAddProxySQLParamsBodyAddNodeNodeTypeREMOTEAZUREDATABASENODE string = "REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *ProxySQLAddProxySQLParamsBodyAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxySqlAddProxySqlParamsBodyAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProxySQLAddProxySQLParamsBodyAddNode) validateNodeType(formats strfmt.Registry) error {

	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProxySQLAddProxySQLParamsBodyAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProxySQLAddProxySQLParamsBodyAddNode) UnmarshalBinary(b []byte) error {
	var res ProxySQLAddProxySQLParamsBodyAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
