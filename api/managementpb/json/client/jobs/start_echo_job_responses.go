// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartEchoJobReader is a Reader for the StartEchoJob structure.
type StartEchoJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartEchoJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartEchoJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStartEchoJobDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartEchoJobOK creates a StartEchoJobOK with default headers values
func NewStartEchoJobOK() *StartEchoJobOK {
	return &StartEchoJobOK{}
}

/*StartEchoJobOK handles this case with default header values.

A successful response.
*/
type StartEchoJobOK struct {
	Payload *StartEchoJobOKBody
}

func (o *StartEchoJobOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Jobs/StartEcho][%d] startEchoJobOk  %+v", 200, o.Payload)
}

func (o *StartEchoJobOK) GetPayload() *StartEchoJobOKBody {
	return o.Payload
}

func (o *StartEchoJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartEchoJobOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartEchoJobDefault creates a StartEchoJobDefault with default headers values
func NewStartEchoJobDefault(code int) *StartEchoJobDefault {
	return &StartEchoJobDefault{
		_statusCode: code,
	}
}

/*StartEchoJobDefault handles this case with default header values.

An unexpected error response.
*/
type StartEchoJobDefault struct {
	_statusCode int

	Payload *StartEchoJobDefaultBody
}

// Code gets the status code for the start echo job default response
func (o *StartEchoJobDefault) Code() int {
	return o._statusCode
}

func (o *StartEchoJobDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/Jobs/StartEcho][%d] StartEchoJob default  %+v", o._statusCode, o.Payload)
}

func (o *StartEchoJobDefault) GetPayload() *StartEchoJobDefaultBody {
	return o.Payload
}

func (o *StartEchoJobDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartEchoJobDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StartEchoJobBody start echo job body
swagger:model StartEchoJobBody
*/
type StartEchoJobBody struct {

	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// delay
	Delay string `json:"delay,omitempty"`
}

// Validate validates this start echo job body
func (o *StartEchoJobBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartEchoJobBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartEchoJobBody) UnmarshalBinary(b []byte) error {
	var res StartEchoJobBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartEchoJobDefaultBody start echo job default body
swagger:model StartEchoJobDefaultBody
*/
type StartEchoJobDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this start echo job default body
func (o *StartEchoJobDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartEchoJobDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartEchoJob default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartEchoJobDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartEchoJobDefaultBody) UnmarshalBinary(b []byte) error {
	var res StartEchoJobDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartEchoJobOKBody start echo job OK body
swagger:model StartEchoJobOKBody
*/
type StartEchoJobOKBody struct {

	// Unique Job ID.
	JobID string `json:"job_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start echo job OK body
func (o *StartEchoJobOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartEchoJobOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartEchoJobOKBody) UnmarshalBinary(b []byte) error {
	var res StartEchoJobOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
