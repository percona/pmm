// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetJobReader is a Reader for the GetJob structure.
type GetJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetJobDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetJobOK creates a GetJobOK with default headers values
func NewGetJobOK() *GetJobOK {
	return &GetJobOK{}
}

/*GetJobOK handles this case with default header values.

A successful response.
*/
type GetJobOK struct {
	Payload *GetJobOKBody
}

func (o *GetJobOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Jobs/Get][%d] getJobOk  %+v", 200, o.Payload)
}

func (o *GetJobOK) GetPayload() *GetJobOKBody {
	return o.Payload
}

func (o *GetJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetJobOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobDefault creates a GetJobDefault with default headers values
func NewGetJobDefault(code int) *GetJobDefault {
	return &GetJobDefault{
		_statusCode: code,
	}
}

/*GetJobDefault handles this case with default header values.

An unexpected error response.
*/
type GetJobDefault struct {
	_statusCode int

	Payload *GetJobDefaultBody
}

// Code gets the status code for the get job default response
func (o *GetJobDefault) Code() int {
	return o._statusCode
}

func (o *GetJobDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/Jobs/Get][%d] GetJob default  %+v", o._statusCode, o.Payload)
}

func (o *GetJobDefault) GetPayload() *GetJobDefaultBody {
	return o.Payload
}

func (o *GetJobDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetJobDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetJobBody get job body
swagger:model GetJobBody
*/
type GetJobBody struct {

	// Unique Job ID.
	JobID string `json:"job_id,omitempty"`
}

// Validate validates this get job body
func (o *GetJobBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobBody) UnmarshalBinary(b []byte) error {
	var res GetJobBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetJobDefaultBody get job default body
swagger:model GetJobDefaultBody
*/
type GetJobDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this get job default body
func (o *GetJobDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetJob default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJobDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetJobDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetJobOKBody get job OK body
swagger:model GetJobOKBody
*/
type GetJobOKBody struct {

	// Unique Action ID.
	JobID string `json:"job_id,omitempty"`

	// pmm-agent ID where this Action is running / was run.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// True if Action is finished.
	Done bool `json:"done,omitempty"`

	// echo
	Echo *GetJobOKBodyEcho `json:"echo,omitempty"`

	// error
	Error *GetJobOKBodyError `json:"error,omitempty"`
}

// Validate validates this get job OK body
func (o *GetJobOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEcho(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobOKBody) validateEcho(formats strfmt.Registry) error {

	if swag.IsZero(o.Echo) { // not required
		return nil
	}

	if o.Echo != nil {
		if err := o.Echo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getJobOk" + "." + "echo")
			}
			return err
		}
	}

	return nil
}

func (o *GetJobOKBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getJobOk" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJobOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobOKBody) UnmarshalBinary(b []byte) error {
	var res GetJobOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetJobOKBodyEcho Echo contains result for echo job.
swagger:model GetJobOKBodyEcho
*/
type GetJobOKBodyEcho struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get job OK body echo
func (o *GetJobOKBodyEcho) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobOKBodyEcho) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobOKBodyEcho) UnmarshalBinary(b []byte) error {
	var res GetJobOKBodyEcho
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetJobOKBodyError Error contains job error message.
swagger:model GetJobOKBodyError
*/
type GetJobOKBodyError struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get job OK body error
func (o *GetJobOKBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobOKBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobOKBodyError) UnmarshalBinary(b []byte) error {
	var res GetJobOKBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
