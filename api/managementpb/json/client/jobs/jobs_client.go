// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelJob(params *CancelJobParams) (*CancelJobOK, error)

	GetJob(params *GetJobParams) (*GetJobOK, error)

	StartEchoJob(params *StartEchoJobParams) (*StartEchoJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelJob cancels job stops a job
*/
func (a *Client) CancelJob(params *CancelJobParams) (*CancelJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CancelJob",
		Method:             "POST",
		PathPattern:        "/v1/management/Jobs/Cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetJob gets job gets an result of given action
*/
func (a *Client) GetJob(params *GetJobParams) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetJob",
		Method:             "POST",
		PathPattern:        "/v1/management/Jobs/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartEchoJob starts echo job starts echo job
*/
func (a *Client) StartEchoJob(params *StartEchoJobParams) (*StartEchoJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEchoJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StartEchoJob",
		Method:             "POST",
		PathPattern:        "/v1/management/Jobs/StartEcho",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartEchoJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEchoJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartEchoJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
