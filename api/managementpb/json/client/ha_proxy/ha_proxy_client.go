// Code generated by go-swagger; DO NOT EDIT.

package ha_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ha proxy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ha proxy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddHAProxy(params *AddHAProxyParams) (*AddHAProxyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddHAProxy adds HA proxy adds HA proxy service and adds external exporter it automatically adds a service to inventory which is running on provided node id then adds an external exporter agent to inventory
*/
func (a *Client) AddHAProxy(params *AddHAProxyParams) (*AddHAProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddHAProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddHAProxy",
		Method:             "POST",
		PathPattern:        "/v1/management/HAProxy/Add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddHAProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddHAProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddHAProxyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
