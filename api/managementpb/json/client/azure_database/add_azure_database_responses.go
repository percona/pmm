// Code generated by go-swagger; DO NOT EDIT.

package azure_database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddAzureDatabaseReader is a Reader for the AddAzureDatabase structure.
type AddAzureDatabaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAzureDatabaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddAzureDatabaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddAzureDatabaseDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddAzureDatabaseOK creates a AddAzureDatabaseOK with default headers values
func NewAddAzureDatabaseOK() *AddAzureDatabaseOK {
	return &AddAzureDatabaseOK{}
}

/*AddAzureDatabaseOK handles this case with default header values.

A successful response.
*/
type AddAzureDatabaseOK struct {
	Payload interface{}
}

func (o *AddAzureDatabaseOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/AzureDatabase/Add][%d] addAzureDatabaseOk  %+v", 200, o.Payload)
}

func (o *AddAzureDatabaseOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AddAzureDatabaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAzureDatabaseDefault creates a AddAzureDatabaseDefault with default headers values
func NewAddAzureDatabaseDefault(code int) *AddAzureDatabaseDefault {
	return &AddAzureDatabaseDefault{
		_statusCode: code,
	}
}

/*AddAzureDatabaseDefault handles this case with default header values.

An unexpected error response.
*/
type AddAzureDatabaseDefault struct {
	_statusCode int

	Payload *AddAzureDatabaseDefaultBody
}

// Code gets the status code for the add azure database default response
func (o *AddAzureDatabaseDefault) Code() int {
	return o._statusCode
}

func (o *AddAzureDatabaseDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/AzureDatabase/Add][%d] AddAzureDatabase default  %+v", o._statusCode, o.Payload)
}

func (o *AddAzureDatabaseDefault) GetPayload() *AddAzureDatabaseDefaultBody {
	return o.Payload
}

func (o *AddAzureDatabaseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddAzureDatabaseDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddAzureDatabaseBody add azure database body
swagger:model AddAzureDatabaseBody
*/
type AddAzureDatabaseBody struct {

	// Azure region.
	Region string `json:"region,omitempty"`

	// AWS availability zone.
	Az string `json:"az,omitempty"`

	// AWS instance ID.
	InstanceID string `json:"instance_id,omitempty"`

	// Azure instance class.
	NodeModel string `json:"node_model,omitempty"`

	// Address used to connect to it.
	Address string `json:"address,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// Unique across all Nodes user-defined name. Defaults to Azure Database instance ID.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Defaults to Azure Database instance ID.
	ServiceName string `json:"service_name,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Password for scraping metrics.
	Password string `json:"password,omitempty"`

	// If true, adds rds_exporter.
	AzureDatabaseExporter bool `json:"azure_database_exporter,omitempty"`

	// azure client id
	AzureClientID string `json:"azure_client_id,omitempty"`

	// azure client secret
	AzureClientSecret string `json:"azure_client_secret,omitempty"`

	// azure tenant id
	AzureTenantID string `json:"azure_tenant_id,omitempty"`

	// azure subscription id
	AzureSubscriptionID string `json:"azure_subscription_id,omitempty"`

	// If true, adds qan-mysql-perfschema-agent.
	QANMysqlPerfschema bool `json:"qan_mysql_perfschema,omitempty"`

	// Custom user-assigned labels for Node and Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Disable query examples.
	DisableQueryExamples bool `json:"disable_query_examples,omitempty"`

	// Tablestats group collectors will be disabled if there are more than that number of tables.
	// If zero, server's default value is used.
	// Use negative value to disable them.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Disable basic metrics.
	DisableBasicMetrics bool `json:"disable_basic_metrics,omitempty"`

	// Disable enhanced metrics.
	DisableEnhancedMetrics bool `json:"disable_enhanced_metrics,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	// Enum: [AUTO PULL PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// DiscoverAzureDatabaseType describes supported RDS instance engines.
	//
	//  - DISCOVER_AZURE_DATABASE_TYPE_MYSQL: MySQL type: microsoft.dbformysql
	//  - DISCOVER_AZURE_DATABASE_TYPE_POSTGRESQL: PostgreSQL type: microsoft.dbformysql
	//  - DISCOVER_AZURE_DATABASE_TYPE_MARIADB: MariaDB type: microsoft.dbformariadb
	// Enum: [DISCOVER_AZURE_DATABASE_TYPE_INVALID DISCOVER_AZURE_DATABASE_TYPE_MYSQL DISCOVER_AZURE_DATABASE_TYPE_POSTGRESQL DISCOVER_AZURE_DATABASE_TYPE_MARIADB]
	Type *string `json:"type,omitempty"`
}

// Validate validates this add azure database body
func (o *AddAzureDatabaseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addAzureDatabaseBodyTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO","PULL","PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addAzureDatabaseBodyTypeMetricsModePropEnum = append(addAzureDatabaseBodyTypeMetricsModePropEnum, v)
	}
}

const (

	// AddAzureDatabaseBodyMetricsModeAUTO captures enum value "AUTO"
	AddAzureDatabaseBodyMetricsModeAUTO string = "AUTO"

	// AddAzureDatabaseBodyMetricsModePULL captures enum value "PULL"
	AddAzureDatabaseBodyMetricsModePULL string = "PULL"

	// AddAzureDatabaseBodyMetricsModePUSH captures enum value "PUSH"
	AddAzureDatabaseBodyMetricsModePUSH string = "PUSH"
)

// prop value enum
func (o *AddAzureDatabaseBody) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addAzureDatabaseBodyTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddAzureDatabaseBody) validateMetricsMode(formats strfmt.Registry) error {

	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

var addAzureDatabaseBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISCOVER_AZURE_DATABASE_TYPE_INVALID","DISCOVER_AZURE_DATABASE_TYPE_MYSQL","DISCOVER_AZURE_DATABASE_TYPE_POSTGRESQL","DISCOVER_AZURE_DATABASE_TYPE_MARIADB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addAzureDatabaseBodyTypeTypePropEnum = append(addAzureDatabaseBodyTypeTypePropEnum, v)
	}
}

const (

	// AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEINVALID captures enum value "DISCOVER_AZURE_DATABASE_TYPE_INVALID"
	AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEINVALID string = "DISCOVER_AZURE_DATABASE_TYPE_INVALID"

	// AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEMYSQL captures enum value "DISCOVER_AZURE_DATABASE_TYPE_MYSQL"
	AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEMYSQL string = "DISCOVER_AZURE_DATABASE_TYPE_MYSQL"

	// AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEPOSTGRESQL captures enum value "DISCOVER_AZURE_DATABASE_TYPE_POSTGRESQL"
	AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEPOSTGRESQL string = "DISCOVER_AZURE_DATABASE_TYPE_POSTGRESQL"

	// AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEMARIADB captures enum value "DISCOVER_AZURE_DATABASE_TYPE_MARIADB"
	AddAzureDatabaseBodyTypeDISCOVERAZUREDATABASETYPEMARIADB string = "DISCOVER_AZURE_DATABASE_TYPE_MARIADB"
)

// prop value enum
func (o *AddAzureDatabaseBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addAzureDatabaseBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddAzureDatabaseBody) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddAzureDatabaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddAzureDatabaseBody) UnmarshalBinary(b []byte) error {
	var res AddAzureDatabaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddAzureDatabaseDefaultBody add azure database default body
swagger:model AddAzureDatabaseDefaultBody
*/
type AddAzureDatabaseDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this add azure database default body
func (o *AddAzureDatabaseDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddAzureDatabaseDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddAzureDatabase default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddAzureDatabaseDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddAzureDatabaseDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddAzureDatabaseDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
