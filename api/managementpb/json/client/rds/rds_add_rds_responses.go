// Code generated by go-swagger; DO NOT EDIT.

package rds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDSAddRDSReader is a Reader for the RDSAddRDS structure.
type RDSAddRDSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RDSAddRDSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRDSAddRDSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRDSAddRDSDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRDSAddRDSOK creates a RDSAddRDSOK with default headers values
func NewRDSAddRDSOK() *RDSAddRDSOK {
	return &RDSAddRDSOK{}
}

/*RDSAddRDSOK handles this case with default header values.

A successful response.
*/
type RDSAddRDSOK struct {
	Payload *RDSAddRDSOKBody
}

func (o *RDSAddRDSOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/RDS/Add][%d] rdsAddRdsOk  %+v", 200, o.Payload)
}

func (o *RDSAddRDSOK) GetPayload() *RDSAddRDSOKBody {
	return o.Payload
}

func (o *RDSAddRDSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RDSAddRDSOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRDSAddRDSDefault creates a RDSAddRDSDefault with default headers values
func NewRDSAddRDSDefault(code int) *RDSAddRDSDefault {
	return &RDSAddRDSDefault{
		_statusCode: code,
	}
}

/*RDSAddRDSDefault handles this case with default header values.

An unexpected error response.
*/
type RDSAddRDSDefault struct {
	_statusCode int

	Payload *RDSAddRDSDefaultBody
}

// Code gets the status code for the RDS add RDS default response
func (o *RDSAddRDSDefault) Code() int {
	return o._statusCode
}

func (o *RDSAddRDSDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/RDS/Add][%d] RDS_AddRDS default  %+v", o._statusCode, o.Payload)
}

func (o *RDSAddRDSDefault) GetPayload() *RDSAddRDSDefaultBody {
	return o.Payload
}

func (o *RDSAddRDSDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RDSAddRDSDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSBody RDS add RDS body
swagger:model RDSAddRDSBody
*/
type RDSAddRDSBody struct {

	// AWS region.
	Region string `json:"region,omitempty"`

	// AWS availability zone.
	Az string `json:"az,omitempty"`

	// AWS instance ID.
	InstanceID string `json:"instance_id,omitempty"`

	// AWS instance class.
	NodeModel string `json:"node_model,omitempty"`

	// Address used to connect to it.
	Address string `json:"address,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// DiscoverRDSEngine describes supported RDS instance engines.
	// Enum: [DISCOVER_RDS_ENGINE_INVALID DISCOVER_RDS_MYSQL DISCOVER_RDS_POSTGRESQL]
	Engine *string `json:"engine,omitempty"`

	// Unique across all Nodes user-defined name. Defaults to AWS instance ID.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Defaults to AWS instance ID.
	ServiceName string `json:"service_name,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Password for scraping metrics.
	Password string `json:"password,omitempty"`

	// AWS Access key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// AWS Secret key.
	AWSSecretKey string `json:"aws_secret_key,omitempty"`

	// If true, adds rds_exporter.
	RDSExporter bool `json:"rds_exporter,omitempty"`

	// If true, adds qan-mysql-perfschema-agent.
	QANMysqlPerfschema bool `json:"qan_mysql_perfschema,omitempty"`

	// Custom user-assigned labels for Node and Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Disable query examples.
	DisableQueryExamples bool `json:"disable_query_examples,omitempty"`

	// Tablestats group collectors will be disabled if there are more than that number of tables.
	// If zero, server's default value is used.
	// Use negative value to disable them.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Disable basic metrics.
	DisableBasicMetrics bool `json:"disable_basic_metrics,omitempty"`

	// Disable enhanced metrics.
	DisableEnhancedMetrics bool `json:"disable_enhanced_metrics,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	// Enum: [AUTO PULL PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// If true, add qan-pgstatements
	QANPostgresqlPgstatements bool `json:"qan_postgresql_pgstatements,omitempty"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`
}

// Validate validates this RDS add RDS body
func (o *RDSAddRDSBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsBodyTypeEnginePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISCOVER_RDS_ENGINE_INVALID","DISCOVER_RDS_MYSQL","DISCOVER_RDS_POSTGRESQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsBodyTypeEnginePropEnum = append(rdsAddRdsBodyTypeEnginePropEnum, v)
	}
}

const (

	// RDSAddRDSBodyEngineDISCOVERRDSENGINEINVALID captures enum value "DISCOVER_RDS_ENGINE_INVALID"
	RDSAddRDSBodyEngineDISCOVERRDSENGINEINVALID string = "DISCOVER_RDS_ENGINE_INVALID"

	// RDSAddRDSBodyEngineDISCOVERRDSMYSQL captures enum value "DISCOVER_RDS_MYSQL"
	RDSAddRDSBodyEngineDISCOVERRDSMYSQL string = "DISCOVER_RDS_MYSQL"

	// RDSAddRDSBodyEngineDISCOVERRDSPOSTGRESQL captures enum value "DISCOVER_RDS_POSTGRESQL"
	RDSAddRDSBodyEngineDISCOVERRDSPOSTGRESQL string = "DISCOVER_RDS_POSTGRESQL"
)

// prop value enum
func (o *RDSAddRDSBody) validateEngineEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsBodyTypeEnginePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSBody) validateEngine(formats strfmt.Registry) error {

	if swag.IsZero(o.Engine) { // not required
		return nil
	}

	// value enum
	if err := o.validateEngineEnum("body"+"."+"engine", "body", *o.Engine); err != nil {
		return err
	}

	return nil
}

var rdsAddRdsBodyTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO","PULL","PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsBodyTypeMetricsModePropEnum = append(rdsAddRdsBodyTypeMetricsModePropEnum, v)
	}
}

const (

	// RDSAddRDSBodyMetricsModeAUTO captures enum value "AUTO"
	RDSAddRDSBodyMetricsModeAUTO string = "AUTO"

	// RDSAddRDSBodyMetricsModePULL captures enum value "PULL"
	RDSAddRDSBodyMetricsModePULL string = "PULL"

	// RDSAddRDSBodyMetricsModePUSH captures enum value "PUSH"
	RDSAddRDSBodyMetricsModePUSH string = "PUSH"
)

// prop value enum
func (o *RDSAddRDSBody) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsBodyTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSBody) validateMetricsMode(formats strfmt.Registry) error {

	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSBody) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSDefaultBody RDS add RDS default body
swagger:model RDSAddRDSDefaultBody
*/
type RDSAddRDSDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this RDS add RDS default body
func (o *RDSAddRDSDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RDSAddRDSDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RDS_AddRDS default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSDefaultBody) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBody RDS add RDS OK body
swagger:model RDSAddRDSOKBody
*/
type RDSAddRDSOKBody struct {

	// Actual table count at the moment of adding.
	TableCount int32 `json:"table_count,omitempty"`

	// mysql
	Mysql *RDSAddRDSOKBodyMysql `json:"mysql,omitempty"`

	// mysqld exporter
	MysqldExporter *RDSAddRDSOKBodyMysqldExporter `json:"mysqld_exporter,omitempty"`

	// node
	Node *RDSAddRDSOKBodyNode `json:"node,omitempty"`

	// postgresql
	Postgresql *RDSAddRDSOKBodyPostgresql `json:"postgresql,omitempty"`

	// postgresql exporter
	PostgresqlExporter *RDSAddRDSOKBodyPostgresqlExporter `json:"postgresql_exporter,omitempty"`

	// qan mysql perfschema
	QANMysqlPerfschema *RDSAddRDSOKBodyQANMysqlPerfschema `json:"qan_mysql_perfschema,omitempty"`

	// qan postgresql pgstatements
	QANPostgresqlPgstatements *RDSAddRDSOKBodyQANPostgresqlPgstatements `json:"qan_postgresql_pgstatements,omitempty"`

	// rds exporter
	RDSExporter *RDSAddRDSOKBodyRDSExporter `json:"rds_exporter,omitempty"`
}

// Validate validates this RDS add RDS OK body
func (o *RDSAddRDSOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschema(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatements(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDSExporter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RDSAddRDSOKBody) validateMysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validateMysqldExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validateNode(formats strfmt.Registry) error {

	if swag.IsZero(o.Node) { // not required
		return nil
	}

	if o.Node != nil {
		if err := o.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validatePostgresql(formats strfmt.Registry) error {

	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validatePostgresqlExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.PostgresqlExporter) { // not required
		return nil
	}

	if o.PostgresqlExporter != nil {
		if err := o.PostgresqlExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "postgresql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validateQANMysqlPerfschema(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMysqlPerfschema) { // not required
		return nil
	}

	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validateQANPostgresqlPgstatements(formats strfmt.Registry) error {

	if swag.IsZero(o.QANPostgresqlPgstatements) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatements != nil {
		if err := o.QANPostgresqlPgstatements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "qan_postgresql_pgstatements")
			}
			return err
		}
	}

	return nil
}

func (o *RDSAddRDSOKBody) validateRDSExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.RDSExporter) { // not required
		return nil
	}

	if o.RDSExporter != nil {
		if err := o.RDSExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsAddRdsOk" + "." + "rds_exporter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBody) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyMysql MySQLService represents a generic MySQL instance.
swagger:model RDSAddRDSOKBodyMysql
*/
type RDSAddRDSOKBodyMysql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this RDS add RDS OK body mysql
func (o *RDSAddRDSOKBodyMysql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyMysql) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyMysqldExporter MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
swagger:model RDSAddRDSOKBodyMysqldExporter
*/
type RDSAddRDSOKBodyMysqldExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if tablestats group collectors are currently disabled.
	TablestatsGroupDisabled bool `json:"tablestats_group_disabled,omitempty"`
}

// Validate validates this RDS add RDS OK body mysqld exporter
func (o *RDSAddRDSOKBodyMysqldExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsOkBodyMysqldExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsOkBodyMysqldExporterTypeStatusPropEnum = append(rdsAddRdsOkBodyMysqldExporterTypeStatusPropEnum, v)
	}
}

const (

	// RDSAddRDSOKBodyMysqldExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	RDSAddRDSOKBodyMysqldExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// RDSAddRDSOKBodyMysqldExporterStatusSTARTING captures enum value "STARTING"
	RDSAddRDSOKBodyMysqldExporterStatusSTARTING string = "STARTING"

	// RDSAddRDSOKBodyMysqldExporterStatusRUNNING captures enum value "RUNNING"
	RDSAddRDSOKBodyMysqldExporterStatusRUNNING string = "RUNNING"

	// RDSAddRDSOKBodyMysqldExporterStatusWAITING captures enum value "WAITING"
	RDSAddRDSOKBodyMysqldExporterStatusWAITING string = "WAITING"

	// RDSAddRDSOKBodyMysqldExporterStatusSTOPPING captures enum value "STOPPING"
	RDSAddRDSOKBodyMysqldExporterStatusSTOPPING string = "STOPPING"

	// RDSAddRDSOKBodyMysqldExporterStatusDONE captures enum value "DONE"
	RDSAddRDSOKBodyMysqldExporterStatusDONE string = "DONE"

	// RDSAddRDSOKBodyMysqldExporterStatusUNKNOWN captures enum value "UNKNOWN"
	RDSAddRDSOKBodyMysqldExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *RDSAddRDSOKBodyMysqldExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsOkBodyMysqldExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSOKBodyMysqldExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("rdsAddRdsOk"+"."+"mysqld_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyMysqldExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyMysqldExporter) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyMysqldExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyNode RemoteRDSNode represents remote RDS Node. Agents can't run on Remote RDS Nodes.
swagger:model RDSAddRDSOKBodyNode
*/
type RDSAddRDSOKBodyNode struct {

	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// DB instance identifier.
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this RDS add RDS OK body node
func (o *RDSAddRDSOKBodyNode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyNode) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyPostgresql PostgreSQLService represents a generic PostgreSQL instance.
swagger:model RDSAddRDSOKBodyPostgresql
*/
type RDSAddRDSOKBodyPostgresql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Database name.
	DatabaseName string `json:"database_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this RDS add RDS OK body postgresql
func (o *RDSAddRDSOKBodyPostgresql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyPostgresqlExporter PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model RDSAddRDSOKBodyPostgresqlExporter
*/
type RDSAddRDSOKBodyPostgresqlExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this RDS add RDS OK body postgresql exporter
func (o *RDSAddRDSOKBodyPostgresqlExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsOkBodyPostgresqlExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsOkBodyPostgresqlExporterTypeStatusPropEnum = append(rdsAddRdsOkBodyPostgresqlExporterTypeStatusPropEnum, v)
	}
}

const (

	// RDSAddRDSOKBodyPostgresqlExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	RDSAddRDSOKBodyPostgresqlExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// RDSAddRDSOKBodyPostgresqlExporterStatusSTARTING captures enum value "STARTING"
	RDSAddRDSOKBodyPostgresqlExporterStatusSTARTING string = "STARTING"

	// RDSAddRDSOKBodyPostgresqlExporterStatusRUNNING captures enum value "RUNNING"
	RDSAddRDSOKBodyPostgresqlExporterStatusRUNNING string = "RUNNING"

	// RDSAddRDSOKBodyPostgresqlExporterStatusWAITING captures enum value "WAITING"
	RDSAddRDSOKBodyPostgresqlExporterStatusWAITING string = "WAITING"

	// RDSAddRDSOKBodyPostgresqlExporterStatusSTOPPING captures enum value "STOPPING"
	RDSAddRDSOKBodyPostgresqlExporterStatusSTOPPING string = "STOPPING"

	// RDSAddRDSOKBodyPostgresqlExporterStatusDONE captures enum value "DONE"
	RDSAddRDSOKBodyPostgresqlExporterStatusDONE string = "DONE"

	// RDSAddRDSOKBodyPostgresqlExporterStatusUNKNOWN captures enum value "UNKNOWN"
	RDSAddRDSOKBodyPostgresqlExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *RDSAddRDSOKBodyPostgresqlExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsOkBodyPostgresqlExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSOKBodyPostgresqlExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("rdsAddRdsOk"+"."+"postgresql_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyPostgresqlExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyPostgresqlExporter) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyPostgresqlExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyQANMysqlPerfschema QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model RDSAddRDSOKBodyQANMysqlPerfschema
*/
type RDSAddRDSOKBodyQANMysqlPerfschema struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this RDS add RDS OK body QAN mysql perfschema
func (o *RDSAddRDSOKBodyQANMysqlPerfschema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsOkBodyQanMysqlPerfschemaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsOkBodyQanMysqlPerfschemaTypeStatusPropEnum = append(rdsAddRdsOkBodyQanMysqlPerfschemaTypeStatusPropEnum, v)
	}
}

const (

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusSTARTING captures enum value "STARTING"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusSTARTING string = "STARTING"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusRUNNING captures enum value "RUNNING"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusRUNNING string = "RUNNING"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusWAITING captures enum value "WAITING"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusWAITING string = "WAITING"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusSTOPPING captures enum value "STOPPING"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusSTOPPING string = "STOPPING"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusDONE captures enum value "DONE"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusDONE string = "DONE"

	// RDSAddRDSOKBodyQANMysqlPerfschemaStatusUNKNOWN captures enum value "UNKNOWN"
	RDSAddRDSOKBodyQANMysqlPerfschemaStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *RDSAddRDSOKBodyQANMysqlPerfschema) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsOkBodyQanMysqlPerfschemaTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSOKBodyQANMysqlPerfschema) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("rdsAddRdsOk"+"."+"qan_mysql_perfschema"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyQANMysqlPerfschema) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyQANMysqlPerfschema) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyQANMysqlPerfschema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyQANPostgresqlPgstatements QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model RDSAddRDSOKBodyQANPostgresqlPgstatements
*/
type RDSAddRDSOKBodyQANPostgresqlPgstatements struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat statements data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this RDS add RDS OK body QAN postgresql pgstatements
func (o *RDSAddRDSOKBodyQANPostgresqlPgstatements) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsOkBodyQanPostgresqlPgstatementsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsOkBodyQanPostgresqlPgstatementsTypeStatusPropEnum = append(rdsAddRdsOkBodyQanPostgresqlPgstatementsTypeStatusPropEnum, v)
	}
}

const (

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusSTARTING captures enum value "STARTING"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusSTARTING string = "STARTING"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusRUNNING captures enum value "RUNNING"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusRUNNING string = "RUNNING"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusWAITING captures enum value "WAITING"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusWAITING string = "WAITING"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusSTOPPING captures enum value "STOPPING"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusSTOPPING string = "STOPPING"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusDONE captures enum value "DONE"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusDONE string = "DONE"

	// RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusUNKNOWN captures enum value "UNKNOWN"
	RDSAddRDSOKBodyQANPostgresqlPgstatementsStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *RDSAddRDSOKBodyQANPostgresqlPgstatements) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsOkBodyQanPostgresqlPgstatementsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSOKBodyQANPostgresqlPgstatements) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("rdsAddRdsOk"+"."+"qan_postgresql_pgstatements"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyQANPostgresqlPgstatements) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyQANPostgresqlPgstatements) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyQANPostgresqlPgstatements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RDSAddRDSOKBodyRDSExporter RDSExporter runs on Generic or Container Node and exposes RemoteRDS Node metrics.
swagger:model RDSAddRDSOKBodyRDSExporter
*/
type RDSAddRDSOKBodyRDSExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// AWS Access Key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// Basic metrics are disabled.
	BasicMetricsDisabled bool `json:"basic_metrics_disabled,omitempty"`

	// Enhanced metrics are disabled.
	EnhancedMetricsDisabled bool `json:"enhanced_metrics_disabled,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`
}

// Validate validates this RDS add RDS OK body RDS exporter
func (o *RDSAddRDSOKBodyRDSExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdsAddRdsOkBodyRdsExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdsAddRdsOkBodyRdsExporterTypeStatusPropEnum = append(rdsAddRdsOkBodyRdsExporterTypeStatusPropEnum, v)
	}
}

const (

	// RDSAddRDSOKBodyRDSExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	RDSAddRDSOKBodyRDSExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// RDSAddRDSOKBodyRDSExporterStatusSTARTING captures enum value "STARTING"
	RDSAddRDSOKBodyRDSExporterStatusSTARTING string = "STARTING"

	// RDSAddRDSOKBodyRDSExporterStatusRUNNING captures enum value "RUNNING"
	RDSAddRDSOKBodyRDSExporterStatusRUNNING string = "RUNNING"

	// RDSAddRDSOKBodyRDSExporterStatusWAITING captures enum value "WAITING"
	RDSAddRDSOKBodyRDSExporterStatusWAITING string = "WAITING"

	// RDSAddRDSOKBodyRDSExporterStatusSTOPPING captures enum value "STOPPING"
	RDSAddRDSOKBodyRDSExporterStatusSTOPPING string = "STOPPING"

	// RDSAddRDSOKBodyRDSExporterStatusDONE captures enum value "DONE"
	RDSAddRDSOKBodyRDSExporterStatusDONE string = "DONE"

	// RDSAddRDSOKBodyRDSExporterStatusUNKNOWN captures enum value "UNKNOWN"
	RDSAddRDSOKBodyRDSExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *RDSAddRDSOKBodyRDSExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdsAddRdsOkBodyRdsExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RDSAddRDSOKBodyRDSExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("rdsAddRdsOk"+"."+"rds_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RDSAddRDSOKBodyRDSExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RDSAddRDSOKBodyRDSExporter) UnmarshalBinary(b []byte) error {
	var res RDSAddRDSOKBodyRDSExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
