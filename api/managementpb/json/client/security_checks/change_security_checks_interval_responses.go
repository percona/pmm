// Code generated by go-swagger; DO NOT EDIT.

package security_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeSecurityChecksIntervalReader is a Reader for the ChangeSecurityChecksInterval structure.
type ChangeSecurityChecksIntervalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeSecurityChecksIntervalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeSecurityChecksIntervalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangeSecurityChecksIntervalDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangeSecurityChecksIntervalOK creates a ChangeSecurityChecksIntervalOK with default headers values
func NewChangeSecurityChecksIntervalOK() *ChangeSecurityChecksIntervalOK {
	return &ChangeSecurityChecksIntervalOK{}
}

/*ChangeSecurityChecksIntervalOK handles this case with default header values.

A successful response.
*/
type ChangeSecurityChecksIntervalOK struct {
	Payload interface{}
}

func (o *ChangeSecurityChecksIntervalOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/SecurityChecks/ChangeInterval][%d] changeSecurityChecksIntervalOk  %+v", 200, o.Payload)
}

func (o *ChangeSecurityChecksIntervalOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ChangeSecurityChecksIntervalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeSecurityChecksIntervalDefault creates a ChangeSecurityChecksIntervalDefault with default headers values
func NewChangeSecurityChecksIntervalDefault(code int) *ChangeSecurityChecksIntervalDefault {
	return &ChangeSecurityChecksIntervalDefault{
		_statusCode: code,
	}
}

/*ChangeSecurityChecksIntervalDefault handles this case with default header values.

An unexpected error response.
*/
type ChangeSecurityChecksIntervalDefault struct {
	_statusCode int

	Payload *ChangeSecurityChecksIntervalDefaultBody
}

// Code gets the status code for the change security checks interval default response
func (o *ChangeSecurityChecksIntervalDefault) Code() int {
	return o._statusCode
}

func (o *ChangeSecurityChecksIntervalDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/SecurityChecks/ChangeInterval][%d] ChangeSecurityChecksInterval default  %+v", o._statusCode, o.Payload)
}

func (o *ChangeSecurityChecksIntervalDefault) GetPayload() *ChangeSecurityChecksIntervalDefaultBody {
	return o.Payload
}

func (o *ChangeSecurityChecksIntervalDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChangeSecurityChecksIntervalDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChangeSecurityChecksIntervalBody change security checks interval body
swagger:model ChangeSecurityChecksIntervalBody
*/
type ChangeSecurityChecksIntervalBody struct {

	// The name of the check to change interval of.
	Name string `json:"name,omitempty"`

	// SecurityCheckInterval represents possible execution interval values for checks.
	// Enum: [SECURITY_CHECK_INTERVAL_INVALID STANDARD FREQUENT RARE]
	Interval *string `json:"interval,omitempty"`
}

// Validate validates this change security checks interval body
func (o *ChangeSecurityChecksIntervalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeSecurityChecksIntervalBodyTypeIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SECURITY_CHECK_INTERVAL_INVALID","STANDARD","FREQUENT","RARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeSecurityChecksIntervalBodyTypeIntervalPropEnum = append(changeSecurityChecksIntervalBodyTypeIntervalPropEnum, v)
	}
}

const (

	// ChangeSecurityChecksIntervalBodyIntervalSECURITYCHECKINTERVALINVALID captures enum value "SECURITY_CHECK_INTERVAL_INVALID"
	ChangeSecurityChecksIntervalBodyIntervalSECURITYCHECKINTERVALINVALID string = "SECURITY_CHECK_INTERVAL_INVALID"

	// ChangeSecurityChecksIntervalBodyIntervalSTANDARD captures enum value "STANDARD"
	ChangeSecurityChecksIntervalBodyIntervalSTANDARD string = "STANDARD"

	// ChangeSecurityChecksIntervalBodyIntervalFREQUENT captures enum value "FREQUENT"
	ChangeSecurityChecksIntervalBodyIntervalFREQUENT string = "FREQUENT"

	// ChangeSecurityChecksIntervalBodyIntervalRARE captures enum value "RARE"
	ChangeSecurityChecksIntervalBodyIntervalRARE string = "RARE"
)

// prop value enum
func (o *ChangeSecurityChecksIntervalBody) validateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeSecurityChecksIntervalBodyTypeIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ChangeSecurityChecksIntervalBody) validateInterval(formats strfmt.Registry) error {

	if swag.IsZero(o.Interval) { // not required
		return nil
	}

	// value enum
	if err := o.validateIntervalEnum("body"+"."+"interval", "body", *o.Interval); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSecurityChecksIntervalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSecurityChecksIntervalBody) UnmarshalBinary(b []byte) error {
	var res ChangeSecurityChecksIntervalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChangeSecurityChecksIntervalDefaultBody change security checks interval default body
swagger:model ChangeSecurityChecksIntervalDefaultBody
*/
type ChangeSecurityChecksIntervalDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this change security checks interval default body
func (o *ChangeSecurityChecksIntervalDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangeSecurityChecksIntervalDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChangeSecurityChecksInterval default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangeSecurityChecksIntervalDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeSecurityChecksIntervalDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChangeSecurityChecksIntervalDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
