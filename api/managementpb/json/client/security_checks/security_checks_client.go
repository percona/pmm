// Code generated by go-swagger; DO NOT EDIT.

package security_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeSecurityCheck(params *ChangeSecurityCheckParams) (*ChangeSecurityCheckOK, error)

	GetSecurityCheckResults(params *GetSecurityCheckResultsParams) (*GetSecurityCheckResultsOK, error)

	ListSecurityChecks(params *ListSecurityChecksParams) (*ListSecurityChecksOK, error)

	StartSecurityChecks(params *StartSecurityChecksParams) (*StartSecurityChecksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeSecurityCheck changes security check enables disables security checks by name
*/
func (a *Client) ChangeSecurityCheck(params *ChangeSecurityCheckParams) (*ChangeSecurityCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSecurityCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeSecurityCheck",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeSecurityCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSecurityCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeSecurityCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSecurityCheckResults gets security check results start security thread tool checks
*/
func (a *Client) GetSecurityCheckResults(params *GetSecurityCheckResultsParams) (*GetSecurityCheckResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityCheckResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityCheckResults",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/GetCheckResults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecurityCheckResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityCheckResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSecurityCheckResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSecurityChecks lists security checks returns list of available security checks and their status
*/
func (a *Client) ListSecurityChecks(params *ListSecurityChecksParams) (*ListSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartSecurityChecks starts security checks start security thread tool checks
*/
func (a *Client) StartSecurityChecks(params *StartSecurityChecksParams) (*StartSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StartSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
