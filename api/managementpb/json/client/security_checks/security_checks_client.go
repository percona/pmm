// Code generated by go-swagger; DO NOT EDIT.

package security_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeSecurityChecks(params *ChangeSecurityChecksParams) (*ChangeSecurityChecksOK, error)

	GetFailedChecks(params *GetFailedChecksParams) (*GetFailedChecksOK, error)

	GetSecurityCheckResults(params *GetSecurityCheckResultsParams) (*GetSecurityCheckResultsOK, error)

	ListFailedServices(params *ListFailedServicesParams) (*ListFailedServicesOK, error)

	ListSecurityChecks(params *ListSecurityChecksParams) (*ListSecurityChecksOK, error)

	StartSecurityChecks(params *StartSecurityChecksParams) (*StartSecurityChecksOK, error)

	ToggleCheckAlert(params *ToggleCheckAlertParams) (*ToggleCheckAlertOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeSecurityChecks changes security checks

  Enables/disables Security Thread Tool checks or changes their interval by names.
*/
func (a *Client) ChangeSecurityChecks(params *ChangeSecurityChecksParams) (*ChangeSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFailedChecks gets failed checks

  Returns the latest check results for a given service.
*/
func (a *Client) GetFailedChecks(params *GetFailedChecksParams) (*GetFailedChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFailedChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFailedChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/FailedChecks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFailedChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFailedChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFailedChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSecurityCheckResults gets security check results

  Returns Security Thread Tool's latest checks results.
*/
func (a *Client) GetSecurityCheckResults(params *GetSecurityCheckResultsParams) (*GetSecurityCheckResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityCheckResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityCheckResults",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/GetCheckResults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecurityCheckResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityCheckResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSecurityCheckResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFailedServices lists failed services

  Returns a list of services with failed checks and a summary of check results.
*/
func (a *Client) ListFailedServices(params *ListFailedServicesParams) (*ListFailedServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFailedServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListFailedServices",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/ListFailedServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFailedServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFailedServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFailedServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSecurityChecks lists security checks

  Returns a list of available Security Thread Tool checks.
*/
func (a *Client) ListSecurityChecks(params *ListSecurityChecksParams) (*ListSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartSecurityChecks starts security checks

  Executes Security Thread Tool checks and returns when all checks are executed. All available checks will be started if check names aren't specified.
*/
func (a *Client) StartSecurityChecks(params *StartSecurityChecksParams) (*StartSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StartSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ToggleCheckAlert toggles check alert

  Silence/Unsilence alerts for a specific check result.
*/
func (a *Client) ToggleCheckAlert(params *ToggleCheckAlertParams) (*ToggleCheckAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleCheckAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ToggleCheckAlert",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/ToggleCheckAlert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ToggleCheckAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleCheckAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ToggleCheckAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
