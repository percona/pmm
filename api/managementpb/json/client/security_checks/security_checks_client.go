// Code generated by go-swagger; DO NOT EDIT.

package security_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SecurityChecksChangeSecurityChecks(params *SecurityChecksChangeSecurityChecksParams) (*SecurityChecksChangeSecurityChecksOK, error)

	SecurityChecksGetSecurityCheckResults(params *SecurityChecksGetSecurityCheckResultsParams) (*SecurityChecksGetSecurityCheckResultsOK, error)

	SecurityChecksListSecurityChecks(params *SecurityChecksListSecurityChecksParams) (*SecurityChecksListSecurityChecksOK, error)

	SecurityChecksStartSecurityChecks(params *SecurityChecksStartSecurityChecksParams) (*SecurityChecksStartSecurityChecksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SecurityChecksChangeSecurityChecks changes security checks

  Enables/disables Security Thread Tool checks or changes their interval by names.
*/
func (a *Client) SecurityChecksChangeSecurityChecks(params *SecurityChecksChangeSecurityChecksParams) (*SecurityChecksChangeSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityChecksChangeSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityChecks_ChangeSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecurityChecksChangeSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityChecksChangeSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecurityChecksChangeSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecurityChecksGetSecurityCheckResults gets security check results

  Returns Security Thread Tool's latest checks results.
*/
func (a *Client) SecurityChecksGetSecurityCheckResults(params *SecurityChecksGetSecurityCheckResultsParams) (*SecurityChecksGetSecurityCheckResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityChecksGetSecurityCheckResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityChecks_GetSecurityCheckResults",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/GetCheckResults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecurityChecksGetSecurityCheckResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityChecksGetSecurityCheckResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecurityChecksGetSecurityCheckResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecurityChecksListSecurityChecks lists security checks

  Returns a list of available Security Thread Tool checks.
*/
func (a *Client) SecurityChecksListSecurityChecks(params *SecurityChecksListSecurityChecksParams) (*SecurityChecksListSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityChecksListSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityChecks_ListSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecurityChecksListSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityChecksListSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecurityChecksListSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecurityChecksStartSecurityChecks starts security checks

  Executes Security Thread Tool checks and returns when all checks are executed. All available checks will be started if check names aren't specified.
*/
func (a *Client) SecurityChecksStartSecurityChecks(params *SecurityChecksStartSecurityChecksParams) (*SecurityChecksStartSecurityChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityChecksStartSecurityChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityChecks_StartSecurityChecks",
		Method:             "POST",
		PathPattern:        "/v1/management/SecurityChecks/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecurityChecksStartSecurityChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityChecksStartSecurityChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecurityChecksStartSecurityChecksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
