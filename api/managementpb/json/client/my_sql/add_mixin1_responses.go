// Code generated by go-swagger; DO NOT EDIT.

package my_sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// AddMixin1Reader is a Reader for the AddMixin1 structure.
type AddMixin1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMixin1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddMixin1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewAddMixin1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddMixin1OK creates a AddMixin1OK with default headers values
func NewAddMixin1OK() *AddMixin1OK {
	return &AddMixin1OK{}
}

/*AddMixin1OK handles this case with default header values.

A successful response.
*/
type AddMixin1OK struct {
	Payload *AddMixin1OKBody
}

func (o *AddMixin1OK) Error() string {
	return fmt.Sprintf("[POST /v1/management/MySQL/Add][%d] addMixin1Ok  %+v", 200, o.Payload)
}

func (o *AddMixin1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddMixin1OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMixin1Default creates a AddMixin1Default with default headers values
func NewAddMixin1Default(code int) *AddMixin1Default {
	return &AddMixin1Default{
		_statusCode: code,
	}
}

/*AddMixin1Default handles this case with default header values.

An error response.
*/
type AddMixin1Default struct {
	_statusCode int

	Payload *AddMixin1DefaultBody
}

// Code gets the status code for the add mixin1 default response
func (o *AddMixin1Default) Code() int {
	return o._statusCode
}

func (o *AddMixin1Default) Error() string {
	return fmt.Sprintf("[POST /v1/management/MySQL/Add][%d] AddMixin1 default  %+v", o._statusCode, o.Payload)
}

func (o *AddMixin1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddMixin1DefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddMixin1Body add mixin1 body
swagger:model AddMixin1Body
*/
type AddMixin1Body struct {

	// Node and Service access address (DNS name or IP). Required.
	Address string `json:"address,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// If true, adds mysqld_exporter for provided service.
	MysqldExporter bool `json:"mysqld_exporter,omitempty"`

	// Node identifier on which a service is been running. Required.
	NodeID string `json:"node_id,omitempty"`

	// MySQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service Access port. Required.
	Port int64 `json:"port,omitempty"`

	// If true, adds qan-mysql-perfschema-agent for provided service.
	QANMysqlPerfschema bool `json:"qan_mysql_perfschema,omitempty"`

	// If true, adds qan-mysql-slowlog-agent for provided service.
	QANMysqlSlowlog bool `json:"qan_mysql_slowlog,omitempty"`

	// FIXME remove
	QANPassword string `json:"qan_password,omitempty"`

	// FIXME remove
	QANUsername string `json:"qan_username,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin1 body
func (o *AddMixin1Body) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1Body) UnmarshalBinary(b []byte) error {
	var res AddMixin1Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1DefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model AddMixin1DefaultBody
*/
type AddMixin1DefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add mixin1 default body
func (o *AddMixin1DefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1DefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1DefaultBody) UnmarshalBinary(b []byte) error {
	var res AddMixin1DefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1OKBody add mixin1 OK body
swagger:model AddMixin1OKBody
*/
type AddMixin1OKBody struct {

	// mysqld exporter
	MysqldExporter *AddMixin1OKBodyMysqldExporter `json:"mysqld_exporter,omitempty"`

	// qan mysql perfschema
	QANMysqlPerfschema *AddMixin1OKBodyQANMysqlPerfschema `json:"qan_mysql_perfschema,omitempty"`

	// qan mysql slowlog
	QANMysqlSlowlog *AddMixin1OKBodyQANMysqlSlowlog `json:"qan_mysql_slowlog,omitempty"`

	// service
	Service *AddMixin1OKBodyService `json:"service,omitempty"`
}

// Validate validates this add mixin1 OK body
func (o *AddMixin1OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschema(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlSlowlog(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddMixin1OKBody) validateMysqldExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin1Ok" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddMixin1OKBody) validateQANMysqlPerfschema(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMysqlPerfschema) { // not required
		return nil
	}

	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin1Ok" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *AddMixin1OKBody) validateQANMysqlSlowlog(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMysqlSlowlog) { // not required
		return nil
	}

	if o.QANMysqlSlowlog != nil {
		if err := o.QANMysqlSlowlog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin1Ok" + "." + "qan_mysql_slowlog")
			}
			return err
		}
	}

	return nil
}

func (o *AddMixin1OKBody) validateService(formats strfmt.Registry) error {

	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin1Ok" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1OKBody) UnmarshalBinary(b []byte) error {
	var res AddMixin1OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1OKBodyMysqldExporter MySQLdExporter runs on Generic or Container Node and exposes MySQL and AmazonRDSMySQL Service metrics.
swagger:model AddMixin1OKBodyMysqldExporter
*/
type AddMixin1OKBodyMysqldExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// MySQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// AgentStatus represents actual Agent status.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE]
	Status *string `json:"status,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin1 OK body mysqld exporter
func (o *AddMixin1OKBodyMysqldExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addMixin1OkBodyMysqldExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addMixin1OkBodyMysqldExporterTypeStatusPropEnum = append(addMixin1OkBodyMysqldExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddMixin1OKBodyMysqldExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AddMixin1OKBodyMysqldExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AddMixin1OKBodyMysqldExporterStatusSTARTING captures enum value "STARTING"
	AddMixin1OKBodyMysqldExporterStatusSTARTING string = "STARTING"

	// AddMixin1OKBodyMysqldExporterStatusRUNNING captures enum value "RUNNING"
	AddMixin1OKBodyMysqldExporterStatusRUNNING string = "RUNNING"

	// AddMixin1OKBodyMysqldExporterStatusWAITING captures enum value "WAITING"
	AddMixin1OKBodyMysqldExporterStatusWAITING string = "WAITING"

	// AddMixin1OKBodyMysqldExporterStatusSTOPPING captures enum value "STOPPING"
	AddMixin1OKBodyMysqldExporterStatusSTOPPING string = "STOPPING"

	// AddMixin1OKBodyMysqldExporterStatusDONE captures enum value "DONE"
	AddMixin1OKBodyMysqldExporterStatusDONE string = "DONE"
)

// prop value enum
func (o *AddMixin1OKBodyMysqldExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addMixin1OkBodyMysqldExporterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AddMixin1OKBodyMysqldExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addMixin1Ok"+"."+"mysqld_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1OKBodyMysqldExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1OKBodyMysqldExporter) UnmarshalBinary(b []byte) error {
	var res AddMixin1OKBodyMysqldExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1OKBodyQANMysqlPerfschema QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AddMixin1OKBodyQANMysqlPerfschema
*/
type AddMixin1OKBodyQANMysqlPerfschema struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// MySQL password for getting performance data.
	Password string `json:"password,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// AgentStatus represents actual Agent status.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE]
	Status *string `json:"status,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin1 OK body QAN mysql perfschema
func (o *AddMixin1OKBodyQANMysqlPerfschema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addMixin1OkBodyQanMysqlPerfschemaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addMixin1OkBodyQanMysqlPerfschemaTypeStatusPropEnum = append(addMixin1OkBodyQanMysqlPerfschemaTypeStatusPropEnum, v)
	}
}

const (

	// AddMixin1OKBodyQANMysqlPerfschemaStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AddMixin1OKBodyQANMysqlPerfschemaStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AddMixin1OKBodyQANMysqlPerfschemaStatusSTARTING captures enum value "STARTING"
	AddMixin1OKBodyQANMysqlPerfschemaStatusSTARTING string = "STARTING"

	// AddMixin1OKBodyQANMysqlPerfschemaStatusRUNNING captures enum value "RUNNING"
	AddMixin1OKBodyQANMysqlPerfschemaStatusRUNNING string = "RUNNING"

	// AddMixin1OKBodyQANMysqlPerfschemaStatusWAITING captures enum value "WAITING"
	AddMixin1OKBodyQANMysqlPerfschemaStatusWAITING string = "WAITING"

	// AddMixin1OKBodyQANMysqlPerfschemaStatusSTOPPING captures enum value "STOPPING"
	AddMixin1OKBodyQANMysqlPerfschemaStatusSTOPPING string = "STOPPING"

	// AddMixin1OKBodyQANMysqlPerfschemaStatusDONE captures enum value "DONE"
	AddMixin1OKBodyQANMysqlPerfschemaStatusDONE string = "DONE"
)

// prop value enum
func (o *AddMixin1OKBodyQANMysqlPerfschema) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addMixin1OkBodyQanMysqlPerfschemaTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AddMixin1OKBodyQANMysqlPerfschema) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addMixin1Ok"+"."+"qan_mysql_perfschema"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1OKBodyQANMysqlPerfschema) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1OKBodyQANMysqlPerfschema) UnmarshalBinary(b []byte) error {
	var res AddMixin1OKBodyQANMysqlPerfschema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1OKBodyQANMysqlSlowlog QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AddMixin1OKBodyQANMysqlSlowlog
*/
type AddMixin1OKBodyQANMysqlSlowlog struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// MySQL password for getting performance data.
	Password string `json:"password,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// AgentStatus represents actual Agent status.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE]
	Status *string `json:"status,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin1 OK body QAN mysql slowlog
func (o *AddMixin1OKBodyQANMysqlSlowlog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addMixin1OkBodyQanMysqlSlowlogTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addMixin1OkBodyQanMysqlSlowlogTypeStatusPropEnum = append(addMixin1OkBodyQanMysqlSlowlogTypeStatusPropEnum, v)
	}
}

const (

	// AddMixin1OKBodyQANMysqlSlowlogStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AddMixin1OKBodyQANMysqlSlowlogStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AddMixin1OKBodyQANMysqlSlowlogStatusSTARTING captures enum value "STARTING"
	AddMixin1OKBodyQANMysqlSlowlogStatusSTARTING string = "STARTING"

	// AddMixin1OKBodyQANMysqlSlowlogStatusRUNNING captures enum value "RUNNING"
	AddMixin1OKBodyQANMysqlSlowlogStatusRUNNING string = "RUNNING"

	// AddMixin1OKBodyQANMysqlSlowlogStatusWAITING captures enum value "WAITING"
	AddMixin1OKBodyQANMysqlSlowlogStatusWAITING string = "WAITING"

	// AddMixin1OKBodyQANMysqlSlowlogStatusSTOPPING captures enum value "STOPPING"
	AddMixin1OKBodyQANMysqlSlowlogStatusSTOPPING string = "STOPPING"

	// AddMixin1OKBodyQANMysqlSlowlogStatusDONE captures enum value "DONE"
	AddMixin1OKBodyQANMysqlSlowlogStatusDONE string = "DONE"
)

// prop value enum
func (o *AddMixin1OKBodyQANMysqlSlowlog) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addMixin1OkBodyQanMysqlSlowlogTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AddMixin1OKBodyQANMysqlSlowlog) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addMixin1Ok"+"."+"qan_mysql_slowlog"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1OKBodyQANMysqlSlowlog) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1OKBodyQANMysqlSlowlog) UnmarshalBinary(b []byte) error {
	var res AddMixin1OKBodyQANMysqlSlowlog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin1OKBodyService MySQLService represents a generic MySQL instance.
swagger:model AddMixin1OKBodyService
*/
type AddMixin1OKBodyService struct {

	// Access address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this add mixin1 OK body service
func (o *AddMixin1OKBodyService) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin1OKBodyService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin1OKBodyService) UnmarshalBinary(b []byte) error {
	var res AddMixin1OKBodyService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
