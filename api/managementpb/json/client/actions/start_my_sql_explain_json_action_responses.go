// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// StartMySQLExplainJSONActionReader is a Reader for the StartMySQLExplainJSONAction structure.
type StartMySQLExplainJSONActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartMySQLExplainJSONActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartMySQLExplainJSONActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStartMySQLExplainJSONActionOK creates a StartMySQLExplainJSONActionOK with default headers values
func NewStartMySQLExplainJSONActionOK() *StartMySQLExplainJSONActionOK {
	return &StartMySQLExplainJSONActionOK{}
}

/*StartMySQLExplainJSONActionOK handles this case with default header values.

A successful response.
*/
type StartMySQLExplainJSONActionOK struct {
	Payload *StartMySQLExplainJSONActionOKBody
}

func (o *StartMySQLExplainJSONActionOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Actions/StartMySQLExplainJSON][%d] startMySqlExplainJsonActionOk  %+v", 200, o.Payload)
}

func (o *StartMySQLExplainJSONActionOK) GetPayload() *StartMySQLExplainJSONActionOKBody {
	return o.Payload
}

func (o *StartMySQLExplainJSONActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartMySQLExplainJSONActionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StartMySQLExplainJSONActionBody start my SQL explain JSON action body
swagger:model StartMySQLExplainJSONActionBody
*/
type StartMySQLExplainJSONActionBody struct {

	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// SQL query. Required.
	Query string `json:"query,omitempty"`

	// Database name. Required if it can't be deduced from the query.
	Database string `json:"database,omitempty"`
}

// Validate validates this start my SQL explain JSON action body
func (o *StartMySQLExplainJSONActionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartMySQLExplainJSONActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartMySQLExplainJSONActionBody) UnmarshalBinary(b []byte) error {
	var res StartMySQLExplainJSONActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartMySQLExplainJSONActionOKBody start my SQL explain JSON action OK body
swagger:model StartMySQLExplainJSONActionOKBody
*/
type StartMySQLExplainJSONActionOKBody struct {

	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start my SQL explain JSON action OK body
func (o *StartMySQLExplainJSONActionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartMySQLExplainJSONActionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartMySQLExplainJSONActionOKBody) UnmarshalBinary(b []byte) error {
	var res StartMySQLExplainJSONActionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
