// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new actions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for actions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActionsCancelAction(params *ActionsCancelActionParams) (*ActionsCancelActionOK, error)

	ActionsGetAction(params *ActionsGetActionParams) (*ActionsGetActionOK, error)

	ActionsStartMongoDBExplainAction(params *ActionsStartMongoDBExplainActionParams) (*ActionsStartMongoDBExplainActionOK, error)

	ActionsStartMySQLExplainAction(params *ActionsStartMySQLExplainActionParams) (*ActionsStartMySQLExplainActionOK, error)

	ActionsStartMySQLExplainJSONAction(params *ActionsStartMySQLExplainJSONActionParams) (*ActionsStartMySQLExplainJSONActionOK, error)

	ActionsStartMySQLExplainTraditionalJSONAction(params *ActionsStartMySQLExplainTraditionalJSONActionParams) (*ActionsStartMySQLExplainTraditionalJSONActionOK, error)

	ActionsStartMySQLShowCreateTableAction(params *ActionsStartMySQLShowCreateTableActionParams) (*ActionsStartMySQLShowCreateTableActionOK, error)

	ActionsStartMySQLShowIndexAction(params *ActionsStartMySQLShowIndexActionParams) (*ActionsStartMySQLShowIndexActionOK, error)

	ActionsStartMySQLShowTableStatusAction(params *ActionsStartMySQLShowTableStatusActionParams) (*ActionsStartMySQLShowTableStatusActionOK, error)

	ActionsStartPTSummaryAction(params *ActionsStartPTSummaryActionParams) (*ActionsStartPTSummaryActionOK, error)

	ActionsStartPostgreSQLShowCreateTableAction(params *ActionsStartPostgreSQLShowCreateTableActionParams) (*ActionsStartPostgreSQLShowCreateTableActionOK, error)

	ActionsStartPostgreSQLShowIndexAction(params *ActionsStartPostgreSQLShowIndexActionParams) (*ActionsStartPostgreSQLShowIndexActionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActionsCancelAction cancels action stops an action
*/
func (a *Client) ActionsCancelAction(params *ActionsCancelActionParams) (*ActionsCancelActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsCancelActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_CancelAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/Cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsCancelActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsCancelActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsCancelActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsGetAction gets action gets an result of given action
*/
func (a *Client) ActionsGetAction(params *ActionsGetActionParams) (*ActionsGetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsGetActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_GetAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsGetActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsGetActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsGetActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMongoDBExplainAction starts mongo DB explain action starts mongo DB e x p l a i n action
*/
func (a *Client) ActionsStartMongoDBExplainAction(params *ActionsStartMongoDBExplainActionParams) (*ActionsStartMongoDBExplainActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMongoDBExplainActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMongoDBExplainAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMongoDBExplain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMongoDBExplainActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMongoDBExplainActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMongoDBExplainActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLExplainAction starts my SQL explain action starts my SQL e x p l a i n action with traditional output
*/
func (a *Client) ActionsStartMySQLExplainAction(params *ActionsStartMySQLExplainActionParams) (*ActionsStartMySQLExplainActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLExplainActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLExplainAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLExplain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLExplainActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLExplainActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLExplainActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLExplainJSONAction starts my SQL explain JSON action starts my SQL e x p l a i n action with JSON output
*/
func (a *Client) ActionsStartMySQLExplainJSONAction(params *ActionsStartMySQLExplainJSONActionParams) (*ActionsStartMySQLExplainJSONActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLExplainJSONActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLExplainJSONAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLExplainJSON",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLExplainJSONActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLExplainJSONActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLExplainJSONActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLExplainTraditionalJSONAction starts my SQL explain traditional JSON action starts my SQL e x p l a i n action with traditional JSON output
*/
func (a *Client) ActionsStartMySQLExplainTraditionalJSONAction(params *ActionsStartMySQLExplainTraditionalJSONActionParams) (*ActionsStartMySQLExplainTraditionalJSONActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLExplainTraditionalJSONActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLExplainTraditionalJSONAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLExplainTraditionalJSON",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLExplainTraditionalJSONActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLExplainTraditionalJSONActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLExplainTraditionalJSONActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLShowCreateTableAction starts my SQL show create table action starts my SQL s h o w c r e a t e t a b l e action
*/
func (a *Client) ActionsStartMySQLShowCreateTableAction(params *ActionsStartMySQLShowCreateTableActionParams) (*ActionsStartMySQLShowCreateTableActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLShowCreateTableActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLShowCreateTableAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLShowCreateTable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLShowCreateTableActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLShowCreateTableActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLShowCreateTableActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLShowIndexAction starts my SQL show index action starts my SQL s h o w i n d e x action
*/
func (a *Client) ActionsStartMySQLShowIndexAction(params *ActionsStartMySQLShowIndexActionParams) (*ActionsStartMySQLShowIndexActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLShowIndexActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLShowIndexAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLShowIndex",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLShowIndexActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLShowIndexActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLShowIndexActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartMySQLShowTableStatusAction starts my SQL show table status action starts my SQL s h o w t a b l e s t a t u s action
*/
func (a *Client) ActionsStartMySQLShowTableStatusAction(params *ActionsStartMySQLShowTableStatusActionParams) (*ActionsStartMySQLShowTableStatusActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartMySQLShowTableStatusActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartMySQLShowTableStatusAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartMySQLShowTableStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartMySQLShowTableStatusActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartMySQLShowTableStatusActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartMySQLShowTableStatusActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartPTSummaryAction starts p t summary action starts pt summary action
*/
func (a *Client) ActionsStartPTSummaryAction(params *ActionsStartPTSummaryActionParams) (*ActionsStartPTSummaryActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartPTSummaryActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartPTSummaryAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartPTSummary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartPTSummaryActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartPTSummaryActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartPTSummaryActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartPostgreSQLShowCreateTableAction starts postgre SQL show create table action starts postgre SQL s h o w c r e a t e t a b l e action
*/
func (a *Client) ActionsStartPostgreSQLShowCreateTableAction(params *ActionsStartPostgreSQLShowCreateTableActionParams) (*ActionsStartPostgreSQLShowCreateTableActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartPostgreSQLShowCreateTableActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartPostgreSQLShowCreateTableAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartPostgreSQLShowCreateTable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartPostgreSQLShowCreateTableActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartPostgreSQLShowCreateTableActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartPostgreSQLShowCreateTableActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionsStartPostgreSQLShowIndexAction starts postgre SQL show index action starts postgre SQL s h o w i n d e x action
*/
func (a *Client) ActionsStartPostgreSQLShowIndexAction(params *ActionsStartPostgreSQLShowIndexActionParams) (*ActionsStartPostgreSQLShowIndexActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsStartPostgreSQLShowIndexActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_StartPostgreSQLShowIndexAction",
		Method:             "POST",
		PathPattern:        "/v1/management/Actions/StartPostgreSQLShowIndex",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionsStartPostgreSQLShowIndexActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsStartPostgreSQLShowIndexActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsStartPostgreSQLShowIndexActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
