// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActionsStartMySQLExplainTraditionalJSONActionReader is a Reader for the ActionsStartMySQLExplainTraditionalJSONAction structure.
type ActionsStartMySQLExplainTraditionalJSONActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActionsStartMySQLExplainTraditionalJSONActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActionsStartMySQLExplainTraditionalJSONActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewActionsStartMySQLExplainTraditionalJSONActionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewActionsStartMySQLExplainTraditionalJSONActionOK creates a ActionsStartMySQLExplainTraditionalJSONActionOK with default headers values
func NewActionsStartMySQLExplainTraditionalJSONActionOK() *ActionsStartMySQLExplainTraditionalJSONActionOK {
	return &ActionsStartMySQLExplainTraditionalJSONActionOK{}
}

/*ActionsStartMySQLExplainTraditionalJSONActionOK handles this case with default header values.

A successful response.
*/
type ActionsStartMySQLExplainTraditionalJSONActionOK struct {
	Payload *ActionsStartMySQLExplainTraditionalJSONActionOKBody
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Actions/StartMySQLExplainTraditionalJSON][%d] actionsStartMySqlExplainTraditionalJsonActionOk  %+v", 200, o.Payload)
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionOK) GetPayload() *ActionsStartMySQLExplainTraditionalJSONActionOKBody {
	return o.Payload
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionsStartMySQLExplainTraditionalJSONActionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionsStartMySQLExplainTraditionalJSONActionDefault creates a ActionsStartMySQLExplainTraditionalJSONActionDefault with default headers values
func NewActionsStartMySQLExplainTraditionalJSONActionDefault(code int) *ActionsStartMySQLExplainTraditionalJSONActionDefault {
	return &ActionsStartMySQLExplainTraditionalJSONActionDefault{
		_statusCode: code,
	}
}

/*ActionsStartMySQLExplainTraditionalJSONActionDefault handles this case with default header values.

An unexpected error response.
*/
type ActionsStartMySQLExplainTraditionalJSONActionDefault struct {
	_statusCode int

	Payload *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody
}

// Code gets the status code for the actions start my SQL explain traditional JSON action default response
func (o *ActionsStartMySQLExplainTraditionalJSONActionDefault) Code() int {
	return o._statusCode
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/Actions/StartMySQLExplainTraditionalJSON][%d] Actions_StartMySQLExplainTraditionalJSONAction default  %+v", o._statusCode, o.Payload)
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionDefault) GetPayload() *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody {
	return o.Payload
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionsStartMySQLExplainTraditionalJSONActionDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ActionsStartMySQLExplainTraditionalJSONActionBody actions start my SQL explain traditional JSON action body
swagger:model ActionsStartMySQLExplainTraditionalJSONActionBody
*/
type ActionsStartMySQLExplainTraditionalJSONActionBody struct {

	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// SQL query. Required.
	Query string `json:"query,omitempty"`

	// Database name. Required if it can't be deduced from the query.
	Database string `json:"database,omitempty"`
}

// Validate validates this actions start my SQL explain traditional JSON action body
func (o *ActionsStartMySQLExplainTraditionalJSONActionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionBody) UnmarshalBinary(b []byte) error {
	var res ActionsStartMySQLExplainTraditionalJSONActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ActionsStartMySQLExplainTraditionalJSONActionDefaultBody actions start my SQL explain traditional JSON action default body
swagger:model ActionsStartMySQLExplainTraditionalJSONActionDefaultBody
*/
type ActionsStartMySQLExplainTraditionalJSONActionDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this actions start my SQL explain traditional JSON action default body
func (o *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Actions_StartMySQLExplainTraditionalJSONAction default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionDefaultBody) UnmarshalBinary(b []byte) error {
	var res ActionsStartMySQLExplainTraditionalJSONActionDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ActionsStartMySQLExplainTraditionalJSONActionOKBody actions start my SQL explain traditional JSON action OK body
swagger:model ActionsStartMySQLExplainTraditionalJSONActionOKBody
*/
type ActionsStartMySQLExplainTraditionalJSONActionOKBody struct {

	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this actions start my SQL explain traditional JSON action OK body
func (o *ActionsStartMySQLExplainTraditionalJSONActionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionsStartMySQLExplainTraditionalJSONActionOKBody) UnmarshalBinary(b []byte) error {
	var res ActionsStartMySQLExplainTraditionalJSONActionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
