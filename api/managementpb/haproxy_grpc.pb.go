// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: managementpb/haproxy.proto

package managementpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HAProxyClient is the client API for HAProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HAProxyClient interface {
	// AddHAProxy adds HAProxy service and adds external exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds an "external exporter" agent to inventory.
	AddHAProxy(ctx context.Context, in *AddHAProxyRequest, opts ...grpc.CallOption) (*AddHAProxyResponse, error)
}

type hAProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewHAProxyClient(cc grpc.ClientConnInterface) HAProxyClient {
	return &hAProxyClient{cc}
}

func (c *hAProxyClient) AddHAProxy(ctx context.Context, in *AddHAProxyRequest, opts ...grpc.CallOption) (*AddHAProxyResponse, error) {
	out := new(AddHAProxyResponse)
	err := c.cc.Invoke(ctx, "/management.HAProxy/AddHAProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HAProxyServer is the server API for HAProxy service.
// All implementations must embed UnimplementedHAProxyServer
// for forward compatibility
type HAProxyServer interface {
	// AddHAProxy adds HAProxy service and adds external exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds an "external exporter" agent to inventory.
	AddHAProxy(context.Context, *AddHAProxyRequest) (*AddHAProxyResponse, error)
	mustEmbedUnimplementedHAProxyServer()
}

// UnimplementedHAProxyServer must be embedded to have forward compatible implementations.
type UnimplementedHAProxyServer struct{}

func (UnimplementedHAProxyServer) AddHAProxy(context.Context, *AddHAProxyRequest) (*AddHAProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHAProxy not implemented")
}
func (UnimplementedHAProxyServer) mustEmbedUnimplementedHAProxyServer() {}

// UnsafeHAProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HAProxyServer will
// result in compilation errors.
type UnsafeHAProxyServer interface {
	mustEmbedUnimplementedHAProxyServer()
}

func RegisterHAProxyServer(s grpc.ServiceRegistrar, srv HAProxyServer) {
	s.RegisterService(&HAProxy_ServiceDesc, srv)
}

func _HAProxy_AddHAProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHAProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyServer).AddHAProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.HAProxy/AddHAProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyServer).AddHAProxy(ctx, req.(*AddHAProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HAProxy_ServiceDesc is the grpc.ServiceDesc for HAProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HAProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.HAProxy",
	HandlerType: (*HAProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHAProxy",
			Handler:    _HAProxy_AddHAProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/haproxy.proto",
}
