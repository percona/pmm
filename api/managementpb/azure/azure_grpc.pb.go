// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: managementpb/azure/azure.proto

package azurev1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AzureDatabaseClient is the client API for AzureDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AzureDatabaseClient interface {
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(ctx context.Context, in *DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(ctx context.Context, in *AddAzureDatabaseRequest, opts ...grpc.CallOption) (*AddAzureDatabaseResponse, error)
}

type azureDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewAzureDatabaseClient(cc grpc.ClientConnInterface) AzureDatabaseClient {
	return &azureDatabaseClient{cc}
}

func (c *azureDatabaseClient) DiscoverAzureDatabase(ctx context.Context, in *DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*DiscoverAzureDatabaseResponse, error) {
	out := new(DiscoverAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, "/azure.v1beta1.AzureDatabase/DiscoverAzureDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *azureDatabaseClient) AddAzureDatabase(ctx context.Context, in *AddAzureDatabaseRequest, opts ...grpc.CallOption) (*AddAzureDatabaseResponse, error) {
	out := new(AddAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, "/azure.v1beta1.AzureDatabase/AddAzureDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AzureDatabaseServer is the server API for AzureDatabase service.
// All implementations must embed UnimplementedAzureDatabaseServer
// for forward compatibility
type AzureDatabaseServer interface {
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(context.Context, *DiscoverAzureDatabaseRequest) (*DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(context.Context, *AddAzureDatabaseRequest) (*AddAzureDatabaseResponse, error)
	mustEmbedUnimplementedAzureDatabaseServer()
}

// UnimplementedAzureDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedAzureDatabaseServer struct{}

func (UnimplementedAzureDatabaseServer) DiscoverAzureDatabase(context.Context, *DiscoverAzureDatabaseRequest) (*DiscoverAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverAzureDatabase not implemented")
}

func (UnimplementedAzureDatabaseServer) AddAzureDatabase(context.Context, *AddAzureDatabaseRequest) (*AddAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureDatabase not implemented")
}
func (UnimplementedAzureDatabaseServer) mustEmbedUnimplementedAzureDatabaseServer() {}

// UnsafeAzureDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AzureDatabaseServer will
// result in compilation errors.
type UnsafeAzureDatabaseServer interface {
	mustEmbedUnimplementedAzureDatabaseServer()
}

func RegisterAzureDatabaseServer(s grpc.ServiceRegistrar, srv AzureDatabaseServer) {
	s.RegisterService(&AzureDatabase_ServiceDesc, srv)
}

func _AzureDatabase_DiscoverAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AzureDatabaseServer).DiscoverAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azure.v1beta1.AzureDatabase/DiscoverAzureDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AzureDatabaseServer).DiscoverAzureDatabase(ctx, req.(*DiscoverAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AzureDatabase_AddAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AzureDatabaseServer).AddAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azure.v1beta1.AzureDatabase/AddAzureDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AzureDatabaseServer).AddAzureDatabase(ctx, req.(*AddAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AzureDatabase_ServiceDesc is the grpc.ServiceDesc for AzureDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AzureDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azure.v1beta1.AzureDatabase",
	HandlerType: (*AzureDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverAzureDatabase",
			Handler:    _AzureDatabase_DiscoverAzureDatabase_Handler,
		},
		{
			MethodName: "AddAzureDatabase",
			Handler:    _AzureDatabase_AddAzureDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/azure/azure.proto",
}
