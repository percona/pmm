// Code generated by protoc-gen-go. DO NOT EDIT.
// source: managementpb/discovery.proto

package managementpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiscoverRDSRequest struct {
	// AWS Access key. Optional.
	AwsAccessKey string `protobuf:"bytes,1,opt,name=aws_access_key,json=awsAccessKey,proto3" json:"aws_access_key,omitempty"`
	// AWS Secret key. Optional.
	AwsSecretKey         string   `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverRDSRequest) Reset()         { *m = DiscoverRDSRequest{} }
func (m *DiscoverRDSRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverRDSRequest) ProtoMessage()    {}
func (*DiscoverRDSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52e3d9a4900498f, []int{0}
}

func (m *DiscoverRDSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverRDSRequest.Unmarshal(m, b)
}
func (m *DiscoverRDSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverRDSRequest.Marshal(b, m, deterministic)
}
func (m *DiscoverRDSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverRDSRequest.Merge(m, src)
}
func (m *DiscoverRDSRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoverRDSRequest.Size(m)
}
func (m *DiscoverRDSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverRDSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverRDSRequest proto.InternalMessageInfo

func (m *DiscoverRDSRequest) GetAwsAccessKey() string {
	if m != nil {
		return m.AwsAccessKey
	}
	return ""
}

func (m *DiscoverRDSRequest) GetAwsSecretKey() string {
	if m != nil {
		return m.AwsSecretKey
	}
	return ""
}

type DiscoverRDSResponse struct {
	// RDS instance ID
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// AWS Region
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Address used to connect to it
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Engine: MySQL, Postgres, etc. Maybe we could use an enum type for this
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// Engine version. This is useful to know in advance which options might be
	// enabled by default for RDS exporters.
	EngineVersion        string   `protobuf:"bytes,5,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverRDSResponse) Reset()         { *m = DiscoverRDSResponse{} }
func (m *DiscoverRDSResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverRDSResponse) ProtoMessage()    {}
func (*DiscoverRDSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52e3d9a4900498f, []int{1}
}

func (m *DiscoverRDSResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverRDSResponse.Unmarshal(m, b)
}
func (m *DiscoverRDSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverRDSResponse.Marshal(b, m, deterministic)
}
func (m *DiscoverRDSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverRDSResponse.Merge(m, src)
}
func (m *DiscoverRDSResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoverRDSResponse.Size(m)
}
func (m *DiscoverRDSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverRDSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverRDSResponse proto.InternalMessageInfo

func (m *DiscoverRDSResponse) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *DiscoverRDSResponse) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DiscoverRDSResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DiscoverRDSResponse) GetEngine() string {
	if m != nil {
		return m.Engine
	}
	return ""
}

func (m *DiscoverRDSResponse) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*DiscoverRDSRequest)(nil), "management.DiscoverRDSRequest")
	proto.RegisterType((*DiscoverRDSResponse)(nil), "management.DiscoverRDSResponse")
}

func init() { proto.RegisterFile("managementpb/discovery.proto", fileDescriptor_a52e3d9a4900498f) }

var fileDescriptor_a52e3d9a4900498f = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x8e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0x02, 0xad, 0xea, 0x96, 0x2e, 0x8c, 0x84, 0xa2, 0xa8, 0xa2, 0x25, 0x80, 0xca,
	0xbf, 0xc6, 0x02, 0x76, 0xec, 0x82, 0xca, 0x02, 0x15, 0xb1, 0x48, 0x25, 0x16, 0x6c, 0x82, 0x9b,
	0xbc, 0x5a, 0x16, 0xad, 0x1d, 0x6c, 0xb7, 0x51, 0xb6, 0x88, 0x13, 0xcc, 0x1c, 0x62, 0x0e, 0x34,
	0x57, 0x98, 0x83, 0x8c, 0x6a, 0x27, 0x6d, 0x47, 0xd5, 0xac, 0x92, 0xf7, 0x7d, 0x3f, 0xbf, 0xef,
	0x25, 0xcf, 0x68, 0xb8, 0xa1, 0x82, 0x32, 0xd8, 0x80, 0x30, 0xc5, 0x92, 0xe4, 0x5c, 0x67, 0x72,
	0x07, 0xaa, 0x8a, 0x0a, 0x25, 0x8d, 0xc4, 0xe8, 0xe8, 0x06, 0x43, 0x26, 0x25, 0x5b, 0x03, 0xa1,
	0x05, 0x27, 0x54, 0x08, 0x69, 0xa8, 0xe1, 0x52, 0x68, 0x47, 0x06, 0xef, 0xed, 0x23, 0x9b, 0x32,
	0x10, 0x53, 0x5d, 0x52, 0xc6, 0x40, 0x11, 0x59, 0x58, 0xe2, 0x9c, 0x0e, 0x7f, 0x23, 0x3c, 0xab,
	0xa3, 0x92, 0xd9, 0x22, 0x81, 0xbf, 0x5b, 0xd0, 0x06, 0xbf, 0x44, 0x03, 0x5a, 0xea, 0x94, 0x66,
	0x19, 0x68, 0x9d, 0xfe, 0x81, 0xca, 0xf7, 0xc6, 0xde, 0xeb, 0x6e, 0xd2, 0xa7, 0xa5, 0x8e, 0xad,
	0x38, 0x87, 0xaa, 0xa1, 0x34, 0x64, 0x0a, 0x8c, 0xa5, 0x5a, 0x07, 0x6a, 0x61, 0xc5, 0x39, 0x54,
	0xe1, 0x95, 0x87, 0x9e, 0xdc, 0x89, 0xd0, 0x85, 0x14, 0x1a, 0xf0, 0x08, 0xf5, 0xb8, 0xd0, 0x86,
	0x8a, 0x0c, 0x52, 0x9e, 0xd7, 0x01, 0xa8, 0x91, 0xbe, 0xe5, 0xf8, 0x29, 0x6a, 0x2b, 0x60, 0x5c,
	0x8a, 0xba, 0x6d, 0x5d, 0x61, 0x1f, 0x75, 0x68, 0x9e, 0x2b, 0xd0, 0xda, 0x7f, 0x60, 0x8d, 0xa6,
	0xdc, 0x9f, 0x00, 0xc1, 0xb8, 0x00, 0xff, 0xa1, 0x3b, 0xe1, 0x2a, 0xfc, 0x0a, 0x0d, 0xdc, 0x5b,
	0xba, 0x03, 0xa5, 0xf7, 0x1d, 0x1f, 0x59, 0xff, 0xb1, 0x53, 0x7f, 0x3a, 0xf1, 0xe3, 0x7f, 0x0f,
	0x75, 0x9b, 0x49, 0x2b, 0x5c, 0xa2, 0xde, 0xc9, 0xd8, 0xf8, 0x59, 0x74, 0xdc, 0x40, 0x74, 0xfe,
	0xcb, 0x82, 0xd1, 0xbd, 0xbe, 0xfb, 0xde, 0x70, 0xf2, 0xef, 0xfa, 0xe6, 0xb2, 0xf5, 0x3c, 0x1c,
	0x92, 0xdd, 0x07, 0x72, 0x64, 0xc9, 0x21, 0x91, 0x24, 0xb3, 0xc5, 0x67, 0xef, 0xed, 0x97, 0xf4,
	0x22, 0xfe, 0x91, 0x7c, 0x47, 0x9d, 0x1c, 0x56, 0x74, 0xbb, 0x36, 0x38, 0x46, 0x38, 0x16, 0x63,
	0x50, 0x4a, 0xaa, 0xb1, 0xaa, 0xbb, 0x45, 0xf8, 0x1d, 0x7a, 0x13, 0x4c, 0x5e, 0x90, 0x1c, 0x56,
	0x5c, 0x70, 0xb7, 0xdd, 0xd3, 0x0b, 0xf4, 0x75, 0x8f, 0x37, 0xd9, 0xbf, 0xfa, 0xa7, 0xd6, 0xb2,
	0x6d, 0x57, 0xff, 0xe9, 0x36, 0x00, 0x00, 0xff, 0xff, 0x26, 0xb6, 0xdf, 0x44, 0x72, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryClient interface {
	// DiscoverRDS discovers RDS instances.
	DiscoverRDS(ctx context.Context, in *DiscoverRDSRequest, opts ...grpc.CallOption) (*DiscoverRDSResponse, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) DiscoverRDS(ctx context.Context, in *DiscoverRDSRequest, opts ...grpc.CallOption) (*DiscoverRDSResponse, error) {
	out := new(DiscoverRDSResponse)
	err := c.cc.Invoke(ctx, "/management.Discovery/DiscoverRDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
type DiscoveryServer interface {
	// DiscoverRDS discovers RDS instances.
	DiscoverRDS(context.Context, *DiscoverRDSRequest) (*DiscoverRDSResponse, error)
}

// UnimplementedDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (*UnimplementedDiscoveryServer) DiscoverRDS(ctx context.Context, req *DiscoverRDSRequest) (*DiscoverRDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverRDS not implemented")
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_DiscoverRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).DiscoverRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Discovery/DiscoverRDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).DiscoverRDS(ctx, req.(*DiscoverRDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverRDS",
			Handler:    _Discovery_DiscoverRDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/discovery.proto",
}
