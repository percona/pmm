// Code generated by protoc-gen-go. DO NOT EDIT.
// source: managementpb/mongodb.proto

package managementpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	inventorypb "github.com/percona/pmm/api/inventorypb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddMongoDBRequest struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Create a new Node with those parameters.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	AddNode *AddNodeParams `protobuf:"bytes,3,opt,name=add_node,json=addNode,proto3" json:"add_node,omitempty"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node and Service access address (DNS name or IP). Required.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Service Access port. Required.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// The "pmm-agent" identifier which should run agents. Required.
	PmmAgentId string `protobuf:"bytes,7,opt,name=pmm_agent_id,json=pmmAgentId,proto3" json:"pmm_agent_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,10,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// MongoDB username for exporter and QAN agent access.
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	// MongoDB password for exporter and QAN agent access.
	Password string `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	// If true, adds qan-mongodb-profiler-agent for provided service.
	QanMongodbProfiler bool `protobuf:"varint,13,opt,name=qan_mongodb_profiler,json=qanMongodbProfiler,proto3" json:"qan_mongodb_profiler,omitempty"`
	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `protobuf:"bytes,14,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Skip connection check.
	SkipConnectionCheck bool `protobuf:"varint,15,opt,name=skip_connection_check,json=skipConnectionCheck,proto3" json:"skip_connection_check,omitempty"`
	// Use TLS for database connections.
	Tls bool `protobuf:"varint,17,opt,name=tls,proto3" json:"tls,omitempty"`
	// Skip TLS certificate and hostname validation.
	TlsSkipVerify        bool     `protobuf:"varint,18,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMongoDBRequest) Reset()         { *m = AddMongoDBRequest{} }
func (m *AddMongoDBRequest) String() string { return proto.CompactTextString(m) }
func (*AddMongoDBRequest) ProtoMessage()    {}
func (*AddMongoDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_593aa4f9c0b43a5e, []int{0}
}

func (m *AddMongoDBRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMongoDBRequest.Unmarshal(m, b)
}
func (m *AddMongoDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMongoDBRequest.Marshal(b, m, deterministic)
}
func (m *AddMongoDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMongoDBRequest.Merge(m, src)
}
func (m *AddMongoDBRequest) XXX_Size() int {
	return xxx_messageInfo_AddMongoDBRequest.Size(m)
}
func (m *AddMongoDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMongoDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMongoDBRequest proto.InternalMessageInfo

func (m *AddMongoDBRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AddMongoDBRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddMongoDBRequest) GetAddNode() *AddNodeParams {
	if m != nil {
		return m.AddNode
	}
	return nil
}

func (m *AddMongoDBRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddMongoDBRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddMongoDBRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AddMongoDBRequest) GetPmmAgentId() string {
	if m != nil {
		return m.PmmAgentId
	}
	return ""
}

func (m *AddMongoDBRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *AddMongoDBRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AddMongoDBRequest) GetReplicationSet() string {
	if m != nil {
		return m.ReplicationSet
	}
	return ""
}

func (m *AddMongoDBRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddMongoDBRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddMongoDBRequest) GetQanMongodbProfiler() bool {
	if m != nil {
		return m.QanMongodbProfiler
	}
	return false
}

func (m *AddMongoDBRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddMongoDBRequest) GetSkipConnectionCheck() bool {
	if m != nil {
		return m.SkipConnectionCheck
	}
	return false
}

func (m *AddMongoDBRequest) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

func (m *AddMongoDBRequest) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

type AddMongoDBResponse struct {
	Service              *inventorypb.MongoDBService          `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	MongodbExporter      *inventorypb.MongoDBExporter         `protobuf:"bytes,2,opt,name=mongodb_exporter,json=mongodbExporter,proto3" json:"mongodb_exporter,omitempty"`
	QanMongodbProfiler   *inventorypb.QANMongoDBProfilerAgent `protobuf:"bytes,3,opt,name=qan_mongodb_profiler,json=qanMongodbProfiler,proto3" json:"qan_mongodb_profiler,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *AddMongoDBResponse) Reset()         { *m = AddMongoDBResponse{} }
func (m *AddMongoDBResponse) String() string { return proto.CompactTextString(m) }
func (*AddMongoDBResponse) ProtoMessage()    {}
func (*AddMongoDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_593aa4f9c0b43a5e, []int{1}
}

func (m *AddMongoDBResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMongoDBResponse.Unmarshal(m, b)
}
func (m *AddMongoDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMongoDBResponse.Marshal(b, m, deterministic)
}
func (m *AddMongoDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMongoDBResponse.Merge(m, src)
}
func (m *AddMongoDBResponse) XXX_Size() int {
	return xxx_messageInfo_AddMongoDBResponse.Size(m)
}
func (m *AddMongoDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMongoDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMongoDBResponse proto.InternalMessageInfo

func (m *AddMongoDBResponse) GetService() *inventorypb.MongoDBService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *AddMongoDBResponse) GetMongodbExporter() *inventorypb.MongoDBExporter {
	if m != nil {
		return m.MongodbExporter
	}
	return nil
}

func (m *AddMongoDBResponse) GetQanMongodbProfiler() *inventorypb.QANMongoDBProfilerAgent {
	if m != nil {
		return m.QanMongodbProfiler
	}
	return nil
}

func init() {
	proto.RegisterType((*AddMongoDBRequest)(nil), "management.AddMongoDBRequest")
	proto.RegisterMapType((map[string]string)(nil), "management.AddMongoDBRequest.CustomLabelsEntry")
	proto.RegisterType((*AddMongoDBResponse)(nil), "management.AddMongoDBResponse")
}

func init() { proto.RegisterFile("managementpb/mongodb.proto", fileDescriptor_593aa4f9c0b43a5e) }

var fileDescriptor_593aa4f9c0b43a5e = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0x71, 0xda, 0x26, 0xe9, 0x24, 0x69, 0xda, 0xa1, 0x88, 0xc1, 0x7c, 0x34, 0x8a, 0x04,
	0x04, 0x44, 0x62, 0x48, 0x11, 0x42, 0xbd, 0x41, 0x69, 0xe9, 0x45, 0x25, 0x5a, 0x15, 0xb7, 0x42,
	0x88, 0x1b, 0x6b, 0xe2, 0x39, 0x75, 0xad, 0xd8, 0x33, 0xee, 0xcc, 0x24, 0x21, 0x17, 0xdc, 0xf0,
	0x0a, 0xfb, 0x68, 0xfb, 0x00, 0x2b, 0xad, 0x56, 0x7d, 0x8e, 0xd5, 0x8c, 0xed, 0x7c, 0x6c, 0xb7,
	0x7b, 0x95, 0x39, 0xe7, 0xf7, 0x9f, 0x33, 0xe7, 0x2b, 0x46, 0x6e, 0x4a, 0x39, 0x8d, 0x20, 0x05,
	0xae, 0xb3, 0xb1, 0x97, 0x0a, 0x1e, 0x09, 0x36, 0x1e, 0x64, 0x52, 0x68, 0x81, 0xd1, 0x8a, 0xb9,
	0xbf, 0x44, 0xb1, 0xbe, 0x9f, 0x8e, 0x07, 0xa1, 0x48, 0xbd, 0x74, 0x1e, 0xeb, 0x89, 0x98, 0x7b,
	0x91, 0xe8, 0x5b, 0x61, 0x7f, 0x46, 0x93, 0x98, 0x51, 0x2d, 0xa4, 0xf2, 0x96, 0xc7, 0x3c, 0x86,
	0xfb, 0x45, 0x24, 0x44, 0x94, 0x80, 0x47, 0xb3, 0xd8, 0xa3, 0x9c, 0x0b, 0x4d, 0x75, 0x2c, 0xb8,
	0x2a, 0x28, 0x89, 0xf9, 0x0c, 0xb8, 0x16, 0x72, 0x91, 0x8d, 0x3d, 0x1a, 0x01, 0xd7, 0x25, 0x71,
	0xd7, 0x89, 0x02, 0x39, 0x8b, 0x43, 0x58, 0xb2, 0x8d, 0x9c, 0x0b, 0x58, 0xb0, 0x1f, 0xec, 0x4f,
	0xd8, 0x8f, 0x80, 0xf7, 0xd5, 0x9c, 0x46, 0x11, 0x48, 0x4f, 0x64, 0xf6, 0xcd, 0xa7, 0xef, 0x77,
	0x1f, 0x77, 0xd0, 0xc1, 0x88, 0xb1, 0x4b, 0x53, 0xf6, 0xef, 0xa7, 0x3e, 0x3c, 0x4c, 0x41, 0x69,
	0xfc, 0x29, 0xaa, 0x71, 0xc1, 0x20, 0x88, 0x19, 0x71, 0x3a, 0x4e, 0x6f, 0xd7, 0xaf, 0x1a, 0xf3,
	0x82, 0xe1, 0xcf, 0xd1, 0xae, 0x05, 0x9c, 0xa6, 0x40, 0x2a, 0x16, 0xd5, 0x8d, 0xe3, 0x8a, 0xa6,
	0x80, 0x7f, 0x46, 0x75, 0xca, 0x58, 0x60, 0x6c, 0xb2, 0xd5, 0x71, 0x7a, 0x8d, 0xe1, 0x67, 0x83,
	0x55, 0xa2, 0x83, 0x11, 0x63, 0x57, 0x82, 0xc1, 0x35, 0x95, 0x34, 0x55, 0x7e, 0x8d, 0xe6, 0x26,
	0xfe, 0x0e, 0x35, 0x8b, 0x02, 0xf2, 0xa8, 0xdb, 0x26, 0xea, 0x69, 0xf5, 0xf5, 0xab, 0xa3, 0xca,
	0xdf, 0x8e, 0xdf, 0x28, 0x98, 0x7d, 0xa0, 0x83, 0xcc, 0x2d, 0x09, 0x4a, 0x91, 0x9d, 0x0d, 0x55,
	0xe9, 0xc6, 0x2e, 0xda, 0xce, 0x84, 0xd4, 0xa4, 0xda, 0x71, 0x7a, 0xad, 0x1c, 0xef, 0x7f, 0xe4,
	0x5b, 0x1f, 0xee, 0xa1, 0x66, 0x96, 0xa6, 0x81, 0x6d, 0xb2, 0xa9, 0xac, 0xb6, 0x11, 0x02, 0x65,
	0x69, 0x3a, 0x32, 0xe8, 0x82, 0xe1, 0x0e, 0x6a, 0x00, 0x9f, 0xc5, 0x52, 0x70, 0x93, 0x38, 0xa9,
	0xdb, 0x3a, 0xd7, 0x5d, 0x98, 0xa0, 0x5a, 0x98, 0x4c, 0x95, 0x06, 0x49, 0x76, 0x2d, 0x2d, 0x4d,
	0xfc, 0x2d, 0x6a, 0x4b, 0xc8, 0x92, 0x38, 0xb4, 0x6d, 0x0e, 0x14, 0x68, 0x82, 0xac, 0x62, 0x6f,
	0xcd, 0x7d, 0x03, 0x1a, 0xbb, 0xa8, 0x3e, 0x55, 0x20, 0x6d, 0xcd, 0x8d, 0xbc, 0x93, 0xa5, 0x6d,
	0x58, 0x46, 0x95, 0x9a, 0x0b, 0xc9, 0x48, 0x33, 0x67, 0xa5, 0x8d, 0x7f, 0x44, 0x87, 0x0f, 0x94,
	0x07, 0xc5, 0xa2, 0x06, 0x99, 0x14, 0x77, 0x71, 0x02, 0x92, 0xb4, 0x3a, 0x4e, 0xaf, 0xee, 0xe3,
	0x07, 0xca, 0x2f, 0x73, 0x74, 0x5d, 0x10, 0x7c, 0x8b, 0x5a, 0xe1, 0x54, 0x69, 0x91, 0x06, 0x09,
	0x1d, 0x43, 0xa2, 0xc8, 0x5e, 0x67, 0xab, 0xd7, 0x18, 0x7a, 0xef, 0x0c, 0x67, 0x73, 0x07, 0x06,
	0x67, 0xf6, 0xca, 0x1f, 0xf6, 0xc6, 0x39, 0xd7, 0x72, 0xe1, 0x37, 0xc3, 0x35, 0x17, 0x1e, 0xa2,
	0x4f, 0xd4, 0x24, 0xce, 0x82, 0x50, 0x70, 0x0e, 0xa1, 0x2d, 0x36, 0xbc, 0x87, 0x70, 0x42, 0xda,
	0x36, 0x91, 0x8f, 0x0d, 0x3c, 0x5b, 0xb2, 0x33, 0x83, 0xf0, 0x3e, 0xda, 0xd2, 0x89, 0x22, 0x07,
	0x56, 0x61, 0x8e, 0xf8, 0x1b, 0xd4, 0xd6, 0x89, 0x0a, 0x6c, 0xa4, 0x19, 0xc8, 0xf8, 0x6e, 0x41,
	0xb0, 0xa5, 0x2d, 0x9d, 0xa8, 0x9b, 0x49, 0x9c, 0xfd, 0x65, 0x9d, 0xee, 0x6f, 0xe8, 0xe0, 0x49,
	0x42, 0x26, 0xdc, 0x04, 0x16, 0xc5, 0x8a, 0x9a, 0x23, 0x3e, 0x44, 0x3b, 0x33, 0x9a, 0x4c, 0xcb,
	0xdd, 0xcc, 0x8d, 0x93, 0xca, 0xaf, 0x4e, 0xf7, 0xd1, 0x41, 0x78, 0xbd, 0x48, 0x95, 0x09, 0xae,
	0x00, 0x1f, 0xa3, 0x5a, 0xb1, 0x61, 0x36, 0x8c, 0x59, 0xd9, 0xe5, 0xff, 0x6e, 0x50, 0x88, 0x6f,
	0x72, 0x81, 0x5f, 0x2a, 0xf1, 0x39, 0xda, 0x2f, 0xdb, 0x0f, 0xff, 0x9a, 0xdd, 0x02, 0x69, 0x1f,
	0x6c, 0x0c, 0xdd, 0xa7, 0xb7, 0xcf, 0x0b, 0x85, 0xdf, 0x2e, 0xee, 0x94, 0x0e, 0x7c, 0xfb, 0xcc,
	0x24, 0xf3, 0xff, 0x4e, 0x77, 0x2d, 0xd4, 0x9f, 0xa3, 0xab, 0x22, 0x5a, 0x39, 0x54, 0xbb, 0xaa,
	0xef, 0x9b, 0xf6, 0xf0, 0x3f, 0x54, 0x2b, 0xb4, 0x58, 0x22, 0xb4, 0x2a, 0x19, 0x7f, 0xf9, 0xc1,
	0x79, 0xbb, 0x5f, 0x3d, 0x87, 0xf3, 0x4e, 0x75, 0xbf, 0xfe, 0xff, 0xe5, 0x9b, 0x17, 0x95, 0xa3,
	0xae, 0xeb, 0xcd, 0x7e, 0xf2, 0x56, 0x52, 0xaf, 0xd0, 0x79, 0x23, 0xc6, 0x4e, 0x9c, 0xef, 0x4f,
	0xf7, 0xfe, 0x69, 0xae, 0x7f, 0x9c, 0xc6, 0x55, 0xfb, 0x9d, 0x39, 0x7e, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x87, 0x64, 0x7d, 0x8b, 0x67, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MongoDBClient is the client API for MongoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MongoDBClient interface {
	// AddMongoDB adds MongoDB Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMongoDB(ctx context.Context, in *AddMongoDBRequest, opts ...grpc.CallOption) (*AddMongoDBResponse, error)
}

type mongoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDBClient(cc grpc.ClientConnInterface) MongoDBClient {
	return &mongoDBClient{cc}
}

func (c *mongoDBClient) AddMongoDB(ctx context.Context, in *AddMongoDBRequest, opts ...grpc.CallOption) (*AddMongoDBResponse, error) {
	out := new(AddMongoDBResponse)
	err := c.cc.Invoke(ctx, "/management.MongoDB/AddMongoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDBServer is the server API for MongoDB service.
type MongoDBServer interface {
	// AddMongoDB adds MongoDB Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMongoDB(context.Context, *AddMongoDBRequest) (*AddMongoDBResponse, error)
}

// UnimplementedMongoDBServer can be embedded to have forward compatible implementations.
type UnimplementedMongoDBServer struct {
}

func (*UnimplementedMongoDBServer) AddMongoDB(ctx context.Context, req *AddMongoDBRequest) (*AddMongoDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMongoDB not implemented")
}

func RegisterMongoDBServer(s *grpc.Server, srv MongoDBServer) {
	s.RegisterService(&_MongoDB_serviceDesc, srv)
}

func _MongoDB_AddMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMongoDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServer).AddMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.MongoDB/AddMongoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServer).AddMongoDB(ctx, req.(*AddMongoDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MongoDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.MongoDB",
	HandlerType: (*MongoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMongoDB",
			Handler:    _MongoDB_AddMongoDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/mongodb.proto",
}
