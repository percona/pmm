syntax = "proto3";

package management;

option go_package = "api/managementpb;managementpb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/agents.proto";
import "inventorypb/services.proto";
import "managementpb/metrics.proto";
import "managementpb/service.proto";

// Add External

message AddExternalRequest {
  // Node identifier on which an external exporter is been running.
  // runs_on_node_id always should be passed with node_id.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  string runs_on_node_id = 1;
  // Node name on which a service and node is been running.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  string node_name = 18;
  // Create a new Node with those parameters.
  // add_node always should be passed with address.
  // Exactly one of these parameters should be present: node_id, node_name, add_node.
  AddNodeParams add_node = 19;
  // Node and Exporter access address (DNS name or IP).
  // address always should be passed with add_node.
  string address = 20;
  // Unique across all Services user-defined name. Required.
  string service_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // HTTP basic auth username for collecting metrics.
  string username = 3;
  // HTTP basic auth password for collecting metrics.
  string password = 4;
  // Scheme to generate URI to exporter metrics endpoints.
  string scheme = 5;
  // Path under which metrics are exposed, used to generate URI.
  string metrics_path = 6;
  // Listen port for scraping metrics.
  uint32 listen_port = 7 [
    (validator.field) = {
      int_gt: 0
      int_lt: 65536
    }
  ];
  // Node identifier on which an external service is been running.
  // node_id always should be passed with runs_on_node_id.
  string node_id = 8;
  // Environment name.
  string environment = 9;
  // Cluster name.
  string cluster = 10;
  // Replication set name.
  string replication_set = 11;
  // Custom user-assigned labels for Service.
  map<string, string> custom_labels = 15;
  // Group name of external service.
  string group = 16;
  // Defines metrics flow model for this exporter.
  // Metrics could be pushed to the server with vmagent,
  // pulled by the server, or the server could choose behavior automatically.
  // Node with registered pmm_agent_id must present at pmm-server
  // in case of push metrics_mode.
  MetricsMode metrics_mode = 17;
  // Skip connection check.
  bool skip_connection_check = 21;
}

message AddExternalResponse {
  inventory.ExternalService service = 1;
  inventory.ExternalExporter external_exporter = 2;
}

// External service provides public Management API methods for External Service.
service External {
  // AddExternal adds external service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory, which is running on provided "runs_on_node_id".
  rpc AddExternal(AddExternalRequest) returns (AddExternalResponse) {
    option (google.api.http) = {
      post: "/v1/management/External/Add"
      body: "*"
    };
  }
}
