syntax = "proto3";

package management;

// This option is used to set the default error response for all Swagger APIs generated from this file.
// See also header.json.
// It has to be copy&pasted into each file.
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default"
    value: {
      description: "An error response."
      schema: {
        json_schema: {
          ref: "#/definitions/managementpbErrorResponse"
        }
      }
    }
  }
};
option go_package = "managementpb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/nodes.proto";
import "inventorypb/services.proto";
import "protoc-gen-swagger/options/annotations.proto";

// AddNodeParams is a params to add new node to inventory while adding new service.
message AddNodeParams {
  // Node type to be registered.
  inventory.NodeType node_type = 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id.
  // Must be unique across all Generic Nodes if specified.
  string machine_id = 3;
  // Linux distribution name and version.
  string distro = 4;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 6;
  // Container name.
  string container_name = 7;
  // Node model.
  string node_model = 8;
  // Node region.
  string region = 9;
  // Node availability zone.
  string az = 10;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 11;
}

message RemoveServiceRequest {
  // Service type.
  inventory.ServiceType service_type = 1;
  // Service ID or Service Name is required.
  // Unique randomly generated instance identifier.
  string service_id = 2;
  // Unique across all Services user-defined name.
  string service_name = 3;
}

message RemoveServiceResponse {}

// Service service provides public methods for managing Services.
service Service {
  // RemoveService removes Service with Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {
      post: "/v0/management/Service/Remove"
      body: "*"
    };
  }
}
