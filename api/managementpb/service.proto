syntax = "proto3";

package management;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/nodes.proto";
import "inventorypb/services.proto";
import "managementpb/agent.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "api/managementpb;managementpb";

// AddNodeParams holds node params and is used to add new node to inventory while adding new service.
message AddNodeParams {
  // Node type to be registered.
  inventory.NodeType node_type = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2 [(validator.field) = {string_not_empty: true}];
  // Linux machine-id.
  string machine_id = 3;
  // Linux distribution name and version.
  string distro = 4;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 5;
  // Container name.
  string container_name = 6;
  // Node model.
  string node_model = 7;
  // Node region.
  string region = 8;
  // Node availability zone.
  string az = 9;
  // Custom user-assigned labels for Node.
  map<string, string> custom_labels = 10;
}

message RemoveServiceRequest {
  // Service type.
  inventory.ServiceType service_type = 1;
  // Service ID or Service Name is required.
  // Unique randomly generated instance identifier.
  string service_id = 2;
  // Unique across all Services user-defined name.
  string service_name = 3;
}

message RemoveServiceResponse {}

message GenericService {
  // Unique service identifier.
  string service_id = 1;
  // Service type.
  string service_type = 2;
  // User-defined name unique across all Services.
  string service_name = 3;
  // Database name.
  string database_name = 4;
  // Node identifier where this instance runs.
  string node_id = 5;
  // Node name where this instance runs.
  string node_name = 6;
  // Environment name.
  string environment = 7;
  // Cluster name.
  string cluster = 8;
  // Replication set name.
  string replication_set = 9;
  // Custom user-assigned labels for Service.
  map<string, string> custom_labels = 10;
  // External group name.
  string external_group = 11;
  // Access address (DNS name or IP).
  // Address (and port) or socket is required.
  string address = 12;
  // Access port.
  // Port is required when the address present.
  uint32 port = 13;
  // Access unix socket.
  // Address (and port) or socket is required.
  string socket = 14;
  // Creation timestamp.
  int64 created_at = 15;
  // Last update timestamp.
  int64 updated_at = 16;
  // List of agents related to this service.
  repeated GenericAgent agents = 17;
}

message ListServiceRequest {
  // Return only Services running on that Node.
  string node_id = 1;
  // Return only services filtered by service type.
  inventory.ServiceType service_type = 2;
  // Return only services in this external group.
  string external_group = 3;
}

message ListServiceResponse {
  // List of Services.
  repeated GenericService services = 1;
}

// Service service provides public methods for managing and querying Services.
service Service {
  // RemoveService removes Service with Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/Service/Remove"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove Service"
      description: "Removes a Service along with Agents."
    };
  }
  // ListServices returns a list of Services with a rich set of properties.
  rpc ListServices(ListServiceRequest) returns (ListServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/Service/List"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Services"
      description: "Returns a filtered list of Services."
    };
  }
}
