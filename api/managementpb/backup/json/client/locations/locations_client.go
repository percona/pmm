// Code generated by go-swagger; DO NOT EDIT.

package locations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new locations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for locations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	LocationsAddLocation(params *LocationsAddLocationParams) (*LocationsAddLocationOK, error)

	LocationsChangeLocation(params *LocationsChangeLocationParams) (*LocationsChangeLocationOK, error)

	LocationsListLocations(params *LocationsListLocationsParams) (*LocationsListLocationsOK, error)

	LocationsRemoveLocation(params *LocationsRemoveLocationParams) (*LocationsRemoveLocationOK, error)

	LocationsTestLocationConfig(params *LocationsTestLocationConfigParams) (*LocationsTestLocationConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LocationsAddLocation adds location adds backup location
*/
func (a *Client) LocationsAddLocation(params *LocationsAddLocationParams) (*LocationsAddLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationsAddLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Locations_AddLocation",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Locations/Add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LocationsAddLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationsAddLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationsAddLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LocationsChangeLocation changes location changes backup location
*/
func (a *Client) LocationsChangeLocation(params *LocationsChangeLocationParams) (*LocationsChangeLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationsChangeLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Locations_ChangeLocation",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Locations/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LocationsChangeLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationsChangeLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationsChangeLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LocationsListLocations lists locations returns a list of all backup locations
*/
func (a *Client) LocationsListLocations(params *LocationsListLocationsParams) (*LocationsListLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationsListLocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Locations_ListLocations",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Locations/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LocationsListLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationsListLocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationsListLocationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LocationsRemoveLocation removes location removes existing backup location
*/
func (a *Client) LocationsRemoveLocation(params *LocationsRemoveLocationParams) (*LocationsRemoveLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationsRemoveLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Locations_RemoveLocation",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Locations/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LocationsRemoveLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationsRemoveLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationsRemoveLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LocationsTestLocationConfig tests location config tests backup location and credentials
*/
func (a *Client) LocationsTestLocationConfig(params *LocationsTestLocationConfigParams) (*LocationsTestLocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationsTestLocationConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Locations_TestLocationConfig",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Locations/TestConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LocationsTestLocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationsTestLocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationsTestLocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
