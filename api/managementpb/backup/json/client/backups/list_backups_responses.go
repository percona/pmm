// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListBackupsReader is a Reader for the ListBackups structure.
type ListBackupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListBackupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListBackupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListBackupsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListBackupsOK creates a ListBackupsOK with default headers values
func NewListBackupsOK() *ListBackupsOK {
	return &ListBackupsOK{}
}

/*ListBackupsOK handles this case with default header values.

A successful response.
*/
type ListBackupsOK struct {
	Payload *ListBackupsOKBody
}

func (o *ListBackupsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Backups/List][%d] listBackupsOk  %+v", 200, o.Payload)
}

func (o *ListBackupsOK) GetPayload() *ListBackupsOKBody {
	return o.Payload
}

func (o *ListBackupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackupsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackupsDefault creates a ListBackupsDefault with default headers values
func NewListBackupsDefault(code int) *ListBackupsDefault {
	return &ListBackupsDefault{
		_statusCode: code,
	}
}

/*ListBackupsDefault handles this case with default header values.

An unexpected error response.
*/
type ListBackupsDefault struct {
	_statusCode int

	Payload *ListBackupsDefaultBody
}

// Code gets the status code for the list backups default response
func (o *ListBackupsDefault) Code() int {
	return o._statusCode
}

func (o *ListBackupsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Backups/List][%d] ListBackups default  %+v", o._statusCode, o.Payload)
}

func (o *ListBackupsDefault) GetPayload() *ListBackupsDefaultBody {
	return o.Payload
}

func (o *ListBackupsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackupsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BackupsItems0 Backup represents single Backup Location.
swagger:model BackupsItems0
*/
type BackupsItems0 struct {

	// Machine-readable backup ID.
	BackupID string `json:"backup_id,omitempty"`

	// Backup name
	Name string `json:"name,omitempty"`

	// Database vendor e.g. PostgreSQL, MongoDB, MySQL.
	Vendor string `json:"vendor,omitempty"`

	// Machine-readable location ID.
	LocationID string `json:"location_id,omitempty"`

	// Backup location name.
	LocationName string `json:"location_name,omitempty"`

	// Machine-readable backup service ID.
	ServiceID string `json:"service_id,omitempty"`

	// Backup service name.
	ServiceName string `json:"service_name,omitempty"`

	// DataModel is a model used for performing a backup.
	// Enum: [DATA_MODEL_INVALID PHYSICAL LOGICAL]
	DataModel *string `json:"data_model,omitempty"`

	// Status shows current status of Backup.
	// Enum: [STATUS_INVALID PENDING IN_PROGRESS PAUSED SUCCESS ERROR]
	Status *string `json:"status,omitempty"`

	// Backup creation time.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`
}

// Validate validates this backups items0
func (o *BackupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataModel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backupsItems0TypeDataModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_MODEL_INVALID","PHYSICAL","LOGICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupsItems0TypeDataModelPropEnum = append(backupsItems0TypeDataModelPropEnum, v)
	}
}

const (

	// BackupsItems0DataModelDATAMODELINVALID captures enum value "DATA_MODEL_INVALID"
	BackupsItems0DataModelDATAMODELINVALID string = "DATA_MODEL_INVALID"

	// BackupsItems0DataModelPHYSICAL captures enum value "PHYSICAL"
	BackupsItems0DataModelPHYSICAL string = "PHYSICAL"

	// BackupsItems0DataModelLOGICAL captures enum value "LOGICAL"
	BackupsItems0DataModelLOGICAL string = "LOGICAL"
)

// prop value enum
func (o *BackupsItems0) validateDataModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupsItems0TypeDataModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *BackupsItems0) validateDataModel(formats strfmt.Registry) error {

	if swag.IsZero(o.DataModel) { // not required
		return nil
	}

	// value enum
	if err := o.validateDataModelEnum("data_model", "body", *o.DataModel); err != nil {
		return err
	}

	return nil
}

var backupsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_INVALID","PENDING","IN_PROGRESS","PAUSED","SUCCESS","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupsItems0TypeStatusPropEnum = append(backupsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BackupsItems0StatusSTATUSINVALID captures enum value "STATUS_INVALID"
	BackupsItems0StatusSTATUSINVALID string = "STATUS_INVALID"

	// BackupsItems0StatusPENDING captures enum value "PENDING"
	BackupsItems0StatusPENDING string = "PENDING"

	// BackupsItems0StatusINPROGRESS captures enum value "IN_PROGRESS"
	BackupsItems0StatusINPROGRESS string = "IN_PROGRESS"

	// BackupsItems0StatusPAUSED captures enum value "PAUSED"
	BackupsItems0StatusPAUSED string = "PAUSED"

	// BackupsItems0StatusSUCCESS captures enum value "SUCCESS"
	BackupsItems0StatusSUCCESS string = "SUCCESS"

	// BackupsItems0StatusERROR captures enum value "ERROR"
	BackupsItems0StatusERROR string = "ERROR"
)

// prop value enum
func (o *BackupsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *BackupsItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *BackupsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BackupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BackupsItems0) UnmarshalBinary(b []byte) error {
	var res BackupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListBackupsDefaultBody list backups default body
swagger:model ListBackupsDefaultBody
*/
type ListBackupsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list backups default body
func (o *ListBackupsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackupsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListBackups default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListBackupsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackupsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListBackupsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListBackupsOKBody list backups OK body
swagger:model ListBackupsOKBody
*/
type ListBackupsOKBody struct {

	// backups
	Backups []*BackupsItems0 `json:"backups"`
}

// Validate validates this list backups OK body
func (o *ListBackupsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackupsOKBody) validateBackups(formats strfmt.Registry) error {

	if swag.IsZero(o.Backups) { // not required
		return nil
	}

	for i := 0; i < len(o.Backups); i++ {
		if swag.IsZero(o.Backups[i]) { // not required
			continue
		}

		if o.Backups[i] != nil {
			if err := o.Backups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listBackupsOk" + "." + "backups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListBackupsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackupsOKBody) UnmarshalBinary(b []byte) error {
	var res ListBackupsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
