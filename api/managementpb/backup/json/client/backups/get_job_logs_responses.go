// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetJobLogsReader is a Reader for the GetJobLogs structure.
type GetJobLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJobLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetJobLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetJobLogsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetJobLogsOK creates a GetJobLogsOK with default headers values
func NewGetJobLogsOK() *GetJobLogsOK {
	return &GetJobLogsOK{}
}

/*
GetJobLogsOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetJobLogsOK struct {
	Payload *GetJobLogsOKBody
}

func (o *GetJobLogsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Backups/GetJobLogs][%d] getJobLogsOk  %+v", 200, o.Payload)
}

func (o *GetJobLogsOK) GetPayload() *GetJobLogsOKBody {
	return o.Payload
}

func (o *GetJobLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetJobLogsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobLogsDefault creates a GetJobLogsDefault with default headers values
func NewGetJobLogsDefault(code int) *GetJobLogsDefault {
	return &GetJobLogsDefault{
		_statusCode: code,
	}
}

/*
GetJobLogsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetJobLogsDefault struct {
	_statusCode int

	Payload *GetJobLogsDefaultBody
}

// Code gets the status code for the get job logs default response
func (o *GetJobLogsDefault) Code() int {
	return o._statusCode
}

func (o *GetJobLogsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Backups/GetJobLogs][%d] GetJobLogs default  %+v", o._statusCode, o.Payload)
}

func (o *GetJobLogsDefault) GetPayload() *GetJobLogsDefaultBody {
	return o.Payload
}

func (o *GetJobLogsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetJobLogsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetJobLogsBody get job logs body
swagger:model GetJobLogsBody
*/
type GetJobLogsBody struct {
	// job id
	JobID string `json:"job_id,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// limit
	Limit int64 `json:"limit,omitempty"`
}

// Validate validates this get job logs body
func (o *GetJobLogsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get job logs body based on context it is used
func (o *GetJobLogsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobLogsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobLogsBody) UnmarshalBinary(b []byte) error {
	var res GetJobLogsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJobLogsDefaultBody get job logs default body
swagger:model GetJobLogsDefaultBody
*/
type GetJobLogsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetJobLogsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get job logs default body
func (o *GetJobLogsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobLogsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetJobLogs default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetJobLogs default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get job logs default body based on the context it is used
func (o *GetJobLogsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobLogsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetJobLogs default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetJobLogs default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJobLogsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobLogsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetJobLogsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJobLogsDefaultBodyDetailsItems0 get job logs default body details items0
swagger:model GetJobLogsDefaultBodyDetailsItems0
*/
type GetJobLogsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get job logs default body details items0
func (o *GetJobLogsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get job logs default body details items0 based on context it is used
func (o *GetJobLogsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobLogsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobLogsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetJobLogsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJobLogsOKBody get job logs OK body
swagger:model GetJobLogsOKBody
*/
type GetJobLogsOKBody struct {
	// logs
	Logs []*GetJobLogsOKBodyLogsItems0 `json:"logs"`

	// end
	End bool `json:"end,omitempty"`
}

// Validate validates this get job logs OK body
func (o *GetJobLogsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobLogsOKBody) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(o.Logs) { // not required
		return nil
	}

	for i := 0; i < len(o.Logs); i++ {
		if swag.IsZero(o.Logs[i]) { // not required
			continue
		}

		if o.Logs[i] != nil {
			if err := o.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getJobLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getJobLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get job logs OK body based on the context it is used
func (o *GetJobLogsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobLogsOKBody) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Logs); i++ {
		if o.Logs[i] != nil {
			if err := o.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getJobLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getJobLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJobLogsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobLogsOKBody) UnmarshalBinary(b []byte) error {
	var res GetJobLogsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJobLogsOKBodyLogsItems0 LogChunk represent one chunk of logs.
swagger:model GetJobLogsOKBodyLogsItems0
*/
type GetJobLogsOKBodyLogsItems0 struct {
	// chunk id
	ChunkID int64 `json:"chunk_id,omitempty"`

	// data
	Data string `json:"data,omitempty"`
}

// Validate validates this get job logs OK body logs items0
func (o *GetJobLogsOKBodyLogsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get job logs OK body logs items0 based on context it is used
func (o *GetJobLogsOKBodyLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJobLogsOKBodyLogsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJobLogsOKBodyLogsItems0) UnmarshalBinary(b []byte) error {
	var res GetJobLogsOKBodyLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
