// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BackupsChangeScheduledBackup(params *BackupsChangeScheduledBackupParams) (*BackupsChangeScheduledBackupOK, error)

	BackupsGetLogs(params *BackupsGetLogsParams) (*BackupsGetLogsOK, error)

	BackupsListArtifactCompatibleServices(params *BackupsListArtifactCompatibleServicesParams) (*BackupsListArtifactCompatibleServicesOK, error)

	BackupsListScheduledBackups(params *BackupsListScheduledBackupsParams) (*BackupsListScheduledBackupsOK, error)

	BackupsRemoveScheduledBackup(params *BackupsRemoveScheduledBackupParams) (*BackupsRemoveScheduledBackupOK, error)

	BackupsRestoreBackup(params *BackupsRestoreBackupParams) (*BackupsRestoreBackupOK, error)

	BackupsScheduleBackup(params *BackupsScheduleBackupParams) (*BackupsScheduleBackupOK, error)

	BackupsStartBackup(params *BackupsStartBackupParams) (*BackupsStartBackupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BackupsChangeScheduledBackup changes scheduled backup changes existing scheduled backup
*/
func (a *Client) BackupsChangeScheduledBackup(params *BackupsChangeScheduledBackupParams) (*BackupsChangeScheduledBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsChangeScheduledBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_ChangeScheduledBackup",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/ChangeScheduled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsChangeScheduledBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsChangeScheduledBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsChangeScheduledBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsGetLogs gets logs returns logs for provided artifact
*/
func (a *Client) BackupsGetLogs(params *BackupsGetLogsParams) (*BackupsGetLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsGetLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_GetLogs",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/GetLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsGetLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsGetLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsGetLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsListArtifactCompatibleServices lists artifact compatible services lists compatible services for restoring a backup
*/
func (a *Client) BackupsListArtifactCompatibleServices(params *BackupsListArtifactCompatibleServicesParams) (*BackupsListArtifactCompatibleServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsListArtifactCompatibleServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_ListArtifactCompatibleServices",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/ListArtifactCompatibleServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsListArtifactCompatibleServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsListArtifactCompatibleServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsListArtifactCompatibleServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsListScheduledBackups lists scheduled backups returns all scheduled backups
*/
func (a *Client) BackupsListScheduledBackups(params *BackupsListScheduledBackupsParams) (*BackupsListScheduledBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsListScheduledBackupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_ListScheduledBackups",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/ListScheduled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsListScheduledBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsListScheduledBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsListScheduledBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsRemoveScheduledBackup removes scheduled backup removes existing scheduled backup
*/
func (a *Client) BackupsRemoveScheduledBackup(params *BackupsRemoveScheduledBackupParams) (*BackupsRemoveScheduledBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsRemoveScheduledBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_RemoveScheduledBackup",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/RemoveScheduled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsRemoveScheduledBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsRemoveScheduledBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsRemoveScheduledBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsRestoreBackup restores backup requests the backup restore

  Could return the Error message in the details containing specific ErrorCode indicating failure reason:
ERROR_CODE_XTRABACKUP_NOT_INSTALLED - xtrabackup is not installed on the service
ERROR_CODE_INVALID_XTRABACKUP - different versions of xtrabackup and xbcloud
ERROR_CODE_INCOMPATIBLE_XTRABACKUP - xtrabackup is not compatible with MySQL for taking a backup
ERROR_CODE_INCOMPATIBLE_TARGET_MYSQL - target MySQL version is not compatible with the artifact for performing a restore of the backup
*/
func (a *Client) BackupsRestoreBackup(params *BackupsRestoreBackupParams) (*BackupsRestoreBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsRestoreBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_RestoreBackup",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/Restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsRestoreBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsRestoreBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsRestoreBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsScheduleBackup schedules backup schedules repeated backup
*/
func (a *Client) BackupsScheduleBackup(params *BackupsScheduleBackupParams) (*BackupsScheduleBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsScheduleBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_ScheduleBackup",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/Schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsScheduleBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsScheduleBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsScheduleBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupsStartBackup starts backup request backup specified service to location

  Could return the Error message in the details containing specific ErrorCode indicating failure reason:
ERROR_CODE_XTRABACKUP_NOT_INSTALLED - xtrabackup is not installed on the service
ERROR_CODE_INVALID_XTRABACKUP - different versions of xtrabackup and xbcloud
ERROR_CODE_INCOMPATIBLE_XTRABACKUP - xtrabackup is not compatible with MySQL for taking a backup
*/
func (a *Client) BackupsStartBackup(params *BackupsStartBackupParams) (*BackupsStartBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupsStartBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Backups_StartBackup",
		Method:             "POST",
		PathPattern:        "/v1/management/backup/Backups/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupsStartBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupsStartBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupsStartBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
