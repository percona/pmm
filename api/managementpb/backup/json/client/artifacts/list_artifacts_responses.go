// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListArtifactsReader is a Reader for the ListArtifacts structure.
type ListArtifactsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListArtifactsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListArtifactsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListArtifactsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListArtifactsOK creates a ListArtifactsOK with default headers values
func NewListArtifactsOK() *ListArtifactsOK {
	return &ListArtifactsOK{}
}

/*ListArtifactsOK handles this case with default header values.

A successful response.
*/
type ListArtifactsOK struct {
	Payload *ListArtifactsOKBody
}

func (o *ListArtifactsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Artifacts/List][%d] listArtifactsOk  %+v", 200, o.Payload)
}

func (o *ListArtifactsOK) GetPayload() *ListArtifactsOKBody {
	return o.Payload
}

func (o *ListArtifactsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListArtifactsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsDefault creates a ListArtifactsDefault with default headers values
func NewListArtifactsDefault(code int) *ListArtifactsDefault {
	return &ListArtifactsDefault{
		_statusCode: code,
	}
}

/*ListArtifactsDefault handles this case with default header values.

An unexpected error response.
*/
type ListArtifactsDefault struct {
	_statusCode int

	Payload *ListArtifactsDefaultBody
}

// Code gets the status code for the list artifacts default response
func (o *ListArtifactsDefault) Code() int {
	return o._statusCode
}

func (o *ListArtifactsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Artifacts/List][%d] ListArtifacts default  %+v", o._statusCode, o.Payload)
}

func (o *ListArtifactsDefault) GetPayload() *ListArtifactsDefaultBody {
	return o.Payload
}

func (o *ListArtifactsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListArtifactsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ArtifactsItems0 Artifact represents single backup artifact.
swagger:model ArtifactsItems0
*/
type ArtifactsItems0 struct {

	// Machine-readable artifact ID.
	ArtifactID string `json:"artifact_id,omitempty"`

	// Artifact name
	Name string `json:"name,omitempty"`

	// Database vendor e.g. PostgreSQL, MongoDB, MySQL.
	Vendor string `json:"vendor,omitempty"`

	// Machine-readable location ID.
	LocationID string `json:"location_id,omitempty"`

	// Location name.
	LocationName string `json:"location_name,omitempty"`

	// Machine-readable service ID.
	ServiceID string `json:"service_id,omitempty"`

	// Service name.
	ServiceName string `json:"service_name,omitempty"`

	// DataModel is a model used for performing a backup.
	// Enum: [DATA_MODEL_INVALID PHYSICAL LOGICAL]
	DataModel *string `json:"data_model,omitempty"`

	// Status shows current status of backup.
	// Enum: [STATUS_INVALID PENDING IN_PROGRESS PAUSED SUCCESS ERROR]
	Status *string `json:"status,omitempty"`

	// Artifact creation time.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`
}

// Validate validates this artifacts items0
func (o *ArtifactsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataModel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var artifactsItems0TypeDataModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_MODEL_INVALID","PHYSICAL","LOGICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactsItems0TypeDataModelPropEnum = append(artifactsItems0TypeDataModelPropEnum, v)
	}
}

const (

	// ArtifactsItems0DataModelDATAMODELINVALID captures enum value "DATA_MODEL_INVALID"
	ArtifactsItems0DataModelDATAMODELINVALID string = "DATA_MODEL_INVALID"

	// ArtifactsItems0DataModelPHYSICAL captures enum value "PHYSICAL"
	ArtifactsItems0DataModelPHYSICAL string = "PHYSICAL"

	// ArtifactsItems0DataModelLOGICAL captures enum value "LOGICAL"
	ArtifactsItems0DataModelLOGICAL string = "LOGICAL"
)

// prop value enum
func (o *ArtifactsItems0) validateDataModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactsItems0TypeDataModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ArtifactsItems0) validateDataModel(formats strfmt.Registry) error {

	if swag.IsZero(o.DataModel) { // not required
		return nil
	}

	// value enum
	if err := o.validateDataModelEnum("data_model", "body", *o.DataModel); err != nil {
		return err
	}

	return nil
}

var artifactsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_INVALID","PENDING","IN_PROGRESS","PAUSED","SUCCESS","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactsItems0TypeStatusPropEnum = append(artifactsItems0TypeStatusPropEnum, v)
	}
}

const (

	// ArtifactsItems0StatusSTATUSINVALID captures enum value "STATUS_INVALID"
	ArtifactsItems0StatusSTATUSINVALID string = "STATUS_INVALID"

	// ArtifactsItems0StatusPENDING captures enum value "PENDING"
	ArtifactsItems0StatusPENDING string = "PENDING"

	// ArtifactsItems0StatusINPROGRESS captures enum value "IN_PROGRESS"
	ArtifactsItems0StatusINPROGRESS string = "IN_PROGRESS"

	// ArtifactsItems0StatusPAUSED captures enum value "PAUSED"
	ArtifactsItems0StatusPAUSED string = "PAUSED"

	// ArtifactsItems0StatusSUCCESS captures enum value "SUCCESS"
	ArtifactsItems0StatusSUCCESS string = "SUCCESS"

	// ArtifactsItems0StatusERROR captures enum value "ERROR"
	ArtifactsItems0StatusERROR string = "ERROR"
)

// prop value enum
func (o *ArtifactsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ArtifactsItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ArtifactsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ArtifactsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArtifactsItems0) UnmarshalBinary(b []byte) error {
	var res ArtifactsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListArtifactsDefaultBody list artifacts default body
swagger:model ListArtifactsDefaultBody
*/
type ListArtifactsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list artifacts default body
func (o *ListArtifactsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListArtifactsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListArtifacts default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListArtifactsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListArtifactsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListArtifactsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListArtifactsOKBody list artifacts OK body
swagger:model ListArtifactsOKBody
*/
type ListArtifactsOKBody struct {

	// artifacts
	Artifacts []*ArtifactsItems0 `json:"artifacts"`
}

// Validate validates this list artifacts OK body
func (o *ListArtifactsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListArtifactsOKBody) validateArtifacts(formats strfmt.Registry) error {

	if swag.IsZero(o.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(o.Artifacts); i++ {
		if swag.IsZero(o.Artifacts[i]) { // not required
			continue
		}

		if o.Artifacts[i] != nil {
			if err := o.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listArtifactsOk" + "." + "artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListArtifactsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListArtifactsOKBody) UnmarshalBinary(b []byte) error {
	var res ListArtifactsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
