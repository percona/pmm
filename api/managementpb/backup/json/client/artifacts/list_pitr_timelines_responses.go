// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListPitrTimelinesReader is a Reader for the ListPitrTimelines structure.
type ListPitrTimelinesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPitrTimelinesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPitrTimelinesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListPitrTimelinesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListPitrTimelinesOK creates a ListPitrTimelinesOK with default headers values
func NewListPitrTimelinesOK() *ListPitrTimelinesOK {
	return &ListPitrTimelinesOK{}
}

/* ListPitrTimelinesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListPitrTimelinesOK struct {
	Payload *ListPitrTimelinesOKBody
}

func (o *ListPitrTimelinesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Artifacts/ListPITRTimelines][%d] listPitrTimelinesOk  %+v", 200, o.Payload)
}

func (o *ListPitrTimelinesOK) GetPayload() *ListPitrTimelinesOKBody {
	return o.Payload
}

func (o *ListPitrTimelinesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListPitrTimelinesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPitrTimelinesDefault creates a ListPitrTimelinesDefault with default headers values
func NewListPitrTimelinesDefault(code int) *ListPitrTimelinesDefault {
	return &ListPitrTimelinesDefault{
		_statusCode: code,
	}
}

/* ListPitrTimelinesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListPitrTimelinesDefault struct {
	_statusCode int

	Payload *ListPitrTimelinesDefaultBody
}

// Code gets the status code for the list pitr timelines default response
func (o *ListPitrTimelinesDefault) Code() int {
	return o._statusCode
}

func (o *ListPitrTimelinesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/backup/Artifacts/ListPITRTimelines][%d] ListPitrTimelines default  %+v", o._statusCode, o.Payload)
}

func (o *ListPitrTimelinesDefault) GetPayload() *ListPitrTimelinesDefaultBody {
	return o.Payload
}

func (o *ListPitrTimelinesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListPitrTimelinesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListPitrTimelinesBody list pitr timelines body
swagger:model ListPitrTimelinesBody
*/
type ListPitrTimelinesBody struct {
	// Artifact ID represents artifact whose location has PITR timeranges to be retrieved.
	ArtifactID string `json:"artifact_id,omitempty"`
}

// Validate validates this list pitr timelines body
func (o *ListPitrTimelinesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list pitr timelines body based on context it is used
func (o *ListPitrTimelinesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPitrTimelinesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPitrTimelinesBody) UnmarshalBinary(b []byte) error {
	var res ListPitrTimelinesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPitrTimelinesDefaultBody list pitr timelines default body
swagger:model ListPitrTimelinesDefaultBody
*/
type ListPitrTimelinesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListPitrTimelinesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list pitr timelines default body
func (o *ListPitrTimelinesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPitrTimelinesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListPitrTimelines default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListPitrTimelines default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list pitr timelines default body based on the context it is used
func (o *ListPitrTimelinesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPitrTimelinesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListPitrTimelines default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListPitrTimelines default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListPitrTimelinesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPitrTimelinesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListPitrTimelinesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPitrTimelinesDefaultBodyDetailsItems0 list pitr timelines default body details items0
swagger:model ListPitrTimelinesDefaultBodyDetailsItems0
*/
type ListPitrTimelinesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list pitr timelines default body details items0
func (o *ListPitrTimelinesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list pitr timelines default body details items0 based on context it is used
func (o *ListPitrTimelinesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPitrTimelinesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPitrTimelinesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListPitrTimelinesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPitrTimelinesOKBody list pitr timelines OK body
swagger:model ListPitrTimelinesOKBody
*/
type ListPitrTimelinesOKBody struct {
	// timelines
	Timelines []*ListPitrTimelinesOKBodyTimelinesItems0 `json:"timelines"`
}

// Validate validates this list pitr timelines OK body
func (o *ListPitrTimelinesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimelines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPitrTimelinesOKBody) validateTimelines(formats strfmt.Registry) error {
	if swag.IsZero(o.Timelines) { // not required
		return nil
	}

	for i := 0; i < len(o.Timelines); i++ {
		if swag.IsZero(o.Timelines[i]) { // not required
			continue
		}

		if o.Timelines[i] != nil {
			if err := o.Timelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listPitrTimelinesOk" + "." + "timelines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listPitrTimelinesOk" + "." + "timelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list pitr timelines OK body based on the context it is used
func (o *ListPitrTimelinesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimelines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPitrTimelinesOKBody) contextValidateTimelines(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Timelines); i++ {
		if o.Timelines[i] != nil {
			if err := o.Timelines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listPitrTimelinesOk" + "." + "timelines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listPitrTimelinesOk" + "." + "timelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListPitrTimelinesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPitrTimelinesOKBody) UnmarshalBinary(b []byte) error {
	var res ListPitrTimelinesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPitrTimelinesOKBodyTimelinesItems0 list pitr timelines OK body timelines items0
swagger:model ListPitrTimelinesOKBodyTimelinesItems0
*/
type ListPitrTimelinesOKBodyTimelinesItems0 struct {
	// Filename is the filename of the PITR oplog archive.
	Filename string `json:"filename,omitempty"`

	// ReplicaSet is the name of the replica set that the backup was taken from.
	ReplicaSet string `json:"replica_set,omitempty"`

	// start_timestamp is the time of the first event in the PITR chunk.
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"start_timestamp,omitempty"`

	// end_timestamp is the time of the last event in the PITR chunk.
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"end_timestamp,omitempty"`
}

// Validate validates this list pitr timelines OK body timelines items0
func (o *ListPitrTimelinesOKBodyTimelinesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPitrTimelinesOKBodyTimelinesItems0) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", o.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListPitrTimelinesOKBodyTimelinesItems0) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", o.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list pitr timelines OK body timelines items0 based on context it is used
func (o *ListPitrTimelinesOKBodyTimelinesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPitrTimelinesOKBodyTimelinesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPitrTimelinesOKBodyTimelinesItems0) UnmarshalBinary(b []byte) error {
	var res ListPitrTimelinesOKBodyTimelinesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
