syntax = "proto3";

package backup.v1beta1;

option go_package = "api/managementpb/backup;backupv1beta1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";

// PMMServerLocationConfig represents file system config inside pmm-server.
message PMMServerLocationConfig {
  string path = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// PMMClientLocationConfig represents file system config inside pmm-client.
message PMMClientLocationConfig {
  string path = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// S3LocationConfig represents S3 bucket configuration.
message S3LocationConfig {
  string endpoint = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  string access_key = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  string secret_key = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// Location represents single Backup Location.
message Location {
  // Machine-readable ID.
  string location_id = 1;
  // Location name
  string name = 2;
  // Short description
  string description = 3;
  oneof config {
    PMMClientLocationConfig pmm_client_config = 4;
    PMMServerLocationConfig pmm_server_config = 5;
    S3LocationConfig s3_config = 6;
  }
}

message ListLocationsRequest {}

message ListLocationsResponse {
  repeated Location locations = 1;
}

message AddLocationRequest {
  // Location name
  string name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  string description = 2;
  // PMM-client file system configuration. Exactly one config should be set.
  PMMClientLocationConfig pmm_client_config = 3;
  // PMM-server file system configuration. Exactly one config should be set.
  PMMServerLocationConfig pmm_server_config = 4;
  // S3 Bucket configuration. Exactly one config should be set.
  S3LocationConfig s3_config = 5;
}

message AddLocationResponse {
  // Machine-readable ID.
  string location_id = 1;
}

message ChangeLocationRequest {
  // Machine-readable ID.
  string location_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Location name
  string name = 2;
  string description = 3;
  // PMM-client file system configuration. Exactly one config should be set.
  PMMClientLocationConfig pmm_client_config = 4;
  // PMM-server file system configuration. Exactly one config should be set.
  PMMServerLocationConfig pmm_server_config = 5;
  // S3 Bucket configuration. Exactly one config should be set.
  S3LocationConfig s3_config = 6;
}

message ChangeLocationResponse {}

message RemoveLocationRequest {
  // Machine-readable ID.
  string location_id = 1;
  // Force mode
  bool force = 2;
}

message RemoveLocationResponse {}

// Locations service provides access to Backup Locations.
service Locations {
  // ListLocations returns a list of all backup locations.
  rpc ListLocations(ListLocationsRequest) returns (ListLocationsResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/List"
      body: "*"
    };
  }
  // AddLocation adds backup location.
  rpc AddLocation(AddLocationRequest) returns (AddLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Add"
      body: "*"
    };
  }
  // ChangeLocation changes backup location.
  rpc ChangeLocation(ChangeLocationRequest) returns (ChangeLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Change"
      body: "*"
    };
  }
  // RemoveLocation removes existing backup location.
  rpc RemoveLocation(RemoveLocationRequest) returns (RemoveLocationResponse) {
    option (google.api.http) = {
      post: "/v1/management/backup/Locations/Remove"
      body: "*"
    };
  }
}
