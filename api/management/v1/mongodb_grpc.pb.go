// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/mongodb.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MongoDBService_AddMongoDB_FullMethodName = "/management.v1.MongoDBService/AddMongoDB"
)

// MongoDBServiceClient is the client API for MongoDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoDBServiceClient interface {
	// AddMongoDB adds MongoDB Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMongoDB(ctx context.Context, in *AddMongoDBRequest, opts ...grpc.CallOption) (*AddMongoDBResponse, error)
}

type mongoDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDBServiceClient(cc grpc.ClientConnInterface) MongoDBServiceClient {
	return &mongoDBServiceClient{cc}
}

func (c *mongoDBServiceClient) AddMongoDB(ctx context.Context, in *AddMongoDBRequest, opts ...grpc.CallOption) (*AddMongoDBResponse, error) {
	out := new(AddMongoDBResponse)
	err := c.cc.Invoke(ctx, MongoDBService_AddMongoDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDBServiceServer is the server API for MongoDBService service.
// All implementations must embed UnimplementedMongoDBServiceServer
// for forward compatibility
type MongoDBServiceServer interface {
	// AddMongoDB adds MongoDB Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMongoDB(context.Context, *AddMongoDBRequest) (*AddMongoDBResponse, error)
	mustEmbedUnimplementedMongoDBServiceServer()
}

// UnimplementedMongoDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMongoDBServiceServer struct{}

func (UnimplementedMongoDBServiceServer) AddMongoDB(context.Context, *AddMongoDBRequest) (*AddMongoDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMongoDB not implemented")
}
func (UnimplementedMongoDBServiceServer) mustEmbedUnimplementedMongoDBServiceServer() {}

// UnsafeMongoDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDBServiceServer will
// result in compilation errors.
type UnsafeMongoDBServiceServer interface {
	mustEmbedUnimplementedMongoDBServiceServer()
}

func RegisterMongoDBServiceServer(s grpc.ServiceRegistrar, srv MongoDBServiceServer) {
	s.RegisterService(&MongoDBService_ServiceDesc, srv)
}

func _MongoDBService_AddMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMongoDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServiceServer).AddMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBService_AddMongoDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServiceServer).AddMongoDB(ctx, req.(*AddMongoDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDBService_ServiceDesc is the grpc.ServiceDesc for MongoDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.MongoDBService",
	HandlerType: (*MongoDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMongoDB",
			Handler:    _MongoDBService_AddMongoDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/mongodb.proto",
}
