// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/proxysql.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxySQLService_AddProxySQL_FullMethodName = "/management.v1.ProxySQLService/AddProxySQL"
)

// ProxySQLServiceClient is the client API for ProxySQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxySQLServiceClient interface {
	// AddProxySQL adds ProxySQL Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "proxysql_exporter" with provided "pmm_agent_id" and other parameters.
	AddProxySQL(ctx context.Context, in *AddProxySQLRequest, opts ...grpc.CallOption) (*AddProxySQLResponse, error)
}

type proxySQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxySQLServiceClient(cc grpc.ClientConnInterface) ProxySQLServiceClient {
	return &proxySQLServiceClient{cc}
}

func (c *proxySQLServiceClient) AddProxySQL(ctx context.Context, in *AddProxySQLRequest, opts ...grpc.CallOption) (*AddProxySQLResponse, error) {
	out := new(AddProxySQLResponse)
	err := c.cc.Invoke(ctx, ProxySQLService_AddProxySQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxySQLServiceServer is the server API for ProxySQLService service.
// All implementations must embed UnimplementedProxySQLServiceServer
// for forward compatibility
type ProxySQLServiceServer interface {
	// AddProxySQL adds ProxySQL Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "proxysql_exporter" with provided "pmm_agent_id" and other parameters.
	AddProxySQL(context.Context, *AddProxySQLRequest) (*AddProxySQLResponse, error)
	mustEmbedUnimplementedProxySQLServiceServer()
}

// UnimplementedProxySQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxySQLServiceServer struct{}

func (UnimplementedProxySQLServiceServer) AddProxySQL(context.Context, *AddProxySQLRequest) (*AddProxySQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProxySQL not implemented")
}
func (UnimplementedProxySQLServiceServer) mustEmbedUnimplementedProxySQLServiceServer() {}

// UnsafeProxySQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxySQLServiceServer will
// result in compilation errors.
type UnsafeProxySQLServiceServer interface {
	mustEmbedUnimplementedProxySQLServiceServer()
}

func RegisterProxySQLServiceServer(s grpc.ServiceRegistrar, srv ProxySQLServiceServer) {
	s.RegisterService(&ProxySQLService_ServiceDesc, srv)
}

func _ProxySQLService_AddProxySQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProxySQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxySQLServiceServer).AddProxySQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxySQLService_AddProxySQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxySQLServiceServer).AddProxySQL(ctx, req.(*AddProxySQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxySQLService_ServiceDesc is the grpc.ServiceDesc for ProxySQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxySQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.ProxySQLService",
	HandlerType: (*ProxySQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProxySQL",
			Handler:    _ProxySQLService_AddProxySQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/proxysql.proto",
}
