// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/mongodb.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	inventoryv1 "github.com/percona/pmm/api/inventory/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = inventoryv1.LogLevel(0)
)

// Validate checks the field values on AddMongoDBRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMongoDBRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMongoDBRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMongoDBRequestMultiError, or nil if none found.
func (m *AddMongoDBRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMongoDBRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	if all {
		switch v := interface{}(m.GetAddNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMongoDBRequestValidationError{
					field:  "AddNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMongoDBRequestValidationError{
					field:  "AddNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMongoDBRequestValidationError{
				field:  "AddNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddMongoDBRequestValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddMongoDBRequestValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for QanMongodbProfiler

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for TlsCertificateKey

	// no validation rules for TlsCertificateKeyFilePassword

	// no validation rules for TlsCa

	// no validation rules for MaxQueryLength

	// no validation rules for MetricsMode

	// no validation rules for AuthenticationMechanism

	// no validation rules for AuthenticationDatabase

	// no validation rules for AgentPassword

	// no validation rules for CollectionsLimit

	// no validation rules for EnableAllCollectors

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	if len(errors) > 0 {
		return AddMongoDBRequestMultiError(errors)
	}

	return nil
}

// AddMongoDBRequestMultiError is an error wrapping multiple validation errors
// returned by AddMongoDBRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMongoDBRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMongoDBRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMongoDBRequestMultiError) AllErrors() []error { return m }

// AddMongoDBRequestValidationError is the validation error returned by
// AddMongoDBRequest.Validate if the designated constraints aren't met.
type AddMongoDBRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMongoDBRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMongoDBRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMongoDBRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMongoDBRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMongoDBRequestValidationError) ErrorName() string {
	return "AddMongoDBRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMongoDBRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMongoDBRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMongoDBRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMongoDBRequestValidationError{}

// Validate checks the field values on AddMongoDBResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMongoDBResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMongoDBResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMongoDBResponseMultiError, or nil if none found.
func (m *AddMongoDBResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMongoDBResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMongoDBResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMongodbExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "MongodbExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMongodbExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMongoDBResponseValidationError{
				field:  "MongodbExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQanMongodbProfiler()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "QanMongodbProfiler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMongoDBResponseValidationError{
					field:  "QanMongodbProfiler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQanMongodbProfiler()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMongoDBResponseValidationError{
				field:  "QanMongodbProfiler",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddMongoDBResponseMultiError(errors)
	}

	return nil
}

// AddMongoDBResponseMultiError is an error wrapping multiple validation errors
// returned by AddMongoDBResponse.ValidateAll() if the designated constraints
// aren't met.
type AddMongoDBResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMongoDBResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMongoDBResponseMultiError) AllErrors() []error { return m }

// AddMongoDBResponseValidationError is the validation error returned by
// AddMongoDBResponse.Validate if the designated constraints aren't met.
type AddMongoDBResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMongoDBResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMongoDBResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMongoDBResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMongoDBResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMongoDBResponseValidationError) ErrorName() string {
	return "AddMongoDBResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMongoDBResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMongoDBResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMongoDBResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMongoDBResponseValidationError{}
