// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/actions.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionRequestMultiError, or nil if none found.
func (m *GetActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActionId()) < 1 {
		err := GetActionRequestValidationError{
			field:  "ActionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetActionRequestMultiError(errors)
	}

	return nil
}

// GetActionRequestMultiError is an error wrapping multiple validation errors
// returned by GetActionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionRequestMultiError) AllErrors() []error { return m }

// GetActionRequestValidationError is the validation error returned by
// GetActionRequest.Validate if the designated constraints aren't met.
type GetActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionRequestValidationError) ErrorName() string { return "GetActionRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionRequestValidationError{}

// Validate checks the field values on GetActionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionResponseMultiError, or nil if none found.
func (m *GetActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	// no validation rules for Output

	// no validation rules for Done

	// no validation rules for Error

	if len(errors) > 0 {
		return GetActionResponseMultiError(errors)
	}

	return nil
}

// GetActionResponseMultiError is an error wrapping multiple validation errors
// returned by GetActionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionResponseMultiError) AllErrors() []error { return m }

// GetActionResponseValidationError is the validation error returned by
// GetActionResponse.Validate if the designated constraints aren't met.
type GetActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionResponseValidationError) ErrorName() string {
	return "GetActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionResponseValidationError{}

// Validate checks the field values on StartMySQLExplainActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainActionRequestMultiError, or nil if none found.
func (m *StartMySQLExplainActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLExplainActionRequestMultiError is an error wrapping multiple
// validation errors returned by StartMySQLExplainActionRequest.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLExplainActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLExplainActionRequestValidationError is the validation error
// returned by StartMySQLExplainActionRequest.Validate if the designated
// constraints aren't met.
type StartMySQLExplainActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainActionRequestValidationError) ErrorName() string {
	return "StartMySQLExplainActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainActionRequestValidationError{}

// Validate checks the field values on StartMySQLExplainActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainActionResponseMultiError, or nil if none found.
func (m *StartMySQLExplainActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLExplainActionResponseMultiError is an error wrapping multiple
// validation errors returned by StartMySQLExplainActionResponse.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLExplainActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLExplainActionResponseValidationError is the validation error
// returned by StartMySQLExplainActionResponse.Validate if the designated
// constraints aren't met.
type StartMySQLExplainActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainActionResponseValidationError) ErrorName() string {
	return "StartMySQLExplainActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainActionResponseValidationError{}

// Validate checks the field values on StartMySQLExplainJSONActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLExplainJSONActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainJSONActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainJSONActionRequestMultiError, or nil if none found.
func (m *StartMySQLExplainJSONActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainJSONActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainJSONActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainJSONActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLExplainJSONActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLExplainJSONActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainJSONActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainJSONActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLExplainJSONActionRequestValidationError is the validation error
// returned by StartMySQLExplainJSONActionRequest.Validate if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainJSONActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainJSONActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainJSONActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainJSONActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainJSONActionRequestValidationError) ErrorName() string {
	return "StartMySQLExplainJSONActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainJSONActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainJSONActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainJSONActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainJSONActionRequestValidationError{}

// Validate checks the field values on StartMySQLExplainJSONActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLExplainJSONActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainJSONActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainJSONActionResponseMultiError, or nil if none found.
func (m *StartMySQLExplainJSONActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainJSONActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainJSONActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLExplainJSONActionResponseMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLExplainJSONActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainJSONActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainJSONActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLExplainJSONActionResponseValidationError is the validation error
// returned by StartMySQLExplainJSONActionResponse.Validate if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainJSONActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainJSONActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainJSONActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainJSONActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainJSONActionResponseValidationError) ErrorName() string {
	return "StartMySQLExplainJSONActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainJSONActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainJSONActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainJSONActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainJSONActionResponseValidationError{}

// Validate checks the field values on
// StartMySQLExplainTraditionalJSONActionRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainTraditionalJSONActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLExplainTraditionalJSONActionRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartMySQLExplainTraditionalJSONActionRequestMultiError, or nil if none found.
func (m *StartMySQLExplainTraditionalJSONActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainTraditionalJSONActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainTraditionalJSONActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainTraditionalJSONActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLExplainTraditionalJSONActionRequestMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLExplainTraditionalJSONActionRequest.ValidateAll() if the
// designated constraints aren't met.
type StartMySQLExplainTraditionalJSONActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainTraditionalJSONActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainTraditionalJSONActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLExplainTraditionalJSONActionRequestValidationError is the
// validation error returned by
// StartMySQLExplainTraditionalJSONActionRequest.Validate if the designated
// constraints aren't met.
type StartMySQLExplainTraditionalJSONActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) ErrorName() string {
	return "StartMySQLExplainTraditionalJSONActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainTraditionalJSONActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainTraditionalJSONActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainTraditionalJSONActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainTraditionalJSONActionRequestValidationError{}

// Validate checks the field values on
// StartMySQLExplainTraditionalJSONActionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainTraditionalJSONActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLExplainTraditionalJSONActionResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartMySQLExplainTraditionalJSONActionResponseMultiError, or nil if none found.
func (m *StartMySQLExplainTraditionalJSONActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainTraditionalJSONActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainTraditionalJSONActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLExplainTraditionalJSONActionResponseMultiError is an error
// wrapping multiple validation errors returned by
// StartMySQLExplainTraditionalJSONActionResponse.ValidateAll() if the
// designated constraints aren't met.
type StartMySQLExplainTraditionalJSONActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainTraditionalJSONActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainTraditionalJSONActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLExplainTraditionalJSONActionResponseValidationError is the
// validation error returned by
// StartMySQLExplainTraditionalJSONActionResponse.Validate if the designated
// constraints aren't met.
type StartMySQLExplainTraditionalJSONActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) ErrorName() string {
	return "StartMySQLExplainTraditionalJSONActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainTraditionalJSONActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainTraditionalJSONActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainTraditionalJSONActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainTraditionalJSONActionResponseValidationError{}

// Validate checks the field values on StartMySQLShowCreateTableActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowCreateTableActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLShowCreateTableActionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartMySQLShowCreateTableActionRequestMultiError, or nil if none found.
func (m *StartMySQLShowCreateTableActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowCreateTableActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowCreateTableActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowCreateTableActionRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowCreateTableActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLShowCreateTableActionRequestMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowCreateTableActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowCreateTableActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowCreateTableActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowCreateTableActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLShowCreateTableActionRequestValidationError is the validation
// error returned by StartMySQLShowCreateTableActionRequest.Validate if the
// designated constraints aren't met.
type StartMySQLShowCreateTableActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowCreateTableActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowCreateTableActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowCreateTableActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowCreateTableActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowCreateTableActionRequestValidationError) ErrorName() string {
	return "StartMySQLShowCreateTableActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowCreateTableActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowCreateTableActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowCreateTableActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowCreateTableActionRequestValidationError{}

// Validate checks the field values on StartMySQLShowCreateTableActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowCreateTableActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLShowCreateTableActionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartMySQLShowCreateTableActionResponseMultiError, or nil if none found.
func (m *StartMySQLShowCreateTableActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowCreateTableActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowCreateTableActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLShowCreateTableActionResponseMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowCreateTableActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowCreateTableActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowCreateTableActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowCreateTableActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLShowCreateTableActionResponseValidationError is the validation
// error returned by StartMySQLShowCreateTableActionResponse.Validate if the
// designated constraints aren't met.
type StartMySQLShowCreateTableActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowCreateTableActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowCreateTableActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowCreateTableActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowCreateTableActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowCreateTableActionResponseValidationError) ErrorName() string {
	return "StartMySQLShowCreateTableActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowCreateTableActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowCreateTableActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowCreateTableActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowCreateTableActionResponseValidationError{}

// Validate checks the field values on StartMySQLShowTableStatusActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowTableStatusActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLShowTableStatusActionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartMySQLShowTableStatusActionRequestMultiError, or nil if none found.
func (m *StartMySQLShowTableStatusActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowTableStatusActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowTableStatusActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowTableStatusActionRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowTableStatusActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLShowTableStatusActionRequestMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowTableStatusActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowTableStatusActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowTableStatusActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowTableStatusActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLShowTableStatusActionRequestValidationError is the validation
// error returned by StartMySQLShowTableStatusActionRequest.Validate if the
// designated constraints aren't met.
type StartMySQLShowTableStatusActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowTableStatusActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowTableStatusActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowTableStatusActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowTableStatusActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowTableStatusActionRequestValidationError) ErrorName() string {
	return "StartMySQLShowTableStatusActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowTableStatusActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowTableStatusActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowTableStatusActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowTableStatusActionRequestValidationError{}

// Validate checks the field values on StartMySQLShowTableStatusActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowTableStatusActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLShowTableStatusActionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartMySQLShowTableStatusActionResponseMultiError, or nil if none found.
func (m *StartMySQLShowTableStatusActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowTableStatusActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowTableStatusActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLShowTableStatusActionResponseMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowTableStatusActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowTableStatusActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowTableStatusActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowTableStatusActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLShowTableStatusActionResponseValidationError is the validation
// error returned by StartMySQLShowTableStatusActionResponse.Validate if the
// designated constraints aren't met.
type StartMySQLShowTableStatusActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowTableStatusActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowTableStatusActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowTableStatusActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowTableStatusActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowTableStatusActionResponseValidationError) ErrorName() string {
	return "StartMySQLShowTableStatusActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowTableStatusActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowTableStatusActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowTableStatusActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowTableStatusActionResponseValidationError{}

// Validate checks the field values on StartMySQLShowIndexActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLShowIndexActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowIndexActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLShowIndexActionRequestMultiError, or nil if none found.
func (m *StartMySQLShowIndexActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowIndexActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowIndexActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowIndexActionRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowIndexActionRequestMultiError(errors)
	}

	return nil
}

// StartMySQLShowIndexActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLShowIndexActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowIndexActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowIndexActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowIndexActionRequestMultiError) AllErrors() []error { return m }

// StartMySQLShowIndexActionRequestValidationError is the validation error
// returned by StartMySQLShowIndexActionRequest.Validate if the designated
// constraints aren't met.
type StartMySQLShowIndexActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowIndexActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowIndexActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowIndexActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowIndexActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowIndexActionRequestValidationError) ErrorName() string {
	return "StartMySQLShowIndexActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowIndexActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowIndexActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowIndexActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowIndexActionRequestValidationError{}

// Validate checks the field values on StartMySQLShowIndexActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLShowIndexActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowIndexActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLShowIndexActionResponseMultiError, or nil if none found.
func (m *StartMySQLShowIndexActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowIndexActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowIndexActionResponseMultiError(errors)
	}

	return nil
}

// StartMySQLShowIndexActionResponseMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLShowIndexActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowIndexActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowIndexActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowIndexActionResponseMultiError) AllErrors() []error { return m }

// StartMySQLShowIndexActionResponseValidationError is the validation error
// returned by StartMySQLShowIndexActionResponse.Validate if the designated
// constraints aren't met.
type StartMySQLShowIndexActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowIndexActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowIndexActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowIndexActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowIndexActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowIndexActionResponseValidationError) ErrorName() string {
	return "StartMySQLShowIndexActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowIndexActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowIndexActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowIndexActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowIndexActionResponseValidationError{}

// Validate checks the field values on
// StartPostgreSQLShowCreateTableActionRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartPostgreSQLShowCreateTableActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartPostgreSQLShowCreateTableActionRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartPostgreSQLShowCreateTableActionRequestMultiError, or nil if none found.
func (m *StartPostgreSQLShowCreateTableActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowCreateTableActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartPostgreSQLShowCreateTableActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartPostgreSQLShowCreateTableActionRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartPostgreSQLShowCreateTableActionRequestMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowCreateTableActionRequestMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowCreateTableActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowCreateTableActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowCreateTableActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowCreateTableActionRequestMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowCreateTableActionRequestValidationError is the validation
// error returned by StartPostgreSQLShowCreateTableActionRequest.Validate if
// the designated constraints aren't met.
type StartPostgreSQLShowCreateTableActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) ErrorName() string {
	return "StartPostgreSQLShowCreateTableActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowCreateTableActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowCreateTableActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowCreateTableActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowCreateTableActionRequestValidationError{}

// Validate checks the field values on
// StartPostgreSQLShowCreateTableActionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartPostgreSQLShowCreateTableActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartPostgreSQLShowCreateTableActionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartPostgreSQLShowCreateTableActionResponseMultiError, or nil if none found.
func (m *StartPostgreSQLShowCreateTableActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowCreateTableActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPostgreSQLShowCreateTableActionResponseMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowCreateTableActionResponseMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowCreateTableActionResponse.ValidateAll() if the
// designated constraints aren't met.
type StartPostgreSQLShowCreateTableActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowCreateTableActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowCreateTableActionResponseMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowCreateTableActionResponseValidationError is the
// validation error returned by
// StartPostgreSQLShowCreateTableActionResponse.Validate if the designated
// constraints aren't met.
type StartPostgreSQLShowCreateTableActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) ErrorName() string {
	return "StartPostgreSQLShowCreateTableActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowCreateTableActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowCreateTableActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowCreateTableActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowCreateTableActionResponseValidationError{}

// Validate checks the field values on StartPostgreSQLShowIndexActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartPostgreSQLShowIndexActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPostgreSQLShowIndexActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPostgreSQLShowIndexActionRequestMultiError, or nil if none found.
func (m *StartPostgreSQLShowIndexActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowIndexActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartPostgreSQLShowIndexActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartPostgreSQLShowIndexActionRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartPostgreSQLShowIndexActionRequestMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowIndexActionRequestMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowIndexActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowIndexActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowIndexActionRequestMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowIndexActionRequestValidationError is the validation error
// returned by StartPostgreSQLShowIndexActionRequest.Validate if the
// designated constraints aren't met.
type StartPostgreSQLShowIndexActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowIndexActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowIndexActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowIndexActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowIndexActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowIndexActionRequestValidationError) ErrorName() string {
	return "StartPostgreSQLShowIndexActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowIndexActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowIndexActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowIndexActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowIndexActionRequestValidationError{}

// Validate checks the field values on StartPostgreSQLShowIndexActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartPostgreSQLShowIndexActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartPostgreSQLShowIndexActionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartPostgreSQLShowIndexActionResponseMultiError, or nil if none found.
func (m *StartPostgreSQLShowIndexActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowIndexActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPostgreSQLShowIndexActionResponseMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowIndexActionResponseMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowIndexActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowIndexActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowIndexActionResponseMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowIndexActionResponseValidationError is the validation
// error returned by StartPostgreSQLShowIndexActionResponse.Validate if the
// designated constraints aren't met.
type StartPostgreSQLShowIndexActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowIndexActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowIndexActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowIndexActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowIndexActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowIndexActionResponseValidationError) ErrorName() string {
	return "StartPostgreSQLShowIndexActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowIndexActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowIndexActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowIndexActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowIndexActionResponseValidationError{}

// Validate checks the field values on StartMongoDBExplainActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMongoDBExplainActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMongoDBExplainActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMongoDBExplainActionRequestMultiError, or nil if none found.
func (m *StartMongoDBExplainActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMongoDBExplainActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMongoDBExplainActionRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetQuery()) < 1 {
		err := StartMongoDBExplainActionRequestValidationError{
			field:  "Query",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartMongoDBExplainActionRequestMultiError(errors)
	}

	return nil
}

// StartMongoDBExplainActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// StartMongoDBExplainActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartMongoDBExplainActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMongoDBExplainActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMongoDBExplainActionRequestMultiError) AllErrors() []error { return m }

// StartMongoDBExplainActionRequestValidationError is the validation error
// returned by StartMongoDBExplainActionRequest.Validate if the designated
// constraints aren't met.
type StartMongoDBExplainActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMongoDBExplainActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMongoDBExplainActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMongoDBExplainActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMongoDBExplainActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMongoDBExplainActionRequestValidationError) ErrorName() string {
	return "StartMongoDBExplainActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMongoDBExplainActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMongoDBExplainActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMongoDBExplainActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMongoDBExplainActionRequestValidationError{}

// Validate checks the field values on StartMongoDBExplainActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMongoDBExplainActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMongoDBExplainActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMongoDBExplainActionResponseMultiError, or nil if none found.
func (m *StartMongoDBExplainActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMongoDBExplainActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMongoDBExplainActionResponseMultiError(errors)
	}

	return nil
}

// StartMongoDBExplainActionResponseMultiError is an error wrapping multiple
// validation errors returned by
// StartMongoDBExplainActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartMongoDBExplainActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMongoDBExplainActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMongoDBExplainActionResponseMultiError) AllErrors() []error { return m }

// StartMongoDBExplainActionResponseValidationError is the validation error
// returned by StartMongoDBExplainActionResponse.Validate if the designated
// constraints aren't met.
type StartMongoDBExplainActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMongoDBExplainActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMongoDBExplainActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMongoDBExplainActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMongoDBExplainActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMongoDBExplainActionResponseValidationError) ErrorName() string {
	return "StartMongoDBExplainActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMongoDBExplainActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMongoDBExplainActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMongoDBExplainActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMongoDBExplainActionResponseValidationError{}

// Validate checks the field values on StartPTSummaryActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTSummaryActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTSummaryActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTSummaryActionRequestMultiError, or nil if none found.
func (m *StartPTSummaryActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTSummaryActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for NodeId

	if len(errors) > 0 {
		return StartPTSummaryActionRequestMultiError(errors)
	}

	return nil
}

// StartPTSummaryActionRequestMultiError is an error wrapping multiple
// validation errors returned by StartPTSummaryActionRequest.ValidateAll() if
// the designated constraints aren't met.
type StartPTSummaryActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTSummaryActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTSummaryActionRequestMultiError) AllErrors() []error { return m }

// StartPTSummaryActionRequestValidationError is the validation error returned
// by StartPTSummaryActionRequest.Validate if the designated constraints
// aren't met.
type StartPTSummaryActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTSummaryActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTSummaryActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTSummaryActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTSummaryActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTSummaryActionRequestValidationError) ErrorName() string {
	return "StartPTSummaryActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTSummaryActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTSummaryActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTSummaryActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTSummaryActionRequestValidationError{}

// Validate checks the field values on StartPTSummaryActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTSummaryActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTSummaryActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTSummaryActionResponseMultiError, or nil if none found.
func (m *StartPTSummaryActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTSummaryActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTSummaryActionResponseMultiError(errors)
	}

	return nil
}

// StartPTSummaryActionResponseMultiError is an error wrapping multiple
// validation errors returned by StartPTSummaryActionResponse.ValidateAll() if
// the designated constraints aren't met.
type StartPTSummaryActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTSummaryActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTSummaryActionResponseMultiError) AllErrors() []error { return m }

// StartPTSummaryActionResponseValidationError is the validation error returned
// by StartPTSummaryActionResponse.Validate if the designated constraints
// aren't met.
type StartPTSummaryActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTSummaryActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTSummaryActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTSummaryActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTSummaryActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTSummaryActionResponseValidationError) ErrorName() string {
	return "StartPTSummaryActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTSummaryActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTSummaryActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTSummaryActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTSummaryActionResponseValidationError{}

// Validate checks the field values on StartPTPgSummaryActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTPgSummaryActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTPgSummaryActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartPTPgSummaryActionRequestMultiError, or nil if none found.
func (m *StartPTPgSummaryActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTPgSummaryActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTPgSummaryActionRequestMultiError(errors)
	}

	return nil
}

// StartPTPgSummaryActionRequestMultiError is an error wrapping multiple
// validation errors returned by StartPTPgSummaryActionRequest.ValidateAll()
// if the designated constraints aren't met.
type StartPTPgSummaryActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTPgSummaryActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTPgSummaryActionRequestMultiError) AllErrors() []error { return m }

// StartPTPgSummaryActionRequestValidationError is the validation error
// returned by StartPTPgSummaryActionRequest.Validate if the designated
// constraints aren't met.
type StartPTPgSummaryActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTPgSummaryActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTPgSummaryActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTPgSummaryActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTPgSummaryActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTPgSummaryActionRequestValidationError) ErrorName() string {
	return "StartPTPgSummaryActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTPgSummaryActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTPgSummaryActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTPgSummaryActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTPgSummaryActionRequestValidationError{}

// Validate checks the field values on StartPTPgSummaryActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTPgSummaryActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTPgSummaryActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartPTPgSummaryActionResponseMultiError, or nil if none found.
func (m *StartPTPgSummaryActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTPgSummaryActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTPgSummaryActionResponseMultiError(errors)
	}

	return nil
}

// StartPTPgSummaryActionResponseMultiError is an error wrapping multiple
// validation errors returned by StartPTPgSummaryActionResponse.ValidateAll()
// if the designated constraints aren't met.
type StartPTPgSummaryActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTPgSummaryActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTPgSummaryActionResponseMultiError) AllErrors() []error { return m }

// StartPTPgSummaryActionResponseValidationError is the validation error
// returned by StartPTPgSummaryActionResponse.Validate if the designated
// constraints aren't met.
type StartPTPgSummaryActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTPgSummaryActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTPgSummaryActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTPgSummaryActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTPgSummaryActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTPgSummaryActionResponseValidationError) ErrorName() string {
	return "StartPTPgSummaryActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTPgSummaryActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTPgSummaryActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTPgSummaryActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTPgSummaryActionResponseValidationError{}

// Validate checks the field values on StartPTMongoDBSummaryActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMongoDBSummaryActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMongoDBSummaryActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPTMongoDBSummaryActionRequestMultiError, or nil if none found.
func (m *StartPTMongoDBSummaryActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMongoDBSummaryActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTMongoDBSummaryActionRequestMultiError(errors)
	}

	return nil
}

// StartPTMongoDBSummaryActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMongoDBSummaryActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMongoDBSummaryActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMongoDBSummaryActionRequestMultiError) AllErrors() []error { return m }

// StartPTMongoDBSummaryActionRequestValidationError is the validation error
// returned by StartPTMongoDBSummaryActionRequest.Validate if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMongoDBSummaryActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMongoDBSummaryActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMongoDBSummaryActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMongoDBSummaryActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMongoDBSummaryActionRequestValidationError) ErrorName() string {
	return "StartPTMongoDBSummaryActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMongoDBSummaryActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMongoDBSummaryActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMongoDBSummaryActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMongoDBSummaryActionRequestValidationError{}

// Validate checks the field values on StartPTMongoDBSummaryActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMongoDBSummaryActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMongoDBSummaryActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPTMongoDBSummaryActionResponseMultiError, or nil if none found.
func (m *StartPTMongoDBSummaryActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMongoDBSummaryActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTMongoDBSummaryActionResponseMultiError(errors)
	}

	return nil
}

// StartPTMongoDBSummaryActionResponseMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMongoDBSummaryActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMongoDBSummaryActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMongoDBSummaryActionResponseMultiError) AllErrors() []error { return m }

// StartPTMongoDBSummaryActionResponseValidationError is the validation error
// returned by StartPTMongoDBSummaryActionResponse.Validate if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMongoDBSummaryActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMongoDBSummaryActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMongoDBSummaryActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMongoDBSummaryActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMongoDBSummaryActionResponseValidationError) ErrorName() string {
	return "StartPTMongoDBSummaryActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMongoDBSummaryActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMongoDBSummaryActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMongoDBSummaryActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMongoDBSummaryActionResponseValidationError{}

// Validate checks the field values on StartPTMySQLSummaryActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMySQLSummaryActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMySQLSummaryActionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartPTMySQLSummaryActionRequestMultiError, or nil if none found.
func (m *StartPTMySQLSummaryActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMySQLSummaryActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTMySQLSummaryActionRequestMultiError(errors)
	}

	return nil
}

// StartPTMySQLSummaryActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMySQLSummaryActionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMySQLSummaryActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMySQLSummaryActionRequestMultiError) AllErrors() []error { return m }

// StartPTMySQLSummaryActionRequestValidationError is the validation error
// returned by StartPTMySQLSummaryActionRequest.Validate if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMySQLSummaryActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMySQLSummaryActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMySQLSummaryActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMySQLSummaryActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMySQLSummaryActionRequestValidationError) ErrorName() string {
	return "StartPTMySQLSummaryActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMySQLSummaryActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMySQLSummaryActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMySQLSummaryActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMySQLSummaryActionRequestValidationError{}

// Validate checks the field values on StartPTMySQLSummaryActionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMySQLSummaryActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMySQLSummaryActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPTMySQLSummaryActionResponseMultiError, or nil if none found.
func (m *StartPTMySQLSummaryActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMySQLSummaryActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTMySQLSummaryActionResponseMultiError(errors)
	}

	return nil
}

// StartPTMySQLSummaryActionResponseMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMySQLSummaryActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMySQLSummaryActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMySQLSummaryActionResponseMultiError) AllErrors() []error { return m }

// StartPTMySQLSummaryActionResponseValidationError is the validation error
// returned by StartPTMySQLSummaryActionResponse.Validate if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMySQLSummaryActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMySQLSummaryActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMySQLSummaryActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMySQLSummaryActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMySQLSummaryActionResponseValidationError) ErrorName() string {
	return "StartPTMySQLSummaryActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMySQLSummaryActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMySQLSummaryActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMySQLSummaryActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMySQLSummaryActionResponseValidationError{}

// Validate checks the field values on CancelActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelActionRequestMultiError, or nil if none found.
func (m *CancelActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActionId()) < 1 {
		err := CancelActionRequestValidationError{
			field:  "ActionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelActionRequestMultiError(errors)
	}

	return nil
}

// CancelActionRequestMultiError is an error wrapping multiple validation
// errors returned by CancelActionRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelActionRequestMultiError) AllErrors() []error { return m }

// CancelActionRequestValidationError is the validation error returned by
// CancelActionRequest.Validate if the designated constraints aren't met.
type CancelActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelActionRequestValidationError) ErrorName() string {
	return "CancelActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelActionRequestValidationError{}

// Validate checks the field values on CancelActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelActionResponseMultiError, or nil if none found.
func (m *CancelActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelActionResponseMultiError(errors)
	}

	return nil
}

// CancelActionResponseMultiError is an error wrapping multiple validation
// errors returned by CancelActionResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelActionResponseMultiError) AllErrors() []error { return m }

// CancelActionResponseValidationError is the validation error returned by
// CancelActionResponse.Validate if the designated constraints aren't met.
type CancelActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelActionResponseValidationError) ErrorName() string {
	return "CancelActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelActionResponseValidationError{}
