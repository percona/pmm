// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/valkey.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	inventoryv1 "github.com/percona/pmm/api/inventory/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = inventoryv1.LogLevel(0)
)

// define the regex for a UUID once up-front
var _valkey_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AddValkeyServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddValkeyServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddValkeyServiceParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddValkeyServiceParamsMultiError, or nil if none found.
func (m *AddValkeyServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AddValkeyServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNodeId() != "" {
		if err := m._validateUuid(m.GetNodeId()); err != nil {
			err = AddValkeyServiceParamsValidationError{
				field:  "NodeId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.GetNodeName() != "" {
		if utf8.RuneCountInString(m.GetNodeName()) < 1 {
			err := AddValkeyServiceParamsValidationError{
				field:  "NodeName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if all {
		switch v := interface{}(m.GetAddNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddValkeyServiceParamsValidationError{
					field:  "AddNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddValkeyServiceParamsValidationError{
					field:  "AddNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddValkeyServiceParamsValidationError{
				field:  "AddNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := AddValkeyServiceParamsValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	if utf8.RuneCountInString(m.GetPmmAgentId()) < 1 {
		err := AddValkeyServiceParamsValidationError{
			field:  "PmmAgentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddValkeyServiceParamsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for SkipConnectionCheck

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	// no validation rules for MetricsMode

	// no validation rules for LogLevel

	// no validation rules for ExposeExporter

	// no validation rules for TlsCa

	// no validation rules for TlsCert

	// no validation rules for TlsKey

	// no validation rules for AgentPassword

	if len(errors) > 0 {
		return AddValkeyServiceParamsMultiError(errors)
	}

	return nil
}

func (m *AddValkeyServiceParams) _validateUuid(uuid string) error {
	if matched := _valkey_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddValkeyServiceParamsMultiError is an error wrapping multiple validation
// errors returned by AddValkeyServiceParams.ValidateAll() if the designated
// constraints aren't met.
type AddValkeyServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddValkeyServiceParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddValkeyServiceParamsMultiError) AllErrors() []error { return m }

// AddValkeyServiceParamsValidationError is the validation error returned by
// AddValkeyServiceParams.Validate if the designated constraints aren't met.
type AddValkeyServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddValkeyServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddValkeyServiceParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddValkeyServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddValkeyServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddValkeyServiceParamsValidationError) ErrorName() string {
	return "AddValkeyServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AddValkeyServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddValkeyServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddValkeyServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddValkeyServiceParamsValidationError{}

// Validate checks the field values on ValkeyServiceResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValkeyServiceResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValkeyServiceResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValkeyServiceResultMultiError, or nil if none found.
func (m *ValkeyServiceResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ValkeyServiceResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValkeyServiceResultValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValkeyServiceResultValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValkeyServiceResultValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValkeyExporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValkeyServiceResultValidationError{
					field:  "ValkeyExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValkeyServiceResultValidationError{
					field:  "ValkeyExporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValkeyExporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValkeyServiceResultValidationError{
				field:  "ValkeyExporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValkeyServiceResultMultiError(errors)
	}

	return nil
}

// ValkeyServiceResultMultiError is an error wrapping multiple validation
// errors returned by ValkeyServiceResult.ValidateAll() if the designated
// constraints aren't met.
type ValkeyServiceResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValkeyServiceResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValkeyServiceResultMultiError) AllErrors() []error { return m }

// ValkeyServiceResultValidationError is the validation error returned by
// ValkeyServiceResult.Validate if the designated constraints aren't met.
type ValkeyServiceResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValkeyServiceResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValkeyServiceResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValkeyServiceResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValkeyServiceResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValkeyServiceResultValidationError) ErrorName() string {
	return "ValkeyServiceResultValidationError"
}

// Error satisfies the builtin error interface
func (e ValkeyServiceResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValkeyServiceResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValkeyServiceResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValkeyServiceResultValidationError{}
