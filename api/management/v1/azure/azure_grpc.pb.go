// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/azure/azure.proto

package azurev1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AzureDatabaseService_DiscoverAzureDatabase_FullMethodName = "/azure.v1beta1.AzureDatabaseService/DiscoverAzureDatabase"
	AzureDatabaseService_AddAzureDatabase_FullMethodName      = "/azure.v1beta1.AzureDatabaseService/AddAzureDatabase"
)

// AzureDatabaseServiceClient is the client API for AzureDatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AzureDatabaseServiceClient interface {
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(ctx context.Context, in *DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(ctx context.Context, in *AddAzureDatabaseRequest, opts ...grpc.CallOption) (*AddAzureDatabaseResponse, error)
}

type azureDatabaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAzureDatabaseServiceClient(cc grpc.ClientConnInterface) AzureDatabaseServiceClient {
	return &azureDatabaseServiceClient{cc}
}

func (c *azureDatabaseServiceClient) DiscoverAzureDatabase(ctx context.Context, in *DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*DiscoverAzureDatabaseResponse, error) {
	out := new(DiscoverAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, AzureDatabaseService_DiscoverAzureDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *azureDatabaseServiceClient) AddAzureDatabase(ctx context.Context, in *AddAzureDatabaseRequest, opts ...grpc.CallOption) (*AddAzureDatabaseResponse, error) {
	out := new(AddAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, AzureDatabaseService_AddAzureDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AzureDatabaseServiceServer is the server API for AzureDatabaseService service.
// All implementations must embed UnimplementedAzureDatabaseServiceServer
// for forward compatibility
type AzureDatabaseServiceServer interface {
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(context.Context, *DiscoverAzureDatabaseRequest) (*DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(context.Context, *AddAzureDatabaseRequest) (*AddAzureDatabaseResponse, error)
	mustEmbedUnimplementedAzureDatabaseServiceServer()
}

// UnimplementedAzureDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAzureDatabaseServiceServer struct{}

func (UnimplementedAzureDatabaseServiceServer) DiscoverAzureDatabase(context.Context, *DiscoverAzureDatabaseRequest) (*DiscoverAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverAzureDatabase not implemented")
}

func (UnimplementedAzureDatabaseServiceServer) AddAzureDatabase(context.Context, *AddAzureDatabaseRequest) (*AddAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureDatabase not implemented")
}
func (UnimplementedAzureDatabaseServiceServer) mustEmbedUnimplementedAzureDatabaseServiceServer() {}

// UnsafeAzureDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AzureDatabaseServiceServer will
// result in compilation errors.
type UnsafeAzureDatabaseServiceServer interface {
	mustEmbedUnimplementedAzureDatabaseServiceServer()
}

func RegisterAzureDatabaseServiceServer(s grpc.ServiceRegistrar, srv AzureDatabaseServiceServer) {
	s.RegisterService(&AzureDatabaseService_ServiceDesc, srv)
}

func _AzureDatabaseService_DiscoverAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AzureDatabaseServiceServer).DiscoverAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AzureDatabaseService_DiscoverAzureDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AzureDatabaseServiceServer).DiscoverAzureDatabase(ctx, req.(*DiscoverAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AzureDatabaseService_AddAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AzureDatabaseServiceServer).AddAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AzureDatabaseService_AddAzureDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AzureDatabaseServiceServer).AddAzureDatabase(ctx, req.(*AddAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AzureDatabaseService_ServiceDesc is the grpc.ServiceDesc for AzureDatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AzureDatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azure.v1beta1.AzureDatabaseService",
	HandlerType: (*AzureDatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverAzureDatabase",
			Handler:    _AzureDatabaseService_DiscoverAzureDatabase_Handler,
		},
		{
			MethodName: "AddAzureDatabase",
			Handler:    _AzureDatabaseService_AddAzureDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/azure/azure.proto",
}
