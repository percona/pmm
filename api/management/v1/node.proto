syntax = "proto3";

package management.v1;

import "google/protobuf/timestamp.proto";
import "inventory/v1/agents.proto";
import "inventory/v1/nodes.proto";
import "management/v1/metrics.proto";
import "validate/validate.proto";

// AddNodeParams holds node params and is used to add new node to inventory while adding new service.
message AddNodeParams {
  // Node type to be registered.
  inventory.v1.NodeType node_type = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2 [(validate.rules).string.min_len = 1];
  // Linux machine-id.
  string machine_id = 3;
  // Linux distribution name and version.
  string distro = 4;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 5;
  // Container name.
  string container_name = 6;
  // Node model.
  string node_model = 7;
  // Node region.
  string region = 8;
  // Node availability zone.
  string az = 9;
  // Custom user-assigned labels for Node.
  map<string, string> custom_labels = 10;
}

message RegisterNodeRequest {
  // Node type to be registered.
  inventory.v1.NodeType node_type = 1;
  // A user-defined name unique across all Nodes.
  string node_name = 2 [(validate.rules).string.min_len = 1];
  // Node address (DNS name or IP).
  string address = 3;
  // Linux machine-id.
  string machine_id = 4;
  // Linux distribution name and version.
  string distro = 5;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 6;
  // Container name.
  string container_name = 7;
  // Node model.
  string node_model = 8;
  // Node region.
  string region = 9;
  // Node availability zone.
  string az = 10;
  // Custom user-assigned labels for Node.
  map<string, string> custom_labels = 11;
  // If true, and Node with that name already exist, it will be removed with all dependent Services and Agents.
  bool reregister = 12;
  // Defines metrics flow model for node_exporter being added by this request.
  // Metrics could be pushed to the server with vmagent,
  // pulled by the server, or the server could choose behavior automatically.
  MetricsMode metrics_mode = 13;
  // List of collector names to disable in this exporter.
  repeated string disable_collectors = 14;
  // Custom password for exporter endpoint /metrics.
  string agent_password = 15;
  // Optionally expose the exporter process on all public interfaces
  bool expose_exporter = 16;
}

message RegisterNodeResponse {
  inventory.v1.GenericNode generic_node = 1;
  inventory.v1.ContainerNode container_node = 2;
  inventory.v1.PMMAgent pmm_agent = 3;
  // Token represents token for vmagent auth config.
  string token = 4;
  // Warning message.
  string warning = 5;
}

message UnregisterNodeRequest {
  // Node_id to be unregistered.
  string node_id = 1 [(validate.rules).string.min_len = 1];
  // Force delete node, related service account, even if it has more service tokens attached.
  bool force = 2;
}

message UnregisterNodeResponse {
  // Warning message if there are more service tokens attached to service account.
  string warning = 1;
}

message UniversalNode {
  // Node status.
  enum Status {
    // Invalid status.
    STATUS_UNSPECIFIED = 0;
    // The node is up.
    STATUS_UP = 1;
    // The node is down.
    STATUS_DOWN = 2;
    // The node's status cannot be known (e.g. there are no metrics yet).
    STATUS_UNKNOWN = 3;
  }
  // Service represents a service running on a node.
  message Service {
    // Unique Service identifier.
    string service_id = 1;
    // Service type.
    string service_type = 2;
    // Service name.
    string service_name = 3;
  }

  message Agent {
    // Unique Agent identifier.
    string agent_id = 1;
    // Agent type.
    string agent_type = 2;
    // Actual Agent status.
    string status = 3;
    // True if Agent is running and connected to pmm-managed.
    bool is_connected = 4;
  }

  // Unique Node identifier.
  string node_id = 1;
  // Node type.
  string node_type = 2;
  // User-defined node name.
  string node_name = 3;
  // Linux machine-id.
  string machine_id = 4;
  // Linux distribution name and version.
  string distro = 5;
  // Node model.
  string node_model = 6;
  // A node's unique docker container identifier.
  string container_id = 7;
  // Container name.
  string container_name = 8;
  // Node address (DNS name or IP).
  string address = 9;
  // Node region.
  string region = 10;
  // Node availability zone.
  string az = 11;
  // Custom user-assigned labels for Node.
  map<string, string> custom_labels = 12;
  // Creation timestamp.
  google.protobuf.Timestamp created_at = 13;
  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 14;
  // The health status of the node.
  Status status = 15;
  // List of agents related to this node.
  repeated Agent agents = 16;
  // List of services running on this node.
  repeated Service services = 17;
}

message ListNodesRequest {
  // Node type to be filtered out.
  inventory.v1.NodeType node_type = 1;
}

message ListNodesResponse {
  repeated UniversalNode nodes = 1;
}

message GetNodeRequest {
  // Unique Node identifier.
  string node_id = 1 [(validate.rules).string.min_len = 1];
}

message GetNodeResponse {
  UniversalNode node = 1;
}
