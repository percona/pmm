// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/rds.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RDSService_DiscoverRDS_FullMethodName = "/management.v1.RDSService/DiscoverRDS"
	RDSService_AddRDS_FullMethodName      = "/management.v1.RDSService/AddRDS"
)

// RDSServiceClient is the client API for RDSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RDSServiceClient interface {
	// DiscoverRDS discovers RDS instances.
	DiscoverRDS(ctx context.Context, in *DiscoverRDSRequest, opts ...grpc.CallOption) (*DiscoverRDSResponse, error)
	// AddRDS adds RDS instance.
	AddRDS(ctx context.Context, in *AddRDSRequest, opts ...grpc.CallOption) (*AddRDSResponse, error)
}

type rDSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRDSServiceClient(cc grpc.ClientConnInterface) RDSServiceClient {
	return &rDSServiceClient{cc}
}

func (c *rDSServiceClient) DiscoverRDS(ctx context.Context, in *DiscoverRDSRequest, opts ...grpc.CallOption) (*DiscoverRDSResponse, error) {
	out := new(DiscoverRDSResponse)
	err := c.cc.Invoke(ctx, RDSService_DiscoverRDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDSServiceClient) AddRDS(ctx context.Context, in *AddRDSRequest, opts ...grpc.CallOption) (*AddRDSResponse, error) {
	out := new(AddRDSResponse)
	err := c.cc.Invoke(ctx, RDSService_AddRDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RDSServiceServer is the server API for RDSService service.
// All implementations must embed UnimplementedRDSServiceServer
// for forward compatibility
type RDSServiceServer interface {
	// DiscoverRDS discovers RDS instances.
	DiscoverRDS(context.Context, *DiscoverRDSRequest) (*DiscoverRDSResponse, error)
	// AddRDS adds RDS instance.
	AddRDS(context.Context, *AddRDSRequest) (*AddRDSResponse, error)
	mustEmbedUnimplementedRDSServiceServer()
}

// UnimplementedRDSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRDSServiceServer struct{}

func (UnimplementedRDSServiceServer) DiscoverRDS(context.Context, *DiscoverRDSRequest) (*DiscoverRDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverRDS not implemented")
}

func (UnimplementedRDSServiceServer) AddRDS(context.Context, *AddRDSRequest) (*AddRDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRDS not implemented")
}
func (UnimplementedRDSServiceServer) mustEmbedUnimplementedRDSServiceServer() {}

// UnsafeRDSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RDSServiceServer will
// result in compilation errors.
type UnsafeRDSServiceServer interface {
	mustEmbedUnimplementedRDSServiceServer()
}

func RegisterRDSServiceServer(s grpc.ServiceRegistrar, srv RDSServiceServer) {
	s.RegisterService(&RDSService_ServiceDesc, srv)
}

func _RDSService_DiscoverRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDSServiceServer).DiscoverRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RDSService_DiscoverRDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDSServiceServer).DiscoverRDS(ctx, req.(*DiscoverRDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDSService_AddRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDSServiceServer).AddRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RDSService_AddRDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDSServiceServer).AddRDS(ctx, req.(*AddRDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RDSService_ServiceDesc is the grpc.ServiceDesc for RDSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RDSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.RDSService",
	HandlerType: (*RDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverRDS",
			Handler:    _RDSService_DiscoverRDS_Handler,
		},
		{
			MethodName: "AddRDS",
			Handler:    _RDSService_AddRDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/rds.proto",
}
