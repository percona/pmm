syntax = "proto3";

package management.v1;

import "google/api/annotations.proto";
import "management/v1/pagination.proto";
import "management/v1/severity.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// AdvisorCheckInterval represents possible execution interval values for checks.
enum AdvisorCheckInterval {
  ADVISOR_CHECK_INTERVAL_UNSPECIFIED = 0;
  ADVISOR_CHECK_INTERVAL_STANDARD = 1;
  ADVISOR_CHECK_INTERVAL_FREQUENT = 2;
  ADVISOR_CHECK_INTERVAL_RARE = 3;
}

enum AdvisorCheckFamily {
  ADVISOR_CHECK_FAMILY_UNSPECIFIED = 0;
  ADVISOR_CHECK_FAMILY_MYSQL = 1;
  ADVISOR_CHECK_FAMILY_POSTGRESQL = 2;
  ADVISOR_CHECK_FAMILY_MONGODB = 3;
}

// AdvisorCheckResult represents the check result returned from pmm-managed after running the check.
message AdvisorCheckResult {
  string summary = 1;
  string description = 2;
  Severity severity = 3;
  map<string, string> labels = 4;
  // URL containing information on how to resolve an issue detected by an Advisor check.
  string read_more_url = 5;
  // Name of the monitored service on which the check ran.
  string service_name = 6;
}

// CheckResultSummary is a summary of check results.
message CheckResultSummary {
  string service_name = 1;
  string service_id = 2;
  // Number of failed checks for this service with severity level "EMERGENCY".
  uint32 emergency_count = 3;
  // Number of failed checks for this service with severity level "ALERT".
  uint32 alert_count = 4;
  // Number of failed checks for this service with severity level "CRITICAL".
  uint32 critical_count = 5;
  // Number of failed checks for this service with severity level "ERROR".
  uint32 error_count = 6;
  // Number of failed checks for this service with severity level "WARNING".
  uint32 warning_count = 7;
  // Number of failed checks for this service with severity level "NOTICE".
  uint32 notice_count = 8;
  // Number of failed checks for this service with severity level "INFO".
  uint32 info_count = 9;
  // Number of failed checks for this service with severity level "DEBUG".
  uint32 debug_count = 10;
}

// CheckResult represents the check results for a given service.
message CheckResult {
  string summary = 1;
  string description = 2;
  Severity severity = 3;
  map<string, string> labels = 4;
  // URL containing information on how to resolve an issue detected by an Advisor check.
  string read_more_url = 5;
  // Name of the monitored service on which the check ran.
  string service_name = 6;
  // ID of the monitored service on which the check ran.
  string service_id = 7;
  // Name of the check that failed
  string check_name = 8;
  // Silence status of the check result
  bool silenced = 10;
}

// AdvisorCheck contains check name and status.
message AdvisorCheck {
  // Machine-readable name (ID) that is used in expression.
  string name = 1;
  // True if that check is enabled.
  bool enabled = 2;
  // Long human-readable description.
  string description = 3;
  // Short human-readable summary.
  string summary = 4;
  // Check execution interval.
  AdvisorCheckInterval interval = 5;
  // DB family.
  AdvisorCheckFamily family = 6;
}

message Advisor {
  // Machine-readable name (ID) that is used in expression.
  string name = 1;
  // Long human-readable description.
  string description = 2;
  // Short human-readable summary.
  string summary = 3;
  // Comment.
  string comment = 4;
  // Category.
  string category = 5;
  // Advisor checks.
  repeated AdvisorCheck checks = 6;
}

// ChangeAdvisorCheckParams specifies a single check parameters.
message ChangeAdvisorCheckParams {
  // The name of the check to change.
  string name = 1;
  optional bool enable = 2;
  // check execution interval.
  AdvisorCheckInterval interval = 4;
}

message StartAdvisorChecksRequest {
  // Names of the checks that should be started.
  repeated string names = 1;
}

message StartAdvisorChecksResponse {}

message ListAdvisorChecksRequest {}

message ListAdvisorChecksResponse {
  repeated AdvisorCheck checks = 1;
}

message ListAdvisorsRequest {}

message ListAdvisorsResponse {
  repeated Advisor advisors = 1;
}

message ChangeAdvisorChecksRequest {
  repeated ChangeAdvisorCheckParams params = 1;
}

message ChangeAdvisorChecksResponse {}

message ListFailedServicesRequest {}

message ListFailedServicesResponse {
  repeated CheckResultSummary result = 1;
}

message GetFailedChecksRequest {
  string service_id = 1;
  PageParams page_params = 2;
}

message GetFailedChecksResponse {
  repeated CheckResult results = 1;
  PageTotals page_totals = 2;
}

// AdvisorService service provides public Management API methods for Advisor Service.
service AdvisorService {
  // ListFailedServices returns a list of services with failed checks.
  rpc ListFailedServices(ListFailedServicesRequest) returns (ListFailedServicesResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/ListFailedServices"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Failed Services"
      description: "Returns a list of services with failed checks and a summary of check results."
    };
  }
  // GetFailedChecks returns the checks result for a given service.
  rpc GetFailedChecks(GetFailedChecksRequest) returns (GetFailedChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/FailedChecks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Failed Checks"
      description: "Returns the latest check results for a given service."
    };
  }
  // StartAdvisorChecks executes Advisor checks and returns when all checks are executed.
  rpc StartAdvisorChecks(StartAdvisorChecksRequest) returns (StartAdvisorChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/StartChecks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Start Advisor Checks"
      description: "Executes Advisor checks and returns when all checks are executed. All available checks will be started if check names aren't specified."
    };
  }
  // ListAdvisorChecks returns a list of advisor checks available to the user..
  rpc ListAdvisorChecks(ListAdvisorChecksRequest) returns (ListAdvisorChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/ListChecks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List advisor checks"
      description: "Returns a list of checks available to the user."
    };
  }
  // ListAdvisors returns a list of advisors available for the user.
  rpc ListAdvisors(ListAdvisorsRequest) returns (ListAdvisorsResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/List"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List advisors"
      description: "Returns a list of advisors available to the user."
    };
  }
  // ChangeAdvisorChecks enables/disables Advisor checks or changes their interval by names.
  rpc ChangeAdvisorChecks(ChangeAdvisorChecksRequest) returns (ChangeAdvisorChecksResponse) {
    option (google.api.http) = {
      post: "/v1/management/Advisors/Change"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change Advisor Checks"
      description: "Enables/disables Advisor checks or changes their interval by names."
    };
  }
}
