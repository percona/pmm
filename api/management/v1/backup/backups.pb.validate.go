// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/backup/backups.proto

package backupv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StartBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBackupRequestMultiError, or nil if none found.
func (m *StartBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartBackupRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocationId()) < 1 {
		err := StartBackupRequestValidationError{
			field:  "LocationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetRetryInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBackupRequestValidationError{
				field:  "RetryInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Retries

	// no validation rules for DataModel

	// no validation rules for Folder

	if len(errors) > 0 {
		return StartBackupRequestMultiError(errors)
	}

	return nil
}

// StartBackupRequestMultiError is an error wrapping multiple validation errors
// returned by StartBackupRequest.ValidateAll() if the designated constraints
// aren't met.
type StartBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBackupRequestMultiError) AllErrors() []error { return m }

// StartBackupRequestValidationError is the validation error returned by
// StartBackupRequest.Validate if the designated constraints aren't met.
type StartBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBackupRequestValidationError) ErrorName() string {
	return "StartBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBackupRequestValidationError{}

// Validate checks the field values on StartBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBackupResponseMultiError, or nil if none found.
func (m *StartBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactId

	if len(errors) > 0 {
		return StartBackupResponseMultiError(errors)
	}

	return nil
}

// StartBackupResponseMultiError is an error wrapping multiple validation
// errors returned by StartBackupResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBackupResponseMultiError) AllErrors() []error { return m }

// StartBackupResponseValidationError is the validation error returned by
// StartBackupResponse.Validate if the designated constraints aren't met.
type StartBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBackupResponseValidationError) ErrorName() string {
	return "StartBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBackupResponseValidationError{}

// Validate checks the field values on ListArtifactCompatibleServicesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListArtifactCompatibleServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactCompatibleServicesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListArtifactCompatibleServicesRequestMultiError, or nil if none found.
func (m *ListArtifactCompatibleServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactCompatibleServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetArtifactId()) < 1 {
		err := ListArtifactCompatibleServicesRequestValidationError{
			field:  "ArtifactId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListArtifactCompatibleServicesRequestMultiError(errors)
	}

	return nil
}

// ListArtifactCompatibleServicesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListArtifactCompatibleServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListArtifactCompatibleServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactCompatibleServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactCompatibleServicesRequestMultiError) AllErrors() []error { return m }

// ListArtifactCompatibleServicesRequestValidationError is the validation error
// returned by ListArtifactCompatibleServicesRequest.Validate if the
// designated constraints aren't met.
type ListArtifactCompatibleServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactCompatibleServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactCompatibleServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactCompatibleServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactCompatibleServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactCompatibleServicesRequestValidationError) ErrorName() string {
	return "ListArtifactCompatibleServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactCompatibleServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactCompatibleServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactCompatibleServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactCompatibleServicesRequestValidationError{}

// Validate checks the field values on ListArtifactCompatibleServicesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListArtifactCompatibleServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListArtifactCompatibleServicesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListArtifactCompatibleServicesResponseMultiError, or nil if none found.
func (m *ListArtifactCompatibleServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactCompatibleServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMysql() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArtifactCompatibleServicesResponseValidationError{
						field:  fmt.Sprintf("Mysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArtifactCompatibleServicesResponseValidationError{
						field:  fmt.Sprintf("Mysql[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactCompatibleServicesResponseValidationError{
					field:  fmt.Sprintf("Mysql[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMongodb() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArtifactCompatibleServicesResponseValidationError{
						field:  fmt.Sprintf("Mongodb[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArtifactCompatibleServicesResponseValidationError{
						field:  fmt.Sprintf("Mongodb[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactCompatibleServicesResponseValidationError{
					field:  fmt.Sprintf("Mongodb[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListArtifactCompatibleServicesResponseMultiError(errors)
	}

	return nil
}

// ListArtifactCompatibleServicesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListArtifactCompatibleServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListArtifactCompatibleServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactCompatibleServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactCompatibleServicesResponseMultiError) AllErrors() []error { return m }

// ListArtifactCompatibleServicesResponseValidationError is the validation
// error returned by ListArtifactCompatibleServicesResponse.Validate if the
// designated constraints aren't met.
type ListArtifactCompatibleServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactCompatibleServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactCompatibleServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactCompatibleServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactCompatibleServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactCompatibleServicesResponseValidationError) ErrorName() string {
	return "ListArtifactCompatibleServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactCompatibleServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactCompatibleServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactCompatibleServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactCompatibleServicesResponseValidationError{}

// Validate checks the field values on RestoreBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreBackupRequestMultiError, or nil if none found.
func (m *RestoreBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := RestoreBackupRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetArtifactId()) < 1 {
		err := RestoreBackupRequestValidationError{
			field:  "ArtifactId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPitrTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreBackupRequestValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreBackupRequestValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPitrTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreBackupRequestValidationError{
				field:  "PitrTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreBackupRequestMultiError(errors)
	}

	return nil
}

// RestoreBackupRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreBackupRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreBackupRequestMultiError) AllErrors() []error { return m }

// RestoreBackupRequestValidationError is the validation error returned by
// RestoreBackupRequest.Validate if the designated constraints aren't met.
type RestoreBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreBackupRequestValidationError) ErrorName() string {
	return "RestoreBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreBackupRequestValidationError{}

// Validate checks the field values on RestoreBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreBackupResponseMultiError, or nil if none found.
func (m *RestoreBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RestoreId

	if len(errors) > 0 {
		return RestoreBackupResponseMultiError(errors)
	}

	return nil
}

// RestoreBackupResponseMultiError is an error wrapping multiple validation
// errors returned by RestoreBackupResponse.ValidateAll() if the designated
// constraints aren't met.
type RestoreBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreBackupResponseMultiError) AllErrors() []error { return m }

// RestoreBackupResponseValidationError is the validation error returned by
// RestoreBackupResponse.Validate if the designated constraints aren't met.
type RestoreBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreBackupResponseValidationError) ErrorName() string {
	return "RestoreBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreBackupResponseValidationError{}

// Validate checks the field values on ScheduledBackup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduledBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduledBackup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduledBackupMultiError, or nil if none found.
func (m *ScheduledBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduledBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledBackupId

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for LocationId

	// no validation rules for LocationName

	// no validation rules for Folder

	// no validation rules for CronExpression

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledBackupValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Enabled

	// no validation rules for Retries

	if all {
		switch v := interface{}(m.GetRetryInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledBackupValidationError{
				field:  "RetryInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataModel

	// no validation rules for Mode

	// no validation rules for Vendor

	if all {
		switch v := interface{}(m.GetLastRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "LastRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "LastRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledBackupValidationError{
				field:  "LastRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNextRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "NextRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledBackupValidationError{
					field:  "NextRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledBackupValidationError{
				field:  "NextRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Retention

	if len(errors) > 0 {
		return ScheduledBackupMultiError(errors)
	}

	return nil
}

// ScheduledBackupMultiError is an error wrapping multiple validation errors
// returned by ScheduledBackup.ValidateAll() if the designated constraints
// aren't met.
type ScheduledBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduledBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduledBackupMultiError) AllErrors() []error { return m }

// ScheduledBackupValidationError is the validation error returned by
// ScheduledBackup.Validate if the designated constraints aren't met.
type ScheduledBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledBackupValidationError) ErrorName() string { return "ScheduledBackupValidationError" }

// Error satisfies the builtin error interface
func (e ScheduledBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledBackupValidationError{}

// Validate checks the field values on ScheduleBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleBackupRequestMultiError, or nil if none found.
func (m *ScheduleBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := ScheduleBackupRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocationId()) < 1 {
		err := ScheduleBackupRequestValidationError{
			field:  "LocationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Folder

	if utf8.RuneCountInString(m.GetCronExpression()) < 1 {
		err := ScheduleBackupRequestValidationError{
			field:  "CronExpression",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleBackupRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleBackupRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleBackupRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Enabled

	// no validation rules for Retries

	if all {
		switch v := interface{}(m.GetRetryInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleBackupRequestValidationError{
				field:  "RetryInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mode

	// no validation rules for DataModel

	// no validation rules for Retention

	if len(errors) > 0 {
		return ScheduleBackupRequestMultiError(errors)
	}

	return nil
}

// ScheduleBackupRequestMultiError is an error wrapping multiple validation
// errors returned by ScheduleBackupRequest.ValidateAll() if the designated
// constraints aren't met.
type ScheduleBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleBackupRequestMultiError) AllErrors() []error { return m }

// ScheduleBackupRequestValidationError is the validation error returned by
// ScheduleBackupRequest.Validate if the designated constraints aren't met.
type ScheduleBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleBackupRequestValidationError) ErrorName() string {
	return "ScheduleBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleBackupRequestValidationError{}

// Validate checks the field values on ScheduleBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleBackupResponseMultiError, or nil if none found.
func (m *ScheduleBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledBackupId

	if len(errors) > 0 {
		return ScheduleBackupResponseMultiError(errors)
	}

	return nil
}

// ScheduleBackupResponseMultiError is an error wrapping multiple validation
// errors returned by ScheduleBackupResponse.ValidateAll() if the designated
// constraints aren't met.
type ScheduleBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleBackupResponseMultiError) AllErrors() []error { return m }

// ScheduleBackupResponseValidationError is the validation error returned by
// ScheduleBackupResponse.Validate if the designated constraints aren't met.
type ScheduleBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleBackupResponseValidationError) ErrorName() string {
	return "ScheduleBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleBackupResponseValidationError{}

// Validate checks the field values on ListScheduledBackupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScheduledBackupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScheduledBackupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScheduledBackupsRequestMultiError, or nil if none found.
func (m *ListScheduledBackupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScheduledBackupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListScheduledBackupsRequestMultiError(errors)
	}

	return nil
}

// ListScheduledBackupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListScheduledBackupsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListScheduledBackupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScheduledBackupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScheduledBackupsRequestMultiError) AllErrors() []error { return m }

// ListScheduledBackupsRequestValidationError is the validation error returned
// by ListScheduledBackupsRequest.Validate if the designated constraints
// aren't met.
type ListScheduledBackupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScheduledBackupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScheduledBackupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScheduledBackupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScheduledBackupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScheduledBackupsRequestValidationError) ErrorName() string {
	return "ListScheduledBackupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListScheduledBackupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScheduledBackupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScheduledBackupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScheduledBackupsRequestValidationError{}

// Validate checks the field values on ListScheduledBackupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScheduledBackupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScheduledBackupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScheduledBackupsResponseMultiError, or nil if none found.
func (m *ListScheduledBackupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScheduledBackupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScheduledBackups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListScheduledBackupsResponseValidationError{
						field:  fmt.Sprintf("ScheduledBackups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListScheduledBackupsResponseValidationError{
						field:  fmt.Sprintf("ScheduledBackups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScheduledBackupsResponseValidationError{
					field:  fmt.Sprintf("ScheduledBackups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListScheduledBackupsResponseMultiError(errors)
	}

	return nil
}

// ListScheduledBackupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListScheduledBackupsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListScheduledBackupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScheduledBackupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScheduledBackupsResponseMultiError) AllErrors() []error { return m }

// ListScheduledBackupsResponseValidationError is the validation error returned
// by ListScheduledBackupsResponse.Validate if the designated constraints
// aren't met.
type ListScheduledBackupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScheduledBackupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScheduledBackupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScheduledBackupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScheduledBackupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScheduledBackupsResponseValidationError) ErrorName() string {
	return "ListScheduledBackupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListScheduledBackupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScheduledBackupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScheduledBackupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScheduledBackupsResponseValidationError{}

// Validate checks the field values on ChangeScheduledBackupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeScheduledBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeScheduledBackupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeScheduledBackupRequestMultiError, or nil if none found.
func (m *ChangeScheduledBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeScheduledBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScheduledBackupId()) < 1 {
		err := ChangeScheduledBackupRequestValidationError{
			field:  "ScheduledBackupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeScheduledBackupRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeScheduledBackupRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeScheduledBackupRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetryInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeScheduledBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeScheduledBackupRequestValidationError{
					field:  "RetryInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeScheduledBackupRequestValidationError{
				field:  "RetryInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.CronExpression != nil {
		// no validation rules for CronExpression
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Retries != nil {
		// no validation rules for Retries
	}

	if m.Retention != nil {
		// no validation rules for Retention
	}

	if len(errors) > 0 {
		return ChangeScheduledBackupRequestMultiError(errors)
	}

	return nil
}

// ChangeScheduledBackupRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeScheduledBackupRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeScheduledBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeScheduledBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeScheduledBackupRequestMultiError) AllErrors() []error { return m }

// ChangeScheduledBackupRequestValidationError is the validation error returned
// by ChangeScheduledBackupRequest.Validate if the designated constraints
// aren't met.
type ChangeScheduledBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeScheduledBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeScheduledBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeScheduledBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeScheduledBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeScheduledBackupRequestValidationError) ErrorName() string {
	return "ChangeScheduledBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeScheduledBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeScheduledBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeScheduledBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeScheduledBackupRequestValidationError{}

// Validate checks the field values on ChangeScheduledBackupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeScheduledBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeScheduledBackupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeScheduledBackupResponseMultiError, or nil if none found.
func (m *ChangeScheduledBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeScheduledBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeScheduledBackupResponseMultiError(errors)
	}

	return nil
}

// ChangeScheduledBackupResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeScheduledBackupResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeScheduledBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeScheduledBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeScheduledBackupResponseMultiError) AllErrors() []error { return m }

// ChangeScheduledBackupResponseValidationError is the validation error
// returned by ChangeScheduledBackupResponse.Validate if the designated
// constraints aren't met.
type ChangeScheduledBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeScheduledBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeScheduledBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeScheduledBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeScheduledBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeScheduledBackupResponseValidationError) ErrorName() string {
	return "ChangeScheduledBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeScheduledBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeScheduledBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeScheduledBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeScheduledBackupResponseValidationError{}

// Validate checks the field values on RemoveScheduledBackupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveScheduledBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveScheduledBackupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveScheduledBackupRequestMultiError, or nil if none found.
func (m *RemoveScheduledBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveScheduledBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScheduledBackupId()) < 1 {
		err := RemoveScheduledBackupRequestValidationError{
			field:  "ScheduledBackupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveScheduledBackupRequestMultiError(errors)
	}

	return nil
}

// RemoveScheduledBackupRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveScheduledBackupRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveScheduledBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveScheduledBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveScheduledBackupRequestMultiError) AllErrors() []error { return m }

// RemoveScheduledBackupRequestValidationError is the validation error returned
// by RemoveScheduledBackupRequest.Validate if the designated constraints
// aren't met.
type RemoveScheduledBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveScheduledBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveScheduledBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveScheduledBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveScheduledBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveScheduledBackupRequestValidationError) ErrorName() string {
	return "RemoveScheduledBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveScheduledBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveScheduledBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveScheduledBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveScheduledBackupRequestValidationError{}

// Validate checks the field values on RemoveScheduledBackupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveScheduledBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveScheduledBackupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveScheduledBackupResponseMultiError, or nil if none found.
func (m *RemoveScheduledBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveScheduledBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveScheduledBackupResponseMultiError(errors)
	}

	return nil
}

// RemoveScheduledBackupResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveScheduledBackupResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveScheduledBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveScheduledBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveScheduledBackupResponseMultiError) AllErrors() []error { return m }

// RemoveScheduledBackupResponseValidationError is the validation error
// returned by RemoveScheduledBackupResponse.Validate if the designated
// constraints aren't met.
type RemoveScheduledBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveScheduledBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveScheduledBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveScheduledBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveScheduledBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveScheduledBackupResponseValidationError) ErrorName() string {
	return "RemoveScheduledBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveScheduledBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveScheduledBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveScheduledBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveScheduledBackupResponseValidationError{}

// Validate checks the field values on GetLogsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogsRequestMultiError,
// or nil if none found.
func (m *GetLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactId

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for RestoreId

	if len(errors) > 0 {
		return GetLogsRequestMultiError(errors)
	}

	return nil
}

// GetLogsRequestMultiError is an error wrapping multiple validation errors
// returned by GetLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogsRequestMultiError) AllErrors() []error { return m }

// GetLogsRequestValidationError is the validation error returned by
// GetLogsRequest.Validate if the designated constraints aren't met.
type GetLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogsRequestValidationError) ErrorName() string { return "GetLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogsRequestValidationError{}

// Validate checks the field values on GetLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogsResponseMultiError, or nil if none found.
func (m *GetLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogsResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for End

	if len(errors) > 0 {
		return GetLogsResponseMultiError(errors)
	}

	return nil
}

// GetLogsResponseMultiError is an error wrapping multiple validation errors
// returned by GetLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogsResponseMultiError) AllErrors() []error { return m }

// GetLogsResponseValidationError is the validation error returned by
// GetLogsResponse.Validate if the designated constraints aren't met.
type GetLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogsResponseValidationError) ErrorName() string { return "GetLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogsResponseValidationError{}

// Validate checks the field values on LogChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogChunkMultiError, or nil
// if none found.
func (m *LogChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *LogChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkId

	// no validation rules for Data

	if len(errors) > 0 {
		return LogChunkMultiError(errors)
	}

	return nil
}

// LogChunkMultiError is an error wrapping multiple validation errors returned
// by LogChunk.ValidateAll() if the designated constraints aren't met.
type LogChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogChunkMultiError) AllErrors() []error { return m }

// LogChunkValidationError is the validation error returned by
// LogChunk.Validate if the designated constraints aren't met.
type LogChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogChunkValidationError) ErrorName() string { return "LogChunkValidationError" }

// Error satisfies the builtin error interface
func (e LogChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogChunkValidationError{}
