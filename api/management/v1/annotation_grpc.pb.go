// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/annotation.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnnotationService_AddAnnotation_FullMethodName = "/management.v1.AnnotationService/AddAnnotation"
)

// AnnotationServiceClient is the client API for AnnotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnotationServiceClient interface {
	// AddAnnotation adds annotation.
	AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...grpc.CallOption) (*AddAnnotationResponse, error)
}

type annotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnotationServiceClient(cc grpc.ClientConnInterface) AnnotationServiceClient {
	return &annotationServiceClient{cc}
}

func (c *annotationServiceClient) AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...grpc.CallOption) (*AddAnnotationResponse, error) {
	out := new(AddAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_AddAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnotationServiceServer is the server API for AnnotationService service.
// All implementations must embed UnimplementedAnnotationServiceServer
// for forward compatibility
type AnnotationServiceServer interface {
	// AddAnnotation adds annotation.
	AddAnnotation(context.Context, *AddAnnotationRequest) (*AddAnnotationResponse, error)
	mustEmbedUnimplementedAnnotationServiceServer()
}

// UnimplementedAnnotationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnotationServiceServer struct{}

func (UnimplementedAnnotationServiceServer) AddAnnotation(context.Context, *AddAnnotationRequest) (*AddAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) mustEmbedUnimplementedAnnotationServiceServer() {}

// UnsafeAnnotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnotationServiceServer will
// result in compilation errors.
type UnsafeAnnotationServiceServer interface {
	mustEmbedUnimplementedAnnotationServiceServer()
}

func RegisterAnnotationServiceServer(s grpc.ServiceRegistrar, srv AnnotationServiceServer) {
	s.RegisterService(&AnnotationService_ServiceDesc, srv)
}

func _AnnotationService_AddAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).AddAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_AddAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).AddAnnotation(ctx, req.(*AddAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnotationService_ServiceDesc is the grpc.ServiceDesc for AnnotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.AnnotationService",
	HandlerType: (*AnnotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnnotation",
			Handler:    _AnnotationService_AddAnnotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/annotation.proto",
}
