// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/service.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	inventoryv1 "github.com/percona/pmm/api/inventory/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = inventoryv1.ServiceType(0)
)

// Validate checks the field values on AddServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceRequestMultiError, or nil if none found.
func (m *AddServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *AddServiceRequest_Mysql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Mongodb:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Postgresql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Proxysql:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Haproxy:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_External:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceRequest_Rds:
		if v == nil {
			err := AddServiceRequestValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Rds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceRequestValidationError{
						field:  "Rds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceRequestValidationError{
					field:  "Rds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServiceRequestMultiError(errors)
	}

	return nil
}

// AddServiceRequestMultiError is an error wrapping multiple validation errors
// returned by AddServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceRequestMultiError) AllErrors() []error { return m }

// AddServiceRequestValidationError is the validation error returned by
// AddServiceRequest.Validate if the designated constraints aren't met.
type AddServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceRequestValidationError) ErrorName() string {
	return "AddServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceRequestValidationError{}

// Validate checks the field values on AddServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceResponseMultiError, or nil if none found.
func (m *AddServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Service.(type) {
	case *AddServiceResponse_Mysql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Mongodb:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Postgresql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Postgresql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Postgresql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Proxysql:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProxysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Proxysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProxysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Proxysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Haproxy:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaproxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Haproxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaproxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Haproxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_External:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "External",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddServiceResponse_Rds:
		if v == nil {
			err := AddServiceResponseValidationError{
				field:  "Service",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Rds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddServiceResponseValidationError{
						field:  "Rds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddServiceResponseValidationError{
					field:  "Rds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddServiceResponseMultiError(errors)
	}

	return nil
}

// AddServiceResponseMultiError is an error wrapping multiple validation errors
// returned by AddServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceResponseMultiError) AllErrors() []error { return m }

// AddServiceResponseValidationError is the validation error returned by
// AddServiceResponse.Validate if the designated constraints aren't met.
type AddServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceResponseValidationError) ErrorName() string {
	return "AddServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceResponseValidationError{}

// Validate checks the field values on RemoveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServiceRequestMultiError, or nil if none found.
func (m *RemoveServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	if len(errors) > 0 {
		return RemoveServiceRequestMultiError(errors)
	}

	return nil
}

// RemoveServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceRequestMultiError) AllErrors() []error { return m }

// RemoveServiceRequestValidationError is the validation error returned by
// RemoveServiceRequest.Validate if the designated constraints aren't met.
type RemoveServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceRequestValidationError) ErrorName() string {
	return "RemoveServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceRequestValidationError{}

// Validate checks the field values on RemoveServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServiceResponseMultiError, or nil if none found.
func (m *RemoveServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveServiceResponseMultiError(errors)
	}

	return nil
}

// RemoveServiceResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceResponseMultiError) AllErrors() []error { return m }

// RemoveServiceResponseValidationError is the validation error returned by
// RemoveServiceResponse.Validate if the designated constraints aren't met.
type RemoveServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceResponseValidationError) ErrorName() string {
	return "RemoveServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceResponseValidationError{}

// Validate checks the field values on UniversalService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UniversalService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UniversalService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UniversalServiceMultiError, or nil if none found.
func (m *UniversalService) ValidateAll() error {
	return m.validate(true)
}

func (m *UniversalService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for ServiceName

	// no validation rules for DatabaseName

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Environment

	// no validation rules for Cluster

	// no validation rules for ReplicationSet

	// no validation rules for CustomLabels

	// no validation rules for ExternalGroup

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UniversalServiceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UniversalServiceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UniversalServiceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UniversalServiceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UniversalServiceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UniversalServiceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UniversalServiceValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UniversalServiceValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UniversalServiceValidationError{
					field:  fmt.Sprintf("Agents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for Version

	if len(errors) > 0 {
		return UniversalServiceMultiError(errors)
	}

	return nil
}

// UniversalServiceMultiError is an error wrapping multiple validation errors
// returned by UniversalService.ValidateAll() if the designated constraints
// aren't met.
type UniversalServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UniversalServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UniversalServiceMultiError) AllErrors() []error { return m }

// UniversalServiceValidationError is the validation error returned by
// UniversalService.Validate if the designated constraints aren't met.
type UniversalServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UniversalServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UniversalServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UniversalServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UniversalServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UniversalServiceValidationError) ErrorName() string { return "UniversalServiceValidationError" }

// Error satisfies the builtin error interface
func (e UniversalServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUniversalService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UniversalServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UniversalServiceValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for ServiceType

	// no validation rules for ExternalGroup

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}
