// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: management/v1/checks.proto

package managementv1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AdvisorCheckInterval represents possible execution interval values for checks.
type AdvisorCheckInterval int32

const (
	AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_UNSPECIFIED AdvisorCheckInterval = 0
	AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_STANDARD    AdvisorCheckInterval = 1
	AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_FREQUENT    AdvisorCheckInterval = 2
	AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_RARE        AdvisorCheckInterval = 3
)

// Enum value maps for AdvisorCheckInterval.
var (
	AdvisorCheckInterval_name = map[int32]string{
		0: "ADVISOR_CHECK_INTERVAL_UNSPECIFIED",
		1: "ADVISOR_CHECK_INTERVAL_STANDARD",
		2: "ADVISOR_CHECK_INTERVAL_FREQUENT",
		3: "ADVISOR_CHECK_INTERVAL_RARE",
	}
	AdvisorCheckInterval_value = map[string]int32{
		"ADVISOR_CHECK_INTERVAL_UNSPECIFIED": 0,
		"ADVISOR_CHECK_INTERVAL_STANDARD":    1,
		"ADVISOR_CHECK_INTERVAL_FREQUENT":    2,
		"ADVISOR_CHECK_INTERVAL_RARE":        3,
	}
)

func (x AdvisorCheckInterval) Enum() *AdvisorCheckInterval {
	p := new(AdvisorCheckInterval)
	*p = x
	return p
}

func (x AdvisorCheckInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvisorCheckInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_management_v1_checks_proto_enumTypes[0].Descriptor()
}

func (AdvisorCheckInterval) Type() protoreflect.EnumType {
	return &file_management_v1_checks_proto_enumTypes[0]
}

func (x AdvisorCheckInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvisorCheckInterval.Descriptor instead.
func (AdvisorCheckInterval) EnumDescriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{0}
}

type AdvisorCheckFamily int32

const (
	AdvisorCheckFamily_ADVISOR_CHECK_FAMILY_UNSPECIFIED AdvisorCheckFamily = 0
	AdvisorCheckFamily_ADVISOR_CHECK_FAMILY_MYSQL       AdvisorCheckFamily = 1
	AdvisorCheckFamily_ADVISOR_CHECK_FAMILY_POSTGRESQL  AdvisorCheckFamily = 2
	AdvisorCheckFamily_ADVISOR_CHECK_FAMILY_MONGODB     AdvisorCheckFamily = 3
)

// Enum value maps for AdvisorCheckFamily.
var (
	AdvisorCheckFamily_name = map[int32]string{
		0: "ADVISOR_CHECK_FAMILY_UNSPECIFIED",
		1: "ADVISOR_CHECK_FAMILY_MYSQL",
		2: "ADVISOR_CHECK_FAMILY_POSTGRESQL",
		3: "ADVISOR_CHECK_FAMILY_MONGODB",
	}
	AdvisorCheckFamily_value = map[string]int32{
		"ADVISOR_CHECK_FAMILY_UNSPECIFIED": 0,
		"ADVISOR_CHECK_FAMILY_MYSQL":       1,
		"ADVISOR_CHECK_FAMILY_POSTGRESQL":  2,
		"ADVISOR_CHECK_FAMILY_MONGODB":     3,
	}
)

func (x AdvisorCheckFamily) Enum() *AdvisorCheckFamily {
	p := new(AdvisorCheckFamily)
	*p = x
	return p
}

func (x AdvisorCheckFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvisorCheckFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_management_v1_checks_proto_enumTypes[1].Descriptor()
}

func (AdvisorCheckFamily) Type() protoreflect.EnumType {
	return &file_management_v1_checks_proto_enumTypes[1]
}

func (x AdvisorCheckFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvisorCheckFamily.Descriptor instead.
func (AdvisorCheckFamily) EnumDescriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{1}
}

// AdvisorCheckResult represents the check result returned from pmm-managed after running the check.
type AdvisorCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary     string            `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Severity    Severity          `protobuf:"varint,3,opt,name=severity,proto3,enum=management.v1.Severity" json:"severity,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URL containing information on how to resolve an issue detected by an Advisor check.
	ReadMoreUrl string `protobuf:"bytes,5,opt,name=read_more_url,json=readMoreUrl,proto3" json:"read_more_url,omitempty"`
	// Name of the monitored service on which the check ran.
	ServiceName string `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *AdvisorCheckResult) Reset() {
	*x = AdvisorCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisorCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisorCheckResult) ProtoMessage() {}

func (x *AdvisorCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisorCheckResult.ProtoReflect.Descriptor instead.
func (*AdvisorCheckResult) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{0}
}

func (x *AdvisorCheckResult) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *AdvisorCheckResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdvisorCheckResult) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *AdvisorCheckResult) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AdvisorCheckResult) GetReadMoreUrl() string {
	if x != nil {
		return x.ReadMoreUrl
	}
	return ""
}

func (x *AdvisorCheckResult) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// CheckResultSummary is a summary of check results.
type CheckResultSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceId   string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Number of failed checks for this service with severity level "EMERGENCY".
	EmergencyCount uint32 `protobuf:"varint,3,opt,name=emergency_count,json=emergencyCount,proto3" json:"emergency_count,omitempty"`
	// Number of failed checks for this service with severity level "ALERT".
	AlertCount uint32 `protobuf:"varint,4,opt,name=alert_count,json=alertCount,proto3" json:"alert_count,omitempty"`
	// Number of failed checks for this service with severity level "CRITICAL".
	CriticalCount uint32 `protobuf:"varint,5,opt,name=critical_count,json=criticalCount,proto3" json:"critical_count,omitempty"`
	// Number of failed checks for this service with severity level "ERROR".
	ErrorCount uint32 `protobuf:"varint,6,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// Number of failed checks for this service with severity level "WARNING".
	WarningCount uint32 `protobuf:"varint,7,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
	// Number of failed checks for this service with severity level "NOTICE".
	NoticeCount uint32 `protobuf:"varint,8,opt,name=notice_count,json=noticeCount,proto3" json:"notice_count,omitempty"`
	// Number of failed checks for this service with severity level "INFO".
	InfoCount uint32 `protobuf:"varint,9,opt,name=info_count,json=infoCount,proto3" json:"info_count,omitempty"`
	// Number of failed checks for this service with severity level "DEBUG".
	DebugCount uint32 `protobuf:"varint,10,opt,name=debug_count,json=debugCount,proto3" json:"debug_count,omitempty"`
}

func (x *CheckResultSummary) Reset() {
	*x = CheckResultSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResultSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResultSummary) ProtoMessage() {}

func (x *CheckResultSummary) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResultSummary.ProtoReflect.Descriptor instead.
func (*CheckResultSummary) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResultSummary) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CheckResultSummary) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CheckResultSummary) GetEmergencyCount() uint32 {
	if x != nil {
		return x.EmergencyCount
	}
	return 0
}

func (x *CheckResultSummary) GetAlertCount() uint32 {
	if x != nil {
		return x.AlertCount
	}
	return 0
}

func (x *CheckResultSummary) GetCriticalCount() uint32 {
	if x != nil {
		return x.CriticalCount
	}
	return 0
}

func (x *CheckResultSummary) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *CheckResultSummary) GetWarningCount() uint32 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

func (x *CheckResultSummary) GetNoticeCount() uint32 {
	if x != nil {
		return x.NoticeCount
	}
	return 0
}

func (x *CheckResultSummary) GetInfoCount() uint32 {
	if x != nil {
		return x.InfoCount
	}
	return 0
}

func (x *CheckResultSummary) GetDebugCount() uint32 {
	if x != nil {
		return x.DebugCount
	}
	return 0
}

// CheckResult represents the check results for a given service.
type CheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary     string            `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Severity    Severity          `protobuf:"varint,3,opt,name=severity,proto3,enum=management.v1.Severity" json:"severity,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URL containing information on how to resolve an issue detected by an Advisor check.
	ReadMoreUrl string `protobuf:"bytes,5,opt,name=read_more_url,json=readMoreUrl,proto3" json:"read_more_url,omitempty"`
	// Name of the monitored service on which the check ran.
	ServiceName string `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// ID of the monitored service on which the check ran.
	ServiceId string `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Name of the check that failed
	CheckName string `protobuf:"bytes,8,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	// Silence status of the check result
	Silenced bool `protobuf:"varint,10,opt,name=silenced,proto3" json:"silenced,omitempty"`
}

func (x *CheckResult) Reset() {
	*x = CheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResult) ProtoMessage() {}

func (x *CheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResult.ProtoReflect.Descriptor instead.
func (*CheckResult) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{2}
}

func (x *CheckResult) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CheckResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CheckResult) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *CheckResult) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CheckResult) GetReadMoreUrl() string {
	if x != nil {
		return x.ReadMoreUrl
	}
	return ""
}

func (x *CheckResult) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CheckResult) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CheckResult) GetCheckName() string {
	if x != nil {
		return x.CheckName
	}
	return ""
}

func (x *CheckResult) GetSilenced() bool {
	if x != nil {
		return x.Silenced
	}
	return false
}

// AdvisorCheck contains check name and status.
type AdvisorCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine-readable name (ID) that is used in expression.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// True if that check is enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Long human-readable description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Short human-readable summary.
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Check execution interval.
	Interval AdvisorCheckInterval `protobuf:"varint,5,opt,name=interval,proto3,enum=management.v1.AdvisorCheckInterval" json:"interval,omitempty"`
	// DB family.
	Family AdvisorCheckFamily `protobuf:"varint,6,opt,name=family,proto3,enum=management.v1.AdvisorCheckFamily" json:"family,omitempty"`
}

func (x *AdvisorCheck) Reset() {
	*x = AdvisorCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisorCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisorCheck) ProtoMessage() {}

func (x *AdvisorCheck) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisorCheck.ProtoReflect.Descriptor instead.
func (*AdvisorCheck) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{3}
}

func (x *AdvisorCheck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdvisorCheck) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AdvisorCheck) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdvisorCheck) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *AdvisorCheck) GetInterval() AdvisorCheckInterval {
	if x != nil {
		return x.Interval
	}
	return AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_UNSPECIFIED
}

func (x *AdvisorCheck) GetFamily() AdvisorCheckFamily {
	if x != nil {
		return x.Family
	}
	return AdvisorCheckFamily_ADVISOR_CHECK_FAMILY_UNSPECIFIED
}

type Advisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine-readable name (ID) that is used in expression.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Long human-readable description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Short human-readable summary.
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Comment.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Category.
	Category string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// Advisor checks.
	Checks []*AdvisorCheck `protobuf:"bytes,6,rep,name=checks,proto3" json:"checks,omitempty"`
}

func (x *Advisor) Reset() {
	*x = Advisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisor) ProtoMessage() {}

func (x *Advisor) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisor.ProtoReflect.Descriptor instead.
func (*Advisor) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{4}
}

func (x *Advisor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Advisor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Advisor) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Advisor) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Advisor) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Advisor) GetChecks() []*AdvisorCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

// ChangeAdvisorCheckParams specifies a single check parameters.
type ChangeAdvisorCheckParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the check to change.
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enable *bool  `protobuf:"varint,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// check execution interval.
	Interval AdvisorCheckInterval `protobuf:"varint,4,opt,name=interval,proto3,enum=management.v1.AdvisorCheckInterval" json:"interval,omitempty"`
}

func (x *ChangeAdvisorCheckParams) Reset() {
	*x = ChangeAdvisorCheckParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdvisorCheckParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdvisorCheckParams) ProtoMessage() {}

func (x *ChangeAdvisorCheckParams) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdvisorCheckParams.ProtoReflect.Descriptor instead.
func (*ChangeAdvisorCheckParams) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeAdvisorCheckParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChangeAdvisorCheckParams) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *ChangeAdvisorCheckParams) GetInterval() AdvisorCheckInterval {
	if x != nil {
		return x.Interval
	}
	return AdvisorCheckInterval_ADVISOR_CHECK_INTERVAL_UNSPECIFIED
}

type StartAdvisorChecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names of the checks that should be started.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *StartAdvisorChecksRequest) Reset() {
	*x = StartAdvisorChecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAdvisorChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAdvisorChecksRequest) ProtoMessage() {}

func (x *StartAdvisorChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAdvisorChecksRequest.ProtoReflect.Descriptor instead.
func (*StartAdvisorChecksRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{6}
}

func (x *StartAdvisorChecksRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type StartAdvisorChecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartAdvisorChecksResponse) Reset() {
	*x = StartAdvisorChecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAdvisorChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAdvisorChecksResponse) ProtoMessage() {}

func (x *StartAdvisorChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAdvisorChecksResponse.ProtoReflect.Descriptor instead.
func (*StartAdvisorChecksResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{7}
}

type ListAdvisorChecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdvisorChecksRequest) Reset() {
	*x = ListAdvisorChecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdvisorChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdvisorChecksRequest) ProtoMessage() {}

func (x *ListAdvisorChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdvisorChecksRequest.ProtoReflect.Descriptor instead.
func (*ListAdvisorChecksRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{8}
}

type ListAdvisorChecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checks []*AdvisorCheck `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty"`
}

func (x *ListAdvisorChecksResponse) Reset() {
	*x = ListAdvisorChecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdvisorChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdvisorChecksResponse) ProtoMessage() {}

func (x *ListAdvisorChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdvisorChecksResponse.ProtoReflect.Descriptor instead.
func (*ListAdvisorChecksResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{9}
}

func (x *ListAdvisorChecksResponse) GetChecks() []*AdvisorCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type ListAdvisorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdvisorsRequest) Reset() {
	*x = ListAdvisorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdvisorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdvisorsRequest) ProtoMessage() {}

func (x *ListAdvisorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdvisorsRequest.ProtoReflect.Descriptor instead.
func (*ListAdvisorsRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{10}
}

type ListAdvisorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advisors []*Advisor `protobuf:"bytes,1,rep,name=advisors,proto3" json:"advisors,omitempty"`
}

func (x *ListAdvisorsResponse) Reset() {
	*x = ListAdvisorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdvisorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdvisorsResponse) ProtoMessage() {}

func (x *ListAdvisorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdvisorsResponse.ProtoReflect.Descriptor instead.
func (*ListAdvisorsResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{11}
}

func (x *ListAdvisorsResponse) GetAdvisors() []*Advisor {
	if x != nil {
		return x.Advisors
	}
	return nil
}

type ChangeAdvisorChecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*ChangeAdvisorCheckParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ChangeAdvisorChecksRequest) Reset() {
	*x = ChangeAdvisorChecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdvisorChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdvisorChecksRequest) ProtoMessage() {}

func (x *ChangeAdvisorChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdvisorChecksRequest.ProtoReflect.Descriptor instead.
func (*ChangeAdvisorChecksRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeAdvisorChecksRequest) GetParams() []*ChangeAdvisorCheckParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ChangeAdvisorChecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeAdvisorChecksResponse) Reset() {
	*x = ChangeAdvisorChecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdvisorChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdvisorChecksResponse) ProtoMessage() {}

func (x *ChangeAdvisorChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdvisorChecksResponse.ProtoReflect.Descriptor instead.
func (*ChangeAdvisorChecksResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{13}
}

type ListFailedServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFailedServicesRequest) Reset() {
	*x = ListFailedServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedServicesRequest) ProtoMessage() {}

func (x *ListFailedServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedServicesRequest.ProtoReflect.Descriptor instead.
func (*ListFailedServicesRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{14}
}

type ListFailedServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*CheckResultSummary `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListFailedServicesResponse) Reset() {
	*x = ListFailedServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedServicesResponse) ProtoMessage() {}

func (x *ListFailedServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedServicesResponse.ProtoReflect.Descriptor instead.
func (*ListFailedServicesResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{15}
}

func (x *ListFailedServicesResponse) GetResult() []*CheckResultSummary {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetFailedChecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId  string      `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	PageParams *PageParams `protobuf:"bytes,2,opt,name=page_params,json=pageParams,proto3" json:"page_params,omitempty"`
}

func (x *GetFailedChecksRequest) Reset() {
	*x = GetFailedChecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFailedChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFailedChecksRequest) ProtoMessage() {}

func (x *GetFailedChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFailedChecksRequest.ProtoReflect.Descriptor instead.
func (*GetFailedChecksRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{16}
}

func (x *GetFailedChecksRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GetFailedChecksRequest) GetPageParams() *PageParams {
	if x != nil {
		return x.PageParams
	}
	return nil
}

type GetFailedChecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*CheckResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	PageTotals *PageTotals    `protobuf:"bytes,2,opt,name=page_totals,json=pageTotals,proto3" json:"page_totals,omitempty"`
}

func (x *GetFailedChecksResponse) Reset() {
	*x = GetFailedChecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_v1_checks_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFailedChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFailedChecksResponse) ProtoMessage() {}

func (x *GetFailedChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_checks_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFailedChecksResponse.ProtoReflect.Descriptor instead.
func (*GetFailedChecksResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_checks_proto_rawDescGZIP(), []int{17}
}

func (x *GetFailedChecksResponse) GetResults() []*CheckResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetFailedChecksResponse) GetPageTotals() *PageTotals {
	if x != nil {
		return x.PageTotals
	}
	return nil
}

var File_management_v1_checks_proto protoreflect.FileDescriptor

var file_management_v1_checks_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x03, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22,
	0xc4, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x31, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x08, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x73, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x2a, 0xa9, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x44,
	0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x52,
	0x41, 0x52, 0x45, 0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47,
	0x52, 0x45, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x10, 0x03, 0x32, 0xe1, 0x0b, 0x0a, 0x0e, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x02, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x65, 0x12, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x4d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x4a,
	0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x1a, 0x35, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0xbe, 0x02, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x28, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x92, 0x41, 0xa0, 0x01, 0x12, 0x14, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x20, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x1a, 0x87, 0x01, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x20, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x6e, 0x27,
	0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x76, 0x92, 0x41, 0x46, 0x12, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0x2f, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73,
	0x2f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x42, 0x12, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x31, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0xf7, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x88, 0x01, 0x92, 0x41, 0x5c, 0x12, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a,
	0x43, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x20, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x20, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0xac, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa,
	0x02, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_management_v1_checks_proto_rawDescOnce sync.Once
	file_management_v1_checks_proto_rawDescData = file_management_v1_checks_proto_rawDesc
)

func file_management_v1_checks_proto_rawDescGZIP() []byte {
	file_management_v1_checks_proto_rawDescOnce.Do(func() {
		file_management_v1_checks_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_v1_checks_proto_rawDescData)
	})
	return file_management_v1_checks_proto_rawDescData
}

var (
	file_management_v1_checks_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_management_v1_checks_proto_msgTypes  = make([]protoimpl.MessageInfo, 20)
	file_management_v1_checks_proto_goTypes   = []interface{}{
		(AdvisorCheckInterval)(0),           // 0: management.v1.AdvisorCheckInterval
		(AdvisorCheckFamily)(0),             // 1: management.v1.AdvisorCheckFamily
		(*AdvisorCheckResult)(nil),          // 2: management.v1.AdvisorCheckResult
		(*CheckResultSummary)(nil),          // 3: management.v1.CheckResultSummary
		(*CheckResult)(nil),                 // 4: management.v1.CheckResult
		(*AdvisorCheck)(nil),                // 5: management.v1.AdvisorCheck
		(*Advisor)(nil),                     // 6: management.v1.Advisor
		(*ChangeAdvisorCheckParams)(nil),    // 7: management.v1.ChangeAdvisorCheckParams
		(*StartAdvisorChecksRequest)(nil),   // 8: management.v1.StartAdvisorChecksRequest
		(*StartAdvisorChecksResponse)(nil),  // 9: management.v1.StartAdvisorChecksResponse
		(*ListAdvisorChecksRequest)(nil),    // 10: management.v1.ListAdvisorChecksRequest
		(*ListAdvisorChecksResponse)(nil),   // 11: management.v1.ListAdvisorChecksResponse
		(*ListAdvisorsRequest)(nil),         // 12: management.v1.ListAdvisorsRequest
		(*ListAdvisorsResponse)(nil),        // 13: management.v1.ListAdvisorsResponse
		(*ChangeAdvisorChecksRequest)(nil),  // 14: management.v1.ChangeAdvisorChecksRequest
		(*ChangeAdvisorChecksResponse)(nil), // 15: management.v1.ChangeAdvisorChecksResponse
		(*ListFailedServicesRequest)(nil),   // 16: management.v1.ListFailedServicesRequest
		(*ListFailedServicesResponse)(nil),  // 17: management.v1.ListFailedServicesResponse
		(*GetFailedChecksRequest)(nil),      // 18: management.v1.GetFailedChecksRequest
		(*GetFailedChecksResponse)(nil),     // 19: management.v1.GetFailedChecksResponse
		nil,                                 // 20: management.v1.AdvisorCheckResult.LabelsEntry
		nil,                                 // 21: management.v1.CheckResult.LabelsEntry
		(Severity)(0),                       // 22: management.v1.Severity
		(*PageParams)(nil),                  // 23: management.v1.PageParams
		(*PageTotals)(nil),                  // 24: management.v1.PageTotals
	}
)

var file_management_v1_checks_proto_depIdxs = []int32{
	22, // 0: management.v1.AdvisorCheckResult.severity:type_name -> management.v1.Severity
	20, // 1: management.v1.AdvisorCheckResult.labels:type_name -> management.v1.AdvisorCheckResult.LabelsEntry
	22, // 2: management.v1.CheckResult.severity:type_name -> management.v1.Severity
	21, // 3: management.v1.CheckResult.labels:type_name -> management.v1.CheckResult.LabelsEntry
	0,  // 4: management.v1.AdvisorCheck.interval:type_name -> management.v1.AdvisorCheckInterval
	1,  // 5: management.v1.AdvisorCheck.family:type_name -> management.v1.AdvisorCheckFamily
	5,  // 6: management.v1.Advisor.checks:type_name -> management.v1.AdvisorCheck
	0,  // 7: management.v1.ChangeAdvisorCheckParams.interval:type_name -> management.v1.AdvisorCheckInterval
	5,  // 8: management.v1.ListAdvisorChecksResponse.checks:type_name -> management.v1.AdvisorCheck
	6,  // 9: management.v1.ListAdvisorsResponse.advisors:type_name -> management.v1.Advisor
	7,  // 10: management.v1.ChangeAdvisorChecksRequest.params:type_name -> management.v1.ChangeAdvisorCheckParams
	3,  // 11: management.v1.ListFailedServicesResponse.result:type_name -> management.v1.CheckResultSummary
	23, // 12: management.v1.GetFailedChecksRequest.page_params:type_name -> management.v1.PageParams
	4,  // 13: management.v1.GetFailedChecksResponse.results:type_name -> management.v1.CheckResult
	24, // 14: management.v1.GetFailedChecksResponse.page_totals:type_name -> management.v1.PageTotals
	16, // 15: management.v1.AdvisorService.ListFailedServices:input_type -> management.v1.ListFailedServicesRequest
	18, // 16: management.v1.AdvisorService.GetFailedChecks:input_type -> management.v1.GetFailedChecksRequest
	8,  // 17: management.v1.AdvisorService.StartAdvisorChecks:input_type -> management.v1.StartAdvisorChecksRequest
	10, // 18: management.v1.AdvisorService.ListAdvisorChecks:input_type -> management.v1.ListAdvisorChecksRequest
	12, // 19: management.v1.AdvisorService.ListAdvisors:input_type -> management.v1.ListAdvisorsRequest
	14, // 20: management.v1.AdvisorService.ChangeAdvisorChecks:input_type -> management.v1.ChangeAdvisorChecksRequest
	17, // 21: management.v1.AdvisorService.ListFailedServices:output_type -> management.v1.ListFailedServicesResponse
	19, // 22: management.v1.AdvisorService.GetFailedChecks:output_type -> management.v1.GetFailedChecksResponse
	9,  // 23: management.v1.AdvisorService.StartAdvisorChecks:output_type -> management.v1.StartAdvisorChecksResponse
	11, // 24: management.v1.AdvisorService.ListAdvisorChecks:output_type -> management.v1.ListAdvisorChecksResponse
	13, // 25: management.v1.AdvisorService.ListAdvisors:output_type -> management.v1.ListAdvisorsResponse
	15, // 26: management.v1.AdvisorService.ChangeAdvisorChecks:output_type -> management.v1.ChangeAdvisorChecksResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_management_v1_checks_proto_init() }
func file_management_v1_checks_proto_init() {
	if File_management_v1_checks_proto != nil {
		return
	}
	file_management_v1_pagination_proto_init()
	file_management_v1_severity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_management_v1_checks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvisorCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResultSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvisorCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdvisorCheckParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAdvisorChecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAdvisorChecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdvisorChecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdvisorChecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdvisorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdvisorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdvisorChecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdvisorChecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFailedChecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_v1_checks_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFailedChecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_management_v1_checks_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_v1_checks_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_v1_checks_proto_goTypes,
		DependencyIndexes: file_management_v1_checks_proto_depIdxs,
		EnumInfos:         file_management_v1_checks_proto_enumTypes,
		MessageInfos:      file_management_v1_checks_proto_msgTypes,
	}.Build()
	File_management_v1_checks_proto = out.File
	file_management_v1_checks_proto_rawDesc = nil
	file_management_v1_checks_proto_goTypes = nil
	file_management_v1_checks_proto_depIdxs = nil
}
