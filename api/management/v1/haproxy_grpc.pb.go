// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/haproxy.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HAProxyService_AddHAProxy_FullMethodName = "/management.v1.HAProxyService/AddHAProxy"
)

// HAProxyServiceClient is the client API for HAProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HAProxyServiceClient interface {
	// AddHAProxy adds HAProxy service and adds external exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds an "external exporter" agent to inventory.
	AddHAProxy(ctx context.Context, in *AddHAProxyRequest, opts ...grpc.CallOption) (*AddHAProxyResponse, error)
}

type hAProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHAProxyServiceClient(cc grpc.ClientConnInterface) HAProxyServiceClient {
	return &hAProxyServiceClient{cc}
}

func (c *hAProxyServiceClient) AddHAProxy(ctx context.Context, in *AddHAProxyRequest, opts ...grpc.CallOption) (*AddHAProxyResponse, error) {
	out := new(AddHAProxyResponse)
	err := c.cc.Invoke(ctx, HAProxyService_AddHAProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HAProxyServiceServer is the server API for HAProxyService service.
// All implementations must embed UnimplementedHAProxyServiceServer
// for forward compatibility
type HAProxyServiceServer interface {
	// AddHAProxy adds HAProxy service and adds external exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds an "external exporter" agent to inventory.
	AddHAProxy(context.Context, *AddHAProxyRequest) (*AddHAProxyResponse, error)
	mustEmbedUnimplementedHAProxyServiceServer()
}

// UnimplementedHAProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHAProxyServiceServer struct{}

func (UnimplementedHAProxyServiceServer) AddHAProxy(context.Context, *AddHAProxyRequest) (*AddHAProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHAProxy not implemented")
}
func (UnimplementedHAProxyServiceServer) mustEmbedUnimplementedHAProxyServiceServer() {}

// UnsafeHAProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HAProxyServiceServer will
// result in compilation errors.
type UnsafeHAProxyServiceServer interface {
	mustEmbedUnimplementedHAProxyServiceServer()
}

func RegisterHAProxyServiceServer(s grpc.ServiceRegistrar, srv HAProxyServiceServer) {
	s.RegisterService(&HAProxyService_ServiceDesc, srv)
}

func _HAProxyService_AddHAProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHAProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyServiceServer).AddHAProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyService_AddHAProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyServiceServer).AddHAProxy(ctx, req.(*AddHAProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HAProxyService_ServiceDesc is the grpc.ServiceDesc for HAProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HAProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.HAProxyService",
	HandlerType: (*HAProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHAProxy",
			Handler:    _HAProxyService_AddHAProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/haproxy.proto",
}
