// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: management/v1/rds.proto

package managementv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1 "github.com/percona/pmm/api/inventory/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiscoverRDSEngine describes supported RDS instance engines.
type DiscoverRDSEngine int32

const (
	DiscoverRDSEngine_DISCOVER_RDS_ENGINE_UNSPECIFIED DiscoverRDSEngine = 0
	DiscoverRDSEngine_DISCOVER_RDS_ENGINE_MYSQL       DiscoverRDSEngine = 1
	DiscoverRDSEngine_DISCOVER_RDS_ENGINE_POSTGRESQL  DiscoverRDSEngine = 2
)

// Enum value maps for DiscoverRDSEngine.
var (
	DiscoverRDSEngine_name = map[int32]string{
		0: "DISCOVER_RDS_ENGINE_UNSPECIFIED",
		1: "DISCOVER_RDS_ENGINE_MYSQL",
		2: "DISCOVER_RDS_ENGINE_POSTGRESQL",
	}
	DiscoverRDSEngine_value = map[string]int32{
		"DISCOVER_RDS_ENGINE_UNSPECIFIED": 0,
		"DISCOVER_RDS_ENGINE_MYSQL":       1,
		"DISCOVER_RDS_ENGINE_POSTGRESQL":  2,
	}
)

func (x DiscoverRDSEngine) Enum() *DiscoverRDSEngine {
	p := new(DiscoverRDSEngine)
	*p = x
	return p
}

func (x DiscoverRDSEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverRDSEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_management_v1_rds_proto_enumTypes[0].Descriptor()
}

func (DiscoverRDSEngine) Type() protoreflect.EnumType {
	return &file_management_v1_rds_proto_enumTypes[0]
}

func (x DiscoverRDSEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverRDSEngine.Descriptor instead.
func (DiscoverRDSEngine) EnumDescriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{0}
}

// DiscoverRDSInstance models an unique RDS instance for the list of instances returned by Discovery.
type DiscoverRDSInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AWS region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// AWS availability zone.
	Az string `protobuf:"bytes,2,opt,name=az,proto3" json:"az,omitempty"`
	// AWS instance ID.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// AWS instance class.
	NodeModel string `protobuf:"bytes,4,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Address used to connect to it.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Instance engine.
	Engine DiscoverRDSEngine `protobuf:"varint,7,opt,name=engine,proto3,enum=management.v1.DiscoverRDSEngine" json:"engine,omitempty"`
	// Engine version.
	EngineVersion string `protobuf:"bytes,8,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoverRDSInstance) Reset() {
	*x = DiscoverRDSInstance{}
	mi := &file_management_v1_rds_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoverRDSInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverRDSInstance) ProtoMessage() {}

func (x *DiscoverRDSInstance) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_rds_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverRDSInstance.ProtoReflect.Descriptor instead.
func (*DiscoverRDSInstance) Descriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{0}
}

func (x *DiscoverRDSInstance) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DiscoverRDSInstance) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *DiscoverRDSInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DiscoverRDSInstance) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *DiscoverRDSInstance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DiscoverRDSInstance) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DiscoverRDSInstance) GetEngine() DiscoverRDSEngine {
	if x != nil {
		return x.Engine
	}
	return DiscoverRDSEngine_DISCOVER_RDS_ENGINE_UNSPECIFIED
}

func (x *DiscoverRDSInstance) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

type DiscoverRDSRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AWS Access key. Optional.
	AwsAccessKey string `protobuf:"bytes,1,opt,name=aws_access_key,json=awsAccessKey,proto3" json:"aws_access_key,omitempty"`
	// AWS Secret key. Optional.
	AwsSecretKey  string `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoverRDSRequest) Reset() {
	*x = DiscoverRDSRequest{}
	mi := &file_management_v1_rds_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoverRDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverRDSRequest) ProtoMessage() {}

func (x *DiscoverRDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_rds_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverRDSRequest.ProtoReflect.Descriptor instead.
func (*DiscoverRDSRequest) Descriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{1}
}

func (x *DiscoverRDSRequest) GetAwsAccessKey() string {
	if x != nil {
		return x.AwsAccessKey
	}
	return ""
}

func (x *DiscoverRDSRequest) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

type DiscoverRDSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RdsInstances  []*DiscoverRDSInstance `protobuf:"bytes,1,rep,name=rds_instances,json=rdsInstances,proto3" json:"rds_instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoverRDSResponse) Reset() {
	*x = DiscoverRDSResponse{}
	mi := &file_management_v1_rds_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoverRDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverRDSResponse) ProtoMessage() {}

func (x *DiscoverRDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_rds_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverRDSResponse.ProtoReflect.Descriptor instead.
func (*DiscoverRDSResponse) Descriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverRDSResponse) GetRdsInstances() []*DiscoverRDSInstance {
	if x != nil {
		return x.RdsInstances
	}
	return nil
}

type AddRDSServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AWS region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// AWS availability zone.
	Az string `protobuf:"bytes,2,opt,name=az,proto3" json:"az,omitempty"`
	// AWS instance ID.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// AWS instance class.
	NodeModel string `protobuf:"bytes,4,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Address used to connect to it.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Access port.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Instance engine.
	Engine DiscoverRDSEngine `protobuf:"varint,7,opt,name=engine,proto3,enum=management.v1.DiscoverRDSEngine" json:"engine,omitempty"`
	// PMM Agent ID.
	PmmAgentId string `protobuf:"bytes,34,opt,name=pmm_agent_id,json=pmmAgentId,proto3" json:"pmm_agent_id,omitempty"`
	// Unique across all Nodes user-defined name. Defaults to AWS instance ID.
	NodeName string `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Unique across all Services user-defined name. Defaults to AWS instance ID.
	ServiceName string `protobuf:"bytes,9,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,10,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,11,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,12,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Username for scraping metrics.
	Username string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// Password for scraping metrics.
	Password string `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`
	// AWS Access key.
	AwsAccessKey string `protobuf:"bytes,15,opt,name=aws_access_key,json=awsAccessKey,proto3" json:"aws_access_key,omitempty"`
	// AWS Secret key.
	AwsSecretKey string `protobuf:"bytes,16,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	// If true, adds rds_exporter.
	RdsExporter bool `protobuf:"varint,17,opt,name=rds_exporter,json=rdsExporter,proto3" json:"rds_exporter,omitempty"`
	// If true, adds qan-mysql-perfschema-agent.
	QanMysqlPerfschema bool `protobuf:"varint,18,opt,name=qan_mysql_perfschema,json=qanMysqlPerfschema,proto3" json:"qan_mysql_perfschema,omitempty"`
	// Custom user-assigned labels for Node and Service.
	CustomLabels map[string]string `protobuf:"bytes,19,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Skip connection check.
	SkipConnectionCheck bool `protobuf:"varint,20,opt,name=skip_connection_check,json=skipConnectionCheck,proto3" json:"skip_connection_check,omitempty"`
	// Use TLS for database connections.
	Tls bool `protobuf:"varint,21,opt,name=tls,proto3" json:"tls,omitempty"`
	// Skip TLS certificate and hostname validation.
	TlsSkipVerify bool `protobuf:"varint,22,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	// Disable query examples.
	DisableQueryExamples bool `protobuf:"varint,23,opt,name=disable_query_examples,json=disableQueryExamples,proto3" json:"disable_query_examples,omitempty"`
	// Tablestats group collectors will be disabled if there are more than that number of tables.
	// If zero, server's default value is used.
	// Use negative value to disable them.
	TablestatsGroupTableLimit int32 `protobuf:"varint,24,opt,name=tablestats_group_table_limit,json=tablestatsGroupTableLimit,proto3" json:"tablestats_group_table_limit,omitempty"`
	// Disable basic metrics.
	DisableBasicMetrics bool `protobuf:"varint,25,opt,name=disable_basic_metrics,json=disableBasicMetrics,proto3" json:"disable_basic_metrics,omitempty"`
	// Disable enhanced metrics.
	DisableEnhancedMetrics bool `protobuf:"varint,26,opt,name=disable_enhanced_metrics,json=disableEnhancedMetrics,proto3" json:"disable_enhanced_metrics,omitempty"`
	// Defines metrics flow model for this exporter.
	// Push metrics mode is not allowed.
	MetricsMode MetricsMode `protobuf:"varint,27,opt,name=metrics_mode,json=metricsMode,proto3,enum=management.v1.MetricsMode" json:"metrics_mode,omitempty"`
	// If true, add qan-pgstatements
	QanPostgresqlPgstatements bool `protobuf:"varint,28,opt,name=qan_postgresql_pgstatements,json=qanPostgresqlPgstatements,proto3" json:"qan_postgresql_pgstatements,omitempty"`
	// Custom password for exporter endpoint /metrics.
	AgentPassword string `protobuf:"bytes,29,opt,name=agent_password,json=agentPassword,proto3" json:"agent_password,omitempty"`
	// Database name.
	Database string `protobuf:"bytes,30,opt,name=database,proto3" json:"database,omitempty"`
	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `protobuf:"varint,31,opt,name=auto_discovery_limit,json=autoDiscoveryLimit,proto3" json:"auto_discovery_limit,omitempty"`
	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `protobuf:"varint,32,opt,name=disable_comments_parsing,json=disableCommentsParsing,proto3" json:"disable_comments_parsing,omitempty"`
	// Maximum number of exporter connections to PostgreSQL instance.
	MaxPostgresqlExporterConnections int32 `protobuf:"varint,33,opt,name=max_postgresql_exporter_connections,json=maxPostgresqlExporterConnections,proto3" json:"max_postgresql_exporter_connections,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *AddRDSServiceParams) Reset() {
	*x = AddRDSServiceParams{}
	mi := &file_management_v1_rds_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRDSServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRDSServiceParams) ProtoMessage() {}

func (x *AddRDSServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_rds_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRDSServiceParams.ProtoReflect.Descriptor instead.
func (*AddRDSServiceParams) Descriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{3}
}

func (x *AddRDSServiceParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddRDSServiceParams) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *AddRDSServiceParams) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddRDSServiceParams) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *AddRDSServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddRDSServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddRDSServiceParams) GetEngine() DiscoverRDSEngine {
	if x != nil {
		return x.Engine
	}
	return DiscoverRDSEngine_DISCOVER_RDS_ENGINE_UNSPECIFIED
}

func (x *AddRDSServiceParams) GetPmmAgentId() string {
	if x != nil {
		return x.PmmAgentId
	}
	return ""
}

func (x *AddRDSServiceParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddRDSServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddRDSServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddRDSServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddRDSServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddRDSServiceParams) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddRDSServiceParams) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddRDSServiceParams) GetAwsAccessKey() string {
	if x != nil {
		return x.AwsAccessKey
	}
	return ""
}

func (x *AddRDSServiceParams) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

func (x *AddRDSServiceParams) GetRdsExporter() bool {
	if x != nil {
		return x.RdsExporter
	}
	return false
}

func (x *AddRDSServiceParams) GetQanMysqlPerfschema() bool {
	if x != nil {
		return x.QanMysqlPerfschema
	}
	return false
}

func (x *AddRDSServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *AddRDSServiceParams) GetSkipConnectionCheck() bool {
	if x != nil {
		return x.SkipConnectionCheck
	}
	return false
}

func (x *AddRDSServiceParams) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *AddRDSServiceParams) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *AddRDSServiceParams) GetDisableQueryExamples() bool {
	if x != nil {
		return x.DisableQueryExamples
	}
	return false
}

func (x *AddRDSServiceParams) GetTablestatsGroupTableLimit() int32 {
	if x != nil {
		return x.TablestatsGroupTableLimit
	}
	return 0
}

func (x *AddRDSServiceParams) GetDisableBasicMetrics() bool {
	if x != nil {
		return x.DisableBasicMetrics
	}
	return false
}

func (x *AddRDSServiceParams) GetDisableEnhancedMetrics() bool {
	if x != nil {
		return x.DisableEnhancedMetrics
	}
	return false
}

func (x *AddRDSServiceParams) GetMetricsMode() MetricsMode {
	if x != nil {
		return x.MetricsMode
	}
	return MetricsMode_METRICS_MODE_UNSPECIFIED
}

func (x *AddRDSServiceParams) GetQanPostgresqlPgstatements() bool {
	if x != nil {
		return x.QanPostgresqlPgstatements
	}
	return false
}

func (x *AddRDSServiceParams) GetAgentPassword() string {
	if x != nil {
		return x.AgentPassword
	}
	return ""
}

func (x *AddRDSServiceParams) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AddRDSServiceParams) GetAutoDiscoveryLimit() int32 {
	if x != nil {
		return x.AutoDiscoveryLimit
	}
	return 0
}

func (x *AddRDSServiceParams) GetDisableCommentsParsing() bool {
	if x != nil {
		return x.DisableCommentsParsing
	}
	return false
}

func (x *AddRDSServiceParams) GetMaxPostgresqlExporterConnections() int32 {
	if x != nil {
		return x.MaxPostgresqlExporterConnections
	}
	return 0
}

type RDSServiceResult struct {
	state                     protoimpl.MessageState             `protogen:"open.v1"`
	Node                      *v1.RemoteRDSNode                  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	RdsExporter               *v1.RDSExporter                    `protobuf:"bytes,2,opt,name=rds_exporter,json=rdsExporter,proto3" json:"rds_exporter,omitempty"`
	Mysql                     *v1.MySQLService                   `protobuf:"bytes,3,opt,name=mysql,proto3" json:"mysql,omitempty"`
	MysqldExporter            *v1.MySQLdExporter                 `protobuf:"bytes,4,opt,name=mysqld_exporter,json=mysqldExporter,proto3" json:"mysqld_exporter,omitempty"`
	QanMysqlPerfschema        *v1.QANMySQLPerfSchemaAgent        `protobuf:"bytes,5,opt,name=qan_mysql_perfschema,json=qanMysqlPerfschema,proto3" json:"qan_mysql_perfschema,omitempty"`
	Postgresql                *v1.PostgreSQLService              `protobuf:"bytes,6,opt,name=postgresql,proto3" json:"postgresql,omitempty"`
	PostgresqlExporter        *v1.PostgresExporter               `protobuf:"bytes,7,opt,name=postgresql_exporter,json=postgresqlExporter,proto3" json:"postgresql_exporter,omitempty"`
	QanPostgresqlPgstatements *v1.QANPostgreSQLPgStatementsAgent `protobuf:"bytes,8,opt,name=qan_postgresql_pgstatements,json=qanPostgresqlPgstatements,proto3" json:"qan_postgresql_pgstatements,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RDSServiceResult) Reset() {
	*x = RDSServiceResult{}
	mi := &file_management_v1_rds_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RDSServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSServiceResult) ProtoMessage() {}

func (x *RDSServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_rds_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSServiceResult.ProtoReflect.Descriptor instead.
func (*RDSServiceResult) Descriptor() ([]byte, []int) {
	return file_management_v1_rds_proto_rawDescGZIP(), []int{4}
}

func (x *RDSServiceResult) GetNode() *v1.RemoteRDSNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *RDSServiceResult) GetRdsExporter() *v1.RDSExporter {
	if x != nil {
		return x.RdsExporter
	}
	return nil
}

func (x *RDSServiceResult) GetMysql() *v1.MySQLService {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *RDSServiceResult) GetMysqldExporter() *v1.MySQLdExporter {
	if x != nil {
		return x.MysqldExporter
	}
	return nil
}

func (x *RDSServiceResult) GetQanMysqlPerfschema() *v1.QANMySQLPerfSchemaAgent {
	if x != nil {
		return x.QanMysqlPerfschema
	}
	return nil
}

func (x *RDSServiceResult) GetPostgresql() *v1.PostgreSQLService {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *RDSServiceResult) GetPostgresqlExporter() *v1.PostgresExporter {
	if x != nil {
		return x.PostgresqlExporter
	}
	return nil
}

func (x *RDSServiceResult) GetQanPostgresqlPgstatements() *v1.QANPostgreSQLPgStatementsAgent {
	if x != nil {
		return x.QanPostgresqlPgstatements
	}
	return nil
}

var File_management_v1_rds_proto protoreflect.FileDescriptor

const file_management_v1_rds_proto_rawDesc = "" +
	"\n" +
	"\x17management/v1/rds.proto\x12\rmanagement.v1\x1a\x19inventory/v1/agents.proto\x1a\x18inventory/v1/nodes.proto\x1a\x1binventory/v1/services.proto\x1a\x1bmanagement/v1/metrics.proto\x1a\x17validate/validate.proto\"\x8c\x02\n" +
	"\x13DiscoverRDSInstance\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x02 \x01(\tR\x02az\x12\x1f\n" +
	"\vinstance_id\x18\x03 \x01(\tR\n" +
	"instanceId\x12\x1d\n" +
	"\n" +
	"node_model\x18\x04 \x01(\tR\tnodeModel\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x06 \x01(\rR\x04port\x128\n" +
	"\x06engine\x18\a \x01(\x0e2 .management.v1.DiscoverRDSEngineR\x06engine\x12%\n" +
	"\x0eengine_version\x18\b \x01(\tR\rengineVersion\"`\n" +
	"\x12DiscoverRDSRequest\x12$\n" +
	"\x0eaws_access_key\x18\x01 \x01(\tR\fawsAccessKey\x12$\n" +
	"\x0eaws_secret_key\x18\x02 \x01(\tR\fawsSecretKey\"^\n" +
	"\x13DiscoverRDSResponse\x12G\n" +
	"\rrds_instances\x18\x01 \x03(\v2\".management.v1.DiscoverRDSInstanceR\frdsInstances\"\x9e\f\n" +
	"\x13AddRDSServiceParams\x12\x1f\n" +
	"\x06region\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06region\x12\x0e\n" +
	"\x02az\x18\x02 \x01(\tR\x02az\x12(\n" +
	"\vinstance_id\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"instanceId\x12\x1d\n" +
	"\n" +
	"node_model\x18\x04 \x01(\tR\tnodeModel\x12!\n" +
	"\aaddress\x18\x05 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aaddress\x12\x1b\n" +
	"\x04port\x18\x06 \x01(\rB\a\xfaB\x04*\x02 \x00R\x04port\x128\n" +
	"\x06engine\x18\a \x01(\x0e2 .management.v1.DiscoverRDSEngineR\x06engine\x12 \n" +
	"\fpmm_agent_id\x18\" \x01(\tR\n" +
	"pmmAgentId\x12\x1b\n" +
	"\tnode_name\x18\b \x01(\tR\bnodeName\x12!\n" +
	"\fservice_name\x18\t \x01(\tR\vserviceName\x12 \n" +
	"\venvironment\x18\n" +
	" \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\v \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\f \x01(\tR\x0ereplicationSet\x12#\n" +
	"\busername\x18\r \x01(\tB\a\xfaB\x04r\x02\x10\x01R\busername\x12\x1a\n" +
	"\bpassword\x18\x0e \x01(\tR\bpassword\x12$\n" +
	"\x0eaws_access_key\x18\x0f \x01(\tR\fawsAccessKey\x12$\n" +
	"\x0eaws_secret_key\x18\x10 \x01(\tR\fawsSecretKey\x12!\n" +
	"\frds_exporter\x18\x11 \x01(\bR\vrdsExporter\x120\n" +
	"\x14qan_mysql_perfschema\x18\x12 \x01(\bR\x12qanMysqlPerfschema\x12Y\n" +
	"\rcustom_labels\x18\x13 \x03(\v24.management.v1.AddRDSServiceParams.CustomLabelsEntryR\fcustomLabels\x122\n" +
	"\x15skip_connection_check\x18\x14 \x01(\bR\x13skipConnectionCheck\x12\x10\n" +
	"\x03tls\x18\x15 \x01(\bR\x03tls\x12&\n" +
	"\x0ftls_skip_verify\x18\x16 \x01(\bR\rtlsSkipVerify\x124\n" +
	"\x16disable_query_examples\x18\x17 \x01(\bR\x14disableQueryExamples\x12?\n" +
	"\x1ctablestats_group_table_limit\x18\x18 \x01(\x05R\x19tablestatsGroupTableLimit\x122\n" +
	"\x15disable_basic_metrics\x18\x19 \x01(\bR\x13disableBasicMetrics\x128\n" +
	"\x18disable_enhanced_metrics\x18\x1a \x01(\bR\x16disableEnhancedMetrics\x12=\n" +
	"\fmetrics_mode\x18\x1b \x01(\x0e2\x1a.management.v1.MetricsModeR\vmetricsMode\x12>\n" +
	"\x1bqan_postgresql_pgstatements\x18\x1c \x01(\bR\x19qanPostgresqlPgstatements\x12%\n" +
	"\x0eagent_password\x18\x1d \x01(\tR\ragentPassword\x12\x1a\n" +
	"\bdatabase\x18\x1e \x01(\tR\bdatabase\x120\n" +
	"\x14auto_discovery_limit\x18\x1f \x01(\x05R\x12autoDiscoveryLimit\x128\n" +
	"\x18disable_comments_parsing\x18  \x01(\bR\x16disableCommentsParsing\x12M\n" +
	"#max_postgresql_exporter_connections\x18! \x01(\x05R maxPostgresqlExporterConnections\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd3\x04\n" +
	"\x10RDSServiceResult\x12/\n" +
	"\x04node\x18\x01 \x01(\v2\x1b.inventory.v1.RemoteRDSNodeR\x04node\x12<\n" +
	"\frds_exporter\x18\x02 \x01(\v2\x19.inventory.v1.RDSExporterR\vrdsExporter\x120\n" +
	"\x05mysql\x18\x03 \x01(\v2\x1a.inventory.v1.MySQLServiceR\x05mysql\x12E\n" +
	"\x0fmysqld_exporter\x18\x04 \x01(\v2\x1c.inventory.v1.MySQLdExporterR\x0emysqldExporter\x12W\n" +
	"\x14qan_mysql_perfschema\x18\x05 \x01(\v2%.inventory.v1.QANMySQLPerfSchemaAgentR\x12qanMysqlPerfschema\x12?\n" +
	"\n" +
	"postgresql\x18\x06 \x01(\v2\x1f.inventory.v1.PostgreSQLServiceR\n" +
	"postgresql\x12O\n" +
	"\x13postgresql_exporter\x18\a \x01(\v2\x1e.inventory.v1.PostgresExporterR\x12postgresqlExporter\x12l\n" +
	"\x1bqan_postgresql_pgstatements\x18\b \x01(\v2,.inventory.v1.QANPostgreSQLPgStatementsAgentR\x19qanPostgresqlPgstatements*{\n" +
	"\x11DiscoverRDSEngine\x12#\n" +
	"\x1fDISCOVER_RDS_ENGINE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19DISCOVER_RDS_ENGINE_MYSQL\x10\x01\x12\"\n" +
	"\x1eDISCOVER_RDS_ENGINE_POSTGRESQL\x10\x02B\xa9\x01\n" +
	"\x11com.management.v1B\bRdsProtoP\x01Z5github.com/percona/pmm/api/management/v1;managementv1\xa2\x02\x03MXX\xaa\x02\rManagement.V1\xca\x02\rManagement\\V1\xe2\x02\x19Management\\V1\\GPBMetadata\xea\x02\x0eManagement::V1b\x06proto3"

var (
	file_management_v1_rds_proto_rawDescOnce sync.Once
	file_management_v1_rds_proto_rawDescData []byte
)

func file_management_v1_rds_proto_rawDescGZIP() []byte {
	file_management_v1_rds_proto_rawDescOnce.Do(func() {
		file_management_v1_rds_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_management_v1_rds_proto_rawDesc), len(file_management_v1_rds_proto_rawDesc)))
	})
	return file_management_v1_rds_proto_rawDescData
}

var (
	file_management_v1_rds_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_management_v1_rds_proto_msgTypes  = make([]protoimpl.MessageInfo, 6)
	file_management_v1_rds_proto_goTypes   = []any{
		(DiscoverRDSEngine)(0),                    // 0: management.v1.DiscoverRDSEngine
		(*DiscoverRDSInstance)(nil),               // 1: management.v1.DiscoverRDSInstance
		(*DiscoverRDSRequest)(nil),                // 2: management.v1.DiscoverRDSRequest
		(*DiscoverRDSResponse)(nil),               // 3: management.v1.DiscoverRDSResponse
		(*AddRDSServiceParams)(nil),               // 4: management.v1.AddRDSServiceParams
		(*RDSServiceResult)(nil),                  // 5: management.v1.RDSServiceResult
		nil,                                       // 6: management.v1.AddRDSServiceParams.CustomLabelsEntry
		(MetricsMode)(0),                          // 7: management.v1.MetricsMode
		(*v1.RemoteRDSNode)(nil),                  // 8: inventory.v1.RemoteRDSNode
		(*v1.RDSExporter)(nil),                    // 9: inventory.v1.RDSExporter
		(*v1.MySQLService)(nil),                   // 10: inventory.v1.MySQLService
		(*v1.MySQLdExporter)(nil),                 // 11: inventory.v1.MySQLdExporter
		(*v1.QANMySQLPerfSchemaAgent)(nil),        // 12: inventory.v1.QANMySQLPerfSchemaAgent
		(*v1.PostgreSQLService)(nil),              // 13: inventory.v1.PostgreSQLService
		(*v1.PostgresExporter)(nil),               // 14: inventory.v1.PostgresExporter
		(*v1.QANPostgreSQLPgStatementsAgent)(nil), // 15: inventory.v1.QANPostgreSQLPgStatementsAgent
	}
)

var file_management_v1_rds_proto_depIdxs = []int32{
	0,  // 0: management.v1.DiscoverRDSInstance.engine:type_name -> management.v1.DiscoverRDSEngine
	1,  // 1: management.v1.DiscoverRDSResponse.rds_instances:type_name -> management.v1.DiscoverRDSInstance
	0,  // 2: management.v1.AddRDSServiceParams.engine:type_name -> management.v1.DiscoverRDSEngine
	6,  // 3: management.v1.AddRDSServiceParams.custom_labels:type_name -> management.v1.AddRDSServiceParams.CustomLabelsEntry
	7,  // 4: management.v1.AddRDSServiceParams.metrics_mode:type_name -> management.v1.MetricsMode
	8,  // 5: management.v1.RDSServiceResult.node:type_name -> inventory.v1.RemoteRDSNode
	9,  // 6: management.v1.RDSServiceResult.rds_exporter:type_name -> inventory.v1.RDSExporter
	10, // 7: management.v1.RDSServiceResult.mysql:type_name -> inventory.v1.MySQLService
	11, // 8: management.v1.RDSServiceResult.mysqld_exporter:type_name -> inventory.v1.MySQLdExporter
	12, // 9: management.v1.RDSServiceResult.qan_mysql_perfschema:type_name -> inventory.v1.QANMySQLPerfSchemaAgent
	13, // 10: management.v1.RDSServiceResult.postgresql:type_name -> inventory.v1.PostgreSQLService
	14, // 11: management.v1.RDSServiceResult.postgresql_exporter:type_name -> inventory.v1.PostgresExporter
	15, // 12: management.v1.RDSServiceResult.qan_postgresql_pgstatements:type_name -> inventory.v1.QANPostgreSQLPgStatementsAgent
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_management_v1_rds_proto_init() }
func file_management_v1_rds_proto_init() {
	if File_management_v1_rds_proto != nil {
		return
	}
	file_management_v1_metrics_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_management_v1_rds_proto_rawDesc), len(file_management_v1_rds_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_management_v1_rds_proto_goTypes,
		DependencyIndexes: file_management_v1_rds_proto_depIdxs,
		EnumInfos:         file_management_v1_rds_proto_enumTypes,
		MessageInfos:      file_management_v1_rds_proto_msgTypes,
	}.Build()
	File_management_v1_rds_proto = out.File
	file_management_v1_rds_proto_goTypes = nil
	file_management_v1_rds_proto_depIdxs = nil
}
