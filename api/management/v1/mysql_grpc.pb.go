// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/mysql.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MySQLService_AddMySQL_FullMethodName = "/management.v1.MySQLService/AddMySQL"
)

// MySQLServiceClient is the client API for MySQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLServiceClient interface {
	// AddMySQL adds MySQL Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMySQL(ctx context.Context, in *AddMySQLRequest, opts ...grpc.CallOption) (*AddMySQLResponse, error)
}

type mySQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLServiceClient(cc grpc.ClientConnInterface) MySQLServiceClient {
	return &mySQLServiceClient{cc}
}

func (c *mySQLServiceClient) AddMySQL(ctx context.Context, in *AddMySQLRequest, opts ...grpc.CallOption) (*AddMySQLResponse, error) {
	out := new(AddMySQLResponse)
	err := c.cc.Invoke(ctx, MySQLService_AddMySQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLServiceServer is the server API for MySQLService service.
// All implementations must embed UnimplementedMySQLServiceServer
// for forward compatibility
type MySQLServiceServer interface {
	// AddMySQL adds MySQL Service and starts several Agents.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
	// with provided "pmm_agent_id" and other parameters.
	AddMySQL(context.Context, *AddMySQLRequest) (*AddMySQLResponse, error)
	mustEmbedUnimplementedMySQLServiceServer()
}

// UnimplementedMySQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLServiceServer struct{}

func (UnimplementedMySQLServiceServer) AddMySQL(context.Context, *AddMySQLRequest) (*AddMySQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMySQL not implemented")
}
func (UnimplementedMySQLServiceServer) mustEmbedUnimplementedMySQLServiceServer() {}

// UnsafeMySQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLServiceServer will
// result in compilation errors.
type UnsafeMySQLServiceServer interface {
	mustEmbedUnimplementedMySQLServiceServer()
}

func RegisterMySQLServiceServer(s grpc.ServiceRegistrar, srv MySQLServiceServer) {
	s.RegisterService(&MySQLService_ServiceDesc, srv)
}

func _MySQLService_AddMySQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMySQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLServiceServer).AddMySQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySQLService_AddMySQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLServiceServer).AddMySQL(ctx, req.(*AddMySQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLService_ServiceDesc is the grpc.ServiceDesc for MySQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.MySQLService",
	HandlerType: (*MySQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMySQL",
			Handler:    _MySQLService_AddMySQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/mysql.proto",
}
