// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/node/node.proto

package nodev1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MgmtNodeService_ListNodes_FullMethodName = "/node.v1beta1.MgmtNodeService/ListNodes"
	MgmtNodeService_GetNode_FullMethodName   = "/node.v1beta1.MgmtNodeService/GetNode"
)

// MgmtNodeServiceClient is the client API for MgmtNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtNodeServiceClient interface {
	// ListNode returns a list of nodes.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
}

type mgmtNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtNodeServiceClient(cc grpc.ClientConnInterface) MgmtNodeServiceClient {
	return &mgmtNodeServiceClient{cc}
}

func (c *mgmtNodeServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, MgmtNodeService_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtNodeServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, MgmtNodeService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtNodeServiceServer is the server API for MgmtNodeService service.
// All implementations must embed UnimplementedMgmtNodeServiceServer
// for forward compatibility
type MgmtNodeServiceServer interface {
	// ListNode returns a list of nodes.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	mustEmbedUnimplementedMgmtNodeServiceServer()
}

// UnimplementedMgmtNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtNodeServiceServer struct{}

func (UnimplementedMgmtNodeServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}

func (UnimplementedMgmtNodeServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedMgmtNodeServiceServer) mustEmbedUnimplementedMgmtNodeServiceServer() {}

// UnsafeMgmtNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtNodeServiceServer will
// result in compilation errors.
type UnsafeMgmtNodeServiceServer interface {
	mustEmbedUnimplementedMgmtNodeServiceServer()
}

func RegisterMgmtNodeServiceServer(s grpc.ServiceRegistrar, srv MgmtNodeServiceServer) {
	s.RegisterService(&MgmtNodeService_ServiceDesc, srv)
}

func _MgmtNodeService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtNodeServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtNodeService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtNodeServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtNodeService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtNodeServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtNodeService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtNodeServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtNodeService_ServiceDesc is the grpc.ServiceDesc for MgmtNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.v1beta1.MgmtNodeService",
	HandlerType: (*MgmtNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _MgmtNodeService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _MgmtNodeService_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/node/node.proto",
}
