// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/postgresql.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostgreSQLService_AddPostgreSQL_FullMethodName = "/management.v1.PostgreSQLService/AddPostgreSQL"
)

// PostgreSQLServiceClient is the client API for PostgreSQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgreSQLServiceClient interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error)
}

type postgreSQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgreSQLServiceClient(cc grpc.ClientConnInterface) PostgreSQLServiceClient {
	return &postgreSQLServiceClient{cc}
}

func (c *postgreSQLServiceClient) AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error) {
	out := new(AddPostgreSQLResponse)
	err := c.cc.Invoke(ctx, PostgreSQLService_AddPostgreSQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgreSQLServiceServer is the server API for PostgreSQLService service.
// All implementations must embed UnimplementedPostgreSQLServiceServer
// for forward compatibility
type PostgreSQLServiceServer interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(context.Context, *AddPostgreSQLRequest) (*AddPostgreSQLResponse, error)
	mustEmbedUnimplementedPostgreSQLServiceServer()
}

// UnimplementedPostgreSQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostgreSQLServiceServer struct{}

func (UnimplementedPostgreSQLServiceServer) AddPostgreSQL(context.Context, *AddPostgreSQLRequest) (*AddPostgreSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostgreSQL not implemented")
}
func (UnimplementedPostgreSQLServiceServer) mustEmbedUnimplementedPostgreSQLServiceServer() {}

// UnsafePostgreSQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgreSQLServiceServer will
// result in compilation errors.
type UnsafePostgreSQLServiceServer interface {
	mustEmbedUnimplementedPostgreSQLServiceServer()
}

func RegisterPostgreSQLServiceServer(s grpc.ServiceRegistrar, srv PostgreSQLServiceServer) {
	s.RegisterService(&PostgreSQLService_ServiceDesc, srv)
}

func _PostgreSQLService_AddPostgreSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostgreSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgreSQLServiceServer).AddPostgreSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgreSQLService_AddPostgreSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgreSQLServiceServer).AddPostgreSQL(ctx, req.(*AddPostgreSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgreSQLService_ServiceDesc is the grpc.ServiceDesc for PostgreSQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgreSQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.PostgreSQLService",
	HandlerType: (*PostgreSQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPostgreSQL",
			Handler:    _PostgreSQLService_AddPostgreSQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/postgresql.proto",
}
