syntax = "proto3";

package management.v1;

import "google/api/annotations.proto";
import "inventory/v1/nodes.proto";
import "inventory/v1/services.proto";
import "management/v1/annotation.proto";
import "management/v1/external.proto";
import "management/v1/haproxy.proto";
import "management/v1/mongodb.proto";
import "management/v1/mysql.proto";
import "management/v1/node.proto";
import "management/v1/postgresql.proto";
import "management/v1/proxysql.proto";
import "management/v1/rds.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

message RemoveServiceRequest {
  // Service type.
  inventory.v1.ServiceType service_type = 1;
  // Service ID or Service Name is required.
  // Unique randomly generated instance identifier.
  string service_id = 2;
  // Unique across all Services user-defined name.
  string service_name = 3;
}

message RemoveServiceResponse {}

// ManagementService provides public methods for managing and querying Services.
service ManagementService {
  // AddAnnotation adds an annotation.
  rpc AddAnnotation(AddAnnotationRequest) returns (AddAnnotationResponse) {
    option (google.api.http) = {
      post: "/v1/management/Annotations/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add Annotation"
      description: "Adds an annotation."
    };
  }
  // RegisterNode registers a new Node and pmm-agent.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {
    option (google.api.http) = {
      post: "/v1/management/Node/Register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register Node"
      description: "Registers a new Node and pmm-agent."
    };
  }
  // AddExternal adds external service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory, which is running on provided "runs_on_node_id".
  rpc AddExternal(AddExternalRequest) returns (AddExternalResponse) {
    option (google.api.http) = {
      post: "/v1/management/External/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add External Service"
      description: "Adds external service and adds external exporter. It automatically adds a service to inventory, which is running on provided \"node_id\", then adds an \"external exporter\" agent to inventory, which is running on provided \"runs_on_node_id\"."
    };
  }
  // AddHAProxy adds HAProxy service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory.
  rpc AddHAProxy(AddHAProxyRequest) returns (AddHAProxyResponse) {
    option (google.api.http) = {
      post: "/v1/management/HAProxy/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add HAProxy"
      description: "Adds HAProxy service and external exporter. It automatically adds a service to inventory, which is running on the provided \"node_id\", then adds an \"external exporter\" agent to the inventory."
    };
  }
  // AddMySQL adds MySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
  // with provided "pmm_agent_id" and other parameters.
  rpc AddMySQL(AddMySQLRequest) returns (AddMySQLResponse) {
    option (google.api.http) = {
      post: "/v1/management/MySQL/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add MySQL"
      description: "Adds MySQL Service and starts several Agents. It automatically adds a service to inventory, which is running on the provided \"node_id\", then adds \"mysqld_exporter\", and \"qan_mysql_perfschema\" agents with the provided \"pmm_agent_id\" and other parameters."
    };
  }
  // AddMongoDB adds MongoDB Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
  // with provided "pmm_agent_id" and other parameters.
  rpc AddMongoDB(AddMongoDBRequest) returns (AddMongoDBResponse) {
    option (google.api.http) = {
      post: "/v1/management/MongoDB/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add MongoDB"
      description: "Adds MongoDB Service and starts several Agents. It automatically adds a service to inventory, which is running on the provided \"node_id\", then adds \"mongodb_exporter\", and \"qan_mongodb_profiler\" agents with the provided \"pmm_agent_id\" and other parameters."
    };
  }
  // AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
  rpc AddPostgreSQL(AddPostgreSQLRequest) returns (AddPostgreSQLResponse) {
    option (google.api.http) = {
      post: "/v1/management/PostgreSQL/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add PostgreSQL"
      description: "Adds PostgreSQL Service and starts postgres exporter. It automatically adds a service to inventory, which is running on provided \"node_id\", then adds \"postgres_exporter\" with provided \"pmm_agent_id\" and other parameters."
    };
  }
  // AddProxySQL adds ProxySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "proxysql_exporter" with provided "pmm_agent_id" and other parameters.
  rpc AddProxySQL(AddProxySQLRequest) returns (AddProxySQLResponse) {
    option (google.api.http) = {
      post: "/v1/management/ProxySQL/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add ProxySQL"
      description: "Adds ProxySQL Service and starts several Agents. It automatically adds a service to inventory, which is running on provided \"node_id\", then adds \"proxysql_exporter\" with provided \"pmm_agent_id\" and other parameters."
    };
  }
  // DiscoverRDS discovers RDS instances.
  rpc DiscoverRDS(DiscoverRDSRequest) returns (DiscoverRDSResponse) {
    option (google.api.http) = {
      post: "/v1/management/RDS/Discover"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Discover RDS"
      description: "Discovers RDS instances."
    };
  }
  // AddRDS adds RDS instance.
  rpc AddRDS(AddRDSRequest) returns (AddRDSResponse) {
    option (google.api.http) = {
      post: "/v1/management/RDS/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add RDS"
      description: "Adds RDS instance."
    };
  }
  // RemoveService removes Service with Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/Service/Remove"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove Service"
      description: "Removes a Service along with Agents."
    };
  }
}
