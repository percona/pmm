syntax = "proto3";

package management.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "inventory/v1/nodes.proto";
import "inventory/v1/services.proto";
import "management/v1/mongodb.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

message RemoveServiceRequest {
  // Service type.
  inventory.v1.ServiceType service_type = 1;
  // Service ID or Service Name is required.
  // Unique randomly generated instance identifier.
  string service_id = 2;
  // Unique across all Services user-defined name.
  string service_name = 3;
}

// Service service provides public methods for managing and querying Services.
service Service {
  // AddMongoDB adds MongoDB Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
  // with provided "pmm_agent_id" and other parameters.
  rpc AddMongoDB(AddMongoDBRequest) returns (AddMongoDBResponse) {
    option (google.api.http) = {
      post: "/v1/management/MongoDB/Add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add MongoDB"
      description: "Adds MongoDB Service and starts several Agents. It automatically adds a service to inventory, which is running on the provided \"node_id\", then adds \"mongodb_exporter\", and \"qan_mongodb_profiler\" agents with the provided \"pmm_agent_id\" and other parameters."
    };
  }
  // RemoveService removes Service with Agents.
  rpc RemoveService(RemoveServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/management/Service/Remove"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove Service"
      description: "Removes a Service along with Agents."
    };
  }
}
