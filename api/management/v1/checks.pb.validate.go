// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: management/v1/checks.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SecurityCheckResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecurityCheckResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityCheckResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecurityCheckResultMultiError, or nil if none found.
func (m *SecurityCheckResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityCheckResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	// no validation rules for Description

	// no validation rules for Severity

	// no validation rules for Labels

	// no validation rules for ReadMoreUrl

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return SecurityCheckResultMultiError(errors)
	}

	return nil
}

// SecurityCheckResultMultiError is an error wrapping multiple validation
// errors returned by SecurityCheckResult.ValidateAll() if the designated
// constraints aren't met.
type SecurityCheckResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityCheckResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityCheckResultMultiError) AllErrors() []error { return m }

// SecurityCheckResultValidationError is the validation error returned by
// SecurityCheckResult.Validate if the designated constraints aren't met.
type SecurityCheckResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityCheckResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityCheckResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityCheckResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityCheckResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityCheckResultValidationError) ErrorName() string {
	return "SecurityCheckResultValidationError"
}

// Error satisfies the builtin error interface
func (e SecurityCheckResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityCheckResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityCheckResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityCheckResultValidationError{}

// Validate checks the field values on CheckResultSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResultSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResultSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResultSummaryMultiError, or nil if none found.
func (m *CheckResultSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResultSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for ServiceId

	// no validation rules for EmergencyCount

	// no validation rules for AlertCount

	// no validation rules for CriticalCount

	// no validation rules for ErrorCount

	// no validation rules for WarningCount

	// no validation rules for NoticeCount

	// no validation rules for InfoCount

	// no validation rules for DebugCount

	if len(errors) > 0 {
		return CheckResultSummaryMultiError(errors)
	}

	return nil
}

// CheckResultSummaryMultiError is an error wrapping multiple validation errors
// returned by CheckResultSummary.ValidateAll() if the designated constraints
// aren't met.
type CheckResultSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResultSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResultSummaryMultiError) AllErrors() []error { return m }

// CheckResultSummaryValidationError is the validation error returned by
// CheckResultSummary.Validate if the designated constraints aren't met.
type CheckResultSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResultSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResultSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResultSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResultSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResultSummaryValidationError) ErrorName() string {
	return "CheckResultSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResultSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResultSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResultSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResultSummaryValidationError{}

// Validate checks the field values on CheckResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResultMultiError, or
// nil if none found.
func (m *CheckResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	// no validation rules for Description

	// no validation rules for Severity

	// no validation rules for Labels

	// no validation rules for ReadMoreUrl

	// no validation rules for ServiceName

	// no validation rules for ServiceId

	// no validation rules for CheckName

	// no validation rules for AlertId

	// no validation rules for Silenced

	if len(errors) > 0 {
		return CheckResultMultiError(errors)
	}

	return nil
}

// CheckResultMultiError is an error wrapping multiple validation errors
// returned by CheckResult.ValidateAll() if the designated constraints aren't met.
type CheckResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResultMultiError) AllErrors() []error { return m }

// CheckResultValidationError is the validation error returned by
// CheckResult.Validate if the designated constraints aren't met.
type CheckResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResultValidationError) ErrorName() string { return "CheckResultValidationError" }

// Error satisfies the builtin error interface
func (e CheckResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResultValidationError{}

// Validate checks the field values on SecurityCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecurityCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityCheck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecurityCheckMultiError, or
// nil if none found.
func (m *SecurityCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Disabled

	// no validation rules for Description

	// no validation rules for Summary

	// no validation rules for Interval

	// no validation rules for Family

	if len(errors) > 0 {
		return SecurityCheckMultiError(errors)
	}

	return nil
}

// SecurityCheckMultiError is an error wrapping multiple validation errors
// returned by SecurityCheck.ValidateAll() if the designated constraints
// aren't met.
type SecurityCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityCheckMultiError) AllErrors() []error { return m }

// SecurityCheckValidationError is the validation error returned by
// SecurityCheck.Validate if the designated constraints aren't met.
type SecurityCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityCheckValidationError) ErrorName() string { return "SecurityCheckValidationError" }

// Error satisfies the builtin error interface
func (e SecurityCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityCheckValidationError{}

// Validate checks the field values on Advisor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Advisor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Advisor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AdvisorMultiError, or nil if none found.
func (m *Advisor) ValidateAll() error {
	return m.validate(true)
}

func (m *Advisor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Summary

	// no validation rules for Comment

	// no validation rules for Category

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvisorValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvisorValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvisorValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdvisorMultiError(errors)
	}

	return nil
}

// AdvisorMultiError is an error wrapping multiple validation errors returned
// by Advisor.ValidateAll() if the designated constraints aren't met.
type AdvisorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvisorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvisorMultiError) AllErrors() []error { return m }

// AdvisorValidationError is the validation error returned by Advisor.Validate
// if the designated constraints aren't met.
type AdvisorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvisorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvisorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvisorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvisorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvisorValidationError) ErrorName() string { return "AdvisorValidationError" }

// Error satisfies the builtin error interface
func (e AdvisorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvisor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvisorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvisorValidationError{}

// Validate checks the field values on ChangeSecurityCheckParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSecurityCheckParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSecurityCheckParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSecurityCheckParamsMultiError, or nil if none found.
func (m *ChangeSecurityCheckParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSecurityCheckParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Enable

	// no validation rules for Disable

	// no validation rules for Interval

	if len(errors) > 0 {
		return ChangeSecurityCheckParamsMultiError(errors)
	}

	return nil
}

// ChangeSecurityCheckParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeSecurityCheckParams.ValidateAll() if the
// designated constraints aren't met.
type ChangeSecurityCheckParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSecurityCheckParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSecurityCheckParamsMultiError) AllErrors() []error { return m }

// ChangeSecurityCheckParamsValidationError is the validation error returned by
// ChangeSecurityCheckParams.Validate if the designated constraints aren't met.
type ChangeSecurityCheckParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSecurityCheckParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSecurityCheckParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSecurityCheckParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSecurityCheckParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSecurityCheckParamsValidationError) ErrorName() string {
	return "ChangeSecurityCheckParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSecurityCheckParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSecurityCheckParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSecurityCheckParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSecurityCheckParamsValidationError{}

// Validate checks the field values on GetSecurityCheckResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSecurityCheckResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecurityCheckResultsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSecurityCheckResultsRequestMultiError, or nil if none found.
func (m *GetSecurityCheckResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecurityCheckResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSecurityCheckResultsRequestMultiError(errors)
	}

	return nil
}

// GetSecurityCheckResultsRequestMultiError is an error wrapping multiple
// validation errors returned by GetSecurityCheckResultsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSecurityCheckResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecurityCheckResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecurityCheckResultsRequestMultiError) AllErrors() []error { return m }

// GetSecurityCheckResultsRequestValidationError is the validation error
// returned by GetSecurityCheckResultsRequest.Validate if the designated
// constraints aren't met.
type GetSecurityCheckResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecurityCheckResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecurityCheckResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecurityCheckResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecurityCheckResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecurityCheckResultsRequestValidationError) ErrorName() string {
	return "GetSecurityCheckResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecurityCheckResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecurityCheckResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecurityCheckResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecurityCheckResultsRequestValidationError{}

// Validate checks the field values on GetSecurityCheckResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSecurityCheckResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecurityCheckResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSecurityCheckResultsResponseMultiError, or nil if none found.
func (m *GetSecurityCheckResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecurityCheckResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSecurityCheckResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSecurityCheckResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSecurityCheckResultsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSecurityCheckResultsResponseMultiError(errors)
	}

	return nil
}

// GetSecurityCheckResultsResponseMultiError is an error wrapping multiple
// validation errors returned by GetSecurityCheckResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSecurityCheckResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecurityCheckResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecurityCheckResultsResponseMultiError) AllErrors() []error { return m }

// GetSecurityCheckResultsResponseValidationError is the validation error
// returned by GetSecurityCheckResultsResponse.Validate if the designated
// constraints aren't met.
type GetSecurityCheckResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecurityCheckResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecurityCheckResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecurityCheckResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecurityCheckResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecurityCheckResultsResponseValidationError) ErrorName() string {
	return "GetSecurityCheckResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecurityCheckResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecurityCheckResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecurityCheckResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecurityCheckResultsResponseValidationError{}

// Validate checks the field values on StartSecurityChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSecurityChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSecurityChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSecurityChecksRequestMultiError, or nil if none found.
func (m *StartSecurityChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSecurityChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartSecurityChecksRequestMultiError(errors)
	}

	return nil
}

// StartSecurityChecksRequestMultiError is an error wrapping multiple
// validation errors returned by StartSecurityChecksRequest.ValidateAll() if
// the designated constraints aren't met.
type StartSecurityChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSecurityChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSecurityChecksRequestMultiError) AllErrors() []error { return m }

// StartSecurityChecksRequestValidationError is the validation error returned
// by StartSecurityChecksRequest.Validate if the designated constraints aren't met.
type StartSecurityChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSecurityChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSecurityChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSecurityChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSecurityChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSecurityChecksRequestValidationError) ErrorName() string {
	return "StartSecurityChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartSecurityChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSecurityChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSecurityChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSecurityChecksRequestValidationError{}

// Validate checks the field values on StartSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSecurityChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSecurityChecksResponseMultiError, or nil if none found.
func (m *StartSecurityChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSecurityChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartSecurityChecksResponseMultiError(errors)
	}

	return nil
}

// StartSecurityChecksResponseMultiError is an error wrapping multiple
// validation errors returned by StartSecurityChecksResponse.ValidateAll() if
// the designated constraints aren't met.
type StartSecurityChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSecurityChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSecurityChecksResponseMultiError) AllErrors() []error { return m }

// StartSecurityChecksResponseValidationError is the validation error returned
// by StartSecurityChecksResponse.Validate if the designated constraints
// aren't met.
type StartSecurityChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSecurityChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSecurityChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSecurityChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSecurityChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSecurityChecksResponseValidationError) ErrorName() string {
	return "StartSecurityChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartSecurityChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSecurityChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSecurityChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSecurityChecksResponseValidationError{}

// Validate checks the field values on ListSecurityChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecurityChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecurityChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecurityChecksRequestMultiError, or nil if none found.
func (m *ListSecurityChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecurityChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSecurityChecksRequestMultiError(errors)
	}

	return nil
}

// ListSecurityChecksRequestMultiError is an error wrapping multiple validation
// errors returned by ListSecurityChecksRequest.ValidateAll() if the
// designated constraints aren't met.
type ListSecurityChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecurityChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecurityChecksRequestMultiError) AllErrors() []error { return m }

// ListSecurityChecksRequestValidationError is the validation error returned by
// ListSecurityChecksRequest.Validate if the designated constraints aren't met.
type ListSecurityChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecurityChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecurityChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecurityChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecurityChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecurityChecksRequestValidationError) ErrorName() string {
	return "ListSecurityChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecurityChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecurityChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecurityChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecurityChecksRequestValidationError{}

// Validate checks the field values on ListSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecurityChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecurityChecksResponseMultiError, or nil if none found.
func (m *ListSecurityChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecurityChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecurityChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecurityChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecurityChecksResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecurityChecksResponseMultiError(errors)
	}

	return nil
}

// ListSecurityChecksResponseMultiError is an error wrapping multiple
// validation errors returned by ListSecurityChecksResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSecurityChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecurityChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecurityChecksResponseMultiError) AllErrors() []error { return m }

// ListSecurityChecksResponseValidationError is the validation error returned
// by ListSecurityChecksResponse.Validate if the designated constraints aren't met.
type ListSecurityChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecurityChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecurityChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecurityChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecurityChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecurityChecksResponseValidationError) ErrorName() string {
	return "ListSecurityChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecurityChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecurityChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecurityChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecurityChecksResponseValidationError{}

// Validate checks the field values on ListAdvisorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorsRequestMultiError, or nil if none found.
func (m *ListAdvisorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAdvisorsRequestMultiError(errors)
	}

	return nil
}

// ListAdvisorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdvisorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorsRequestMultiError) AllErrors() []error { return m }

// ListAdvisorsRequestValidationError is the validation error returned by
// ListAdvisorsRequest.Validate if the designated constraints aren't met.
type ListAdvisorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorsRequestValidationError) ErrorName() string {
	return "ListAdvisorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorsRequestValidationError{}

// Validate checks the field values on ListAdvisorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorsResponseMultiError, or nil if none found.
func (m *ListAdvisorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdvisors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdvisorsResponseValidationError{
						field:  fmt.Sprintf("Advisors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdvisorsResponseValidationError{
						field:  fmt.Sprintf("Advisors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdvisorsResponseValidationError{
					field:  fmt.Sprintf("Advisors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdvisorsResponseMultiError(errors)
	}

	return nil
}

// ListAdvisorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAdvisorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorsResponseMultiError) AllErrors() []error { return m }

// ListAdvisorsResponseValidationError is the validation error returned by
// ListAdvisorsResponse.Validate if the designated constraints aren't met.
type ListAdvisorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorsResponseValidationError) ErrorName() string {
	return "ListAdvisorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorsResponseValidationError{}

// Validate checks the field values on ChangeSecurityChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSecurityChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSecurityChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSecurityChecksRequestMultiError, or nil if none found.
func (m *ChangeSecurityChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSecurityChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeSecurityChecksRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeSecurityChecksRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeSecurityChecksRequestValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangeSecurityChecksRequestMultiError(errors)
	}

	return nil
}

// ChangeSecurityChecksRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeSecurityChecksRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeSecurityChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSecurityChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSecurityChecksRequestMultiError) AllErrors() []error { return m }

// ChangeSecurityChecksRequestValidationError is the validation error returned
// by ChangeSecurityChecksRequest.Validate if the designated constraints
// aren't met.
type ChangeSecurityChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSecurityChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSecurityChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSecurityChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSecurityChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSecurityChecksRequestValidationError) ErrorName() string {
	return "ChangeSecurityChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSecurityChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSecurityChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSecurityChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSecurityChecksRequestValidationError{}

// Validate checks the field values on ChangeSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSecurityChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSecurityChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSecurityChecksResponseMultiError, or nil if none found.
func (m *ChangeSecurityChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSecurityChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeSecurityChecksResponseMultiError(errors)
	}

	return nil
}

// ChangeSecurityChecksResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeSecurityChecksResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeSecurityChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSecurityChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSecurityChecksResponseMultiError) AllErrors() []error { return m }

// ChangeSecurityChecksResponseValidationError is the validation error returned
// by ChangeSecurityChecksResponse.Validate if the designated constraints
// aren't met.
type ChangeSecurityChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSecurityChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSecurityChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSecurityChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSecurityChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSecurityChecksResponseValidationError) ErrorName() string {
	return "ChangeSecurityChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSecurityChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSecurityChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSecurityChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSecurityChecksResponseValidationError{}

// Validate checks the field values on ListFailedServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFailedServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFailedServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFailedServicesRequestMultiError, or nil if none found.
func (m *ListFailedServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFailedServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFailedServicesRequestMultiError(errors)
	}

	return nil
}

// ListFailedServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListFailedServicesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListFailedServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFailedServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFailedServicesRequestMultiError) AllErrors() []error { return m }

// ListFailedServicesRequestValidationError is the validation error returned by
// ListFailedServicesRequest.Validate if the designated constraints aren't met.
type ListFailedServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedServicesRequestValidationError) ErrorName() string {
	return "ListFailedServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedServicesRequestValidationError{}

// Validate checks the field values on ListFailedServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFailedServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFailedServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFailedServicesResponseMultiError, or nil if none found.
func (m *ListFailedServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFailedServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFailedServicesResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFailedServicesResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFailedServicesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFailedServicesResponseMultiError(errors)
	}

	return nil
}

// ListFailedServicesResponseMultiError is an error wrapping multiple
// validation errors returned by ListFailedServicesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListFailedServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFailedServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFailedServicesResponseMultiError) AllErrors() []error { return m }

// ListFailedServicesResponseValidationError is the validation error returned
// by ListFailedServicesResponse.Validate if the designated constraints aren't met.
type ListFailedServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedServicesResponseValidationError) ErrorName() string {
	return "ListFailedServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedServicesResponseValidationError{}

// Validate checks the field values on GetFailedChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFailedChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFailedChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFailedChecksRequestMultiError, or nil if none found.
func (m *GetFailedChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFailedChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetPageParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFailedChecksRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFailedChecksRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFailedChecksRequestValidationError{
				field:  "PageParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFailedChecksRequestMultiError(errors)
	}

	return nil
}

// GetFailedChecksRequestMultiError is an error wrapping multiple validation
// errors returned by GetFailedChecksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFailedChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFailedChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFailedChecksRequestMultiError) AllErrors() []error { return m }

// GetFailedChecksRequestValidationError is the validation error returned by
// GetFailedChecksRequest.Validate if the designated constraints aren't met.
type GetFailedChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFailedChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFailedChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFailedChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFailedChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFailedChecksRequestValidationError) ErrorName() string {
	return "GetFailedChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFailedChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFailedChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFailedChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFailedChecksRequestValidationError{}

// Validate checks the field values on GetFailedChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFailedChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFailedChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFailedChecksResponseMultiError, or nil if none found.
func (m *GetFailedChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFailedChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFailedChecksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFailedChecksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFailedChecksResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageTotals()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFailedChecksResponseValidationError{
					field:  "PageTotals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFailedChecksResponseValidationError{
					field:  "PageTotals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageTotals()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFailedChecksResponseValidationError{
				field:  "PageTotals",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFailedChecksResponseMultiError(errors)
	}

	return nil
}

// GetFailedChecksResponseMultiError is an error wrapping multiple validation
// errors returned by GetFailedChecksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFailedChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFailedChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFailedChecksResponseMultiError) AllErrors() []error { return m }

// GetFailedChecksResponseValidationError is the validation error returned by
// GetFailedChecksResponse.Validate if the designated constraints aren't met.
type GetFailedChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFailedChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFailedChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFailedChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFailedChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFailedChecksResponseValidationError) ErrorName() string {
	return "GetFailedChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFailedChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFailedChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFailedChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFailedChecksResponseValidationError{}

// Validate checks the field values on ToggleCheckAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleCheckAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleCheckAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleCheckAlertRequestMultiError, or nil if none found.
func (m *ToggleCheckAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleCheckAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlertId

	// no validation rules for Silence

	if len(errors) > 0 {
		return ToggleCheckAlertRequestMultiError(errors)
	}

	return nil
}

// ToggleCheckAlertRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleCheckAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleCheckAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleCheckAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleCheckAlertRequestMultiError) AllErrors() []error { return m }

// ToggleCheckAlertRequestValidationError is the validation error returned by
// ToggleCheckAlertRequest.Validate if the designated constraints aren't met.
type ToggleCheckAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleCheckAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleCheckAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleCheckAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleCheckAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleCheckAlertRequestValidationError) ErrorName() string {
	return "ToggleCheckAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleCheckAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleCheckAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleCheckAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleCheckAlertRequestValidationError{}

// Validate checks the field values on ToggleCheckAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleCheckAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleCheckAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleCheckAlertResponseMultiError, or nil if none found.
func (m *ToggleCheckAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleCheckAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleCheckAlertResponseMultiError(errors)
	}

	return nil
}

// ToggleCheckAlertResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleCheckAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type ToggleCheckAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleCheckAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleCheckAlertResponseMultiError) AllErrors() []error { return m }

// ToggleCheckAlertResponseValidationError is the validation error returned by
// ToggleCheckAlertResponse.Validate if the designated constraints aren't met.
type ToggleCheckAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleCheckAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleCheckAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleCheckAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleCheckAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleCheckAlertResponseValidationError) ErrorName() string {
	return "ToggleCheckAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleCheckAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleCheckAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleCheckAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleCheckAlertResponseValidationError{}
