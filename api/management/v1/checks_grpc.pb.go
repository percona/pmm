// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/checks.proto

package managementv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecurityChecksService_ListFailedServices_FullMethodName   = "/management.v1.SecurityChecksService/ListFailedServices"
	SecurityChecksService_GetFailedChecks_FullMethodName      = "/management.v1.SecurityChecksService/GetFailedChecks"
	SecurityChecksService_StartSecurityChecks_FullMethodName  = "/management.v1.SecurityChecksService/StartSecurityChecks"
	SecurityChecksService_ListSecurityChecks_FullMethodName   = "/management.v1.SecurityChecksService/ListSecurityChecks"
	SecurityChecksService_ListAdvisors_FullMethodName         = "/management.v1.SecurityChecksService/ListAdvisors"
	SecurityChecksService_ChangeSecurityChecks_FullMethodName = "/management.v1.SecurityChecksService/ChangeSecurityChecks"
)

// SecurityChecksServiceClient is the client API for SecurityChecksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityChecksServiceClient interface {
	// ListFailedServices returns a list of services with failed checks.
	ListFailedServices(ctx context.Context, in *ListFailedServicesRequest, opts ...grpc.CallOption) (*ListFailedServicesResponse, error)
	// GetFailedChecks returns the checks result for a given service.
	GetFailedChecks(ctx context.Context, in *GetFailedChecksRequest, opts ...grpc.CallOption) (*GetFailedChecksResponse, error)
	// StartSecurityChecks executes Security Thread Tool checks and returns when all checks are executed.
	StartSecurityChecks(ctx context.Context, in *StartSecurityChecksRequest, opts ...grpc.CallOption) (*StartSecurityChecksResponse, error)
	// ListSecurityChecks returns a list of advisor checks available to the user..
	ListSecurityChecks(ctx context.Context, in *ListSecurityChecksRequest, opts ...grpc.CallOption) (*ListSecurityChecksResponse, error)
	// ListAdvisors returns a list of advisors available for the user.
	ListAdvisors(ctx context.Context, in *ListAdvisorsRequest, opts ...grpc.CallOption) (*ListAdvisorsResponse, error)
	// ChangeSecurityChecks enables/disables Security Thread Tool checks or changes their interval by names.
	ChangeSecurityChecks(ctx context.Context, in *ChangeSecurityChecksRequest, opts ...grpc.CallOption) (*ChangeSecurityChecksResponse, error)
}

type securityChecksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityChecksServiceClient(cc grpc.ClientConnInterface) SecurityChecksServiceClient {
	return &securityChecksServiceClient{cc}
}

func (c *securityChecksServiceClient) ListFailedServices(ctx context.Context, in *ListFailedServicesRequest, opts ...grpc.CallOption) (*ListFailedServicesResponse, error) {
	out := new(ListFailedServicesResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_ListFailedServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityChecksServiceClient) GetFailedChecks(ctx context.Context, in *GetFailedChecksRequest, opts ...grpc.CallOption) (*GetFailedChecksResponse, error) {
	out := new(GetFailedChecksResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_GetFailedChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityChecksServiceClient) StartSecurityChecks(ctx context.Context, in *StartSecurityChecksRequest, opts ...grpc.CallOption) (*StartSecurityChecksResponse, error) {
	out := new(StartSecurityChecksResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_StartSecurityChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityChecksServiceClient) ListSecurityChecks(ctx context.Context, in *ListSecurityChecksRequest, opts ...grpc.CallOption) (*ListSecurityChecksResponse, error) {
	out := new(ListSecurityChecksResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_ListSecurityChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityChecksServiceClient) ListAdvisors(ctx context.Context, in *ListAdvisorsRequest, opts ...grpc.CallOption) (*ListAdvisorsResponse, error) {
	out := new(ListAdvisorsResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_ListAdvisors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityChecksServiceClient) ChangeSecurityChecks(ctx context.Context, in *ChangeSecurityChecksRequest, opts ...grpc.CallOption) (*ChangeSecurityChecksResponse, error) {
	out := new(ChangeSecurityChecksResponse)
	err := c.cc.Invoke(ctx, SecurityChecksService_ChangeSecurityChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityChecksServiceServer is the server API for SecurityChecksService service.
// All implementations must embed UnimplementedSecurityChecksServiceServer
// for forward compatibility
type SecurityChecksServiceServer interface {
	// ListFailedServices returns a list of services with failed checks.
	ListFailedServices(context.Context, *ListFailedServicesRequest) (*ListFailedServicesResponse, error)
	// GetFailedChecks returns the checks result for a given service.
	GetFailedChecks(context.Context, *GetFailedChecksRequest) (*GetFailedChecksResponse, error)
	// StartSecurityChecks executes Security Thread Tool checks and returns when all checks are executed.
	StartSecurityChecks(context.Context, *StartSecurityChecksRequest) (*StartSecurityChecksResponse, error)
	// ListSecurityChecks returns a list of advisor checks available to the user..
	ListSecurityChecks(context.Context, *ListSecurityChecksRequest) (*ListSecurityChecksResponse, error)
	// ListAdvisors returns a list of advisors available for the user.
	ListAdvisors(context.Context, *ListAdvisorsRequest) (*ListAdvisorsResponse, error)
	// ChangeSecurityChecks enables/disables Security Thread Tool checks or changes their interval by names.
	ChangeSecurityChecks(context.Context, *ChangeSecurityChecksRequest) (*ChangeSecurityChecksResponse, error)
	mustEmbedUnimplementedSecurityChecksServiceServer()
}

// UnimplementedSecurityChecksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityChecksServiceServer struct{}

func (UnimplementedSecurityChecksServiceServer) ListFailedServices(context.Context, *ListFailedServicesRequest) (*ListFailedServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedServices not implemented")
}

func (UnimplementedSecurityChecksServiceServer) GetFailedChecks(context.Context, *GetFailedChecksRequest) (*GetFailedChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedChecks not implemented")
}

func (UnimplementedSecurityChecksServiceServer) StartSecurityChecks(context.Context, *StartSecurityChecksRequest) (*StartSecurityChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSecurityChecks not implemented")
}

func (UnimplementedSecurityChecksServiceServer) ListSecurityChecks(context.Context, *ListSecurityChecksRequest) (*ListSecurityChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityChecks not implemented")
}

func (UnimplementedSecurityChecksServiceServer) ListAdvisors(context.Context, *ListAdvisorsRequest) (*ListAdvisorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdvisors not implemented")
}

func (UnimplementedSecurityChecksServiceServer) ChangeSecurityChecks(context.Context, *ChangeSecurityChecksRequest) (*ChangeSecurityChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSecurityChecks not implemented")
}
func (UnimplementedSecurityChecksServiceServer) mustEmbedUnimplementedSecurityChecksServiceServer() {}

// UnsafeSecurityChecksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityChecksServiceServer will
// result in compilation errors.
type UnsafeSecurityChecksServiceServer interface {
	mustEmbedUnimplementedSecurityChecksServiceServer()
}

func RegisterSecurityChecksServiceServer(s grpc.ServiceRegistrar, srv SecurityChecksServiceServer) {
	s.RegisterService(&SecurityChecksService_ServiceDesc, srv)
}

func _SecurityChecksService_ListFailedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).ListFailedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_ListFailedServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).ListFailedServices(ctx, req.(*ListFailedServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityChecksService_GetFailedChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailedChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).GetFailedChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_GetFailedChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).GetFailedChecks(ctx, req.(*GetFailedChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityChecksService_StartSecurityChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSecurityChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).StartSecurityChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_StartSecurityChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).StartSecurityChecks(ctx, req.(*StartSecurityChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityChecksService_ListSecurityChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).ListSecurityChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_ListSecurityChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).ListSecurityChecks(ctx, req.(*ListSecurityChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityChecksService_ListAdvisors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdvisorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).ListAdvisors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_ListAdvisors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).ListAdvisors(ctx, req.(*ListAdvisorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityChecksService_ChangeSecurityChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSecurityChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityChecksServiceServer).ChangeSecurityChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityChecksService_ChangeSecurityChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityChecksServiceServer).ChangeSecurityChecks(ctx, req.(*ChangeSecurityChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityChecksService_ServiceDesc is the grpc.ServiceDesc for SecurityChecksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityChecksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.SecurityChecksService",
	HandlerType: (*SecurityChecksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFailedServices",
			Handler:    _SecurityChecksService_ListFailedServices_Handler,
		},
		{
			MethodName: "GetFailedChecks",
			Handler:    _SecurityChecksService_GetFailedChecks_Handler,
		},
		{
			MethodName: "StartSecurityChecks",
			Handler:    _SecurityChecksService_StartSecurityChecks_Handler,
		},
		{
			MethodName: "ListSecurityChecks",
			Handler:    _SecurityChecksService_ListSecurityChecks_Handler,
		},
		{
			MethodName: "ListAdvisors",
			Handler:    _SecurityChecksService_ListAdvisors_Handler,
		},
		{
			MethodName: "ChangeSecurityChecks",
			Handler:    _SecurityChecksService_ChangeSecurityChecks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/checks.proto",
}
