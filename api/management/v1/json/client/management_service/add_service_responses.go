// Code generated by go-swagger; DO NOT EDIT.

package management_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddServiceReader is a Reader for the AddService structure.
type AddServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddServiceOK creates a AddServiceOK with default headers values
func NewAddServiceOK() *AddServiceOK {
	return &AddServiceOK{}
}

/*
AddServiceOK describes a response with status code 200, with default header values.

A successful response.
*/
type AddServiceOK struct {
	Payload *AddServiceOKBody
}

func (o *AddServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/services][%d] addServiceOk  %+v", 200, o.Payload)
}

func (o *AddServiceOK) GetPayload() *AddServiceOKBody {
	return o.Payload
}

func (o *AddServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(AddServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceDefault creates a AddServiceDefault with default headers values
func NewAddServiceDefault(code int) *AddServiceDefault {
	return &AddServiceDefault{
		_statusCode: code,
	}
}

/*
AddServiceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AddServiceDefault struct {
	_statusCode int

	Payload *AddServiceDefaultBody
}

// Code gets the status code for the add service default response
func (o *AddServiceDefault) Code() int {
	return o._statusCode
}

func (o *AddServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/services][%d] AddService default  %+v", o._statusCode, o.Payload)
}

func (o *AddServiceDefault) GetPayload() *AddServiceDefaultBody {
	return o.Payload
}

func (o *AddServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(AddServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddServiceBody add service body
swagger:model AddServiceBody
*/
type AddServiceBody struct {
	// external
	External *AddServiceParamsBodyExternal `json:"external,omitempty"`

	// haproxy
	Haproxy *AddServiceParamsBodyHaproxy `json:"haproxy,omitempty"`

	// mongodb
	Mongodb *AddServiceParamsBodyMongodb `json:"mongodb,omitempty"`

	// mysql
	Mysql *AddServiceParamsBodyMysql `json:"mysql,omitempty"`

	// postgresql
	Postgresql *AddServiceParamsBodyPostgresql `json:"postgresql,omitempty"`

	// proxysql
	Proxysql *AddServiceParamsBodyProxysql `json:"proxysql,omitempty"`

	// rds
	RDS *AddServiceParamsBodyRDS `json:"rds,omitempty"`
}

// Validate validates this add service body
func (o *AddServiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceBody) validateExternal(formats strfmt.Registry) error {
	if swag.IsZero(o.External) { // not required
		return nil
	}

	if o.External != nil {
		if err := o.External.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validateHaproxy(formats strfmt.Registry) error {
	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validateMongodb(formats strfmt.Registry) error {
	if swag.IsZero(o.Mongodb) { // not required
		return nil
	}

	if o.Mongodb != nil {
		if err := o.Mongodb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validateMysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validatePostgresql(formats strfmt.Registry) error {
	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validateProxysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) validateRDS(formats strfmt.Registry) error {
	if swag.IsZero(o.RDS) { // not required
		return nil
	}

	if o.RDS != nil {
		if err := o.RDS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "rds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "rds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service body based on the context it is used
func (o *AddServiceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHaproxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMongodb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProxysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRDS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceBody) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {
	if o.External != nil {
		if err := o.External.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidateHaproxy(ctx context.Context, formats strfmt.Registry) error {
	if o.Haproxy != nil {
		if err := o.Haproxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidateMongodb(ctx context.Context, formats strfmt.Registry) error {
	if o.Mongodb != nil {
		if err := o.Mongodb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidateMysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Mysql != nil {
		if err := o.Mysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidatePostgresql(ctx context.Context, formats strfmt.Registry) error {
	if o.Postgresql != nil {
		if err := o.Postgresql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidateProxysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Proxysql != nil {
		if err := o.Proxysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceBody) contextValidateRDS(ctx context.Context, formats strfmt.Registry) error {
	if o.RDS != nil {
		if err := o.RDS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "rds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "rds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceBody) UnmarshalBinary(b []byte) error {
	var res AddServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceDefaultBody add service default body
swagger:model AddServiceDefaultBody
*/
type AddServiceDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*AddServiceDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this add service default body
func (o *AddServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add service default body based on the context it is used
func (o *AddServiceDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceDefaultBodyDetailsItems0 add service default body details items0
swagger:model AddServiceDefaultBodyDetailsItems0
*/
type AddServiceDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this add service default body details items0
func (o *AddServiceDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service default body details items0 based on context it is used
func (o *AddServiceDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res AddServiceDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBody add service OK body
swagger:model AddServiceOKBody
*/
type AddServiceOKBody struct {
	// external
	External *AddServiceOKBodyExternal `json:"external,omitempty"`

	// haproxy
	Haproxy *AddServiceOKBodyHaproxy `json:"haproxy,omitempty"`

	// mongodb
	Mongodb *AddServiceOKBodyMongodb `json:"mongodb,omitempty"`

	// mysql
	Mysql *AddServiceOKBodyMysql `json:"mysql,omitempty"`

	// postgresql
	Postgresql *AddServiceOKBodyPostgresql `json:"postgresql,omitempty"`

	// proxysql
	Proxysql *AddServiceOKBodyProxysql `json:"proxysql,omitempty"`

	// rds
	RDS *AddServiceOKBodyRDS `json:"rds,omitempty"`
}

// Validate validates this add service OK body
func (o *AddServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBody) validateExternal(formats strfmt.Registry) error {
	if swag.IsZero(o.External) { // not required
		return nil
	}

	if o.External != nil {
		if err := o.External.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validateHaproxy(formats strfmt.Registry) error {
	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validateMongodb(formats strfmt.Registry) error {
	if swag.IsZero(o.Mongodb) { // not required
		return nil
	}

	if o.Mongodb != nil {
		if err := o.Mongodb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validateMysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validatePostgresql(formats strfmt.Registry) error {
	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validateProxysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) validateRDS(formats strfmt.Registry) error {
	if swag.IsZero(o.RDS) { // not required
		return nil
	}

	if o.RDS != nil {
		if err := o.RDS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body based on the context it is used
func (o *AddServiceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHaproxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMongodb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProxysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRDS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBody) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {
	if o.External != nil {
		if err := o.External.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidateHaproxy(ctx context.Context, formats strfmt.Registry) error {
	if o.Haproxy != nil {
		if err := o.Haproxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidateMongodb(ctx context.Context, formats strfmt.Registry) error {
	if o.Mongodb != nil {
		if err := o.Mongodb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidateMysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Mysql != nil {
		if err := o.Mysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidatePostgresql(ctx context.Context, formats strfmt.Registry) error {
	if o.Postgresql != nil {
		if err := o.Postgresql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidateProxysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Proxysql != nil {
		if err := o.Proxysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBody) contextValidateRDS(ctx context.Context, formats strfmt.Registry) error {
	if o.RDS != nil {
		if err := o.RDS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBody) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyExternal add service OK body external
swagger:model AddServiceOKBodyExternal
*/
type AddServiceOKBodyExternal struct {
	// external exporter
	ExternalExporter *AddServiceOKBodyExternalExternalExporter `json:"external_exporter,omitempty"`

	// service
	Service *AddServiceOKBodyExternalService `json:"service,omitempty"`
}

// Validate validates this add service OK body external
func (o *AddServiceOKBodyExternal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternalExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyExternal) validateExternalExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.ExternalExporter) { // not required
		return nil
	}

	if o.ExternalExporter != nil {
		if err := o.ExternalExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyExternal) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body external based on the context it is used
func (o *AddServiceOKBodyExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExternalExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyExternal) contextValidateExternalExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.ExternalExporter != nil {
		if err := o.ExternalExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyExternal) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyExternal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyExternal) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyExternalExternalExporter ExternalExporter runs on any Node type, including Remote Node.
swagger:model AddServiceOKBodyExternalExternalExporter
*/
type AddServiceOKBodyExternalExternalExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// If disabled, metrics from this exporter will not be collected.
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyExternalExternalExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body external external exporter
func (o *AddServiceOKBodyExternalExternalExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyExternalExternalExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body external external exporter based on the context it is used
func (o *AddServiceOKBodyExternalExternalExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyExternalExternalExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "external" + "." + "external_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyExternalExternalExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyExternalExternalExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyExternalExternalExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyExternalExternalExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyExternalExternalExporterMetricsResolutions
*/
type AddServiceOKBodyExternalExternalExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body external external exporter metrics resolutions
func (o *AddServiceOKBodyExternalExternalExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body external external exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyExternalExternalExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyExternalExternalExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyExternalExternalExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyExternalExternalExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyExternalService ExternalService represents a generic External service instance.
swagger:model AddServiceOKBodyExternalService
*/
type AddServiceOKBodyExternalService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Group name of external service.
	Group string `json:"group,omitempty"`
}

// Validate validates this add service OK body external service
func (o *AddServiceOKBodyExternalService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body external service based on context it is used
func (o *AddServiceOKBodyExternalService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyExternalService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyExternalService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyExternalService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyHaproxy add service OK body haproxy
swagger:model AddServiceOKBodyHaproxy
*/
type AddServiceOKBodyHaproxy struct {
	// external exporter
	ExternalExporter *AddServiceOKBodyHaproxyExternalExporter `json:"external_exporter,omitempty"`

	// service
	Service *AddServiceOKBodyHaproxyService `json:"service,omitempty"`
}

// Validate validates this add service OK body haproxy
func (o *AddServiceOKBodyHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternalExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyHaproxy) validateExternalExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.ExternalExporter) { // not required
		return nil
	}

	if o.ExternalExporter != nil {
		if err := o.ExternalExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyHaproxy) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body haproxy based on the context it is used
func (o *AddServiceOKBodyHaproxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExternalExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyHaproxy) contextValidateExternalExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.ExternalExporter != nil {
		if err := o.ExternalExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyHaproxy) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxy) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyHaproxyExternalExporter ExternalExporter runs on any Node type, including Remote Node.
swagger:model AddServiceOKBodyHaproxyExternalExporter
*/
type AddServiceOKBodyHaproxyExternalExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// If disabled, metrics from this exporter will not be collected.
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyHaproxyExternalExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body haproxy external exporter
func (o *AddServiceOKBodyHaproxyExternalExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyHaproxyExternalExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body haproxy external exporter based on the context it is used
func (o *AddServiceOKBodyHaproxyExternalExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyHaproxyExternalExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "haproxy" + "." + "external_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyExternalExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyExternalExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyHaproxyExternalExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyHaproxyExternalExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyHaproxyExternalExporterMetricsResolutions
*/
type AddServiceOKBodyHaproxyExternalExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body haproxy external exporter metrics resolutions
func (o *AddServiceOKBodyHaproxyExternalExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body haproxy external exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyHaproxyExternalExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyExternalExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyExternalExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyHaproxyExternalExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyHaproxyService HAProxyService represents a generic HAProxy service instance.
swagger:model AddServiceOKBodyHaproxyService
*/
type AddServiceOKBodyHaproxyService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service OK body haproxy service
func (o *AddServiceOKBodyHaproxyService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body haproxy service based on context it is used
func (o *AddServiceOKBodyHaproxyService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyHaproxyService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyHaproxyService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMongodb add service OK body mongodb
swagger:model AddServiceOKBodyMongodb
*/
type AddServiceOKBodyMongodb struct {
	// mongodb exporter
	MongodbExporter *AddServiceOKBodyMongodbMongodbExporter `json:"mongodb_exporter,omitempty"`

	// qan mongodb profiler
	QANMongodbProfiler *AddServiceOKBodyMongodbQANMongodbProfiler `json:"qan_mongodb_profiler,omitempty"`

	// service
	Service *AddServiceOKBodyMongodbService `json:"service,omitempty"`
}

// Validate validates this add service OK body mongodb
func (o *AddServiceOKBodyMongodb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMongodbExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMongodbProfiler(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMongodb) validateMongodbExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.MongodbExporter) { // not required
		return nil
	}

	if o.MongodbExporter != nil {
		if err := o.MongodbExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMongodb) validateQANMongodbProfiler(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMongodbProfiler) { // not required
		return nil
	}

	if o.QANMongodbProfiler != nil {
		if err := o.QANMongodbProfiler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "qan_mongodb_profiler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "qan_mongodb_profiler")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMongodb) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body mongodb based on the context it is used
func (o *AddServiceOKBodyMongodb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMongodbExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMongodbProfiler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMongodb) contextValidateMongodbExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.MongodbExporter != nil {
		if err := o.MongodbExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMongodb) contextValidateQANMongodbProfiler(ctx context.Context, formats strfmt.Registry) error {
	if o.QANMongodbProfiler != nil {
		if err := o.QANMongodbProfiler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "qan_mongodb_profiler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "qan_mongodb_profiler")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMongodb) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMongodb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMongodb) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMongodb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMongodbMongodbExporter MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
swagger:model AddServiceOKBodyMongodbMongodbExporter
*/
type AddServiceOKBodyMongodbMongodbExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// List of colletions to get stats from. Can use *
	StatsCollections []string `json:"stats_collections"`

	// Collections limit. Only get Databases and collection stats if the total number of collections in the server
	// is less than this value. 0: no limit
	CollectionsLimit int32 `json:"collections_limit,omitempty"`

	// Enable All collectors.
	EnableAllCollectors bool `json:"enable_all_collectors,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyMongodbMongodbExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body mongodb mongodb exporter
func (o *AddServiceOKBodyMongodbMongodbExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyMongodbMongodbExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMongodbMongodbExporterTypeStatusPropEnum = append(addServiceOkBodyMongodbMongodbExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyMongodbMongodbExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyMongodbMongodbExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMongodbMongodbExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMongodbMongodbExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"mongodb"+"."+"mongodb_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyMongodbMongodbExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMongodbMongodbExporterTypeLogLevelPropEnum = append(addServiceOkBodyMongodbMongodbExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyMongodbMongodbExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyMongodbMongodbExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMongodbMongodbExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMongodbMongodbExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"mongodb"+"."+"mongodb_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyMongodbMongodbExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body mongodb mongodb exporter based on the context it is used
func (o *AddServiceOKBodyMongodbMongodbExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMongodbMongodbExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mongodb" + "." + "mongodb_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbMongodbExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbMongodbExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMongodbMongodbExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMongodbMongodbExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyMongodbMongodbExporterMetricsResolutions
*/
type AddServiceOKBodyMongodbMongodbExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body mongodb mongodb exporter metrics resolutions
func (o *AddServiceOKBodyMongodbMongodbExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body mongodb mongodb exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyMongodbMongodbExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbMongodbExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbMongodbExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMongodbMongodbExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMongodbQANMongodbProfiler QANMongoDBProfilerAgent runs within pmm-agent and sends MongoDB Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyMongodbQANMongodbProfiler
*/
type AddServiceOKBodyMongodbQANMongodbProfiler struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for getting profiler data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body mongodb QAN mongodb profiler
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyMongodbQanMongodbProfilerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMongodbQanMongodbProfilerTypeStatusPropEnum = append(addServiceOkBodyMongodbQanMongodbProfilerTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyMongodbQANMongodbProfilerStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMongodbQanMongodbProfilerTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMongodbQANMongodbProfiler) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"mongodb"+"."+"qan_mongodb_profiler"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyMongodbQanMongodbProfilerTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMongodbQanMongodbProfilerTypeLogLevelPropEnum = append(addServiceOkBodyMongodbQanMongodbProfilerTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyMongodbQANMongodbProfilerLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMongodbQanMongodbProfilerTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMongodbQANMongodbProfiler) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"mongodb"+"."+"qan_mongodb_profiler"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body mongodb QAN mongodb profiler based on context it is used
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbQANMongodbProfiler) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMongodbQANMongodbProfiler
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMongodbService MongoDBService represents a generic MongoDB instance.
swagger:model AddServiceOKBodyMongodbService
*/
type AddServiceOKBodyMongodbService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MongoDB version.
	Version string `json:"version,omitempty"`
}

// Validate validates this add service OK body mongodb service
func (o *AddServiceOKBodyMongodbService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body mongodb service based on context it is used
func (o *AddServiceOKBodyMongodbService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMongodbService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMongodbService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysql add service OK body mysql
swagger:model AddServiceOKBodyMysql
*/
type AddServiceOKBodyMysql struct {
	// Actual table count at the moment of adding.
	TableCount int32 `json:"table_count,omitempty"`

	// mysqld exporter
	MysqldExporter *AddServiceOKBodyMysqlMysqldExporter `json:"mysqld_exporter,omitempty"`

	// qan mysql perfschema
	QANMysqlPerfschema *AddServiceOKBodyMysqlQANMysqlPerfschema `json:"qan_mysql_perfschema,omitempty"`

	// qan mysql slowlog
	QANMysqlSlowlog *AddServiceOKBodyMysqlQANMysqlSlowlog `json:"qan_mysql_slowlog,omitempty"`

	// service
	Service *AddServiceOKBodyMysqlService `json:"service,omitempty"`
}

// Validate validates this add service OK body mysql
func (o *AddServiceOKBodyMysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschema(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlSlowlog(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMysql) validateMysqldExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) validateQANMysqlPerfschema(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMysqlPerfschema) { // not required
		return nil
	}

	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_perfschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) validateQANMysqlSlowlog(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMysqlSlowlog) { // not required
		return nil
	}

	if o.QANMysqlSlowlog != nil {
		if err := o.QANMysqlSlowlog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_slowlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_slowlog")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body mysql based on the context it is used
func (o *AddServiceOKBodyMysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMysqldExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMysqlPerfschema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMysqlSlowlog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMysql) contextValidateMysqldExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) contextValidateQANMysqlPerfschema(ctx context.Context, formats strfmt.Registry) error {
	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_perfschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) contextValidateQANMysqlSlowlog(ctx context.Context, formats strfmt.Registry) error {
	if o.QANMysqlSlowlog != nil {
		if err := o.QANMysqlSlowlog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_slowlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "qan_mysql_slowlog")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyMysql) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysql) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysqlMysqldExporter MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
swagger:model AddServiceOKBodyMysqlMysqldExporter
*/
type AddServiceOKBodyMysqlMysqldExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// Actual table count at the moment of adding.
	TableCount int32 `json:"table_count,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if tablestats group collectors are currently disabled.
	TablestatsGroupDisabled bool `json:"tablestats_group_disabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyMysqlMysqldExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body mysql mysqld exporter
func (o *AddServiceOKBodyMysqlMysqldExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyMysqlMysqldExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlMysqldExporterTypeStatusPropEnum = append(addServiceOkBodyMysqlMysqldExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyMysqlMysqldExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyMysqlMysqldExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlMysqldExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlMysqldExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"mysql"+"."+"mysqld_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyMysqlMysqldExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlMysqldExporterTypeLogLevelPropEnum = append(addServiceOkBodyMysqlMysqldExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyMysqlMysqldExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyMysqlMysqldExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlMysqldExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlMysqldExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"mysql"+"."+"mysqld_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyMysqlMysqldExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body mysql mysqld exporter based on the context it is used
func (o *AddServiceOKBodyMysqlMysqldExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyMysqlMysqldExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "mysql" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlMysqldExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlMysqldExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysqlMysqldExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysqlMysqldExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyMysqlMysqldExporterMetricsResolutions
*/
type AddServiceOKBodyMysqlMysqldExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body mysql mysqld exporter metrics resolutions
func (o *AddServiceOKBodyMysqlMysqldExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body mysql mysqld exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyMysqlMysqldExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlMysqldExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlMysqldExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysqlMysqldExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysqlQANMysqlPerfschema QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyMysqlQANMysqlPerfschema
*/
type AddServiceOKBodyMysqlQANMysqlPerfschema struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body mysql QAN mysql perfschema
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyMysqlQanMysqlPerfschemaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlQanMysqlPerfschemaTypeStatusPropEnum = append(addServiceOkBodyMysqlQanMysqlPerfschemaTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyMysqlQANMysqlPerfschemaStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlQanMysqlPerfschemaTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"mysql"+"."+"qan_mysql_perfschema"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyMysqlQanMysqlPerfschemaTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlQanMysqlPerfschemaTypeLogLevelPropEnum = append(addServiceOkBodyMysqlQanMysqlPerfschemaTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyMysqlQANMysqlPerfschemaLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlQanMysqlPerfschemaTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"mysql"+"."+"qan_mysql_perfschema"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body mysql QAN mysql perfschema based on context it is used
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlQANMysqlPerfschema) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysqlQANMysqlPerfschema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysqlQANMysqlSlowlog QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyMysqlQANMysqlSlowlog
*/
type AddServiceOKBodyMysqlQANMysqlSlowlog struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit)
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Slowlog file is rotated at this size if > 0.
	MaxSlowlogFileSize string `json:"max_slowlog_file_size,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// mod tidy
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body mysql QAN mysql slowlog
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyMysqlQanMysqlSlowlogTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlQanMysqlSlowlogTypeStatusPropEnum = append(addServiceOkBodyMysqlQanMysqlSlowlogTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyMysqlQANMysqlSlowlogStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlQanMysqlSlowlogTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"mysql"+"."+"qan_mysql_slowlog"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyMysqlQanMysqlSlowlogTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyMysqlQanMysqlSlowlogTypeLogLevelPropEnum = append(addServiceOkBodyMysqlQanMysqlSlowlogTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyMysqlQANMysqlSlowlogLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyMysqlQanMysqlSlowlogTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"mysql"+"."+"qan_mysql_slowlog"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body mysql QAN mysql slowlog based on context it is used
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlQANMysqlSlowlog) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysqlQANMysqlSlowlog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyMysqlService MySQLService represents a generic MySQL instance.
swagger:model AddServiceOKBodyMysqlService
*/
type AddServiceOKBodyMysqlService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MySQL version.
	Version string `json:"version,omitempty"`
}

// Validate validates this add service OK body mysql service
func (o *AddServiceOKBodyMysqlService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body mysql service based on context it is used
func (o *AddServiceOKBodyMysqlService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyMysqlService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyMysqlService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresql add service OK body postgresql
swagger:model AddServiceOKBodyPostgresql
*/
type AddServiceOKBodyPostgresql struct {
	// Warning message.
	Warning string `json:"warning,omitempty"`

	// postgres exporter
	PostgresExporter *AddServiceOKBodyPostgresqlPostgresExporter `json:"postgres_exporter,omitempty"`

	// qan postgresql pgstatements agent
	QANPostgresqlPgstatementsAgent *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent `json:"qan_postgresql_pgstatements_agent,omitempty"`

	// qan postgresql pgstatmonitor agent
	QANPostgresqlPgstatmonitorAgent *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent `json:"qan_postgresql_pgstatmonitor_agent,omitempty"`

	// service
	Service *AddServiceOKBodyPostgresqlService `json:"service,omitempty"`
}

// Validate validates this add service OK body postgresql
func (o *AddServiceOKBodyPostgresql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePostgresExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatementsAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatmonitorAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyPostgresql) validatePostgresExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresExporter) { // not required
		return nil
	}

	if o.PostgresExporter != nil {
		if err := o.PostgresExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) validateQANPostgresqlPgstatementsAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANPostgresqlPgstatementsAgent) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatementsAgent != nil {
		if err := o.QANPostgresqlPgstatementsAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatements_agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatements_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) validateQANPostgresqlPgstatmonitorAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANPostgresqlPgstatmonitorAgent) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatmonitorAgent != nil {
		if err := o.QANPostgresqlPgstatmonitorAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatmonitor_agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatmonitor_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body postgresql based on the context it is used
func (o *AddServiceOKBodyPostgresql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePostgresExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANPostgresqlPgstatementsAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANPostgresqlPgstatmonitorAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyPostgresql) contextValidatePostgresExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresExporter != nil {
		if err := o.PostgresExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) contextValidateQANPostgresqlPgstatementsAgent(ctx context.Context, formats strfmt.Registry) error {
	if o.QANPostgresqlPgstatementsAgent != nil {
		if err := o.QANPostgresqlPgstatementsAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatements_agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatements_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) contextValidateQANPostgresqlPgstatmonitorAgent(ctx context.Context, formats strfmt.Registry) error {
	if o.QANPostgresqlPgstatmonitorAgent != nil {
		if err := o.QANPostgresqlPgstatmonitorAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatmonitor_agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "qan_postgresql_pgstatmonitor_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyPostgresql) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresqlPostgresExporter PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model AddServiceOKBodyPostgresqlPostgresExporter
*/
type AddServiceOKBodyPostgresqlPostgresExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// Maximum number of connections that exporter can open to the database instance.
	MaxExporterConnections int32 `json:"max_exporter_connections,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body postgresql postgres exporter
func (o *AddServiceOKBodyPostgresqlPostgresExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyPostgresqlPostgresExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlPostgresExporterTypeStatusPropEnum = append(addServiceOkBodyPostgresqlPostgresExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyPostgresqlPostgresExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlPostgresExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlPostgresExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlPostgresExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"postgresql"+"."+"postgres_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyPostgresqlPostgresExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlPostgresExporterTypeLogLevelPropEnum = append(addServiceOkBodyPostgresqlPostgresExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyPostgresqlPostgresExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlPostgresExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlPostgresExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlPostgresExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"postgresql"+"."+"postgres_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyPostgresqlPostgresExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body postgresql postgres exporter based on the context it is used
func (o *AddServiceOKBodyPostgresqlPostgresExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlPostgresExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "postgresql" + "." + "postgres_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlPostgresExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlPostgresExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresqlPostgresExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions
*/
type AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body postgresql postgres exporter metrics resolutions
func (o *AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body postgresql postgres exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresqlPostgresExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent
*/
type AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat statements data.
	Username string `json:"username,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body postgresql QAN postgresql pgstatements agent
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeStatusPropEnum = append(addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"postgresql"+"."+"qan_postgresql_pgstatements_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeLogLevelPropEnum = append(addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgentLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlQanPostgresqlPgstatementsAgentTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"postgresql"+"."+"qan_postgresql_pgstatements_agent"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body postgresql QAN postgresql pgstatements agent based on context it is used
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresqlQANPostgresqlPgstatementsAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent QANPostgreSQLPgStatMonitorAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent
*/
type AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat monitor data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body postgresql QAN postgresql pgstatmonitor agent
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum = append(addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"postgresql"+"."+"qan_postgresql_pgstatmonitor_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeLogLevelPropEnum = append(addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgentLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyPostgresqlQanPostgresqlPgstatmonitorAgentTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"postgresql"+"."+"qan_postgresql_pgstatmonitor_agent"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body postgresql QAN postgresql pgstatmonitor agent based on context it is used
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresqlQANPostgresqlPgstatmonitorAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyPostgresqlService PostgreSQLService represents a generic PostgreSQL instance.
swagger:model AddServiceOKBodyPostgresqlService
*/
type AddServiceOKBodyPostgresqlService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Database name.
	DatabaseName string `json:"database_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// PostgreSQL version.
	Version string `json:"version,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`
}

// Validate validates this add service OK body postgresql service
func (o *AddServiceOKBodyPostgresqlService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body postgresql service based on context it is used
func (o *AddServiceOKBodyPostgresqlService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyPostgresqlService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyPostgresqlService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyProxysql add service OK body proxysql
swagger:model AddServiceOKBodyProxysql
*/
type AddServiceOKBodyProxysql struct {
	// proxysql exporter
	ProxysqlExporter *AddServiceOKBodyProxysqlProxysqlExporter `json:"proxysql_exporter,omitempty"`

	// service
	Service *AddServiceOKBodyProxysqlService `json:"service,omitempty"`
}

// Validate validates this add service OK body proxysql
func (o *AddServiceOKBodyProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProxysqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyProxysql) validateProxysqlExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.ProxysqlExporter) { // not required
		return nil
	}

	if o.ProxysqlExporter != nil {
		if err := o.ProxysqlExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyProxysql) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body proxysql based on the context it is used
func (o *AddServiceOKBodyProxysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProxysqlExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyProxysql) contextValidateProxysqlExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.ProxysqlExporter != nil {
		if err := o.ProxysqlExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyProxysql) contextValidateService(ctx context.Context, formats strfmt.Registry) error {
	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyProxysql) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyProxysqlProxysqlExporter ProxySQLExporter runs on Generic or Container Node and exposes ProxySQL Service metrics.
swagger:model AddServiceOKBodyProxysqlProxysqlExporter
*/
type AddServiceOKBodyProxysqlProxysqlExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body proxysql proxysql exporter
func (o *AddServiceOKBodyProxysqlProxysqlExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyProxysqlProxysqlExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyProxysqlProxysqlExporterTypeStatusPropEnum = append(addServiceOkBodyProxysqlProxysqlExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyProxysqlProxysqlExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyProxysqlProxysqlExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyProxysqlProxysqlExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyProxysqlProxysqlExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"proxysql"+"."+"proxysql_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyProxysqlProxysqlExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyProxysqlProxysqlExporterTypeLogLevelPropEnum = append(addServiceOkBodyProxysqlProxysqlExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyProxysqlProxysqlExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyProxysqlProxysqlExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyProxysqlProxysqlExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyProxysqlProxysqlExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"proxysql"+"."+"proxysql_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyProxysqlProxysqlExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body proxysql proxysql exporter based on the context it is used
func (o *AddServiceOKBodyProxysqlProxysqlExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyProxysqlProxysqlExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "proxysql" + "." + "proxysql_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlProxysqlExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlProxysqlExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyProxysqlProxysqlExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions
*/
type AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body proxysql proxysql exporter metrics resolutions
func (o *AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body proxysql proxysql exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyProxysqlProxysqlExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyProxysqlService ProxySQLService represents a generic ProxySQL instance.
swagger:model AddServiceOKBodyProxysqlService
*/
type AddServiceOKBodyProxysqlService struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// ProxySQL version.
	Version string `json:"version,omitempty"`
}

// Validate validates this add service OK body proxysql service
func (o *AddServiceOKBodyProxysqlService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body proxysql service based on context it is used
func (o *AddServiceOKBodyProxysqlService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyProxysqlService) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyProxysqlService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDS add service OK body RDS
swagger:model AddServiceOKBodyRDS
*/
type AddServiceOKBodyRDS struct {
	// mysql
	Mysql *AddServiceOKBodyRDSMysql `json:"mysql,omitempty"`

	// mysqld exporter
	MysqldExporter *AddServiceOKBodyRDSMysqldExporter `json:"mysqld_exporter,omitempty"`

	// node
	Node *AddServiceOKBodyRDSNode `json:"node,omitempty"`

	// postgresql
	Postgresql *AddServiceOKBodyRDSPostgresql `json:"postgresql,omitempty"`

	// postgresql exporter
	PostgresqlExporter *AddServiceOKBodyRDSPostgresqlExporter `json:"postgresql_exporter,omitempty"`

	// qan mysql perfschema
	QANMysqlPerfschema *AddServiceOKBodyRDSQANMysqlPerfschema `json:"qan_mysql_perfschema,omitempty"`

	// qan postgresql pgstatements
	QANPostgresqlPgstatements *AddServiceOKBodyRDSQANPostgresqlPgstatements `json:"qan_postgresql_pgstatements,omitempty"`

	// rds exporter
	RDSExporter *AddServiceOKBodyRDSRDSExporter `json:"rds_exporter,omitempty"`
}

// Validate validates this add service OK body RDS
func (o *AddServiceOKBodyRDS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschema(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatements(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDSExporter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyRDS) validateMysql(formats strfmt.Registry) error {
	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validateMysqldExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(o.Node) { // not required
		return nil
	}

	if o.Node != nil {
		if err := o.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validatePostgresql(formats strfmt.Registry) error {
	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validatePostgresqlExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresqlExporter) { // not required
		return nil
	}

	if o.PostgresqlExporter != nil {
		if err := o.PostgresqlExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validateQANMysqlPerfschema(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMysqlPerfschema) { // not required
		return nil
	}

	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_mysql_perfschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validateQANPostgresqlPgstatements(formats strfmt.Registry) error {
	if swag.IsZero(o.QANPostgresqlPgstatements) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatements != nil {
		if err := o.QANPostgresqlPgstatements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_postgresql_pgstatements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_postgresql_pgstatements")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) validateRDSExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.RDSExporter) { // not required
		return nil
	}

	if o.RDSExporter != nil {
		if err := o.RDSExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body RDS based on the context it is used
func (o *AddServiceOKBodyRDS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMysql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqldExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresql(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresqlExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMysqlPerfschema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANPostgresqlPgstatements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRDSExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateMysql(ctx context.Context, formats strfmt.Registry) error {
	if o.Mysql != nil {
		if err := o.Mysql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateMysqldExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {
	if o.Node != nil {
		if err := o.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidatePostgresql(ctx context.Context, formats strfmt.Registry) error {
	if o.Postgresql != nil {
		if err := o.Postgresql.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidatePostgresqlExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresqlExporter != nil {
		if err := o.PostgresqlExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateQANMysqlPerfschema(ctx context.Context, formats strfmt.Registry) error {
	if o.QANMysqlPerfschema != nil {
		if err := o.QANMysqlPerfschema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_mysql_perfschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_mysql_perfschema")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateQANPostgresqlPgstatements(ctx context.Context, formats strfmt.Registry) error {
	if o.QANPostgresqlPgstatements != nil {
		if err := o.QANPostgresqlPgstatements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_postgresql_pgstatements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "qan_postgresql_pgstatements")
			}
			return err
		}
	}

	return nil
}

func (o *AddServiceOKBodyRDS) contextValidateRDSExporter(ctx context.Context, formats strfmt.Registry) error {
	if o.RDSExporter != nil {
		if err := o.RDSExporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDS) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSMysql MySQLService represents a generic MySQL instance.
swagger:model AddServiceOKBodyRDSMysql
*/
type AddServiceOKBodyRDSMysql struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MySQL version.
	Version string `json:"version,omitempty"`
}

// Validate validates this add service OK body RDS mysql
func (o *AddServiceOKBodyRDSMysql) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS mysql based on context it is used
func (o *AddServiceOKBodyRDSMysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysql) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSMysqldExporter MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
swagger:model AddServiceOKBodyRDSMysqldExporter
*/
type AddServiceOKBodyRDSMysqldExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// Actual table count at the moment of adding.
	TableCount int32 `json:"table_count,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if tablestats group collectors are currently disabled.
	TablestatsGroupDisabled bool `json:"tablestats_group_disabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyRDSMysqldExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body RDS mysqld exporter
func (o *AddServiceOKBodyRDSMysqldExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyRdsMysqldExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsMysqldExporterTypeStatusPropEnum = append(addServiceOkBodyRdsMysqldExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyRDSMysqldExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyRDSMysqldExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsMysqldExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSMysqldExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"rds"+"."+"mysqld_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyRdsMysqldExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsMysqldExporterTypeLogLevelPropEnum = append(addServiceOkBodyRdsMysqldExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyRDSMysqldExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyRDSMysqldExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsMysqldExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSMysqldExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"rds"+"."+"mysqld_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyRDSMysqldExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body RDS mysqld exporter based on the context it is used
func (o *AddServiceOKBodyRDSMysqldExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyRDSMysqldExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "mysqld_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysqldExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysqldExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSMysqldExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSMysqldExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyRDSMysqldExporterMetricsResolutions
*/
type AddServiceOKBodyRDSMysqldExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body RDS mysqld exporter metrics resolutions
func (o *AddServiceOKBodyRDSMysqldExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS mysqld exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyRDSMysqldExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysqldExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSMysqldExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSMysqldExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSNode RemoteRDSNode represents remote RDS Node. Agents can't run on Remote RDS Nodes.
swagger:model AddServiceOKBodyRDSNode
*/
type AddServiceOKBodyRDSNode struct {
	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// DB instance identifier.
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service OK body RDS node
func (o *AddServiceOKBodyRDSNode) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS node based on context it is used
func (o *AddServiceOKBodyRDSNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSNode) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSPostgresql PostgreSQLService represents a generic PostgreSQL instance.
swagger:model AddServiceOKBodyRDSPostgresql
*/
type AddServiceOKBodyRDSPostgresql struct {
	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Database name.
	DatabaseName string `json:"database_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// PostgreSQL version.
	Version string `json:"version,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`
}

// Validate validates this add service OK body RDS postgresql
func (o *AddServiceOKBodyRDSPostgresql) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS postgresql based on context it is used
func (o *AddServiceOKBodyRDSPostgresql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresql) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSPostgresqlExporter PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model AddServiceOKBodyRDSPostgresqlExporter
*/
type AddServiceOKBodyRDSPostgresqlExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// Maximum number of connections that exporter can open to the database instance.
	MaxExporterConnections int32 `json:"max_exporter_connections,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body RDS postgresql exporter
func (o *AddServiceOKBodyRDSPostgresqlExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyRdsPostgresqlExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsPostgresqlExporterTypeStatusPropEnum = append(addServiceOkBodyRdsPostgresqlExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyRDSPostgresqlExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyRDSPostgresqlExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsPostgresqlExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSPostgresqlExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"rds"+"."+"postgresql_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyRdsPostgresqlExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsPostgresqlExporterTypeLogLevelPropEnum = append(addServiceOkBodyRdsPostgresqlExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyRDSPostgresqlExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyRDSPostgresqlExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsPostgresqlExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSPostgresqlExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"rds"+"."+"postgresql_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyRDSPostgresqlExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body RDS postgresql exporter based on the context it is used
func (o *AddServiceOKBodyRDSPostgresqlExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyRDSPostgresqlExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "postgresql_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresqlExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresqlExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSPostgresqlExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions
*/
type AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body RDS postgresql exporter metrics resolutions
func (o *AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS postgresql exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSPostgresqlExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSQANMysqlPerfschema QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyRDSQANMysqlPerfschema
*/
type AddServiceOKBodyRDSQANMysqlPerfschema struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body RDS QAN mysql perfschema
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyRdsQanMysqlPerfschemaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsQanMysqlPerfschemaTypeStatusPropEnum = append(addServiceOkBodyRdsQanMysqlPerfschemaTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyRDSQANMysqlPerfschemaStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsQanMysqlPerfschemaTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSQANMysqlPerfschema) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"rds"+"."+"qan_mysql_perfschema"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyRdsQanMysqlPerfschemaTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsQanMysqlPerfschemaTypeLogLevelPropEnum = append(addServiceOkBodyRdsQanMysqlPerfschemaTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyRDSQANMysqlPerfschemaLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsQanMysqlPerfschemaTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSQANMysqlPerfschema) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"rds"+"."+"qan_mysql_perfschema"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body RDS QAN mysql perfschema based on context it is used
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSQANMysqlPerfschema) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSQANMysqlPerfschema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSQANPostgresqlPgstatements QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model AddServiceOKBodyRDSQANPostgresqlPgstatements
*/
type AddServiceOKBodyRDSQANPostgresqlPgstatements struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat statements data.
	Username string `json:"username,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this add service OK body RDS QAN postgresql pgstatements
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyRdsQanPostgresqlPgstatementsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsQanPostgresqlPgstatementsTypeStatusPropEnum = append(addServiceOkBodyRdsQanPostgresqlPgstatementsTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsQanPostgresqlPgstatementsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"rds"+"."+"qan_postgresql_pgstatements"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyRdsQanPostgresqlPgstatementsTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsQanPostgresqlPgstatementsTypeLogLevelPropEnum = append(addServiceOkBodyRdsQanPostgresqlPgstatementsTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyRDSQANPostgresqlPgstatementsLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsQanPostgresqlPgstatementsTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"rds"+"."+"qan_postgresql_pgstatements"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service OK body RDS QAN postgresql pgstatements based on context it is used
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSQANPostgresqlPgstatements) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSQANPostgresqlPgstatements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSRDSExporter RDSExporter runs on Generic or Container Node and exposes RemoteRDS Node metrics.
swagger:model AddServiceOKBodyRDSRDSExporter
*/
type AddServiceOKBodyRDSRDSExporter struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// AWS Access Key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - AGENT_STATUS_STARTING: Agent is starting.
	//  - AGENT_STATUS_RUNNING: Agent is running.
	//  - AGENT_STATUS_WAITING: Agent encountered error and will be restarted automatically soon.
	//  - AGENT_STATUS_STOPPING: Agent is stopping.
	//  - AGENT_STATUS_DONE: Agent finished.
	//  - AGENT_STATUS_UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_UNSPECIFIED AGENT_STATUS_STARTING AGENT_STATUS_RUNNING AGENT_STATUS_WAITING AGENT_STATUS_STOPPING AGENT_STATUS_DONE AGENT_STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// Basic metrics are disabled.
	BasicMetricsDisabled bool `json:"basic_metrics_disabled,omitempty"`

	// Enhanced metrics are disabled.
	EnhancedMetricsDisabled bool `json:"enhanced_metrics_disabled,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`

	// metrics resolutions
	MetricsResolutions *AddServiceOKBodyRDSRDSExporterMetricsResolutions `json:"metrics_resolutions,omitempty"`
}

// Validate validates this add service OK body RDS RDS exporter
func (o *AddServiceOKBodyRDSRDSExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsResolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceOkBodyRdsRdsExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_UNSPECIFIED","AGENT_STATUS_STARTING","AGENT_STATUS_RUNNING","AGENT_STATUS_WAITING","AGENT_STATUS_STOPPING","AGENT_STATUS_DONE","AGENT_STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsRdsExporterTypeStatusPropEnum = append(addServiceOkBodyRdsRdsExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSUNSPECIFIED captures enum value "AGENT_STATUS_UNSPECIFIED"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSUNSPECIFIED string = "AGENT_STATUS_UNSPECIFIED"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSSTARTING captures enum value "AGENT_STATUS_STARTING"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSSTARTING string = "AGENT_STATUS_STARTING"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSRUNNING captures enum value "AGENT_STATUS_RUNNING"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSRUNNING string = "AGENT_STATUS_RUNNING"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSWAITING captures enum value "AGENT_STATUS_WAITING"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSWAITING string = "AGENT_STATUS_WAITING"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSSTOPPING captures enum value "AGENT_STATUS_STOPPING"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSSTOPPING string = "AGENT_STATUS_STOPPING"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSDONE captures enum value "AGENT_STATUS_DONE"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSDONE string = "AGENT_STATUS_DONE"

	// AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSUNKNOWN captures enum value "AGENT_STATUS_UNKNOWN"
	AddServiceOKBodyRDSRDSExporterStatusAGENTSTATUSUNKNOWN string = "AGENT_STATUS_UNKNOWN"
)

// prop value enum
func (o *AddServiceOKBodyRDSRDSExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsRdsExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSRDSExporter) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addServiceOk"+"."+"rds"+"."+"rds_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var addServiceOkBodyRdsRdsExporterTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceOkBodyRdsRdsExporterTypeLogLevelPropEnum = append(addServiceOkBodyRdsRdsExporterTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceOKBodyRDSRDSExporterLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceOKBodyRDSRDSExporter) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceOkBodyRdsRdsExporterTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceOKBodyRDSRDSExporter) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("addServiceOk"+"."+"rds"+"."+"rds_exporter"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceOKBodyRDSRDSExporter) validateMetricsResolutions(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsResolutions) { // not required
		return nil
	}

	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service OK body RDS RDS exporter based on the context it is used
func (o *AddServiceOKBodyRDSRDSExporter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetricsResolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceOKBodyRDSRDSExporter) contextValidateMetricsResolutions(ctx context.Context, formats strfmt.Registry) error {
	if o.MetricsResolutions != nil {
		if err := o.MetricsResolutions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter" + "." + "metrics_resolutions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addServiceOk" + "." + "rds" + "." + "rds_exporter" + "." + "metrics_resolutions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSRDSExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSRDSExporter) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSRDSExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceOKBodyRDSRDSExporterMetricsResolutions MetricsResolutions represents Prometheus exporters metrics resolutions.
swagger:model AddServiceOKBodyRDSRDSExporterMetricsResolutions
*/
type AddServiceOKBodyRDSRDSExporterMetricsResolutions struct {
	// High resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Hr string `json:"hr,omitempty"`

	// Medium resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Mr string `json:"mr,omitempty"`

	// Low resolution. In JSON should be represented as a string with number of seconds with `s` suffix.
	Lr string `json:"lr,omitempty"`
}

// Validate validates this add service OK body RDS RDS exporter metrics resolutions
func (o *AddServiceOKBodyRDSRDSExporterMetricsResolutions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add service OK body RDS RDS exporter metrics resolutions based on context it is used
func (o *AddServiceOKBodyRDSRDSExporterMetricsResolutions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceOKBodyRDSRDSExporterMetricsResolutions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceOKBodyRDSRDSExporterMetricsResolutions) UnmarshalBinary(b []byte) error {
	var res AddServiceOKBodyRDSRDSExporterMetricsResolutions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyExternal add service params body external
swagger:model AddServiceParamsBodyExternal
*/
type AddServiceParamsBodyExternal struct {
	// Node identifier on which an external exporter is been running.
	// runs_on_node_id should always be passed with node_id.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Node name on which a service and node is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Node and Exporter access address (DNS name or IP).
	// address should always be passed with add_node.
	Address string `json:"address,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// HTTP basic auth password for collecting metrics.
	Password string `json:"password,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Node identifier on which an external service is been running.
	// node_id should always be passed with runs_on_node_id.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Group name of external service.
	Group string `json:"group,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyExternalAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body external
func (o *AddServiceParamsBodyExternal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyExternalTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyExternalTypeMetricsModePropEnum = append(addServiceParamsBodyExternalTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyExternalMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyExternalMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyExternalMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyExternalMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyExternalMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyExternalMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyExternal) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyExternalTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyExternal) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"external"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyExternal) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "external" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "external" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body external based on the context it is used
func (o *AddServiceParamsBodyExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyExternal) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "external" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "external" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyExternal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyExternal) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyExternalAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyExternalAddNode
*/
type AddServiceParamsBodyExternalAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body external add node
func (o *AddServiceParamsBodyExternalAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyExternalAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyExternalAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyExternalAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyExternalAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyExternalAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyExternalAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyExternalAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"external"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body external add node based on context it is used
func (o *AddServiceParamsBodyExternalAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyExternalAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyExternalAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyExternalAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyHaproxy add service params body haproxy
swagger:model AddServiceParamsBodyHaproxy
*/
type AddServiceParamsBodyHaproxy struct {
	// Node identifier on which an external exporter is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service and node is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Node and Exporter access address (DNS name or IP).
	// address always should be passed with add_node.
	Address string `json:"address,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// HTTP basic auth password for collecting metrics.
	Password string `json:"password,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyHaproxyAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body haproxy
func (o *AddServiceParamsBodyHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyHaproxyTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyHaproxyTypeMetricsModePropEnum = append(addServiceParamsBodyHaproxyTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyHaproxyMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyHaproxy) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyHaproxyTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyHaproxy) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"haproxy"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyHaproxy) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "haproxy" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "haproxy" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body haproxy based on the context it is used
func (o *AddServiceParamsBodyHaproxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyHaproxy) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "haproxy" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "haproxy" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyHaproxy) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyHaproxyAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyHaproxyAddNode
*/
type AddServiceParamsBodyHaproxyAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body haproxy add node
func (o *AddServiceParamsBodyHaproxyAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyHaproxyAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyHaproxyAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyHaproxyAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyHaproxyAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyHaproxyAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyHaproxyAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyHaproxyAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"haproxy"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body haproxy add node based on context it is used
func (o *AddServiceParamsBodyHaproxyAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyHaproxyAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyHaproxyAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyHaproxyAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyMongodb add service params body mongodb
swagger:model AddServiceParamsBodyMongodb
*/
type AddServiceParamsBodyMongodb struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Service Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// MongoDB username for exporter and QAN agent access.
	Username string `json:"username,omitempty"`

	// MongoDB password for exporter and QAN agent access.
	Password string `json:"password,omitempty"`

	// If true, adds qan-mongodb-profiler-agent for provided service.
	QANMongodbProfiler bool `json:"qan_mongodb_profiler,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Client certificate and key.
	TLSCertificateKey string `json:"tls_certificate_key,omitempty"`

	// Password for decrypting tls_certificate_key.
	TLSCertificateKeyFilePassword string `json:"tls_certificate_key_file_password,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// List of collector names to disable in this exporter.
	DisableCollectors []string `json:"disable_collectors"`

	// Authentication mechanism.
	// See https://docs.mongodb.com/manual/reference/connection-string/#mongodb-urioption-urioption.authMechanism
	// for details.
	AuthenticationMechanism string `json:"authentication_mechanism,omitempty"`

	// Authentication database.
	AuthenticationDatabase string `json:"authentication_database,omitempty"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// List of collections to get stats from. Can use * .
	StatsCollections []string `json:"stats_collections"`

	// Collections limit. Only get Databases and collection stats if the total number of collections in the server
	// is less than this value. 0: no limit
	CollectionsLimit int32 `json:"collections_limit,omitempty"`

	// Enable all collectors
	EnableAllCollectors bool `json:"enable_all_collectors,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyMongodbAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body mongodb
func (o *AddServiceParamsBodyMongodb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyMongodbTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMongodbTypeMetricsModePropEnum = append(addServiceParamsBodyMongodbTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMongodbMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyMongodbMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyMongodbMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyMongodbMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyMongodbMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyMongodbMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyMongodb) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMongodbTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMongodb) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"mongodb"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

var addServiceParamsBodyMongodbTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMongodbTypeLogLevelPropEnum = append(addServiceParamsBodyMongodbTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceParamsBodyMongodbLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceParamsBodyMongodbLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceParamsBodyMongodb) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMongodbTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMongodb) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("body"+"."+"mongodb"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyMongodb) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body mongodb based on the context it is used
func (o *AddServiceParamsBodyMongodb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyMongodb) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyMongodb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyMongodb) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyMongodb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyMongodbAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyMongodbAddNode
*/
type AddServiceParamsBodyMongodbAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body mongodb add node
func (o *AddServiceParamsBodyMongodbAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyMongodbAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMongodbAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyMongodbAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyMongodbAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyMongodbAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMongodbAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMongodbAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"mongodb"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body mongodb add node based on context it is used
func (o *AddServiceParamsBodyMongodbAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyMongodbAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyMongodbAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyMongodbAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyMysql add service params body mysql
swagger:model AddServiceParamsBodyMysql
*/
type AddServiceParamsBodyMysql struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Service Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// MySQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// If true, adds qan-mysql-perfschema-agent for provided service.
	QANMysqlPerfschema bool `json:"qan_mysql_perfschema,omitempty"`

	// If true, adds qan-mysql-slowlog-agent for provided service.
	QANMysqlSlowlog bool `json:"qan_mysql_slowlog,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Disable query examples.
	DisableQueryExamples bool `json:"disable_query_examples,omitempty"`

	// If qan-mysql-slowlog-agent is added, slowlog file is rotated at this size if > 0.
	// If zero, server's default value is used.
	// Use negative value to disable rotation.
	MaxSlowlogFileSize string `json:"max_slowlog_file_size,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors will be disabled if there are more than that number of tables.
	// If zero, server's default value is used.
	// Use negative value to disable them.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// List of collector names to disable in this exporter.
	DisableCollectors []string `json:"disable_collectors"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyMysqlAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body mysql
func (o *AddServiceParamsBodyMysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyMysqlTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMysqlTypeMetricsModePropEnum = append(addServiceParamsBodyMysqlTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMysqlMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyMysqlMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyMysqlMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyMysqlMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyMysqlMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyMysqlMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyMysql) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMysqlTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMysql) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"mysql"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

var addServiceParamsBodyMysqlTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMysqlTypeLogLevelPropEnum = append(addServiceParamsBodyMysqlTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceParamsBodyMysqlLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceParamsBodyMysqlLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceParamsBodyMysql) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMysqlTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMysql) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("body"+"."+"mysql"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyMysql) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body mysql based on the context it is used
func (o *AddServiceParamsBodyMysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyMysql) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyMysql) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyMysqlAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyMysqlAddNode
*/
type AddServiceParamsBodyMysqlAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body mysql add node
func (o *AddServiceParamsBodyMysqlAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyMysqlAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyMysqlAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyMysqlAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyMysqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyMysqlAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyMysqlAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyMysqlAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"mysql"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body mysql add node based on context it is used
func (o *AddServiceParamsBodyMysqlAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyMysqlAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyMysqlAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyMysqlAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyPostgresql add service params body postgresql
swagger:model AddServiceParamsBodyPostgresql
*/
type AddServiceParamsBodyPostgresql struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Service Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Database name.
	Database string `json:"database,omitempty"`

	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// PostgreSQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// If true, adds qan-postgresql-pgstatements-agent for provided service.
	QANPostgresqlPgstatementsAgent bool `json:"qan_postgresql_pgstatements_agent,omitempty"`

	// If true, adds qan-postgresql-pgstatmonitor-agent for provided service.
	QANPostgresqlPgstatmonitorAgent bool `json:"qan_postgresql_pgstatmonitor_agent,omitempty"`

	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `json:"max_query_length,omitempty"`

	// Disable query examples.
	DisableQueryExamples bool `json:"disable_query_examples,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// List of collector names to disable in this exporter.
	DisableCollectors []string `json:"disable_collectors"`

	// TLS CA certificate.
	TLSCa string `json:"tls_ca,omitempty"`

	// TLS Certifcate.
	TLSCert string `json:"tls_cert,omitempty"`

	// TLS Certificate Key.
	TLSKey string `json:"tls_key,omitempty"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Limit for auto discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// Maximum number of connections that exporter can open to the database instance.
	MaxExporterConnections int32 `json:"max_exporter_connections,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyPostgresqlAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body postgresql
func (o *AddServiceParamsBodyPostgresql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyPostgresqlTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyPostgresqlTypeMetricsModePropEnum = append(addServiceParamsBodyPostgresqlTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyPostgresqlMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyPostgresql) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyPostgresqlTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyPostgresql) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"postgresql"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

var addServiceParamsBodyPostgresqlTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyPostgresqlTypeLogLevelPropEnum = append(addServiceParamsBodyPostgresqlTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceParamsBodyPostgresqlLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceParamsBodyPostgresqlLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceParamsBodyPostgresql) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyPostgresqlTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyPostgresql) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("body"+"."+"postgresql"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyPostgresql) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body postgresql based on the context it is used
func (o *AddServiceParamsBodyPostgresql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyPostgresql) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgresql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgresql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyPostgresqlAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyPostgresqlAddNode
*/
type AddServiceParamsBodyPostgresqlAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body postgresql add node
func (o *AddServiceParamsBodyPostgresqlAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyPostgresqlAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyPostgresqlAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyPostgresqlAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyPostgresqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyPostgresqlAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyPostgresqlAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyPostgresqlAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"postgresql"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body postgresql add node based on context it is used
func (o *AddServiceParamsBodyPostgresqlAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyPostgresqlAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyPostgresqlAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyPostgresqlAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyProxysql add service params body proxysql
swagger:model AddServiceParamsBodyProxysql
*/
type AddServiceParamsBodyProxysql struct {
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeID string `json:"node_id,omitempty"`

	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Service Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// ProxySQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// List of collector names to disable in this exporter.
	DisableCollectors []string `json:"disable_collectors"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// Log level for exporters
	//
	// - LOG_LEVEL_UNSPECIFIED: Auto
	// Enum: [LOG_LEVEL_UNSPECIFIED LOG_LEVEL_FATAL LOG_LEVEL_ERROR LOG_LEVEL_WARN LOG_LEVEL_INFO LOG_LEVEL_DEBUG]
	LogLevel *string `json:"log_level,omitempty"`

	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `json:"expose_exporter,omitempty"`

	// add node
	AddNode *AddServiceParamsBodyProxysqlAddNode `json:"add_node,omitempty"`
}

// Validate validates this add service params body proxysql
func (o *AddServiceParamsBodyProxysql) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyProxysqlTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyProxysqlTypeMetricsModePropEnum = append(addServiceParamsBodyProxysqlTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyProxysqlMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyProxysql) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyProxysqlTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyProxysql) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"proxysql"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

var addServiceParamsBodyProxysqlTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOG_LEVEL_UNSPECIFIED","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARN","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyProxysqlTypeLogLevelPropEnum = append(addServiceParamsBodyProxysqlTypeLogLevelPropEnum, v)
	}
}

const (

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELUNSPECIFIED captures enum value "LOG_LEVEL_UNSPECIFIED"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELUNSPECIFIED string = "LOG_LEVEL_UNSPECIFIED"

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELFATAL captures enum value "LOG_LEVEL_FATAL"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELFATAL string = "LOG_LEVEL_FATAL"

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELERROR captures enum value "LOG_LEVEL_ERROR"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELERROR string = "LOG_LEVEL_ERROR"

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELWARN captures enum value "LOG_LEVEL_WARN"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELWARN string = "LOG_LEVEL_WARN"

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELINFO captures enum value "LOG_LEVEL_INFO"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELINFO string = "LOG_LEVEL_INFO"

	// AddServiceParamsBodyProxysqlLogLevelLOGLEVELDEBUG captures enum value "LOG_LEVEL_DEBUG"
	AddServiceParamsBodyProxysqlLogLevelLOGLEVELDEBUG string = "LOG_LEVEL_DEBUG"
)

// prop value enum
func (o *AddServiceParamsBodyProxysql) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyProxysqlTypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyProxysql) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("body"+"."+"proxysql"+"."+"log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

func (o *AddServiceParamsBodyProxysql) validateAddNode(formats strfmt.Registry) error {
	if swag.IsZero(o.AddNode) { // not required
		return nil
	}

	if o.AddNode != nil {
		if err := o.AddNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "proxysql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "proxysql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add service params body proxysql based on the context it is used
func (o *AddServiceParamsBodyProxysql) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddServiceParamsBodyProxysql) contextValidateAddNode(ctx context.Context, formats strfmt.Registry) error {
	if o.AddNode != nil {
		if err := o.AddNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "proxysql" + "." + "add_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "proxysql" + "." + "add_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyProxysql) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyProxysqlAddNode AddNodeParams holds node params and is used to add new node to inventory while adding new service.
swagger:model AddServiceParamsBodyProxysqlAddNode
*/
type AddServiceParamsBodyProxysqlAddNode struct {
	// NodeType describes supported Node types.
	// Enum: [NODE_TYPE_UNSPECIFIED NODE_TYPE_GENERIC_NODE NODE_TYPE_CONTAINER_NODE NODE_TYPE_REMOTE_NODE NODE_TYPE_REMOTE_RDS_NODE NODE_TYPE_REMOTE_AZURE_DATABASE_NODE]
	NodeType *string `json:"node_type,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add service params body proxysql add node
func (o *AddServiceParamsBodyProxysqlAddNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyProxysqlAddNodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_TYPE_UNSPECIFIED","NODE_TYPE_GENERIC_NODE","NODE_TYPE_CONTAINER_NODE","NODE_TYPE_REMOTE_NODE","NODE_TYPE_REMOTE_RDS_NODE","NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyProxysqlAddNodeTypeNodeTypePropEnum = append(addServiceParamsBodyProxysqlAddNodeTypeNodeTypePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEUNSPECIFIED captures enum value "NODE_TYPE_UNSPECIFIED"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEUNSPECIFIED string = "NODE_TYPE_UNSPECIFIED"

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEGENERICNODE captures enum value "NODE_TYPE_GENERIC_NODE"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEGENERICNODE string = "NODE_TYPE_GENERIC_NODE"

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPECONTAINERNODE captures enum value "NODE_TYPE_CONTAINER_NODE"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPECONTAINERNODE string = "NODE_TYPE_CONTAINER_NODE"

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTENODE captures enum value "NODE_TYPE_REMOTE_NODE"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTENODE string = "NODE_TYPE_REMOTE_NODE"

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTERDSNODE captures enum value "NODE_TYPE_REMOTE_RDS_NODE"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTERDSNODE string = "NODE_TYPE_REMOTE_RDS_NODE"

	// AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE captures enum value "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
	AddServiceParamsBodyProxysqlAddNodeNodeTypeNODETYPEREMOTEAZUREDATABASENODE string = "NODE_TYPE_REMOTE_AZURE_DATABASE_NODE"
)

// prop value enum
func (o *AddServiceParamsBodyProxysqlAddNode) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyProxysqlAddNodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyProxysqlAddNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNodeTypeEnum("body"+"."+"proxysql"+"."+"add_node"+"."+"node_type", "body", *o.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body proxysql add node based on context it is used
func (o *AddServiceParamsBodyProxysqlAddNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyProxysqlAddNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyProxysqlAddNode) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyProxysqlAddNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddServiceParamsBodyRDS add service params body RDS
swagger:model AddServiceParamsBodyRDS
*/
type AddServiceParamsBodyRDS struct {
	// AWS region.
	Region string `json:"region,omitempty"`

	// AWS availability zone.
	Az string `json:"az,omitempty"`

	// AWS instance ID.
	InstanceID string `json:"instance_id,omitempty"`

	// AWS instance class.
	NodeModel string `json:"node_model,omitempty"`

	// Address used to connect to it.
	Address string `json:"address,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// DiscoverRDSEngine describes supported RDS instance engines.
	// Enum: [DISCOVER_RDS_ENGINE_UNSPECIFIED DISCOVER_RDS_ENGINE_MYSQL DISCOVER_RDS_ENGINE_POSTGRESQL]
	Engine *string `json:"engine,omitempty"`

	// Unique across all Nodes user-defined name. Defaults to AWS instance ID.
	NodeName string `json:"node_name,omitempty"`

	// Unique across all Services user-defined name. Defaults to AWS instance ID.
	ServiceName string `json:"service_name,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Password for scraping metrics.
	Password string `json:"password,omitempty"`

	// AWS Access key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// AWS Secret key.
	AWSSecretKey string `json:"aws_secret_key,omitempty"`

	// If true, adds rds_exporter.
	RDSExporter bool `json:"rds_exporter,omitempty"`

	// If true, adds qan-mysql-perfschema-agent.
	QANMysqlPerfschema bool `json:"qan_mysql_perfschema,omitempty"`

	// Custom user-assigned labels for Node and Service.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Skip connection check.
	SkipConnectionCheck bool `json:"skip_connection_check,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Disable query examples.
	DisableQueryExamples bool `json:"disable_query_examples,omitempty"`

	// Tablestats group collectors will be disabled if there are more than that number of tables.
	// If zero, server's default value is used.
	// Use negative value to disable them.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Disable basic metrics.
	DisableBasicMetrics bool `json:"disable_basic_metrics,omitempty"`

	// Disable enhanced metrics.
	DisableEnhancedMetrics bool `json:"disable_enhanced_metrics,omitempty"`

	// MetricsMode defines desired metrics mode for agent,
	// it can be pull, push or auto mode chosen by server.
	//
	//  - METRICS_MODE_UNSPECIFIED: Auto
	// Enum: [METRICS_MODE_UNSPECIFIED METRICS_MODE_PULL METRICS_MODE_PUSH]
	MetricsMode *string `json:"metrics_mode,omitempty"`

	// If true, add qan-pgstatements
	QANPostgresqlPgstatements bool `json:"qan_postgresql_pgstatements,omitempty"`

	// Custom password for exporter endpoint /metrics.
	AgentPassword string `json:"agent_password,omitempty"`

	// Database name.
	Database string `json:"database,omitempty"`

	// Limit of databases for auto-discovery.
	AutoDiscoveryLimit int32 `json:"auto_discovery_limit,omitempty"`

	// Disable parsing comments from queries and showing them in QAN.
	DisableCommentsParsing bool `json:"disable_comments_parsing,omitempty"`

	// Maximum number of exporter connections to PostgreSQL instance.
	MaxPostgresqlExporterConnections int32 `json:"max_postgresql_exporter_connections,omitempty"`
}

// Validate validates this add service params body RDS
func (o *AddServiceParamsBodyRDS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricsMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addServiceParamsBodyRdsTypeEnginePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISCOVER_RDS_ENGINE_UNSPECIFIED","DISCOVER_RDS_ENGINE_MYSQL","DISCOVER_RDS_ENGINE_POSTGRESQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyRdsTypeEnginePropEnum = append(addServiceParamsBodyRdsTypeEnginePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEUNSPECIFIED captures enum value "DISCOVER_RDS_ENGINE_UNSPECIFIED"
	AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEUNSPECIFIED string = "DISCOVER_RDS_ENGINE_UNSPECIFIED"

	// AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEMYSQL captures enum value "DISCOVER_RDS_ENGINE_MYSQL"
	AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEMYSQL string = "DISCOVER_RDS_ENGINE_MYSQL"

	// AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEPOSTGRESQL captures enum value "DISCOVER_RDS_ENGINE_POSTGRESQL"
	AddServiceParamsBodyRDSEngineDISCOVERRDSENGINEPOSTGRESQL string = "DISCOVER_RDS_ENGINE_POSTGRESQL"
)

// prop value enum
func (o *AddServiceParamsBodyRDS) validateEngineEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyRdsTypeEnginePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyRDS) validateEngine(formats strfmt.Registry) error {
	if swag.IsZero(o.Engine) { // not required
		return nil
	}

	// value enum
	if err := o.validateEngineEnum("body"+"."+"rds"+"."+"engine", "body", *o.Engine); err != nil {
		return err
	}

	return nil
}

var addServiceParamsBodyRdsTypeMetricsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRICS_MODE_UNSPECIFIED","METRICS_MODE_PULL","METRICS_MODE_PUSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addServiceParamsBodyRdsTypeMetricsModePropEnum = append(addServiceParamsBodyRdsTypeMetricsModePropEnum, v)
	}
}

const (

	// AddServiceParamsBodyRDSMetricsModeMETRICSMODEUNSPECIFIED captures enum value "METRICS_MODE_UNSPECIFIED"
	AddServiceParamsBodyRDSMetricsModeMETRICSMODEUNSPECIFIED string = "METRICS_MODE_UNSPECIFIED"

	// AddServiceParamsBodyRDSMetricsModeMETRICSMODEPULL captures enum value "METRICS_MODE_PULL"
	AddServiceParamsBodyRDSMetricsModeMETRICSMODEPULL string = "METRICS_MODE_PULL"

	// AddServiceParamsBodyRDSMetricsModeMETRICSMODEPUSH captures enum value "METRICS_MODE_PUSH"
	AddServiceParamsBodyRDSMetricsModeMETRICSMODEPUSH string = "METRICS_MODE_PUSH"
)

// prop value enum
func (o *AddServiceParamsBodyRDS) validateMetricsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addServiceParamsBodyRdsTypeMetricsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddServiceParamsBodyRDS) validateMetricsMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricsMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricsModeEnum("body"+"."+"rds"+"."+"metrics_mode", "body", *o.MetricsMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add service params body RDS based on context it is used
func (o *AddServiceParamsBodyRDS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddServiceParamsBodyRDS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddServiceParamsBodyRDS) UnmarshalBinary(b []byte) error {
	var res AddServiceParamsBodyRDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
