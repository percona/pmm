// Code generated by go-swagger; DO NOT EDIT.

package management_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNodeReader is a Reader for the GetNode structure.
type GetNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNodeOK creates a GetNodeOK with default headers values
func NewGetNodeOK() *GetNodeOK {
	return &GetNodeOK{}
}

/*
GetNodeOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetNodeOK struct {
	Payload *GetNodeOKBody
}

func (o *GetNodeOK) Error() string {
	return fmt.Sprintf("[GET /v1/management/nodes/{node_id}][%d] getNodeOk  %+v", 200, o.Payload)
}

func (o *GetNodeOK) GetPayload() *GetNodeOKBody {
	return o.Payload
}

func (o *GetNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeDefault creates a GetNodeDefault with default headers values
func NewGetNodeDefault(code int) *GetNodeDefault {
	return &GetNodeDefault{
		_statusCode: code,
	}
}

/*
GetNodeDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetNodeDefault struct {
	_statusCode int

	Payload *GetNodeDefaultBody
}

// Code gets the status code for the get node default response
func (o *GetNodeDefault) Code() int {
	return o._statusCode
}

func (o *GetNodeDefault) Error() string {
	return fmt.Sprintf("[GET /v1/management/nodes/{node_id}][%d] GetNode default  %+v", o._statusCode, o.Payload)
}

func (o *GetNodeDefault) GetPayload() *GetNodeDefaultBody {
	return o.Payload
}

func (o *GetNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetNodeDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNodeDefaultBody get node default body
swagger:model GetNodeDefaultBody
*/
type GetNodeDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetNodeDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get node default body
func (o *GetNodeDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetNode default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetNode default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get node default body based on the context it is used
func (o *GetNodeDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetNode default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetNode default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetNodeDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNodeDefaultBodyDetailsItems0 get node default body details items0
swagger:model GetNodeDefaultBodyDetailsItems0
*/
type GetNodeDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get node default body details items0
func (o *GetNodeDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node default body details items0 based on context it is used
func (o *GetNodeDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetNodeDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNodeOKBody get node OK body
swagger:model GetNodeOKBody
*/
type GetNodeOKBody struct {
	// node
	Node *GetNodeOKBodyNode `json:"node,omitempty"`
}

// Validate validates this get node OK body
func (o *GetNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeOKBody) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(o.Node) { // not required
		return nil
	}

	if o.Node != nil {
		if err := o.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeOk" + "." + "node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNodeOk" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get node OK body based on the context it is used
func (o *GetNodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeOKBody) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {
	if o.Node != nil {
		if err := o.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeOk" + "." + "node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNodeOk" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeOKBody) UnmarshalBinary(b []byte) error {
	var res GetNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNodeOKBodyNode get node OK body node
swagger:model GetNodeOKBodyNode
*/
type GetNodeOKBodyNode struct {
	// Unique Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// Node type.
	NodeType string `json:"node_type,omitempty"`

	// User-defined node name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// A node's unique docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Creation timestamp.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Last update timestamp.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Node status.
	//
	//  - STATUS_UNSPECIFIED: Invalid status.
	//  - STATUS_UP: The node is up.
	//  - STATUS_DOWN: The node is down.
	//  - STATUS_UNKNOWN: The node's status cannot be known (e.g. there are no metrics yet).
	// Enum: [STATUS_UNSPECIFIED STATUS_UP STATUS_DOWN STATUS_UNKNOWN]
	Status *string `json:"status,omitempty"`

	// List of agents related to this node.
	Agents []*GetNodeOKBodyNodeAgentsItems0 `json:"agents"`

	// List of services running on this node.
	Services []*GetNodeOKBodyNodeServicesItems0 `json:"services"`
}

// Validate validates this get node OK body node
func (o *GetNodeOKBodyNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeOKBodyNode) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getNodeOk"+"."+"node"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNodeOKBodyNode) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getNodeOk"+"."+"node"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var getNodeOkBodyNodeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_UNSPECIFIED","STATUS_UP","STATUS_DOWN","STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNodeOkBodyNodeTypeStatusPropEnum = append(getNodeOkBodyNodeTypeStatusPropEnum, v)
	}
}

const (

	// GetNodeOKBodyNodeStatusSTATUSUNSPECIFIED captures enum value "STATUS_UNSPECIFIED"
	GetNodeOKBodyNodeStatusSTATUSUNSPECIFIED string = "STATUS_UNSPECIFIED"

	// GetNodeOKBodyNodeStatusSTATUSUP captures enum value "STATUS_UP"
	GetNodeOKBodyNodeStatusSTATUSUP string = "STATUS_UP"

	// GetNodeOKBodyNodeStatusSTATUSDOWN captures enum value "STATUS_DOWN"
	GetNodeOKBodyNodeStatusSTATUSDOWN string = "STATUS_DOWN"

	// GetNodeOKBodyNodeStatusSTATUSUNKNOWN captures enum value "STATUS_UNKNOWN"
	GetNodeOKBodyNodeStatusSTATUSUNKNOWN string = "STATUS_UNKNOWN"
)

// prop value enum
func (o *GetNodeOKBodyNode) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNodeOkBodyNodeTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNodeOKBodyNode) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("getNodeOk"+"."+"node"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *GetNodeOKBodyNode) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(o.Agents) { // not required
		return nil
	}

	for i := 0; i < len(o.Agents); i++ {
		if swag.IsZero(o.Agents[i]) { // not required
			continue
		}

		if o.Agents[i] != nil {
			if err := o.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNodeOk" + "." + "node" + "." + "agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNodeOk" + "." + "node" + "." + "agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNodeOKBodyNode) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(o.Services) { // not required
		return nil
	}

	for i := 0; i < len(o.Services); i++ {
		if swag.IsZero(o.Services[i]) { // not required
			continue
		}

		if o.Services[i] != nil {
			if err := o.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNodeOk" + "." + "node" + "." + "services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNodeOk" + "." + "node" + "." + "services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get node OK body node based on the context it is used
func (o *GetNodeOKBodyNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeOKBodyNode) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Agents); i++ {
		if o.Agents[i] != nil {
			if err := o.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNodeOk" + "." + "node" + "." + "agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNodeOk" + "." + "node" + "." + "agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *GetNodeOKBodyNode) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Services); i++ {
		if o.Services[i] != nil {
			if err := o.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNodeOk" + "." + "node" + "." + "services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNodeOk" + "." + "node" + "." + "services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeOKBodyNode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeOKBodyNode) UnmarshalBinary(b []byte) error {
	var res GetNodeOKBodyNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNodeOKBodyNodeAgentsItems0 get node OK body node agents items0
swagger:model GetNodeOKBodyNodeAgentsItems0
*/
type GetNodeOKBodyNodeAgentsItems0 struct {
	// Unique Agent identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Agent type.
	AgentType string `json:"agent_type,omitempty"`

	// Actual Agent status.
	Status string `json:"status,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	IsConnected bool `json:"is_connected,omitempty"`
}

// Validate validates this get node OK body node agents items0
func (o *GetNodeOKBodyNodeAgentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node OK body node agents items0 based on context it is used
func (o *GetNodeOKBodyNodeAgentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeOKBodyNodeAgentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeOKBodyNodeAgentsItems0) UnmarshalBinary(b []byte) error {
	var res GetNodeOKBodyNodeAgentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNodeOKBodyNodeServicesItems0 Service represents a service running on a node.
swagger:model GetNodeOKBodyNodeServicesItems0
*/
type GetNodeOKBodyNodeServicesItems0 struct {
	// Unique Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Service type.
	ServiceType string `json:"service_type,omitempty"`

	// Service name.
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this get node OK body node services items0
func (o *GetNodeOKBodyNodeServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node OK body node services items0 based on context it is used
func (o *GetNodeOKBodyNodeServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeOKBodyNodeServicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeOKBodyNodeServicesItems0) UnmarshalBinary(b []byte) error {
	var res GetNodeOKBodyNodeServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
