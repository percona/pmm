// Code generated by go-swagger; DO NOT EDIT.

package management_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveServiceParams creates a new RemoveServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRemoveServiceParams() *RemoveServiceParams {
	return &RemoveServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveServiceParamsWithTimeout creates a new RemoveServiceParams object
// with the ability to set a timeout on a request.
func NewRemoveServiceParamsWithTimeout(timeout time.Duration) *RemoveServiceParams {
	return &RemoveServiceParams{
		timeout: timeout,
	}
}

// NewRemoveServiceParamsWithContext creates a new RemoveServiceParams object
// with the ability to set a context for a request.
func NewRemoveServiceParamsWithContext(ctx context.Context) *RemoveServiceParams {
	return &RemoveServiceParams{
		Context: ctx,
	}
}

// NewRemoveServiceParamsWithHTTPClient creates a new RemoveServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewRemoveServiceParamsWithHTTPClient(client *http.Client) *RemoveServiceParams {
	return &RemoveServiceParams{
		HTTPClient: client,
	}
}

/*
RemoveServiceParams contains all the parameters to send to the API endpoint

	for the remove service operation.

	Typically these are written to a http.Request.
*/
type RemoveServiceParams struct {
	/* ServiceID.

	   Either a Service ID or a Service Name.
	*/
	ServiceID string

	/* ServiceType.

	   Service type.

	   Default: "SERVICE_TYPE_UNSPECIFIED"
	*/
	ServiceType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the remove service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveServiceParams) WithDefaults() *RemoveServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the remove service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveServiceParams) SetDefaults() {
	serviceTypeDefault := string("SERVICE_TYPE_UNSPECIFIED")

	val := RemoveServiceParams{
		ServiceType: &serviceTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the remove service params
func (o *RemoveServiceParams) WithTimeout(timeout time.Duration) *RemoveServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove service params
func (o *RemoveServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove service params
func (o *RemoveServiceParams) WithContext(ctx context.Context) *RemoveServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove service params
func (o *RemoveServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove service params
func (o *RemoveServiceParams) WithHTTPClient(client *http.Client) *RemoveServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove service params
func (o *RemoveServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithServiceID adds the serviceID to the remove service params
func (o *RemoveServiceParams) WithServiceID(serviceID string) *RemoveServiceParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the remove service params
func (o *RemoveServiceParams) SetServiceID(serviceID string) {
	o.ServiceID = serviceID
}

// WithServiceType adds the serviceType to the remove service params
func (o *RemoveServiceParams) WithServiceType(serviceType *string) *RemoveServiceParams {
	o.SetServiceType(serviceType)
	return o
}

// SetServiceType adds the serviceType to the remove service params
func (o *RemoveServiceParams) SetServiceType(serviceType *string) {
	o.ServiceType = serviceType
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param service_id
	if err := r.SetPathParam("service_id", o.ServiceID); err != nil {
		return err
	}

	if o.ServiceType != nil {

		// query param service_type
		var qrServiceType string

		if o.ServiceType != nil {
			qrServiceType = *o.ServiceType
		}
		qServiceType := qrServiceType
		if qServiceType != "" {
			if err := r.SetQueryParam("service_type", qServiceType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
