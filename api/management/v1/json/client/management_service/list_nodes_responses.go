// Code generated by go-swagger; DO NOT EDIT.

package management_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListNodesReader is a Reader for the ListNodes structure.
type ListNodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListNodesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListNodesOK creates a ListNodesOK with default headers values
func NewListNodesOK() *ListNodesOK {
	return &ListNodesOK{}
}

/*
ListNodesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListNodesOK struct {
	Payload *ListNodesOKBody
}

// IsSuccess returns true when this list nodes Ok response has a 2xx status code
func (o *ListNodesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list nodes Ok response has a 3xx status code
func (o *ListNodesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list nodes Ok response has a 4xx status code
func (o *ListNodesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list nodes Ok response has a 5xx status code
func (o *ListNodesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list nodes Ok response a status code equal to that given
func (o *ListNodesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list nodes Ok response
func (o *ListNodesOK) Code() int {
	return 200
}

func (o *ListNodesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/management/nodes][%d] listNodesOk %s", 200, payload)
}

func (o *ListNodesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/management/nodes][%d] listNodesOk %s", 200, payload)
}

func (o *ListNodesOK) GetPayload() *ListNodesOKBody {
	return o.Payload
}

func (o *ListNodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListNodesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNodesDefault creates a ListNodesDefault with default headers values
func NewListNodesDefault(code int) *ListNodesDefault {
	return &ListNodesDefault{
		_statusCode: code,
	}
}

/*
ListNodesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListNodesDefault struct {
	_statusCode int

	Payload *ListNodesDefaultBody
}

// IsSuccess returns true when this list nodes default response has a 2xx status code
func (o *ListNodesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list nodes default response has a 3xx status code
func (o *ListNodesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list nodes default response has a 4xx status code
func (o *ListNodesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list nodes default response has a 5xx status code
func (o *ListNodesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list nodes default response a status code equal to that given
func (o *ListNodesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list nodes default response
func (o *ListNodesDefault) Code() int {
	return o._statusCode
}

func (o *ListNodesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/management/nodes][%d] ListNodes default %s", o._statusCode, payload)
}

func (o *ListNodesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/management/nodes][%d] ListNodes default %s", o._statusCode, payload)
}

func (o *ListNodesDefault) GetPayload() *ListNodesDefaultBody {
	return o.Payload
}

func (o *ListNodesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListNodesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListNodesDefaultBody list nodes default body
swagger:model ListNodesDefaultBody
*/
type ListNodesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListNodesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list nodes default body
func (o *ListNodesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes default body based on the context it is used
func (o *ListNodesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListNodes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListNodesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesDefaultBodyDetailsItems0 list nodes default body details items0
swagger:model ListNodesDefaultBodyDetailsItems0
*/
type ListNodesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`

	// list nodes default body details items0
	ListNodesDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ListNodesDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ListNodesDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ListNodesDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ListNodesDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ListNodesDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ListNodesDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this list nodes default body details items0
func (o *ListNodesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes default body details items0 based on context it is used
func (o *ListNodesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBody list nodes OK body
swagger:model ListNodesOKBody
*/
type ListNodesOKBody struct {
	// nodes
	Nodes []*ListNodesOKBodyNodesItems0 `json:"nodes"`
}

// Validate validates this list nodes OK body
func (o *ListNodesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBody) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(o.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(o.Nodes); i++ {
		if swag.IsZero(o.Nodes[i]) { // not required
			continue
		}

		if o.Nodes[i] != nil {
			if err := o.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes OK body based on the context it is used
func (o *ListNodesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBody) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Nodes); i++ {
		if o.Nodes[i] != nil {

			if swag.IsZero(o.Nodes[i]) { // not required
				return nil
			}

			if err := o.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listNodesOk" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBody) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0 list nodes OK body nodes items0
swagger:model ListNodesOKBodyNodesItems0
*/
type ListNodesOKBodyNodesItems0 struct {
	// Unique Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// Node type.
	NodeType string `json:"node_type,omitempty"`

	// User-defined node name.
	NodeName string `json:"node_name,omitempty"`

	// Linux machine-id.
	MachineID string `json:"machine_id,omitempty"`

	// Linux distribution name and version.
	Distro string `json:"distro,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// A node's unique docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels for Node.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Creation timestamp.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Last update timestamp.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Node status.
	//
	//  - STATUS_UNSPECIFIED: Invalid status.
	//  - STATUS_UP: The node is up.
	//  - STATUS_DOWN: The node is down.
	//  - STATUS_UNKNOWN: The node's status cannot be known (e.g. there are no metrics yet).
	// Enum: ["STATUS_UNSPECIFIED","STATUS_UP","STATUS_DOWN","STATUS_UNKNOWN"]
	Status *string `json:"status,omitempty"`

	// List of agents related to this node.
	Agents []*ListNodesOKBodyNodesItems0AgentsItems0 `json:"agents"`

	// List of services running on this node.
	Services []*ListNodesOKBodyNodesItems0ServicesItems0 `json:"services"`
}

// Validate validates this list nodes OK body nodes items0
func (o *ListNodesOKBodyNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var listNodesOkBodyNodesItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_UNSPECIFIED","STATUS_UP","STATUS_DOWN","STATUS_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listNodesOkBodyNodesItems0TypeStatusPropEnum = append(listNodesOkBodyNodesItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListNodesOKBodyNodesItems0StatusSTATUSUNSPECIFIED captures enum value "STATUS_UNSPECIFIED"
	ListNodesOKBodyNodesItems0StatusSTATUSUNSPECIFIED string = "STATUS_UNSPECIFIED"

	// ListNodesOKBodyNodesItems0StatusSTATUSUP captures enum value "STATUS_UP"
	ListNodesOKBodyNodesItems0StatusSTATUSUP string = "STATUS_UP"

	// ListNodesOKBodyNodesItems0StatusSTATUSDOWN captures enum value "STATUS_DOWN"
	ListNodesOKBodyNodesItems0StatusSTATUSDOWN string = "STATUS_DOWN"

	// ListNodesOKBodyNodesItems0StatusSTATUSUNKNOWN captures enum value "STATUS_UNKNOWN"
	ListNodesOKBodyNodesItems0StatusSTATUSUNKNOWN string = "STATUS_UNKNOWN"
)

// prop value enum
func (o *ListNodesOKBodyNodesItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listNodesOkBodyNodesItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(o.Agents) { // not required
		return nil
	}

	for i := 0; i < len(o.Agents); i++ {
		if swag.IsZero(o.Agents[i]) { // not required
			continue
		}

		if o.Agents[i] != nil {
			if err := o.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(o.Services) { // not required
		return nil
	}

	for i := 0; i < len(o.Services); i++ {
		if swag.IsZero(o.Services[i]) { // not required
			continue
		}

		if o.Services[i] != nil {
			if err := o.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list nodes OK body nodes items0 based on the context it is used
func (o *ListNodesOKBodyNodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNodesOKBodyNodesItems0) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Agents); i++ {
		if o.Agents[i] != nil {

			if swag.IsZero(o.Agents[i]) { // not required
				return nil
			}

			if err := o.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListNodesOKBodyNodesItems0) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Services); i++ {
		if o.Services[i] != nil {

			if swag.IsZero(o.Services[i]) { // not required
				return nil
			}

			if err := o.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0AgentsItems0 list nodes OK body nodes items0 agents items0
swagger:model ListNodesOKBodyNodesItems0AgentsItems0
*/
type ListNodesOKBodyNodesItems0AgentsItems0 struct {
	// Unique Agent identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Agent type.
	AgentType string `json:"agent_type,omitempty"`

	// Actual Agent status.
	Status string `json:"status,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	IsConnected bool `json:"is_connected,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 agents items0
func (o *ListNodesOKBodyNodesItems0AgentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 agents items0 based on context it is used
func (o *ListNodesOKBodyNodesItems0AgentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0AgentsItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0AgentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListNodesOKBodyNodesItems0ServicesItems0 Service represents a service running on a node.
swagger:model ListNodesOKBodyNodesItems0ServicesItems0
*/
type ListNodesOKBodyNodesItems0ServicesItems0 struct {
	// Unique Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Service type.
	ServiceType string `json:"service_type,omitempty"`

	// Service name.
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this list nodes OK body nodes items0 services items0
func (o *ListNodesOKBodyNodesItems0ServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list nodes OK body nodes items0 services items0 based on context it is used
func (o *ListNodesOKBodyNodesItems0ServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0ServicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNodesOKBodyNodesItems0ServicesItems0) UnmarshalBinary(b []byte) error {
	var res ListNodesOKBodyNodesItems0ServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
