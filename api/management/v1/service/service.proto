syntax = "proto3";

package service.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "inventory/v1/services.proto";
import "management/v1/agent/agent.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message UniversalService {
  // Service status.
  enum Status {
    // In case we don't support the db vendor yet.
    STATUS_UNSPECIFIED = 0;
    // The service is up.
    STATUS_UP = 1;
    // The service is down.
    STATUS_DOWN = 2;
    // The service's status cannot be known (e.g. there are no metrics yet).
    STATUS_UNKNOWN = 3;
  }

  // Unique service identifier.
  string service_id = 1;
  // Service type.
  string service_type = 2;
  // User-defined name unique across all Services.
  string service_name = 3;
  // Database name.
  string database_name = 4;
  // Node identifier where this instance runs.
  string node_id = 5;
  // Node name where this instance runs.
  string node_name = 6;
  // Environment name.
  string environment = 7;
  // Cluster name.
  string cluster = 8;
  // Replication set name.
  string replication_set = 9;
  // Custom user-assigned labels for Service.
  map<string, string> custom_labels = 10;
  // External group name.
  string external_group = 11;
  // Access address (DNS name or IP).
  // Address (and port) or socket is required.
  string address = 12;
  // Access port.
  // Port is required when the address present.
  uint32 port = 13;
  // Access unix socket.
  // Address (and port) or socket is required.
  string socket = 14;
  // Creation timestamp.
  google.protobuf.Timestamp created_at = 15;
  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 16;
  // List of agents related to this service.
  repeated agent.v1beta1.UniversalAgent agents = 17;
  // The health status of the service.
  Status status = 18;
  // The service/database version.
  string version = 19;
}

message ListServicesRequest {
  // Return only Services running on that Node.
  string node_id = 1;
  // Return only services filtered by service type.
  inventory.v1.ServiceType service_type = 2;
  // Return only services in this external group.
  string external_group = 3;
}

message ListServicesResponse {
  // List of Services.
  repeated UniversalService services = 1;
}

// NOTE: the GA version of this API will be integrated into managementv1/service.proto.
// `/v1/management/Service/List` is singular, which follows the convention of that API.

// MgmtService service provides public methods for managing and querying Services.
service MgmtService {
  // ListServices returns a list of Services with a rich set of properties.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      post: "/v1/management/Service/List"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Services"
      description: "Returns a filtered list of Services."
    };
  }
}
