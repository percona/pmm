// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/service/service.proto

package servicev1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	agent "github.com/percona/pmm/api/management/v1/agent"
	azure "github.com/percona/pmm/api/management/v1/azure"
	node "github.com/percona/pmm/api/management/v1/node"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagementV1Beta1Service_ListAgents_FullMethodName            = "/service.v1beta1.ManagementV1Beta1Service/ListAgents"
	ManagementV1Beta1Service_ListNodes_FullMethodName             = "/service.v1beta1.ManagementV1Beta1Service/ListNodes"
	ManagementV1Beta1Service_GetNode_FullMethodName               = "/service.v1beta1.ManagementV1Beta1Service/GetNode"
	ManagementV1Beta1Service_ListServices_FullMethodName          = "/service.v1beta1.ManagementV1Beta1Service/ListServices"
	ManagementV1Beta1Service_DiscoverAzureDatabase_FullMethodName = "/service.v1beta1.ManagementV1Beta1Service/DiscoverAzureDatabase"
	ManagementV1Beta1Service_AddAzureDatabase_FullMethodName      = "/service.v1beta1.ManagementV1Beta1Service/AddAzureDatabase"
)

// ManagementV1Beta1ServiceClient is the client API for ManagementV1Beta1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementV1Beta1ServiceClient interface {
	// ListAgents returns a list of Agents filtered by service_id.
	ListAgents(ctx context.Context, in *agent.ListAgentsRequest, opts ...grpc.CallOption) (*agent.ListAgentsResponse, error)
	// ListNode returns a list of nodes.
	ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error)
	// ListServices returns a list of Services with a rich set of properties.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(ctx context.Context, in *azure.DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*azure.DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(ctx context.Context, in *azure.AddAzureDatabaseRequest, opts ...grpc.CallOption) (*azure.AddAzureDatabaseResponse, error)
}

type managementV1Beta1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementV1Beta1ServiceClient(cc grpc.ClientConnInterface) ManagementV1Beta1ServiceClient {
	return &managementV1Beta1ServiceClient{cc}
}

func (c *managementV1Beta1ServiceClient) ListAgents(ctx context.Context, in *agent.ListAgentsRequest, opts ...grpc.CallOption) (*agent.ListAgentsResponse, error) {
	out := new(agent.ListAgentsResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementV1Beta1ServiceClient) ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error) {
	out := new(node.ListNodesResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementV1Beta1ServiceClient) GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error) {
	out := new(node.GetNodeResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementV1Beta1ServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementV1Beta1ServiceClient) DiscoverAzureDatabase(ctx context.Context, in *azure.DiscoverAzureDatabaseRequest, opts ...grpc.CallOption) (*azure.DiscoverAzureDatabaseResponse, error) {
	out := new(azure.DiscoverAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_DiscoverAzureDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementV1Beta1ServiceClient) AddAzureDatabase(ctx context.Context, in *azure.AddAzureDatabaseRequest, opts ...grpc.CallOption) (*azure.AddAzureDatabaseResponse, error) {
	out := new(azure.AddAzureDatabaseResponse)
	err := c.cc.Invoke(ctx, ManagementV1Beta1Service_AddAzureDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementV1Beta1ServiceServer is the server API for ManagementV1Beta1Service service.
// All implementations must embed UnimplementedManagementV1Beta1ServiceServer
// for forward compatibility
type ManagementV1Beta1ServiceServer interface {
	// ListAgents returns a list of Agents filtered by service_id.
	ListAgents(context.Context, *agent.ListAgentsRequest) (*agent.ListAgentsResponse, error)
	// ListNode returns a list of nodes.
	ListNodes(context.Context, *node.ListNodesRequest) (*node.ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(context.Context, *node.GetNodeRequest) (*node.GetNodeResponse, error)
	// ListServices returns a list of Services with a rich set of properties.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// DiscoverAzureDatabase discovers Azure Database for MySQL, MariaDB and PostgreSQL Server instances.
	DiscoverAzureDatabase(context.Context, *azure.DiscoverAzureDatabaseRequest) (*azure.DiscoverAzureDatabaseResponse, error)
	// AddAzureDatabase adds Azure Database instance.
	AddAzureDatabase(context.Context, *azure.AddAzureDatabaseRequest) (*azure.AddAzureDatabaseResponse, error)
	mustEmbedUnimplementedManagementV1Beta1ServiceServer()
}

// UnimplementedManagementV1Beta1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementV1Beta1ServiceServer struct{}

func (UnimplementedManagementV1Beta1ServiceServer) ListAgents(context.Context, *agent.ListAgentsRequest) (*agent.ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) ListNodes(context.Context, *node.ListNodesRequest) (*node.ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) GetNode(context.Context, *node.GetNodeRequest) (*node.GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) DiscoverAzureDatabase(context.Context, *azure.DiscoverAzureDatabaseRequest) (*azure.DiscoverAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverAzureDatabase not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) AddAzureDatabase(context.Context, *azure.AddAzureDatabaseRequest) (*azure.AddAzureDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureDatabase not implemented")
}

func (UnimplementedManagementV1Beta1ServiceServer) mustEmbedUnimplementedManagementV1Beta1ServiceServer() {
}

// UnsafeManagementV1Beta1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementV1Beta1ServiceServer will
// result in compilation errors.
type UnsafeManagementV1Beta1ServiceServer interface {
	mustEmbedUnimplementedManagementV1Beta1ServiceServer()
}

func RegisterManagementV1Beta1ServiceServer(s grpc.ServiceRegistrar, srv ManagementV1Beta1ServiceServer) {
	s.RegisterService(&ManagementV1Beta1Service_ServiceDesc, srv)
}

func _ManagementV1Beta1Service_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(agent.ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).ListAgents(ctx, req.(*agent.ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementV1Beta1Service_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).ListNodes(ctx, req.(*node.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementV1Beta1Service_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).GetNode(ctx, req.(*node.GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementV1Beta1Service_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementV1Beta1Service_DiscoverAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(azure.DiscoverAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).DiscoverAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_DiscoverAzureDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).DiscoverAzureDatabase(ctx, req.(*azure.DiscoverAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementV1Beta1Service_AddAzureDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(azure.AddAzureDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementV1Beta1ServiceServer).AddAzureDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementV1Beta1Service_AddAzureDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementV1Beta1ServiceServer).AddAzureDatabase(ctx, req.(*azure.AddAzureDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementV1Beta1Service_ServiceDesc is the grpc.ServiceDesc for ManagementV1Beta1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementV1Beta1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1beta1.ManagementV1Beta1Service",
	HandlerType: (*ManagementV1Beta1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _ManagementV1Beta1Service_ListAgents_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ManagementV1Beta1Service_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _ManagementV1Beta1Service_GetNode_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ManagementV1Beta1Service_ListServices_Handler,
		},
		{
			MethodName: "DiscoverAzureDatabase",
			Handler:    _ManagementV1Beta1Service_DiscoverAzureDatabase_Handler,
		},
		{
			MethodName: "AddAzureDatabase",
			Handler:    _ManagementV1Beta1Service_AddAzureDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/service/service.proto",
}
