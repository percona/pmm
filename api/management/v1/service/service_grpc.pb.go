// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: management/v1/service/service.proto

package servicev1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	agent "github.com/percona/pmm/api/management/v1/agent"
	node "github.com/percona/pmm/api/management/v1/node"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MgmtService_ListAgents_FullMethodName   = "/service.v1beta1.MgmtService/ListAgents"
	MgmtService_ListNodes_FullMethodName    = "/service.v1beta1.MgmtService/ListNodes"
	MgmtService_GetNode_FullMethodName      = "/service.v1beta1.MgmtService/GetNode"
	MgmtService_ListServices_FullMethodName = "/service.v1beta1.MgmtService/ListServices"
)

// MgmtServiceClient is the client API for MgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtServiceClient interface {
	// ListAgents returns a list of Agents filtered by service_id.
	ListAgents(ctx context.Context, in *agent.ListAgentsRequest, opts ...grpc.CallOption) (*agent.ListAgentsResponse, error)
	// ListNode returns a list of nodes.
	ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error)
	// ListServices returns a list of Services with a rich set of properties.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
}

type mgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtServiceClient(cc grpc.ClientConnInterface) MgmtServiceClient {
	return &mgmtServiceClient{cc}
}

func (c *mgmtServiceClient) ListAgents(ctx context.Context, in *agent.ListAgentsRequest, opts ...grpc.CallOption) (*agent.ListAgentsResponse, error) {
	out := new(agent.ListAgentsResponse)
	err := c.cc.Invoke(ctx, MgmtService_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error) {
	out := new(node.ListNodesResponse)
	err := c.cc.Invoke(ctx, MgmtService_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error) {
	out := new(node.GetNodeResponse)
	err := c.cc.Invoke(ctx, MgmtService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, MgmtService_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServiceServer is the server API for MgmtService service.
// All implementations must embed UnimplementedMgmtServiceServer
// for forward compatibility
type MgmtServiceServer interface {
	// ListAgents returns a list of Agents filtered by service_id.
	ListAgents(context.Context, *agent.ListAgentsRequest) (*agent.ListAgentsResponse, error)
	// ListNode returns a list of nodes.
	ListNodes(context.Context, *node.ListNodesRequest) (*node.ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(context.Context, *node.GetNodeRequest) (*node.GetNodeResponse, error)
	// ListServices returns a list of Services with a rich set of properties.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	mustEmbedUnimplementedMgmtServiceServer()
}

// UnimplementedMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtServiceServer struct{}

func (UnimplementedMgmtServiceServer) ListAgents(context.Context, *agent.ListAgentsRequest) (*agent.ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}

func (UnimplementedMgmtServiceServer) ListNodes(context.Context, *node.ListNodesRequest) (*node.ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}

func (UnimplementedMgmtServiceServer) GetNode(context.Context, *node.GetNodeRequest) (*node.GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}

func (UnimplementedMgmtServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedMgmtServiceServer) mustEmbedUnimplementedMgmtServiceServer() {}

// UnsafeMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtServiceServer will
// result in compilation errors.
type UnsafeMgmtServiceServer interface {
	mustEmbedUnimplementedMgmtServiceServer()
}

func RegisterMgmtServiceServer(s grpc.ServiceRegistrar, srv MgmtServiceServer) {
	s.RegisterService(&MgmtService_ServiceDesc, srv)
}

func _MgmtService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(agent.ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtService_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).ListAgents(ctx, req.(*agent.ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).ListNodes(ctx, req.(*node.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetNode(ctx, req.(*node.GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtService_ServiceDesc is the grpc.ServiceDesc for MgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1beta1.MgmtService",
	HandlerType: (*MgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _MgmtService_ListAgents_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _MgmtService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _MgmtService_GetNode_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _MgmtService_ListServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/service/service.proto",
}
