// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: management/v1/mongodb.proto

package managementv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1 "github.com/percona/pmm/api/inventory/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddMongoDBServiceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Node identifier on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name on which a service is been running.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Create a new Node with those parameters.
	// Exactly one of these parameters should be present: node_id, node_name, add_node.
	AddNode *AddNodeParams `protobuf:"bytes,3,opt,name=add_node,json=addNode,proto3" json:"add_node,omitempty"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node and Service access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Service Access port.
	// Port is required when the address present.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Service Access socket.
	// Address (and port) or socket is required.
	Socket string `protobuf:"bytes,7,opt,name=socket,proto3" json:"socket,omitempty"`
	// The "pmm-agent" identifier which should run agents. Required.
	PmmAgentId string `protobuf:"bytes,9,opt,name=pmm_agent_id,json=pmmAgentId,proto3" json:"pmm_agent_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,10,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name.
	Cluster string `protobuf:"bytes,11,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Replication set name.
	ReplicationSet string `protobuf:"bytes,12,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// MongoDB username for exporter and QAN agent access.
	Username string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// MongoDB password for exporter and QAN agent access.
	Password string `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`
	// If true, adds qan-mongodb-profiler-agent for provided service.
	QanMongodbProfiler bool `protobuf:"varint,15,opt,name=qan_mongodb_profiler,json=qanMongodbProfiler,proto3" json:"qan_mongodb_profiler,omitempty"`
	// If true, adds qan-mongodb-mongolog-agent for provided service.
	QanMongodbMongolog bool `protobuf:"varint,35,opt,name=qan_mongodb_mongolog,json=qanMongodbMongolog,proto3" json:"qan_mongodb_mongolog,omitempty"`
	// Custom user-assigned labels for Service.
	CustomLabels map[string]string `protobuf:"bytes,16,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Skip connection check.
	SkipConnectionCheck bool `protobuf:"varint,17,opt,name=skip_connection_check,json=skipConnectionCheck,proto3" json:"skip_connection_check,omitempty"`
	// Use TLS for database connections.
	Tls bool `protobuf:"varint,19,opt,name=tls,proto3" json:"tls,omitempty"`
	// Skip TLS certificate and hostname validation.
	TlsSkipVerify bool `protobuf:"varint,20,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	// Client certificate and key.
	TlsCertificateKey string `protobuf:"bytes,21,opt,name=tls_certificate_key,json=tlsCertificateKey,proto3" json:"tls_certificate_key,omitempty"`
	// Password for decrypting tls_certificate_key.
	TlsCertificateKeyFilePassword string `protobuf:"bytes,22,opt,name=tls_certificate_key_file_password,json=tlsCertificateKeyFilePassword,proto3" json:"tls_certificate_key_file_password,omitempty"`
	// Certificate Authority certificate chain.
	TlsCa string `protobuf:"bytes,23,opt,name=tls_ca,json=tlsCa,proto3" json:"tls_ca,omitempty"`
	// Limit query length in QAN (default: server-defined; -1: no limit).
	MaxQueryLength int32 `protobuf:"varint,24,opt,name=max_query_length,json=maxQueryLength,proto3" json:"max_query_length,omitempty"`
	// Defines metrics flow model for this exporter.
	// Metrics could be pushed to the server with vmagent,
	// pulled by the server, or the server could choose behavior automatically.
	MetricsMode MetricsMode `protobuf:"varint,25,opt,name=metrics_mode,json=metricsMode,proto3,enum=management.v1.MetricsMode" json:"metrics_mode,omitempty"`
	// List of collector names to disable in this exporter.
	DisableCollectors []string `protobuf:"bytes,26,rep,name=disable_collectors,json=disableCollectors,proto3" json:"disable_collectors,omitempty"`
	// Authentication mechanism.
	// See https://docs.mongodb.com/manual/reference/connection-string/#mongodb-urioption-urioption.authMechanism
	// for details.
	AuthenticationMechanism string `protobuf:"bytes,27,opt,name=authentication_mechanism,json=authenticationMechanism,proto3" json:"authentication_mechanism,omitempty"`
	// Authentication database.
	AuthenticationDatabase string `protobuf:"bytes,28,opt,name=authentication_database,json=authenticationDatabase,proto3" json:"authentication_database,omitempty"`
	// Custom password for exporter endpoint /metrics.
	AgentPassword string `protobuf:"bytes,29,opt,name=agent_password,json=agentPassword,proto3" json:"agent_password,omitempty"`
	// List of collections to get stats from. Can use * .
	StatsCollections []string `protobuf:"bytes,30,rep,name=stats_collections,json=statsCollections,proto3" json:"stats_collections,omitempty"`
	// Collections limit. Only get Databases and collection stats if the total number of collections in the server
	// is less than this value. 0: no limit
	CollectionsLimit int32 `protobuf:"varint,31,opt,name=collections_limit,json=collectionsLimit,proto3" json:"collections_limit,omitempty"`
	// Enable all collectors
	EnableAllCollectors bool `protobuf:"varint,32,opt,name=enable_all_collectors,json=enableAllCollectors,proto3" json:"enable_all_collectors,omitempty"`
	// Exporter log level
	LogLevel v1.LogLevel `protobuf:"varint,33,opt,name=log_level,json=logLevel,proto3,enum=inventory.v1.LogLevel" json:"log_level,omitempty"`
	// Optionally expose the exporter process on all public interfaces
	ExposeExporter bool `protobuf:"varint,34,opt,name=expose_exporter,json=exposeExporter,proto3" json:"expose_exporter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddMongoDBServiceParams) Reset() {
	*x = AddMongoDBServiceParams{}
	mi := &file_management_v1_mongodb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMongoDBServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMongoDBServiceParams) ProtoMessage() {}

func (x *AddMongoDBServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_mongodb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMongoDBServiceParams.ProtoReflect.Descriptor instead.
func (*AddMongoDBServiceParams) Descriptor() ([]byte, []int) {
	return file_management_v1_mongodb_proto_rawDescGZIP(), []int{0}
}

func (x *AddMongoDBServiceParams) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetAddNode() *AddNodeParams {
	if x != nil {
		return x.AddNode
	}
	return nil
}

func (x *AddMongoDBServiceParams) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddMongoDBServiceParams) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetPmmAgentId() string {
	if x != nil {
		return x.PmmAgentId
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetQanMongodbProfiler() bool {
	if x != nil {
		return x.QanMongodbProfiler
	}
	return false
}

func (x *AddMongoDBServiceParams) GetQanMongodbMongolog() bool {
	if x != nil {
		return x.QanMongodbMongolog
	}
	return false
}

func (x *AddMongoDBServiceParams) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

func (x *AddMongoDBServiceParams) GetSkipConnectionCheck() bool {
	if x != nil {
		return x.SkipConnectionCheck
	}
	return false
}

func (x *AddMongoDBServiceParams) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *AddMongoDBServiceParams) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *AddMongoDBServiceParams) GetTlsCertificateKey() string {
	if x != nil {
		return x.TlsCertificateKey
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetTlsCertificateKeyFilePassword() string {
	if x != nil {
		return x.TlsCertificateKeyFilePassword
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetTlsCa() string {
	if x != nil {
		return x.TlsCa
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetMaxQueryLength() int32 {
	if x != nil {
		return x.MaxQueryLength
	}
	return 0
}

func (x *AddMongoDBServiceParams) GetMetricsMode() MetricsMode {
	if x != nil {
		return x.MetricsMode
	}
	return MetricsMode_METRICS_MODE_UNSPECIFIED
}

func (x *AddMongoDBServiceParams) GetDisableCollectors() []string {
	if x != nil {
		return x.DisableCollectors
	}
	return nil
}

func (x *AddMongoDBServiceParams) GetAuthenticationMechanism() string {
	if x != nil {
		return x.AuthenticationMechanism
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetAuthenticationDatabase() string {
	if x != nil {
		return x.AuthenticationDatabase
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetAgentPassword() string {
	if x != nil {
		return x.AgentPassword
	}
	return ""
}

func (x *AddMongoDBServiceParams) GetStatsCollections() []string {
	if x != nil {
		return x.StatsCollections
	}
	return nil
}

func (x *AddMongoDBServiceParams) GetCollectionsLimit() int32 {
	if x != nil {
		return x.CollectionsLimit
	}
	return 0
}

func (x *AddMongoDBServiceParams) GetEnableAllCollectors() bool {
	if x != nil {
		return x.EnableAllCollectors
	}
	return false
}

func (x *AddMongoDBServiceParams) GetLogLevel() v1.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return v1.LogLevel(0)
}

func (x *AddMongoDBServiceParams) GetExposeExporter() bool {
	if x != nil {
		return x.ExposeExporter
	}
	return false
}

type MongoDBServiceResult struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Service            *v1.MongoDBService          `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	MongodbExporter    *v1.MongoDBExporter         `protobuf:"bytes,2,opt,name=mongodb_exporter,json=mongodbExporter,proto3" json:"mongodb_exporter,omitempty"`
	QanMongodbProfiler *v1.QANMongoDBProfilerAgent `protobuf:"bytes,3,opt,name=qan_mongodb_profiler,json=qanMongodbProfiler,proto3" json:"qan_mongodb_profiler,omitempty"`
	QanMongodbMongolog *v1.QANMongoDBMongologAgent `protobuf:"bytes,4,opt,name=qan_mongodb_mongolog,json=qanMongodbMongolog,proto3" json:"qan_mongodb_mongolog,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MongoDBServiceResult) Reset() {
	*x = MongoDBServiceResult{}
	mi := &file_management_v1_mongodb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDBServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBServiceResult) ProtoMessage() {}

func (x *MongoDBServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_management_v1_mongodb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBServiceResult.ProtoReflect.Descriptor instead.
func (*MongoDBServiceResult) Descriptor() ([]byte, []int) {
	return file_management_v1_mongodb_proto_rawDescGZIP(), []int{1}
}

func (x *MongoDBServiceResult) GetService() *v1.MongoDBService {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *MongoDBServiceResult) GetMongodbExporter() *v1.MongoDBExporter {
	if x != nil {
		return x.MongodbExporter
	}
	return nil
}

func (x *MongoDBServiceResult) GetQanMongodbProfiler() *v1.QANMongoDBProfilerAgent {
	if x != nil {
		return x.QanMongodbProfiler
	}
	return nil
}

func (x *MongoDBServiceResult) GetQanMongodbMongolog() *v1.QANMongoDBMongologAgent {
	if x != nil {
		return x.QanMongodbMongolog
	}
	return nil
}

var File_management_v1_mongodb_proto protoreflect.FileDescriptor

const file_management_v1_mongodb_proto_rawDesc = "" +
	"\n" +
	"\x1bmanagement/v1/mongodb.proto\x12\rmanagement.v1\x1a\x19inventory/v1/agents.proto\x1a\x1cinventory/v1/log_level.proto\x1a\x1binventory/v1/services.proto\x1a\x1bmanagement/v1/metrics.proto\x1a\x18management/v1/node.proto\x1a\x17validate/validate.proto\"\x83\f\n" +
	"\x17AddMongoDBServiceParams\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x127\n" +
	"\badd_node\x18\x03 \x01(\v2\x1c.management.v1.AddNodeParamsR\aaddNode\x12*\n" +
	"\fservice_name\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceName\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x06 \x01(\rR\x04port\x12\x16\n" +
	"\x06socket\x18\a \x01(\tR\x06socket\x12)\n" +
	"\fpmm_agent_id\x18\t \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"pmmAgentId\x12 \n" +
	"\venvironment\x18\n" +
	" \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18\v \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18\f \x01(\tR\x0ereplicationSet\x12\x1a\n" +
	"\busername\x18\r \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x0e \x01(\tR\bpassword\x120\n" +
	"\x14qan_mongodb_profiler\x18\x0f \x01(\bR\x12qanMongodbProfiler\x120\n" +
	"\x14qan_mongodb_mongolog\x18# \x01(\bR\x12qanMongodbMongolog\x12]\n" +
	"\rcustom_labels\x18\x10 \x03(\v28.management.v1.AddMongoDBServiceParams.CustomLabelsEntryR\fcustomLabels\x122\n" +
	"\x15skip_connection_check\x18\x11 \x01(\bR\x13skipConnectionCheck\x12\x10\n" +
	"\x03tls\x18\x13 \x01(\bR\x03tls\x12&\n" +
	"\x0ftls_skip_verify\x18\x14 \x01(\bR\rtlsSkipVerify\x12.\n" +
	"\x13tls_certificate_key\x18\x15 \x01(\tR\x11tlsCertificateKey\x12H\n" +
	"!tls_certificate_key_file_password\x18\x16 \x01(\tR\x1dtlsCertificateKeyFilePassword\x12\x15\n" +
	"\x06tls_ca\x18\x17 \x01(\tR\x05tlsCa\x12(\n" +
	"\x10max_query_length\x18\x18 \x01(\x05R\x0emaxQueryLength\x12=\n" +
	"\fmetrics_mode\x18\x19 \x01(\x0e2\x1a.management.v1.MetricsModeR\vmetricsMode\x12-\n" +
	"\x12disable_collectors\x18\x1a \x03(\tR\x11disableCollectors\x129\n" +
	"\x18authentication_mechanism\x18\x1b \x01(\tR\x17authenticationMechanism\x127\n" +
	"\x17authentication_database\x18\x1c \x01(\tR\x16authenticationDatabase\x12%\n" +
	"\x0eagent_password\x18\x1d \x01(\tR\ragentPassword\x12+\n" +
	"\x11stats_collections\x18\x1e \x03(\tR\x10statsCollections\x12+\n" +
	"\x11collections_limit\x18\x1f \x01(\x05R\x10collectionsLimit\x122\n" +
	"\x15enable_all_collectors\x18  \x01(\bR\x13enableAllCollectors\x123\n" +
	"\tlog_level\x18! \x01(\x0e2\x16.inventory.v1.LogLevelR\blogLevel\x12'\n" +
	"\x0fexpose_exporter\x18\" \x01(\bR\x0eexposeExporter\x1a?\n" +
	"\x11CustomLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\b\x10\tR\x17query_examples_disabled\"\xca\x02\n" +
	"\x14MongoDBServiceResult\x126\n" +
	"\aservice\x18\x01 \x01(\v2\x1c.inventory.v1.MongoDBServiceR\aservice\x12H\n" +
	"\x10mongodb_exporter\x18\x02 \x01(\v2\x1d.inventory.v1.MongoDBExporterR\x0fmongodbExporter\x12W\n" +
	"\x14qan_mongodb_profiler\x18\x03 \x01(\v2%.inventory.v1.QANMongoDBProfilerAgentR\x12qanMongodbProfiler\x12W\n" +
	"\x14qan_mongodb_mongolog\x18\x04 \x01(\v2%.inventory.v1.QANMongoDBMongologAgentR\x12qanMongodbMongologB\xad\x01\n" +
	"\x11com.management.v1B\fMongodbProtoP\x01Z5github.com/percona/pmm/api/management/v1;managementv1\xa2\x02\x03MXX\xaa\x02\rManagement.V1\xca\x02\rManagement\\V1\xe2\x02\x19Management\\V1\\GPBMetadata\xea\x02\x0eManagement::V1b\x06proto3"

var (
	file_management_v1_mongodb_proto_rawDescOnce sync.Once
	file_management_v1_mongodb_proto_rawDescData []byte
)

func file_management_v1_mongodb_proto_rawDescGZIP() []byte {
	file_management_v1_mongodb_proto_rawDescOnce.Do(func() {
		file_management_v1_mongodb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_management_v1_mongodb_proto_rawDesc), len(file_management_v1_mongodb_proto_rawDesc)))
	})
	return file_management_v1_mongodb_proto_rawDescData
}

var (
	file_management_v1_mongodb_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
	file_management_v1_mongodb_proto_goTypes  = []any{
		(*AddMongoDBServiceParams)(nil),    // 0: management.v1.AddMongoDBServiceParams
		(*MongoDBServiceResult)(nil),       // 1: management.v1.MongoDBServiceResult
		nil,                                // 2: management.v1.AddMongoDBServiceParams.CustomLabelsEntry
		(*AddNodeParams)(nil),              // 3: management.v1.AddNodeParams
		(MetricsMode)(0),                   // 4: management.v1.MetricsMode
		(v1.LogLevel)(0),                   // 5: inventory.v1.LogLevel
		(*v1.MongoDBService)(nil),          // 6: inventory.v1.MongoDBService
		(*v1.MongoDBExporter)(nil),         // 7: inventory.v1.MongoDBExporter
		(*v1.QANMongoDBProfilerAgent)(nil), // 8: inventory.v1.QANMongoDBProfilerAgent
		(*v1.QANMongoDBMongologAgent)(nil), // 9: inventory.v1.QANMongoDBMongologAgent
	}
)

var file_management_v1_mongodb_proto_depIdxs = []int32{
	3, // 0: management.v1.AddMongoDBServiceParams.add_node:type_name -> management.v1.AddNodeParams
	2, // 1: management.v1.AddMongoDBServiceParams.custom_labels:type_name -> management.v1.AddMongoDBServiceParams.CustomLabelsEntry
	4, // 2: management.v1.AddMongoDBServiceParams.metrics_mode:type_name -> management.v1.MetricsMode
	5, // 3: management.v1.AddMongoDBServiceParams.log_level:type_name -> inventory.v1.LogLevel
	6, // 4: management.v1.MongoDBServiceResult.service:type_name -> inventory.v1.MongoDBService
	7, // 5: management.v1.MongoDBServiceResult.mongodb_exporter:type_name -> inventory.v1.MongoDBExporter
	8, // 6: management.v1.MongoDBServiceResult.qan_mongodb_profiler:type_name -> inventory.v1.QANMongoDBProfilerAgent
	9, // 7: management.v1.MongoDBServiceResult.qan_mongodb_mongolog:type_name -> inventory.v1.QANMongoDBMongologAgent
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_management_v1_mongodb_proto_init() }
func file_management_v1_mongodb_proto_init() {
	if File_management_v1_mongodb_proto != nil {
		return
	}
	file_management_v1_metrics_proto_init()
	file_management_v1_node_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_management_v1_mongodb_proto_rawDesc), len(file_management_v1_mongodb_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_management_v1_mongodb_proto_goTypes,
		DependencyIndexes: file_management_v1_mongodb_proto_depIdxs,
		MessageInfos:      file_management_v1_mongodb_proto_msgTypes,
	}.Build()
	File_management_v1_mongodb_proto = out.File
	file_management_v1_mongodb_proto_goTypes = nil
	file_management_v1_mongodb_proto_depIdxs = nil
}
