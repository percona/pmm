syntax = "proto3";

package agentlocal;

option go_package = "agentlocalpb";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "inventorypb/agent_status.proto";
import "inventorypb/agents.proto";

// ServerInfo contains information about the PMM Server.
message ServerInfo {
  // PMM Server URL in a form https://HOST:PORT/.
  string url = 1;
  // PMM Server's TLS certificate validation should be skipped if true.
  bool insecure_tls = 2;
  // True if pmm-agent is currently connected to the server.
  bool connected = 3;
  // PMM Server version (if agent is connected).
  string version = 4;
  // Ping time from pmm-agent to pmm-managed (if agent is connected).
  google.protobuf.Duration latency = 5;
  // Clock drift from PMM Server (if agent is connected).
  google.protobuf.Duration clock_drift = 6;
}

// AgentInfo contains information about Agent managed by pmm-agent.
message AgentInfo {
  string agent_id = 1;
  inventory.AgentType agent_type = 2;
  inventory.AgentStatus status = 3;
}

message StatusRequest {
  // Returns network info (latency and clock_drift) if true.
  bool get_network_info = 1;
}

message StatusResponse {
  string agent_id = 1;
  string runs_on_node_id = 2;
  ServerInfo server_info = 3;
  repeated AgentInfo agents_info = 4;
  // Config file path if pmm-agent was started with one.
  string config_filepath = 5;
  // PMM Agent version.
  string agent_version = 6;
}

message ReloadRequest {}

// ReloadRequest may not be received by the client due to pmm-agent restart.
message ReloadResponse {}

// AgentLocal service provides public methods for checking pmm-agent status locally.
service AgentLocal {
  // Status returns current pmm-agent status.
  rpc Status(StatusRequest) returns (StatusResponse) {
    option (google.api.http) = {
      post: "/local/Status"
      body: "*"
    };
  }
  // Reload reloads pmm-agent configuration.
  rpc Reload(ReloadRequest) returns (ReloadResponse) {
    option (google.api.http) = {
      post: "/local/Reload"
      body: "*"
    };
  }
}
