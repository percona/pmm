// Code generated by go-swagger; DO NOT EDIT.

package agent_local

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// ReloadReader is a Reader for the Reload structure.
type ReloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewReloadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReloadOK creates a ReloadOK with default headers values
func NewReloadOK() *ReloadOK {
	return &ReloadOK{}
}

/*ReloadOK handles this case with default header values.

A successful response.
*/
type ReloadOK struct {
	Payload interface{}
}

func (o *ReloadOK) Error() string {
	return fmt.Sprintf("[POST /local/Reload][%d] reloadOk  %+v", 200, o.Payload)
}

func (o *ReloadOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ReloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadDefault creates a ReloadDefault with default headers values
func NewReloadDefault(code int) *ReloadDefault {
	return &ReloadDefault{
		_statusCode: code,
	}
}

/*ReloadDefault handles this case with default header values.

An error response.
*/
type ReloadDefault struct {
	_statusCode int

	Payload *ReloadDefaultBody
}

// Code gets the status code for the reload default response
func (o *ReloadDefault) Code() int {
	return o._statusCode
}

func (o *ReloadDefault) Error() string {
	return fmt.Sprintf("[POST /local/Reload][%d] Reload default  %+v", o._statusCode, o.Payload)
}

func (o *ReloadDefault) GetPayload() *ReloadDefaultBody {
	return o.Payload
}

func (o *ReloadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ReloadDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ReloadDefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model ReloadDefaultBody
*/
type ReloadDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this reload default body
func (o *ReloadDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReloadDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReloadDefaultBody) UnmarshalBinary(b []byte) error {
	var res ReloadDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
