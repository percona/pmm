// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qan/collector.proto

package qanpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MetricsSource defines collected metrics source.
type MetricsSource int32

const (
	MetricsSource_METRICS_SOURCE_INVALID MetricsSource = 0
	MetricsSource_MYSQL_SLOWLOG          MetricsSource = 1
	MetricsSource_MYSQL_PERFSCHEMA       MetricsSource = 2
)

var MetricsSource_name = map[int32]string{
	0: "METRICS_SOURCE_INVALID",
	1: "MYSQL_SLOWLOG",
	2: "MYSQL_PERFSCHEMA",
}
var MetricsSource_value = map[string]int32{
	"METRICS_SOURCE_INVALID": 0,
	"MYSQL_SLOWLOG":          1,
	"MYSQL_PERFSCHEMA":       2,
}

func (x MetricsSource) String() string {
	return proto.EnumName(MetricsSource_name, int32(x))
}
func (MetricsSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_collector_8859e09c4cf67129, []int{0}
}

type CollectRequest struct {
	MetricsBucket        []*MetricsBucket `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CollectRequest) Reset()         { *m = CollectRequest{} }
func (m *CollectRequest) String() string { return proto.CompactTextString(m) }
func (*CollectRequest) ProtoMessage()    {}
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_8859e09c4cf67129, []int{0}
}
func (m *CollectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectRequest.Unmarshal(m, b)
}
func (m *CollectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectRequest.Marshal(b, m, deterministic)
}
func (dst *CollectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectRequest.Merge(dst, src)
}
func (m *CollectRequest) XXX_Size() int {
	return xxx_messageInfo_CollectRequest.Size(m)
}
func (m *CollectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectRequest proto.InternalMessageInfo

func (m *CollectRequest) GetMetricsBucket() []*MetricsBucket {
	if m != nil {
		return m.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by pmm-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Server.
	DServer string `protobuf:"bytes,3,opt,name=d_server,json=dServer,proto3" json:"d_server,omitempty"`
	// PostgreSQL database.
	DDatabase string `protobuf:"bytes,4,opt,name=d_database,json=dDatabase,proto3" json:"d_database,omitempty"`
	// MySQL database or PostgreSQL schema.
	DSchema string `protobuf:"bytes,5,opt,name=d_schema,json=dSchema,proto3" json:"d_schema,omitempty"`
	// client user name.
	DUsername string `protobuf:"bytes,6,opt,name=d_username,json=dUsername,proto3" json:"d_username,omitempty"`
	// client IP or hostname.
	DClientHost string `protobuf:"bytes,7,opt,name=d_client_host,json=dClientHost,proto3" json:"d_client_host,omitempty"`
	// Custom labels names:values.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Identifier of agent that collect and send metrics.
	AgentUuid string `protobuf:"bytes,9,opt,name=agent_uuid,json=agentUuid,proto3" json:"agent_uuid,omitempty"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,10,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,11,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// Metrics source.
	MetricsSource MetricsSource `protobuf:"varint,12,opt,name=metrics_source,json=metricsSource,proto3,enum=qan.MetricsSource" json:"metrics_source,omitempty"`
	// One of query example from set found in bucket.
	Example       string        `protobuf:"bytes,13,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat ExampleFormat `protobuf:"varint,14,opt,name=example_format,json=exampleFormat,proto3,enum=qan.ExampleFormat" json:"example_format,omitempty"`
	// Indicates if query examples is too long and was truncated.
	IsTruncated bool        `protobuf:"varint,15,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType ExampleType `protobuf:"varint,16,opt,name=example_type,json=exampleType,proto3,enum=qan.ExampleType" json:"example_type,omitempty"`
	// JSON raw metrics for given query example.
	// FIXME(askomorokhov) wat?
	ExampleMetrics string `protobuf:"bytes,17,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,18,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// List of warnings: {code: count}.
	Warnings map[uint64]uint64 `protobuf:"bytes,19,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,20,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,21,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Amount queries in this bucket.
	NumQueries float32 `protobuf:"fixed32,22,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	// How many times query_time was found.
	MQueryTimeCnt float32 `protobuf:"fixed32,23,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	// Sum of all values query_time in bucket.
	MQueryTimeSum float32 `protobuf:"fixed32,24,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	// Smallest value of query_time in bucket.
	MQueryTimeMin float32 `protobuf:"fixed32,25,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	// Biggest value of query_time in bucket.
	MQueryTimeMax float32 `protobuf:"fixed32,26,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	// 99 percentile of value of query_time in bucket.
	MQueryTimeP99           float32 `protobuf:"fixed32,27,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MLockTimeCnt            float32 `protobuf:"fixed32,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	MLockTimeSum            float32 `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin            float32 `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax            float32 `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99            float32 `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt            float32 `protobuf:"fixed32,33,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	MRowsSentSum            float32 `protobuf:"fixed32,34,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin            float32 `protobuf:"fixed32,35,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax            float32 `protobuf:"fixed32,36,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99            float32 `protobuf:"fixed32,37,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt        float32 `protobuf:"fixed32,38,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	MRowsExaminedSum        float32 `protobuf:"fixed32,39,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin        float32 `protobuf:"fixed32,40,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax        float32 `protobuf:"fixed32,41,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99        float32 `protobuf:"fixed32,42,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt        float32 `protobuf:"fixed32,43,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	MRowsAffectedSum        float32 `protobuf:"fixed32,44,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin        float32 `protobuf:"fixed32,45,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax        float32 `protobuf:"fixed32,46,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99        float32 `protobuf:"fixed32,47,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt            float32 `protobuf:"fixed32,48,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	MRowsReadSum            float32 `protobuf:"fixed32,49,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin            float32 `protobuf:"fixed32,50,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax            float32 `protobuf:"fixed32,51,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99            float32 `protobuf:"fixed32,52,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt         float32 `protobuf:"fixed32,53,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	MMergePassesSum         float32 `protobuf:"fixed32,54,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin         float32 `protobuf:"fixed32,55,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax         float32 `protobuf:"fixed32,56,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99         float32 `protobuf:"fixed32,57,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt        float32 `protobuf:"fixed32,58,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	MInnodbIoROpsSum        float32 `protobuf:"fixed32,59,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin        float32 `protobuf:"fixed32,60,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax        float32 `protobuf:"fixed32,61,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99        float32 `protobuf:"fixed32,62,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt      float32 `protobuf:"fixed32,63,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	MInnodbIoRBytesSum      float32 `protobuf:"fixed32,64,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin      float32 `protobuf:"fixed32,65,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax      float32 `protobuf:"fixed32,66,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99      float32 `protobuf:"fixed32,67,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt       float32 `protobuf:"fixed32,68,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	MInnodbIoRWaitSum       float32 `protobuf:"fixed32,69,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin       float32 `protobuf:"fixed32,70,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax       float32 `protobuf:"fixed32,71,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99       float32 `protobuf:"fixed32,72,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt   float32 `protobuf:"fixed32,73,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	MInnodbRecLockWaitSum   float32 `protobuf:"fixed32,74,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin   float32 `protobuf:"fixed32,75,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax   float32 `protobuf:"fixed32,76,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99   float32 `protobuf:"fixed32,77,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt     float32 `protobuf:"fixed32,78,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	MInnodbQueueWaitSum     float32 `protobuf:"fixed32,79,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32 `protobuf:"fixed32,80,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32 `protobuf:"fixed32,81,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32 `protobuf:"fixed32,82,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32 `protobuf:"fixed32,83,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	MInnodbPagesDistinctSum float32 `protobuf:"fixed32,84,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32 `protobuf:"fixed32,85,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32 `protobuf:"fixed32,86,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32 `protobuf:"fixed32,87,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32 `protobuf:"fixed32,88,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	MQueryLengthSum         float32 `protobuf:"fixed32,89,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin         float32 `protobuf:"fixed32,90,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax         float32 `protobuf:"fixed32,91,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99         float32 `protobuf:"fixed32,92,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt           float32 `protobuf:"fixed32,93,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	MBytesSentSum           float32 `protobuf:"fixed32,94,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin           float32 `protobuf:"fixed32,95,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax           float32 `protobuf:"fixed32,96,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99           float32 `protobuf:"fixed32,97,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt           float32 `protobuf:"fixed32,98,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	MTmpTablesSum           float32 `protobuf:"fixed32,99,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin           float32 `protobuf:"fixed32,100,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax           float32 `protobuf:"fixed32,101,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99           float32 `protobuf:"fixed32,102,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt       float32 `protobuf:"fixed32,103,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	MTmpDiskTablesSum       float32 `protobuf:"fixed32,104,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin       float32 `protobuf:"fixed32,105,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax       float32 `protobuf:"fixed32,106,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99       float32 `protobuf:"fixed32,107,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt       float32 `protobuf:"fixed32,108,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	MTmpTableSizesSum       float32 `protobuf:"fixed32,109,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin       float32 `protobuf:"fixed32,110,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax       float32 `protobuf:"fixed32,111,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99       float32 `protobuf:"fixed32,112,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	MQcHitCnt               float32 `protobuf:"fixed32,113,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	// %true = sum/cnt
	MQcHitSum               float32  `protobuf:"fixed32,114,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt            float32  `protobuf:"fixed32,115,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	MFullScanSum            float32  `protobuf:"fixed32,116,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt            float32  `protobuf:"fixed32,117,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	MFullJoinSum            float32  `protobuf:"fixed32,118,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt            float32  `protobuf:"fixed32,119,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	MTmpTableSum            float32  `protobuf:"fixed32,120,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt      float32  `protobuf:"fixed32,121,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	MTmpTableOnDiskSum      float32  `protobuf:"fixed32,122,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt            float32  `protobuf:"fixed32,123,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	MFilesortSum            float32  `protobuf:"fixed32,124,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt      float32  `protobuf:"fixed32,125,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	MFilesortOnDiskSum      float32  `protobuf:"fixed32,126,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32  `protobuf:"fixed32,127,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	MSelectFullRangeJoinSum float32  `protobuf:"fixed32,128,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32  `protobuf:"fixed32,129,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	MSelectRangeSum         float32  `protobuf:"fixed32,130,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt    float32  `protobuf:"fixed32,131,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	MSelectRangeCheckSum    float32  `protobuf:"fixed32,132,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt           float32  `protobuf:"fixed32,133,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	MSortRangeSum           float32  `protobuf:"fixed32,134,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt            float32  `protobuf:"fixed32,135,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	MSortRowsSum            float32  `protobuf:"fixed32,136,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt            float32  `protobuf:"fixed32,137,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	MSortScanSum            float32  `protobuf:"fixed32,138,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt         float32  `protobuf:"fixed32,139,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	MNoIndexUsedSum         float32  `protobuf:"fixed32,140,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt     float32  `protobuf:"fixed32,141,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	MNoGoodIndexUsedSum     float32  `protobuf:"fixed32,142,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	MDocsReturnedCnt        float32  `protobuf:"fixed32,143,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	MDocsReturnedSum        float32  `protobuf:"fixed32,144,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin        float32  `protobuf:"fixed32,145,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax        float32  `protobuf:"fixed32,146,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99        float32  `protobuf:"fixed32,147,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt      float32  `protobuf:"fixed32,148,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	MResponseLengthSum      float32  `protobuf:"fixed32,149,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin      float32  `protobuf:"fixed32,150,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax      float32  `protobuf:"fixed32,151,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99      float32  `protobuf:"fixed32,152,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt         float32  `protobuf:"fixed32,153,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	MDocsScannedSum         float32  `protobuf:"fixed32,154,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin         float32  `protobuf:"fixed32,155,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax         float32  `protobuf:"fixed32,156,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99         float32  `protobuf:"fixed32,157,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *MetricsBucket) Reset()         { *m = MetricsBucket{} }
func (m *MetricsBucket) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket) ProtoMessage()    {}
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_8859e09c4cf67129, []int{1}
}
func (m *MetricsBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket.Unmarshal(m, b)
}
func (m *MetricsBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket.Marshal(b, m, deterministic)
}
func (dst *MetricsBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket.Merge(dst, src)
}
func (m *MetricsBucket) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket.Size(m)
}
func (m *MetricsBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket proto.InternalMessageInfo

func (m *MetricsBucket) GetQueryid() string {
	if m != nil {
		return m.Queryid
	}
	return ""
}

func (m *MetricsBucket) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *MetricsBucket) GetDServer() string {
	if m != nil {
		return m.DServer
	}
	return ""
}

func (m *MetricsBucket) GetDDatabase() string {
	if m != nil {
		return m.DDatabase
	}
	return ""
}

func (m *MetricsBucket) GetDSchema() string {
	if m != nil {
		return m.DSchema
	}
	return ""
}

func (m *MetricsBucket) GetDUsername() string {
	if m != nil {
		return m.DUsername
	}
	return ""
}

func (m *MetricsBucket) GetDClientHost() string {
	if m != nil {
		return m.DClientHost
	}
	return ""
}

func (m *MetricsBucket) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsBucket) GetAgentUuid() string {
	if m != nil {
		return m.AgentUuid
	}
	return ""
}

func (m *MetricsBucket) GetPeriodStartUnixSecs() uint32 {
	if m != nil {
		return m.PeriodStartUnixSecs
	}
	return 0
}

func (m *MetricsBucket) GetPeriodLengthSecs() uint32 {
	if m != nil {
		return m.PeriodLengthSecs
	}
	return 0
}

func (m *MetricsBucket) GetMetricsSource() MetricsSource {
	if m != nil {
		return m.MetricsSource
	}
	return MetricsSource_METRICS_SOURCE_INVALID
}

func (m *MetricsBucket) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *MetricsBucket) GetExampleFormat() ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return ExampleFormat_EXAMPLE_FORMAT_INVALID
}

func (m *MetricsBucket) GetIsTruncated() bool {
	if m != nil {
		return m.IsTruncated
	}
	return false
}

func (m *MetricsBucket) GetExampleType() ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_INVALID
}

func (m *MetricsBucket) GetExampleMetrics() string {
	if m != nil {
		return m.ExampleMetrics
	}
	return ""
}

func (m *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if m != nil {
		return m.NumQueriesWithWarnings
	}
	return 0
}

func (m *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if m != nil {
		return m.NumQueriesWithErrors
	}
	return 0
}

func (m *MetricsBucket) GetErrors() map[uint64]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MetricsBucket) GetNumQueries() float32 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeCnt() float32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeCnt() float32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentCnt() float32 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentSum() float32 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMin() float32 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMax() float32 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentP99() float32 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedCnt() float32 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedSum() float32 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMin() float32 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMax() float32 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedP99() float32 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedCnt() float32 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedSum() float32 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMin() float32 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMax() float32 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedP99() float32 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadCnt() float32 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadSum() float32 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMin() float32 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMax() float32 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadP99() float32 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesCnt() float32 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesSum() float32 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMin() float32 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMax() float32 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesP99() float32 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsCnt() float32 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsSum() float32 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMin() float32 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMax() float32 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsP99() float32 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesCnt() float32 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesSum() float32 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMin() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMax() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesP99() float32 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctCnt() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctSum() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMin() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMax() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctP99() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthCnt() float32 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthSum() float32 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMin() float32 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMax() float32 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthP99() float32 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentCnt() float32 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentSum() float32 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMin() float32 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMax() float32 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentP99() float32 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesCnt() float32 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesSum() float32 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMin() float32 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMax() float32 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesP99() float32 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesCnt() float32 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesSum() float32 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMin() float32 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMax() float32 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesP99() float32 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesCnt() float32 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesSum() float32 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMin() float32 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMax() float32 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesP99() float32 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitCnt() float32 {
	if m != nil {
		return m.MQcHitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitSum() float32 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanCnt() float32 {
	if m != nil {
		return m.MFullScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanSum() float32 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinCnt() float32 {
	if m != nil {
		return m.MFullJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinSum() float32 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableCnt() float32 {
	if m != nil {
		return m.MTmpTableCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSum() float32 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskCnt() float32 {
	if m != nil {
		return m.MTmpTableOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskSum() float32 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortCnt() float32 {
	if m != nil {
		return m.MFilesortCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortSum() float32 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskCnt() float32 {
	if m != nil {
		return m.MFilesortOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskSum() float32 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinCnt() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinSum() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCnt() float32 {
	if m != nil {
		return m.MSelectRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeSum() float32 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckCnt() float32 {
	if m != nil {
		return m.MSelectRangeCheckCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckSum() float32 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeCnt() float32 {
	if m != nil {
		return m.MSortRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeSum() float32 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsCnt() float32 {
	if m != nil {
		return m.MSortRowsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsSum() float32 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanCnt() float32 {
	if m != nil {
		return m.MSortScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanSum() float32 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedSum() float32 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedSum() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedCnt() float32 {
	if m != nil {
		return m.MDocsReturnedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedSum() float32 {
	if m != nil {
		return m.MDocsReturnedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMin() float32 {
	if m != nil {
		return m.MDocsReturnedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMax() float32 {
	if m != nil {
		return m.MDocsReturnedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedP99() float32 {
	if m != nil {
		return m.MDocsReturnedP99
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthCnt() float32 {
	if m != nil {
		return m.MResponseLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthSum() float32 {
	if m != nil {
		return m.MResponseLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMin() float32 {
	if m != nil {
		return m.MResponseLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMax() float32 {
	if m != nil {
		return m.MResponseLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthP99() float32 {
	if m != nil {
		return m.MResponseLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedCnt() float32 {
	if m != nil {
		return m.MDocsScannedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedSum() float32 {
	if m != nil {
		return m.MDocsScannedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMin() float32 {
	if m != nil {
		return m.MDocsScannedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMax() float32 {
	if m != nil {
		return m.MDocsScannedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedP99() float32 {
	if m != nil {
		return m.MDocsScannedP99
	}
	return 0
}

type CollectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectResponse) Reset()         { *m = CollectResponse{} }
func (m *CollectResponse) String() string { return proto.CompactTextString(m) }
func (*CollectResponse) ProtoMessage()    {}
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_8859e09c4cf67129, []int{2}
}
func (m *CollectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectResponse.Unmarshal(m, b)
}
func (m *CollectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectResponse.Marshal(b, m, deterministic)
}
func (dst *CollectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectResponse.Merge(dst, src)
}
func (m *CollectResponse) XXX_Size() int {
	return xxx_messageInfo_CollectResponse.Size(m)
}
func (m *CollectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CollectRequest)(nil), "qan.CollectRequest")
	proto.RegisterType((*MetricsBucket)(nil), "qan.MetricsBucket")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.ErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "qan.MetricsBucket.LabelsEntry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.WarningsEntry")
	proto.RegisterType((*CollectResponse)(nil), "qan.CollectResponse")
	proto.RegisterEnum("qan.MetricsSource", MetricsSource_name, MetricsSource_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	// Collect accepts data from pmm-agent (via pmm-managed).
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/qan.Collector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	// Collect accepts data from pmm-agent (via pmm-managed).
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.Collector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _Collector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qan/collector.proto",
}

func init() { proto.RegisterFile("qan/collector.proto", fileDescriptor_collector_8859e09c4cf67129) }

var fileDescriptor_collector_8859e09c4cf67129 = []byte{
	// 2283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x99, 0xf9, 0x7b, 0xd4, 0x36,
	0xfe, 0xc7, 0xbf, 0xc3, 0x8d, 0x42, 0x20, 0x38, 0x01, 0x44, 0x7a, 0x90, 0xf2, 0x6d, 0x4b, 0xb6,
	0xa5, 0xd0, 0x02, 0xa5, 0x1d, 0x4a, 0xbb, 0x0b, 0x49, 0x80, 0xb4, 0x09, 0x09, 0x33, 0x49, 0xd9,
	0x76, 0x0f, 0xaf, 0x62, 0x2b, 0x89, 0x9b, 0xb1, 0x3d, 0xb1, 0x6c, 0xa2, 0x74, 0xef, 0xfb, 0xbe,
	0xef, 0xeb, 0x8f, 0xd9, 0xff, 0x6c, 0x9f, 0xb7, 0x24, 0x7b, 0x7c, 0xc8, 0x79, 0x9e, 0xfd, 0x2d,
	0xb6, 0x5e, 0x2f, 0xc9, 0xef, 0x8f, 0x14, 0xcb, 0x1e, 0x93, 0xc9, 0x5d, 0x16, 0x5d, 0xf7, 0xe2,
	0xc1, 0x80, 0x7b, 0x69, 0x9c, 0x5c, 0x1b, 0x26, 0x71, 0x1a, 0x3b, 0x87, 0x77, 0x59, 0x34, 0x3d,
	0x8e, 0x96, 0x5d, 0x16, 0xe9, 0x73, 0x97, 0x3f, 0x22, 0xa7, 0xe7, 0x34, 0xd6, 0xe3, 0xbb, 0x19,
	0x17, 0xa9, 0xd3, 0x25, 0xa7, 0x43, 0x9e, 0x26, 0x81, 0x27, 0xdc, 0x8d, 0xcc, 0xdb, 0xe1, 0x29,
	0xed, 0xcc, 0x1c, 0x9e, 0x1d, 0xbb, 0xe1, 0x5c, 0x83, 0xb5, 0xac, 0x9b, 0xee, 0xab, 0x96, 0xde,
	0x78, 0x58, 0x3e, 0xbc, 0xfc, 0x9f, 0x3b, 0x64, 0xbc, 0x02, 0x38, 0x94, 0x1c, 0xdf, 0xcd, 0x78,
	0xb2, 0x1f, 0xf8, 0xb4, 0x33, 0xd3, 0x99, 0x3d, 0xd9, 0xcb, 0x0f, 0x9d, 0x19, 0x32, 0xb6, 0x19,
	0x44, 0x5b, 0x3c, 0x19, 0x26, 0x41, 0x94, 0xd2, 0x43, 0xaa, 0xb5, 0x7c, 0xca, 0xb9, 0x48, 0x4e,
	0xf8, 0xae, 0xe0, 0xc9, 0x33, 0x9e, 0xd0, 0xc3, 0x5a, 0xf6, 0xfb, 0xea, 0xd0, 0x79, 0x81, 0x10,
	0xdf, 0xf5, 0x59, 0xca, 0x36, 0x98, 0xe0, 0xf4, 0x88, 0x6a, 0x3c, 0xe9, 0xcf, 0x9b, 0x13, 0xc6,
	0xf4, 0xb6, 0x79, 0xc8, 0xe8, 0xd1, 0xdc, 0x54, 0x87, 0xda, 0xcc, 0x04, 0x4f, 0x22, 0x16, 0x72,
	0x7a, 0xcc, 0x98, 0xeb, 0xe6, 0x84, 0x73, 0x99, 0x8c, 0xfb, 0xae, 0x37, 0x08, 0x78, 0x94, 0xba,
	0xdb, 0xb1, 0x48, 0xe9, 0x71, 0x7d, 0x5d, 0xfe, 0x9c, 0x3a, 0xf7, 0x28, 0x16, 0xa9, 0x73, 0x9b,
	0x1c, 0x1b, 0xb0, 0x0d, 0x3e, 0x10, 0xf4, 0x84, 0x2a, 0xcc, 0x8b, 0xcd, 0xc2, 0x5c, 0x5b, 0x52,
	0xc0, 0x42, 0x94, 0x26, 0xfb, 0x3d, 0x43, 0x63, 0x68, 0xb6, 0x85, 0x8e, 0xb3, 0x2c, 0xf0, 0xe9,
	0x49, 0x3d, 0xb4, 0x3a, 0xb3, 0x9e, 0x05, 0xbe, 0x73, 0x93, 0x9c, 0x1f, 0xf2, 0x24, 0x88, 0x7d,
	0x57, 0xa4, 0x2c, 0x49, 0xdd, 0x2c, 0x0a, 0xa4, 0x2b, 0xb8, 0x27, 0x28, 0x99, 0xe9, 0xcc, 0x8e,
	0xf7, 0x26, 0x75, 0x6b, 0x1f, 0x8d, 0xeb, 0x51, 0x20, 0xfb, 0xdc, 0x13, 0xce, 0x55, 0xe2, 0x18,
	0x69, 0xc0, 0xa3, 0xad, 0x74, 0x5b, 0x0b, 0x63, 0x4a, 0x98, 0xd0, 0x2d, 0x4b, 0xaa, 0x41, 0xd1,
	0xa5, 0xa9, 0x15, 0x71, 0x96, 0x78, 0x9c, 0x9e, 0x9a, 0xe9, 0xcc, 0x9e, 0xae, 0x4e, 0x6d, 0x5f,
	0xb5, 0x14, 0x53, 0xab, 0x0f, 0x31, 0x91, 0x5c, 0xb2, 0x70, 0x38, 0xe0, 0x74, 0x5c, 0x57, 0xd4,
	0x1c, 0xa2, 0x53, 0xf3, 0xa7, 0xbb, 0x19, 0x27, 0x21, 0x4b, 0xe9, 0xe9, 0x52, 0xa7, 0x0b, 0xba,
	0xe9, 0x81, 0x6a, 0xe9, 0x8d, 0xf3, 0xf2, 0xa1, 0xf3, 0x12, 0x39, 0x15, 0x08, 0x37, 0x4d, 0xb2,
	0xc8, 0x63, 0x29, 0xf7, 0xe9, 0x99, 0x99, 0xce, 0xec, 0x89, 0xde, 0x58, 0x20, 0xd6, 0xf2, 0x53,
	0xce, 0x4d, 0x72, 0x2a, 0xef, 0x3d, 0xdd, 0x1f, 0x72, 0x3a, 0xa1, 0xfa, 0x9e, 0x28, 0xf7, 0xbd,
	0xb6, 0x3f, 0xe4, 0xbd, 0x31, 0x3e, 0x3a, 0x70, 0xae, 0x90, 0x33, 0xb9, 0x64, 0x52, 0xd0, 0xb3,
	0xea, 0xa2, 0xf3, 0x2b, 0x35, 0x51, 0x9d, 0x2e, 0xb9, 0x18, 0x65, 0xa1, 0x8b, 0x35, 0x19, 0x70,
	0xe1, 0xee, 0x05, 0xe9, 0xb6, 0xbb, 0xc7, 0x92, 0x28, 0x88, 0xb6, 0x04, 0x75, 0x66, 0x3a, 0xb3,
	0x87, 0x7a, 0xe7, 0xa3, 0x2c, 0x7c, 0xa2, 0xdb, 0x9f, 0x06, 0xe9, 0xf6, 0x53, 0xd3, 0xea, 0xdc,
	0x25, 0x27, 0x0a, 0x72, 0x52, 0xad, 0x83, 0x19, 0xcb, 0x3a, 0xc8, 0x71, 0xbd, 0x12, 0x0a, 0xc3,
	0x79, 0x9b, 0x5c, 0x68, 0x0c, 0xcc, 0x93, 0x24, 0x4e, 0x04, 0x9d, 0x52, 0xc3, 0x4e, 0x55, 0x87,
	0x5d, 0x50, 0x6d, 0x58, 0x7a, 0x86, 0x3a, 0xd7, 0xba, 0xf4, 0x34, 0x6a, 0x96, 0x9e, 0xa6, 0x9d,
	0x4b, 0x64, 0xac, 0x34, 0x1c, 0x3d, 0xaf, 0x86, 0x20, 0xa3, 0x21, 0x9c, 0x2b, 0x64, 0x42, 0x37,
	0xef, 0xbb, 0x69, 0x10, 0x72, 0xd7, 0x8b, 0x52, 0x7a, 0x41, 0x51, 0xe3, 0x8a, 0xd9, 0x5f, 0x0b,
	0x42, 0x3e, 0x17, 0xa5, 0x0d, 0x50, 0x64, 0x21, 0xa5, 0x75, 0xb0, 0x9f, 0x85, 0x0d, 0x30, 0x0c,
	0x22, 0x7a, 0xb1, 0x0e, 0x2e, 0x07, 0x51, 0x13, 0x64, 0x92, 0x4e, 0x37, 0x40, 0x26, 0x1b, 0xe0,
	0xb0, 0xdb, 0xa5, 0xcf, 0xd5, 0xc1, 0xd5, 0x6e, 0xd7, 0x79, 0x85, 0x9c, 0x09, 0xdd, 0x41, 0xec,
	0xed, 0x8c, 0xb2, 0x3c, 0xaf, 0xb8, 0x53, 0xe1, 0x52, 0xec, 0xed, 0xe4, 0x51, 0x6a, 0x18, 0x92,
	0xbc, 0x50, 0xc3, 0x10, 0xa4, 0x86, 0x21, 0xc7, 0x8b, 0x35, 0x0c, 0x31, 0xea, 0x18, 0x93, 0xf4,
	0x52, 0x1d, 0x63, 0xb2, 0x8e, 0x21, 0xc3, 0x4c, 0x0d, 0x2b, 0x22, 0x24, 0xf1, 0x9e, 0x70, 0x05,
	0xee, 0x18, 0x88, 0xf0, 0x92, 0xc1, 0x7a, 0xf1, 0x9e, 0xe8, 0xf3, 0x28, 0x2d, 0x22, 0x8c, 0x30,
	0x44, 0xb8, 0x5c, 0xc3, 0x8a, 0x08, 0x23, 0x0c, 0x11, 0xfe, 0xbf, 0x86, 0x15, 0x11, 0x4a, 0x18,
	0x93, 0xf4, 0xe5, 0x3a, 0x96, 0x47, 0x18, 0x61, 0x88, 0xf0, 0x4a, 0x0d, 0x43, 0x84, 0x37, 0xc8,
	0xa4, 0xc1, 0xf0, 0x4f, 0x17, 0x44, 0xdc, 0x57, 0x31, 0x5e, 0x55, 0xe8, 0x84, 0x42, 0x17, 0x4c,
	0x03, 0xa2, 0x58, 0x70, 0xc4, 0xb9, 0x62, 0xc1, 0x11, 0xc9, 0x82, 0x23, 0xd6, 0xac, 0x05, 0x47,
	0x34, 0x1b, 0xce, 0x24, 0xfd, 0x82, 0x0d, 0x67, 0xd2, 0x86, 0x23, 0xe6, 0x6b, 0x16, 0xbc, 0x1a,
	0x95, 0x6d, 0x6e, 0x72, 0x2f, 0x35, 0x51, 0x5f, 0x2f, 0xe1, 0xf7, 0x4c, 0x43, 0x35, 0x6a, 0x81,
	0x23, 0xea, 0x55, 0x0b, 0x5e, 0x8d, 0x5a, 0xe0, 0x88, 0xfa, 0x86, 0x05, 0xaf, 0x46, 0x1d, 0xe1,
	0x4c, 0xd2, 0x6b, 0x36, 0xbc, 0x12, 0xb5, 0xc0, 0x11, 0xf5, 0xba, 0x05, 0xaf, 0x2e, 0xcc, 0x84,
	0x33, 0x1d, 0xf3, 0xcd, 0xd2, 0xe4, 0xf7, 0x38, 0xf3, 0xab, 0x0b, 0x53, 0x61, 0x88, 0xf7, 0x56,
	0x0d, 0xab, 0x2e, 0x4c, 0x85, 0x21, 0xd6, 0x8d, 0x1a, 0x56, 0x5d, 0x98, 0x1a, 0x63, 0x92, 0xde,
	0xac, 0x63, 0x95, 0x85, 0xa9, 0x30, 0xc4, 0xb8, 0x55, 0xc3, 0x10, 0xe1, 0x75, 0xe2, 0x84, 0x6e,
	0xc8, 0x93, 0x2d, 0xee, 0x0e, 0x99, 0x10, 0x5c, 0xa8, 0x14, 0x6f, 0x2b, 0xf2, 0x4c, 0xb8, 0x8c,
	0x86, 0x55, 0x75, 0x1e, 0x41, 0x9a, 0x30, 0xb2, 0xdc, 0x6e, 0xc2, 0x88, 0xd3, 0x84, 0x91, 0xe8,
	0x9d, 0x26, 0x8c, 0x50, 0x16, 0x98, 0x49, 0xfa, 0xae, 0x05, 0x66, 0xd2, 0x02, 0x23, 0x5d, 0xb7,
	0x09, 0x23, 0xe0, 0x75, 0x72, 0x2e, 0x74, 0x83, 0x28, 0x8a, 0xfd, 0x0d, 0x37, 0x88, 0xdd, 0xc4,
	0x8d, 0x87, 0x3a, 0xe3, 0x1d, 0x33, 0xa9, 0x8b, 0xaa, 0x6d, 0x31, 0xee, 0xad, 0x0c, 0x55, 0x48,
	0xab, 0x80, 0x9c, 0xef, 0x59, 0x04, 0x04, 0xb5, 0x0a, 0xc8, 0x7a, 0xd7, 0x22, 0x20, 0xac, 0x5d,
	0x60, 0x92, 0xbe, 0x6f, 0x13, 0x98, 0xb4, 0x0b, 0xc8, 0xfc, 0x81, 0x45, 0x40, 0xe8, 0x9b, 0xe4,
	0x42, 0x55, 0xd8, 0xd8, 0x4f, 0xcd, 0xd4, 0x7e, 0x51, 0x29, 0xce, 0x48, 0xb9, 0x8f, 0x26, 0x04,
	0x6f, 0x91, 0x10, 0xfd, 0x4b, 0x56, 0x09, 0xe1, 0x5b, 0x24, 0xc4, 0xbf, 0x67, 0x95, 0x50, 0x80,
	0x36, 0x89, 0x49, 0x7a, 0xdf, 0x2e, 0x31, 0xd9, 0x26, 0xa1, 0x0c, 0x73, 0x56, 0x09, 0x85, 0x78,
	0x8b, 0x9c, 0xaf, 0x4a, 0x7b, 0x2c, 0xd0, 0x3b, 0xc8, 0xbc, 0x72, 0xce, 0x8e, 0x9c, 0xa7, 0x2c,
	0x50, 0xdb, 0x88, 0x5d, 0x41, 0x15, 0x16, 0x6c, 0x0a, 0x8a, 0x60, 0x57, 0x50, 0x83, 0x07, 0x36,
	0x05, 0x25, 0x68, 0x51, 0x98, 0xa4, 0x0f, 0xad, 0x0a, 0x93, 0x2d, 0x0a, 0xf2, 0x3f, 0xb2, 0x29,
	0x88, 0xdf, 0x25, 0xd3, 0x85, 0x92, 0x70, 0x4f, 0xef, 0xb5, 0x45, 0x09, 0x16, 0x95, 0x76, 0xce,
	0x68, 0x3d, 0xee, 0x61, 0xd3, 0xcd, 0xcb, 0xd0, 0xae, 0xa2, 0x14, 0x1f, 0xb6, 0xa9, 0x28, 0x47,
	0xbb, 0x8a, 0x92, 0x7c, 0xd4, 0xa6, 0xa2, 0x2c, 0x07, 0xa8, 0x4c, 0xd2, 0xa5, 0x56, 0x95, 0xc9,
	0x03, 0x54, 0x94, 0x68, 0xb9, 0x4d, 0x45, 0x99, 0x6e, 0x95, 0x96, 0xd6, 0x6e, 0xc6, 0x33, 0x3e,
	0xaa, 0xd1, 0x63, 0xe5, 0x4d, 0x1a, 0xef, 0x09, 0x1a, 0xf3, 0x0a, 0xb5, 0x58, 0x28, 0xcf, 0x8a,
	0xdd, 0x42, 0x71, 0x5a, 0x2c, 0x54, 0x66, 0xd5, 0x6e, 0xa1, 0x2e, 0x6d, 0x16, 0x93, 0xf4, 0x49,
	0x8b, 0xc5, 0x64, 0x9b, 0x85, 0x7a, 0xf4, 0xec, 0x16, 0xaa, 0x71, 0x97, 0x3c, 0x57, 0x58, 0x43,
	0xb6, 0xc5, 0x85, 0xeb, 0x07, 0x22, 0x0d, 0x22, 0x4f, 0x57, 0xa4, 0xaf, 0xcc, 0x0b, 0xc6, 0x5c,
	0x05, 0x30, 0x6f, 0xda, 0x51, 0x95, 0x03, 0x6c, 0x54, 0x66, 0xad, 0xdd, 0x46, 0x75, 0x0e, 0xb0,
	0x51, 0xa1, 0xf5, 0x76, 0x1b, 0x55, 0x3a, 0xc8, 0x66, 0x92, 0x7e, 0x7c, 0x80, 0xcd, 0xe4, 0x41,
	0x36, 0x2a, 0xf6, 0xb4, 0xdd, 0x2e, 0x36, 0x52, 0xfd, 0x40, 0x6e, 0xde, 0x3e, 0x51, 0xac, 0x2f,
	0x9b, 0x4d, 0x49, 0x3d, 0x92, 0xeb, 0x97, 0xcf, 0x62, 0x23, 0xad, 0xc0, 0xa8, 0xcd, 0x27, 0x4d,
	0xb8, 0xd8, 0x48, 0x2b, 0x30, 0x4a, 0xf1, 0x69, 0x13, 0x2e, 0x36, 0xd2, 0x2a, 0xcc, 0x24, 0xfd,
	0x8a, 0x05, 0xce, 0x37, 0xd2, 0x0a, 0x8c, 0xa0, 0x5f, 0x6d, 0xc2, 0x08, 0xa8, 0xde, 0x38, 0xcc,
	0x96, 0x90, 0x3f, 0x86, 0x7f, 0xcd, 0xbc, 0x71, 0xe8, 0xed, 0xc0, 0x3c, 0x87, 0xd7, 0x41, 0x44,
	0xfb, 0x7a, 0x1d, 0x2c, 0xde, 0x8a, 0x4a, 0x20, 0x62, 0xb9, 0x75, 0xb0, 0x78, 0x2b, 0x2a, 0x83,
	0x4c, 0xd2, 0x6f, 0x34, 0xc0, 0xfc, 0xad, 0xa8, 0x04, 0x22, 0x0e, 0xab, 0x83, 0x45, 0x98, 0x34,
	0x1c, 0xba, 0x29, 0xdb, 0x18, 0x98, 0x9d, 0x71, 0xc3, 0x80, 0x6b, 0xe1, 0x70, 0x4d, 0x9d, 0x2d,
	0xc2, 0x94, 0x40, 0x84, 0xf1, 0xea, 0x60, 0x11, 0xa6, 0x04, 0x22, 0x8c, 0x5f, 0x07, 0x8b, 0x30,
	0x65, 0x90, 0x49, 0xca, 0x1b, 0x60, 0x1e, 0xa6, 0x04, 0x22, 0xcc, 0x66, 0x1d, 0x44, 0x98, 0x37,
	0xf1, 0x78, 0x00, 0xd0, 0x0f, 0xc4, 0x4e, 0x39, 0xd1, 0x96, 0xd9, 0x17, 0xd6, 0xc2, 0xe1, 0x7c,
	0x20, 0x76, 0x46, 0xa9, 0xac, 0x06, 0xa2, 0x6d, 0xdb, 0x0c, 0xc4, 0xb3, 0x1a, 0xc8, 0x18, 0xd8,
	0x0c, 0xe4, 0xb4, 0x1b, 0x4c, 0xd2, 0xcf, 0xac, 0x06, 0x93, 0x76, 0x03, 0xa9, 0x77, 0x6c, 0x46,
	0x25, 0xb9, 0x82, 0x5d, 0x11, 0x7c, 0x6e, 0x92, 0x0f, 0x46, 0x86, 0xa2, 0xfb, 0x68, 0xa9, 0x24,
	0x2f, 0x1b, 0x48, 0x1e, 0xda, 0x8c, 0x4a, 0xf2, 0xb2, 0x81, 0xe4, 0x91, 0xcd, 0xa8, 0x24, 0xaf,
	0x18, 0x4c, 0xd2, 0xd8, 0x6a, 0x94, 0x93, 0x97, 0x0d, 0x24, 0x1f, 0xda, 0x0c, 0x24, 0xbf, 0x44,
	0x4e, 0x85, 0xee, 0xae, 0xe7, 0x6e, 0x9b, 0x7d, 0x6a, 0x57, 0x81, 0x27, 0xc3, 0x27, 0xde, 0x23,
	0xbd, 0x3b, 0x95, 0x01, 0xe4, 0x4b, 0xca, 0x40, 0xf1, 0xba, 0xb1, 0x99, 0x0d, 0x06, 0xae, 0xf0,
	0x58, 0xa4, 0x3a, 0x11, 0xe6, 0x05, 0xe1, 0x41, 0x36, 0x18, 0xf4, 0x3d, 0x16, 0x15, 0x2f, 0x2f,
	0x23, 0x0c, 0x5d, 0xa5, 0x35, 0xac, 0xda, 0xdb, 0x67, 0x71, 0xa0, 0x7b, 0xcb, 0x4a, 0xd8, 0x87,
	0x71, 0x50, 0xeb, 0x4d, 0x61, 0xe8, 0xed, 0x59, 0x0d, 0x2b, 0x7a, 0x1b, 0xd5, 0x03, 0xbd, 0xed,
	0x19, 0x2c, 0xaf, 0x44, 0xd1, 0x5b, 0xa9, 0x6c, 0x59, 0x48, 0x65, 0x0d, 0x2b, 0x9e, 0x51, 0x47,
	0x58, 0x1c, 0xe9, 0x05, 0x86, 0x5e, 0xf7, 0xcd, 0x93, 0x63, 0x8e, 0xaf, 0x44, 0x58, 0x60, 0xc5,
	0xd3, 0x70, 0x53, 0xc2, 0x18, 0x9f, 0x5b, 0x25, 0x8c, 0xf4, 0x32, 0x39, 0x1d, 0xba, 0x9b, 0xc1,
	0x80, 0x8b, 0x38, 0xd1, 0xf3, 0xf2, 0xcd, 0x3c, 0x9d, 0x39, 0x89, 0xae, 0xab, 0x14, 0x7a, 0xfc,
	0x56, 0x8d, 0x42, 0x5f, 0x37, 0xf0, 0xb8, 0x57, 0x50, 0xe5, 0x8b, 0xfe, 0xb6, 0x19, 0x3f, 0xa7,
	0x47, 0x17, 0x6d, 0x77, 0x30, 0xc2, 0x77, 0xac, 0x0e, 0xc6, 0x79, 0x9f, 0x3c, 0x1f, 0xba, 0x82,
	0x0f, 0xb8, 0x97, 0xea, 0x99, 0x49, 0x58, 0xb4, 0xc5, 0x47, 0xd3, 0xf8, 0x5d, 0xb3, 0xef, 0xf5,
	0x15, 0x82, 0x59, 0xea, 0x01, 0xc8, 0x67, 0xf4, 0x83, 0x03, 0x74, 0x0c, 0xfc, 0xbd, 0x4e, 0xbb,
	0x8f, 0xe1, 0xaf, 0x62, 0x0f, 0x32, 0xbe, 0x56, 0x31, 0xe8, 0xf7, 0x3b, 0x66, 0x13, 0xd2, 0x96,
	0x32, 0x30, 0x5a, 0x93, 0xc6, 0x18, 0x3f, 0xb0, 0xd0, 0xe8, 0xfb, 0x1d, 0x42, 0xeb, 0x7d, 0x6f,
	0x73, 0x4f, 0x17, 0xf1, 0x87, 0xda, 0x99, 0xaa, 0x8c, 0x80, 0x56, 0x0c, 0xd3, 0x26, 0x62, 0xb0,
	0x1f, 0xb5, 0x89, 0x18, 0x71, 0x16, 0xf7, 0x6c, 0x55, 0xfc, 0x51, 0x96, 0x1f, 0x77, 0xcc, 0x4d,
	0xbb, 0x1f, 0x27, 0xa3, 0x24, 0x75, 0x12, 0x5d, 0xff, 0xa4, 0x41, 0xa2, 0xcf, 0x57, 0xb1, 0xca,
	0x35, 0x89, 0xd7, 0x79, 0x74, 0xf9, 0xd3, 0x8e, 0x59, 0x30, 0x0a, 0x8c, 0xf7, 0xd4, 0xad, 0xad,
	0xc6, 0xa1, 0xc3, 0x9f, 0xd5, 0xb9, 0x6a, 0x7f, 0xc5, 0x3f, 0xfe, 0xcf, 0xcb, 0x5c, 0xfe, 0x9f,
	0x5f, 0xe3, 0xd0, 0xdf, 0x2f, 0xea, 0x5c, 0xf1, 0x93, 0x4c, 0x14, 0xbb, 0x41, 0xe4, 0x73, 0xe9,
	0x66, 0xc2, 0xfc, 0xe0, 0xf3, 0xcb, 0x7c, 0x52, 0x1e, 0xc7, 0x8b, 0x68, 0x59, 0x17, 0xa5, 0x1f,
	0x7c, 0xaa, 0x38, 0xba, 0xfe, 0x95, 0x05, 0x47, 0xef, 0xb7, 0x31, 0x15, 0x51, 0xec, 0x6e, 0xc5,
	0xb1, 0x5f, 0x1f, 0xe2, 0xd7, 0x1d, 0xf3, 0x14, 0xfb, 0x38, 0x7e, 0x18, 0xc7, 0x7e, 0x65, 0x98,
	0x36, 0x0f, 0x63, 0xfd, 0xa6, 0xc5, 0xc3, 0x78, 0xd7, 0x70, 0x79, 0x7e, 0xec, 0x09, 0x37, 0xe1,
	0x69, 0x96, 0xe4, 0xbf, 0xd4, 0xfd, 0xb6, 0x63, 0x5e, 0xb5, 0xe7, 0x63, 0x4f, 0xf4, 0x4c, 0x0b,
	0xc6, 0xb1, 0xf0, 0x18, 0xe2, 0x77, 0x36, 0xbe, 0xa5, 0x7f, 0x6c, 0x26, 0xbf, 0xb7, 0xf1, 0xd8,
	0x4c, 0x6c, 0x3c, 0x93, 0xf4, 0x0f, 0x56, 0x9e, 0x49, 0x1b, 0x8f, 0x8d, 0xe4, 0x8f, 0x36, 0x1e,
	0x1b, 0xc9, 0x0d, 0x6c, 0x3d, 0x09, 0x17, 0xc3, 0x38, 0x12, 0xbc, 0xfc, 0xe8, 0xfa, 0xa7, 0x8e,
	0xb9, 0x65, 0xf4, 0x4c, 0xe3, 0xe8, 0xf1, 0xd5, 0xea, 0x20, 0xf5, 0x9f, 0xed, 0x8e, 0xbe, 0x9d,
	0x59, 0x1c, 0x24, 0xff, 0x8b, 0xdd, 0x41, 0x76, 0xbb, 0xc3, 0x24, 0xfd, 0x6b, 0x8b, 0xc3, 0xa4,
	0xdd, 0x41, 0x05, 0xfe, 0x66, 0x77, 0x50, 0x03, 0x75, 0x57, 0x51, 0x35, 0xc3, 0x4a, 0xcf, 0xa7,
	0xfc, 0xef, 0xf9, 0x8a, 0x44, 0xc9, 0xfa, 0xba, 0xa1, 0xb8, 0x07, 0x55, 0x68, 0x44, 0xff, 0x87,
	0x85, 0x2e, 0xee, 0x6f, 0x15, 0x1a, 0xa1, 0xff, 0x69, 0xa1, 0x91, 0xd8, 0x42, 0x33, 0x49, 0xff,
	0x65, 0xa3, 0x99, 0xb4, 0xd0, 0x08, 0xfa, 0x6f, 0x0b, 0xbd, 0xda, 0xed, 0x4e, 0x77, 0xc9, 0x58,
	0xe9, 0x4b, 0x9c, 0x33, 0x41, 0x0e, 0xef, 0xf0, 0x7d, 0xf3, 0x25, 0x12, 0x7f, 0x3a, 0x53, 0xe4,
	0xe8, 0x33, 0x36, 0xc8, 0xb8, 0xf9, 0xfe, 0xa8, 0x0f, 0xee, 0x1c, 0x7a, 0xb7, 0x33, 0xfd, 0x1e,
	0x19, 0xaf, 0x7c, 0xbc, 0x29, 0xcb, 0x47, 0x2c, 0xf2, 0x91, 0xb2, 0xdc, 0x25, 0x63, 0xa5, 0xcf,
	0x30, 0xff, 0x8b, 0x7a, 0xf9, 0x2c, 0x39, 0x53, 0x7c, 0x90, 0xd5, 0x93, 0xf6, 0xda, 0x5a, 0xf1,
	0x55, 0xd5, 0x7c, 0x8c, 0x9b, 0x26, 0xe7, 0x97, 0x17, 0xd6, 0x7a, 0x8b, 0x73, 0x7d, 0xb7, 0xbf,
	0xb2, 0xde, 0x9b, 0x5b, 0x70, 0x17, 0x1f, 0x7f, 0x7c, 0x6f, 0x69, 0x71, 0x7e, 0xe2, 0xff, 0x9c,
	0xb3, 0x64, 0x7c, 0xf9, 0x93, 0xfe, 0x93, 0x25, 0xb7, 0xbf, 0xb4, 0xf2, 0x74, 0x69, 0xe5, 0xe1,
	0x44, 0xc7, 0x99, 0x22, 0x13, 0xfa, 0xd4, 0xea, 0x42, 0xef, 0x41, 0x7f, 0xee, 0xd1, 0xc2, 0xf2,
	0xbd, 0x89, 0x43, 0x37, 0xee, 0x91, 0x93, 0x73, 0xf9, 0x07, 0x62, 0xe7, 0x16, 0x39, 0x6e, 0x0e,
	0x9c, 0x49, 0xf5, 0x4d, 0xa9, 0xfa, 0x51, 0x78, 0x7a, 0xaa, 0x7a, 0x52, 0x5f, 0xd8, 0xfd, 0xe3,
	0x9f, 0x1e, 0xdd, 0x65, 0xd1, 0x70, 0x63, 0xe3, 0x98, 0xfa, 0x98, 0x7c, 0xf3, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x80, 0xed, 0x6b, 0xdf, 0x77, 0x1e, 0x00, 0x00,
}
