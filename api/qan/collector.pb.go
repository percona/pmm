// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qan/collector.proto

package qan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AgentMessage contains several Metrics Bucket for one or more periods of time.
type AgentMessage struct {
	MetricsBucket        []*MetricsBucket `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AgentMessage) Reset()         { *m = AgentMessage{} }
func (m *AgentMessage) String() string { return proto.CompactTextString(m) }
func (*AgentMessage) ProtoMessage()    {}
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_0e7704973af59548, []int{0}
}
func (m *AgentMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentMessage.Unmarshal(m, b)
}
func (m *AgentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentMessage.Marshal(b, m, deterministic)
}
func (dst *AgentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMessage.Merge(dst, src)
}
func (m *AgentMessage) XXX_Size() int {
	return xxx_messageInfo_AgentMessage.Size(m)
}
func (m *AgentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMessage proto.InternalMessageInfo

func (m *AgentMessage) GetMetricsBucket() []*MetricsBucket {
	if m != nil {
		return m.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by qan-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	Queryid     string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Dimension Group.
	DServer        string            `protobuf:"bytes,3,opt,name=d_server,json=dServer,proto3" json:"d_server,omitempty"`
	DDatabase      string            `protobuf:"bytes,4,opt,name=d_database,json=dDatabase,proto3" json:"d_database,omitempty"`
	DSchema        string            `protobuf:"bytes,5,opt,name=d_schema,json=dSchema,proto3" json:"d_schema,omitempty"`
	DUsername      string            `protobuf:"bytes,6,opt,name=d_username,json=dUsername,proto3" json:"d_username,omitempty"`
	DClientHost    string            `protobuf:"bytes,7,opt,name=d_client_host,json=dClientHost,proto3" json:"d_client_host,omitempty"`
	Labels         map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AgentUuid      string            `protobuf:"bytes,9,opt,name=agent_uuid,json=agentUuid,proto3" json:"agent_uuid,omitempty"`
	PeriodStart    int64             `protobuf:"varint,10,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodLength   uint32            `protobuf:"varint,11,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty"`
	MetricsSource  string            `protobuf:"bytes,12,opt,name=metrics_source,json=metricsSource,proto3" json:"metrics_source,omitempty"`
	Example        string            `protobuf:"bytes,13,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat  ExampleFormat     `protobuf:"varint,14,opt,name=example_format,json=exampleFormat,proto3,enum=qan.ExampleFormat" json:"example_format,omitempty"`
	IsTruncated    uint32            `protobuf:"varint,15,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType    ExampleType       `protobuf:"varint,16,opt,name=example_type,json=exampleType,proto3,enum=qan.ExampleType" json:"example_type,omitempty"`
	ExampleMetrics string            `protobuf:"bytes,17,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// Metrics.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,18,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// {code: count }
	Warnings             map[uint64]uint64 `protobuf:"bytes,19,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueriesWithErrors float32           `protobuf:"fixed32,20,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// {code: count }
	Errors                  map[uint64]uint64 `protobuf:"bytes,21,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueries              float32           `protobuf:"fixed32,22,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	MQueryTimeCnt           float32           `protobuf:"fixed32,23,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	MQueryTimeSum           float32           `protobuf:"fixed32,24,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	MQueryTimeMin           float32           `protobuf:"fixed32,25,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	MQueryTimeMax           float32           `protobuf:"fixed32,26,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	MQueryTimeP99           float32           `protobuf:"fixed32,27,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MLockTimeCnt            float32           `protobuf:"fixed32,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	MLockTimeSum            float32           `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin            float32           `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax            float32           `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99            float32           `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt            float32           `protobuf:"fixed32,33,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	MRowsSentSum            float32           `protobuf:"fixed32,34,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin            float32           `protobuf:"fixed32,35,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax            float32           `protobuf:"fixed32,36,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99            float32           `protobuf:"fixed32,37,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt        float32           `protobuf:"fixed32,38,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	MRowsExaminedSum        float32           `protobuf:"fixed32,39,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin        float32           `protobuf:"fixed32,40,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax        float32           `protobuf:"fixed32,41,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99        float32           `protobuf:"fixed32,42,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt        float32           `protobuf:"fixed32,43,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	MRowsAffectedSum        float32           `protobuf:"fixed32,44,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin        float32           `protobuf:"fixed32,45,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax        float32           `protobuf:"fixed32,46,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99        float32           `protobuf:"fixed32,47,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt            float32           `protobuf:"fixed32,48,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	MRowsReadSum            float32           `protobuf:"fixed32,49,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin            float32           `protobuf:"fixed32,50,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax            float32           `protobuf:"fixed32,51,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99            float32           `protobuf:"fixed32,52,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt         float32           `protobuf:"fixed32,53,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	MMergePassesSum         float32           `protobuf:"fixed32,54,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin         float32           `protobuf:"fixed32,55,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax         float32           `protobuf:"fixed32,56,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99         float32           `protobuf:"fixed32,57,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt        float32           `protobuf:"fixed32,58,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	MInnodbIoROpsSum        float32           `protobuf:"fixed32,59,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin        float32           `protobuf:"fixed32,60,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax        float32           `protobuf:"fixed32,61,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99        float32           `protobuf:"fixed32,62,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt      float32           `protobuf:"fixed32,63,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	MInnodbIoRBytesSum      float32           `protobuf:"fixed32,64,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin      float32           `protobuf:"fixed32,65,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax      float32           `protobuf:"fixed32,66,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99      float32           `protobuf:"fixed32,67,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt       float32           `protobuf:"fixed32,68,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	MInnodbIoRWaitSum       float32           `protobuf:"fixed32,69,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin       float32           `protobuf:"fixed32,70,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax       float32           `protobuf:"fixed32,71,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99       float32           `protobuf:"fixed32,72,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt   float32           `protobuf:"fixed32,73,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	MInnodbRecLockWaitSum   float32           `protobuf:"fixed32,74,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin   float32           `protobuf:"fixed32,75,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax   float32           `protobuf:"fixed32,76,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99   float32           `protobuf:"fixed32,77,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt     float32           `protobuf:"fixed32,78,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	MInnodbQueueWaitSum     float32           `protobuf:"fixed32,79,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32           `protobuf:"fixed32,80,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32           `protobuf:"fixed32,81,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32           `protobuf:"fixed32,82,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32           `protobuf:"fixed32,83,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	MInnodbPagesDistinctSum float32           `protobuf:"fixed32,84,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32           `protobuf:"fixed32,85,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32           `protobuf:"fixed32,86,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32           `protobuf:"fixed32,87,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32           `protobuf:"fixed32,88,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	MQueryLengthSum         float32           `protobuf:"fixed32,89,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin         float32           `protobuf:"fixed32,90,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax         float32           `protobuf:"fixed32,91,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99         float32           `protobuf:"fixed32,92,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt           float32           `protobuf:"fixed32,93,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	MBytesSentSum           float32           `protobuf:"fixed32,94,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin           float32           `protobuf:"fixed32,95,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax           float32           `protobuf:"fixed32,96,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99           float32           `protobuf:"fixed32,97,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt           float32           `protobuf:"fixed32,98,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	MTmpTablesSum           float32           `protobuf:"fixed32,99,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin           float32           `protobuf:"fixed32,100,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax           float32           `protobuf:"fixed32,101,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99           float32           `protobuf:"fixed32,102,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt       float32           `protobuf:"fixed32,103,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	MTmpDiskTablesSum       float32           `protobuf:"fixed32,104,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin       float32           `protobuf:"fixed32,105,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax       float32           `protobuf:"fixed32,106,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99       float32           `protobuf:"fixed32,107,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt       float32           `protobuf:"fixed32,108,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	MTmpTableSizesSum       float32           `protobuf:"fixed32,109,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin       float32           `protobuf:"fixed32,110,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax       float32           `protobuf:"fixed32,111,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99       float32           `protobuf:"fixed32,112,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	// boolean metrics
	MQcHitCnt               float32 `protobuf:"fixed32,113,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	MQcHitSum               float32 `protobuf:"fixed32,114,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt            float32 `protobuf:"fixed32,115,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	MFullScanSum            float32 `protobuf:"fixed32,116,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt            float32 `protobuf:"fixed32,117,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	MFullJoinSum            float32 `protobuf:"fixed32,118,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt            float32 `protobuf:"fixed32,119,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	MTmpTableSum            float32 `protobuf:"fixed32,120,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt      float32 `protobuf:"fixed32,121,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	MTmpTableOnDiskSum      float32 `protobuf:"fixed32,122,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt            float32 `protobuf:"fixed32,123,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	MFilesortSum            float32 `protobuf:"fixed32,124,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt      float32 `protobuf:"fixed32,125,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	MFilesortOnDiskSum      float32 `protobuf:"fixed32,126,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32 `protobuf:"fixed32,127,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	MSelectFullRangeJoinSum float32 `protobuf:"fixed32,128,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32 `protobuf:"fixed32,129,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	MSelectRangeSum         float32 `protobuf:"fixed32,130,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt    float32 `protobuf:"fixed32,131,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	MSelectRangeCheckSum    float32 `protobuf:"fixed32,132,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt           float32 `protobuf:"fixed32,133,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	MSortRangeSum           float32 `protobuf:"fixed32,134,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt            float32 `protobuf:"fixed32,135,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	MSortRowsSum            float32 `protobuf:"fixed32,136,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt            float32 `protobuf:"fixed32,137,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	MSortScanSum            float32 `protobuf:"fixed32,138,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt         float32 `protobuf:"fixed32,139,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	MNoIndexUsedSum         float32 `protobuf:"fixed32,140,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt     float32 `protobuf:"fixed32,141,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	MNoGoodIndexUsedSum     float32 `protobuf:"fixed32,142,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	// mongo metrics
	MDocsReturnedCnt     float32  `protobuf:"fixed32,143,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	MDocsReturnedSum     float32  `protobuf:"fixed32,144,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin     float32  `protobuf:"fixed32,145,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax     float32  `protobuf:"fixed32,146,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99     float32  `protobuf:"fixed32,147,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt   float32  `protobuf:"fixed32,148,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	MResponseLengthSum   float32  `protobuf:"fixed32,149,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin   float32  `protobuf:"fixed32,150,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax   float32  `protobuf:"fixed32,151,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99   float32  `protobuf:"fixed32,152,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt      float32  `protobuf:"fixed32,153,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	MDocsScannedSum      float32  `protobuf:"fixed32,154,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin      float32  `protobuf:"fixed32,155,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax      float32  `protobuf:"fixed32,156,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99      float32  `protobuf:"fixed32,157,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket) Reset()         { *m = MetricsBucket{} }
func (m *MetricsBucket) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket) ProtoMessage()    {}
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_0e7704973af59548, []int{1}
}
func (m *MetricsBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket.Unmarshal(m, b)
}
func (m *MetricsBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket.Marshal(b, m, deterministic)
}
func (dst *MetricsBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket.Merge(dst, src)
}
func (m *MetricsBucket) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket.Size(m)
}
func (m *MetricsBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket proto.InternalMessageInfo

func (m *MetricsBucket) GetQueryid() string {
	if m != nil {
		return m.Queryid
	}
	return ""
}

func (m *MetricsBucket) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *MetricsBucket) GetDServer() string {
	if m != nil {
		return m.DServer
	}
	return ""
}

func (m *MetricsBucket) GetDDatabase() string {
	if m != nil {
		return m.DDatabase
	}
	return ""
}

func (m *MetricsBucket) GetDSchema() string {
	if m != nil {
		return m.DSchema
	}
	return ""
}

func (m *MetricsBucket) GetDUsername() string {
	if m != nil {
		return m.DUsername
	}
	return ""
}

func (m *MetricsBucket) GetDClientHost() string {
	if m != nil {
		return m.DClientHost
	}
	return ""
}

func (m *MetricsBucket) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsBucket) GetAgentUuid() string {
	if m != nil {
		return m.AgentUuid
	}
	return ""
}

func (m *MetricsBucket) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *MetricsBucket) GetPeriodLength() uint32 {
	if m != nil {
		return m.PeriodLength
	}
	return 0
}

func (m *MetricsBucket) GetMetricsSource() string {
	if m != nil {
		return m.MetricsSource
	}
	return ""
}

func (m *MetricsBucket) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *MetricsBucket) GetExampleFormat() ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return ExampleFormat_EXAMPLE_FORMAT_INVALID
}

func (m *MetricsBucket) GetIsTruncated() uint32 {
	if m != nil {
		return m.IsTruncated
	}
	return 0
}

func (m *MetricsBucket) GetExampleType() ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_INVALID
}

func (m *MetricsBucket) GetExampleMetrics() string {
	if m != nil {
		return m.ExampleMetrics
	}
	return ""
}

func (m *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if m != nil {
		return m.NumQueriesWithWarnings
	}
	return 0
}

func (m *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if m != nil {
		return m.NumQueriesWithErrors
	}
	return 0
}

func (m *MetricsBucket) GetErrors() map[uint64]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MetricsBucket) GetNumQueries() float32 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeCnt() float32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeCnt() float32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentCnt() float32 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentSum() float32 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMin() float32 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMax() float32 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentP99() float32 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedCnt() float32 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedSum() float32 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMin() float32 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMax() float32 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedP99() float32 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedCnt() float32 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedSum() float32 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMin() float32 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMax() float32 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedP99() float32 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadCnt() float32 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadSum() float32 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMin() float32 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMax() float32 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadP99() float32 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesCnt() float32 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesSum() float32 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMin() float32 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMax() float32 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesP99() float32 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsCnt() float32 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsSum() float32 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMin() float32 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMax() float32 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsP99() float32 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesCnt() float32 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesSum() float32 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMin() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMax() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesP99() float32 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctCnt() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctSum() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMin() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMax() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctP99() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthCnt() float32 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthSum() float32 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMin() float32 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMax() float32 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthP99() float32 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentCnt() float32 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentSum() float32 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMin() float32 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMax() float32 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentP99() float32 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesCnt() float32 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesSum() float32 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMin() float32 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMax() float32 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesP99() float32 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesCnt() float32 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesSum() float32 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMin() float32 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMax() float32 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesP99() float32 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesCnt() float32 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesSum() float32 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMin() float32 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMax() float32 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesP99() float32 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitCnt() float32 {
	if m != nil {
		return m.MQcHitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitSum() float32 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanCnt() float32 {
	if m != nil {
		return m.MFullScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanSum() float32 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinCnt() float32 {
	if m != nil {
		return m.MFullJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinSum() float32 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableCnt() float32 {
	if m != nil {
		return m.MTmpTableCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSum() float32 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskCnt() float32 {
	if m != nil {
		return m.MTmpTableOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskSum() float32 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortCnt() float32 {
	if m != nil {
		return m.MFilesortCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortSum() float32 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskCnt() float32 {
	if m != nil {
		return m.MFilesortOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskSum() float32 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinCnt() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinSum() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCnt() float32 {
	if m != nil {
		return m.MSelectRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeSum() float32 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckCnt() float32 {
	if m != nil {
		return m.MSelectRangeCheckCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckSum() float32 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeCnt() float32 {
	if m != nil {
		return m.MSortRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeSum() float32 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsCnt() float32 {
	if m != nil {
		return m.MSortRowsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsSum() float32 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanCnt() float32 {
	if m != nil {
		return m.MSortScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanSum() float32 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedSum() float32 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedSum() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedCnt() float32 {
	if m != nil {
		return m.MDocsReturnedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedSum() float32 {
	if m != nil {
		return m.MDocsReturnedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMin() float32 {
	if m != nil {
		return m.MDocsReturnedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMax() float32 {
	if m != nil {
		return m.MDocsReturnedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedP99() float32 {
	if m != nil {
		return m.MDocsReturnedP99
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthCnt() float32 {
	if m != nil {
		return m.MResponseLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthSum() float32 {
	if m != nil {
		return m.MResponseLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMin() float32 {
	if m != nil {
		return m.MResponseLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMax() float32 {
	if m != nil {
		return m.MResponseLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthP99() float32 {
	if m != nil {
		return m.MResponseLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedCnt() float32 {
	if m != nil {
		return m.MDocsScannedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedSum() float32 {
	if m != nil {
		return m.MDocsScannedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMin() float32 {
	if m != nil {
		return m.MDocsScannedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMax() float32 {
	if m != nil {
		return m.MDocsScannedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedP99() float32 {
	if m != nil {
		return m.MDocsScannedP99
	}
	return 0
}

type ApiMessage struct {
	SavedAmount          uint32   `protobuf:"varint,1,opt,name=saved_amount,json=savedAmount,proto3" json:"saved_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiMessage) Reset()         { *m = ApiMessage{} }
func (m *ApiMessage) String() string { return proto.CompactTextString(m) }
func (*ApiMessage) ProtoMessage()    {}
func (*ApiMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_0e7704973af59548, []int{2}
}
func (m *ApiMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiMessage.Unmarshal(m, b)
}
func (m *ApiMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiMessage.Marshal(b, m, deterministic)
}
func (dst *ApiMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiMessage.Merge(dst, src)
}
func (m *ApiMessage) XXX_Size() int {
	return xxx_messageInfo_ApiMessage.Size(m)
}
func (m *ApiMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ApiMessage proto.InternalMessageInfo

func (m *ApiMessage) GetSavedAmount() uint32 {
	if m != nil {
		return m.SavedAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*AgentMessage)(nil), "qan.AgentMessage")
	proto.RegisterType((*MetricsBucket)(nil), "qan.MetricsBucket")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.ErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "qan.MetricsBucket.LabelsEntry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.WarningsEntry")
	proto.RegisterType((*ApiMessage)(nil), "qan.ApiMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	// DataInterchange defines duplex communication between Query analytics API and Agent.
	DataInterchange(ctx context.Context, opts ...grpc.CallOption) (Agent_DataInterchangeClient, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) DataInterchange(ctx context.Context, opts ...grpc.CallOption) (Agent_DataInterchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Agent_serviceDesc.Streams[0], "/qan.Agent/DataInterchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentDataInterchangeClient{stream}
	return x, nil
}

type Agent_DataInterchangeClient interface {
	Send(*AgentMessage) error
	Recv() (*ApiMessage, error)
	grpc.ClientStream
}

type agentDataInterchangeClient struct {
	grpc.ClientStream
}

func (x *agentDataInterchangeClient) Send(m *AgentMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentDataInterchangeClient) Recv() (*ApiMessage, error) {
	m := new(ApiMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	// DataInterchange defines duplex communication between Query analytics API and Agent.
	DataInterchange(Agent_DataInterchangeServer) error
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_DataInterchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).DataInterchange(&agentDataInterchangeServer{stream})
}

type Agent_DataInterchangeServer interface {
	Send(*ApiMessage) error
	Recv() (*AgentMessage, error)
	grpc.ServerStream
}

type agentDataInterchangeServer struct {
	grpc.ServerStream
}

func (x *agentDataInterchangeServer) Send(m *ApiMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentDataInterchangeServer) Recv() (*AgentMessage, error) {
	m := new(AgentMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataInterchange",
			Handler:       _Agent_DataInterchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "qan/collector.proto",
}

func init() { proto.RegisterFile("qan/collector.proto", fileDescriptor_collector_0e7704973af59548) }

var fileDescriptor_collector_0e7704973af59548 = []byte{
	// 2224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x99, 0xf9, 0x7b, 0xd4, 0x36,
	0x1e, 0xc6, 0x9f, 0x21, 0x40, 0x41, 0x93, 0x21, 0x60, 0x2e, 0x91, 0x1e, 0x04, 0x5a, 0x4a, 0x76,
	0xdb, 0x02, 0x0d, 0x2d, 0xed, 0x50, 0xda, 0xdd, 0x84, 0x84, 0x92, 0x2e, 0x81, 0x30, 0x13, 0x96,
	0xdd, 0xee, 0xe1, 0x55, 0x6c, 0x65, 0xe2, 0x66, 0x6c, 0x4f, 0x2c, 0x9b, 0x38, 0xdd, 0xfb, 0xbe,
	0xaf, 0xee, 0x7d, 0xfd, 0xaf, 0xfb, 0xbc, 0xb2, 0x7c, 0xc9, 0x72, 0x9e, 0xa7, 0xbf, 0x65, 0xa4,
	0xcf, 0x47, 0x9a, 0xf7, 0x2b, 0xc5, 0xb2, 0xc7, 0xe4, 0xf4, 0x2e, 0x0b, 0xae, 0x3b, 0xe1, 0x78,
	0xcc, 0x9d, 0x38, 0x8c, 0xae, 0x4d, 0xa2, 0x30, 0x0e, 0xad, 0xa9, 0x5d, 0x16, 0xcc, 0xf6, 0xd0,
	0xb3, 0xcb, 0x82, 0xac, 0xed, 0xf2, 0x2a, 0x99, 0x5e, 0x1c, 0xf1, 0x20, 0x5e, 0xe3, 0x42, 0xb0,
	0x11, 0xb7, 0xfa, 0xe4, 0x84, 0xcf, 0xe3, 0xc8, 0x73, 0x84, 0xbd, 0x99, 0x38, 0x3b, 0x3c, 0xa6,
	0x9d, 0xb9, 0xa9, 0xf9, 0xee, 0x82, 0x75, 0x0d, 0xce, 0x5a, 0xd6, 0xb5, 0x24, 0x7b, 0x06, 0x3d,
	0xbf, 0xfa, 0xf1, 0xf2, 0x67, 0xb7, 0x49, 0xaf, 0x06, 0x58, 0x94, 0x3c, 0xb7, 0x9b, 0xf0, 0x68,
	0xdf, 0x73, 0x69, 0x67, 0xae, 0x33, 0x7f, 0x7c, 0x90, 0x7f, 0xb4, 0xe6, 0x48, 0x77, 0xcb, 0x0b,
	0x46, 0x3c, 0x9a, 0x44, 0x5e, 0x10, 0xd3, 0x43, 0xb2, 0xb7, 0xda, 0x64, 0x5d, 0x20, 0xc7, 0x5c,
	0x5b, 0xf0, 0xe8, 0x19, 0x8f, 0xe8, 0x54, 0x26, 0xbb, 0x43, 0xf9, 0xd1, 0x7a, 0x91, 0x10, 0xd7,
	0x76, 0x59, 0xcc, 0x36, 0x99, 0xe0, 0xf4, 0xb0, 0xec, 0x3c, 0xee, 0x2e, 0xab, 0x06, 0x65, 0x3a,
	0xdb, 0xdc, 0x67, 0xf4, 0x48, 0x6e, 0xca, 0x8f, 0x99, 0x99, 0x08, 0x1e, 0x05, 0xcc, 0xe7, 0xf4,
	0xa8, 0x32, 0x9f, 0xa8, 0x06, 0xeb, 0x32, 0xe9, 0xb9, 0xb6, 0x33, 0xf6, 0x78, 0x10, 0xdb, 0xdb,
	0xa1, 0x88, 0xe9, 0x73, 0xd9, 0xf7, 0x72, 0xef, 0xca, 0xb6, 0xfb, 0xa1, 0x88, 0xad, 0x5b, 0xe4,
	0xe8, 0x98, 0x6d, 0xf2, 0xb1, 0xa0, 0xc7, 0x64, 0x61, 0x5e, 0x6a, 0x16, 0xe6, 0xda, 0x03, 0x09,
	0xac, 0x04, 0x71, 0xb4, 0x3f, 0x50, 0x34, 0xa6, 0x66, 0x28, 0xb4, 0x9d, 0x24, 0x9e, 0x4b, 0x8f,
	0x67, 0x53, 0xcb, 0x96, 0x27, 0x89, 0xe7, 0x5a, 0x97, 0xc8, 0xf4, 0x84, 0x47, 0x5e, 0xe8, 0xda,
	0x22, 0x66, 0x51, 0x4c, 0xc9, 0x5c, 0x67, 0x7e, 0x6a, 0xd0, 0xcd, 0xda, 0x86, 0x68, 0xb2, 0x5e,
	0x26, 0x3d, 0x85, 0x8c, 0x79, 0x30, 0x8a, 0xb7, 0x69, 0x77, 0xae, 0x33, 0xdf, 0x1b, 0x28, 0xef,
	0x81, 0x6c, 0xb3, 0xae, 0x94, 0xeb, 0x27, 0xc2, 0x24, 0x72, 0x38, 0x9d, 0x96, 0x53, 0xe5, 0x6b,
	0x35, 0x94, 0x8d, 0x58, 0x19, 0x9e, 0x32, 0x7f, 0x32, 0xe6, 0xb4, 0x97, 0x95, 0x48, 0x7d, 0xc4,
	0x06, 0x50, 0x7f, 0xda, 0x5b, 0x61, 0xe4, 0xb3, 0x98, 0x9e, 0x98, 0xeb, 0xcc, 0x9f, 0x50, 0x1b,
	0x60, 0x25, 0xeb, 0xba, 0x27, 0x7b, 0x06, 0x3d, 0x5e, 0xfd, 0x88, 0x0c, 0x9e, 0xb0, 0xe3, 0x28,
	0x09, 0x1c, 0x16, 0x73, 0x97, 0xce, 0xc8, 0xef, 0xd7, 0xf5, 0xc4, 0x46, 0xde, 0x64, 0xdd, 0x24,
	0xd3, 0xf9, 0xe8, 0xf1, 0xfe, 0x84, 0xd3, 0x93, 0x72, 0xec, 0x93, 0xd5, 0xb1, 0x37, 0xf6, 0x27,
	0x7c, 0xd0, 0xe5, 0xe5, 0x07, 0xeb, 0x2a, 0x99, 0xc9, 0x25, 0x95, 0x82, 0x9e, 0x92, 0x5f, 0x3a,
	0xff, 0xa6, 0xaa, 0xfa, 0x56, 0x9f, 0x5c, 0x08, 0x12, 0xdf, 0xc6, 0x26, 0xf3, 0xb8, 0xb0, 0xf7,
	0xbc, 0x78, 0xdb, 0xde, 0x63, 0x51, 0xe0, 0x05, 0x23, 0x41, 0xad, 0xb9, 0xce, 0xfc, 0xa1, 0xc1,
	0xb9, 0x20, 0xf1, 0x1f, 0x67, 0xfd, 0x4f, 0xbd, 0x78, 0xfb, 0xa9, 0xea, 0xb5, 0xee, 0x90, 0x63,
	0x05, 0x79, 0x5a, 0x2e, 0xec, 0x9c, 0x61, 0x61, 0x73, 0x3c, 0x5b, 0xda, 0xc2, 0xb0, 0xde, 0x26,
	0xe7, 0x1b, 0x13, 0xf3, 0x28, 0x0a, 0x23, 0x41, 0xcf, 0xc8, 0x69, 0xcf, 0xd4, 0xa7, 0x5d, 0x91,
	0x7d, 0xd8, 0x4b, 0x8a, 0x3a, 0xdb, 0xba, 0x97, 0x32, 0x54, 0xed, 0xa5, 0x8c, 0xb6, 0x2e, 0x92,
	0x6e, 0x65, 0x3a, 0x7a, 0x4e, 0x4e, 0x41, 0xca, 0x29, 0xac, 0xab, 0xe4, 0x64, 0xd6, 0xbd, 0x6f,
	0xc7, 0x9e, 0xcf, 0x6d, 0x27, 0x88, 0xe9, 0x79, 0x49, 0xf5, 0x24, 0xb3, 0xbf, 0xe1, 0xf9, 0xfc,
	0x6e, 0x10, 0x37, 0x40, 0x91, 0xf8, 0x94, 0xea, 0xe0, 0x30, 0xf1, 0x1b, 0xa0, 0xef, 0x05, 0xf4,
	0x82, 0x0e, 0xae, 0x79, 0x41, 0x13, 0x64, 0x29, 0x9d, 0x6d, 0x80, 0x2c, 0x6d, 0x80, 0x93, 0x7e,
	0x9f, 0x3e, 0xaf, 0x83, 0xeb, 0xfd, 0xbe, 0x75, 0x85, 0xcc, 0xf8, 0xf6, 0x38, 0x74, 0x76, 0xca,
	0x2c, 0x2f, 0x48, 0x6e, 0xda, 0x7f, 0x10, 0x3a, 0x3b, 0x79, 0x14, 0x0d, 0x43, 0x92, 0x17, 0x35,
	0x0c, 0x41, 0x34, 0x0c, 0x39, 0x5e, 0xd2, 0x30, 0xc4, 0xd0, 0x31, 0x96, 0xd2, 0x8b, 0x3a, 0xc6,
	0x52, 0x1d, 0x43, 0x86, 0x39, 0x0d, 0x2b, 0x22, 0x44, 0xe1, 0x9e, 0xb0, 0x05, 0x2e, 0x01, 0x88,
	0x70, 0x49, 0x61, 0x83, 0x70, 0x4f, 0x0c, 0x79, 0x10, 0x17, 0x11, 0x4a, 0x0c, 0x11, 0x2e, 0x6b,
	0x58, 0x11, 0xa1, 0xc4, 0x10, 0xe1, 0x65, 0x0d, 0x2b, 0x22, 0x54, 0x30, 0x96, 0xd2, 0x57, 0x74,
	0x2c, 0x8f, 0x50, 0x62, 0x88, 0x70, 0x45, 0xc3, 0x10, 0xe1, 0x0d, 0x72, 0x5a, 0x61, 0xf8, 0xa7,
	0xf3, 0x02, 0xee, 0xca, 0x18, 0xaf, 0x4a, 0xf4, 0xa4, 0x44, 0x57, 0x54, 0x07, 0xa2, 0x18, 0x70,
	0xc4, 0xb9, 0x6a, 0xc0, 0x11, 0xc9, 0x80, 0x23, 0xd6, 0xbc, 0x01, 0x47, 0x34, 0x13, 0xce, 0x52,
	0xfa, 0x05, 0x13, 0xce, 0x52, 0x13, 0x8e, 0x98, 0x5f, 0x34, 0xe0, 0xf5, 0xa8, 0x6c, 0x6b, 0x8b,
	0x3b, 0xb1, 0x8a, 0xfa, 0x5a, 0x05, 0x5f, 0x54, 0x1d, 0xf5, 0xa8, 0x05, 0x8e, 0xa8, 0xaf, 0x1b,
	0xf0, 0x7a, 0xd4, 0x02, 0x47, 0xd4, 0x37, 0x0c, 0x78, 0x3d, 0x6a, 0x89, 0xb3, 0x94, 0x5e, 0x33,
	0xe1, 0xb5, 0xa8, 0x05, 0x8e, 0xa8, 0xd7, 0x0d, 0x78, 0x7d, 0x63, 0x46, 0x9c, 0x65, 0x31, 0x6f,
	0x54, 0x16, 0x7f, 0xc0, 0x99, 0x5b, 0xdf, 0x98, 0x12, 0x43, 0xbc, 0x37, 0x35, 0xac, 0xbe, 0x31,
	0x25, 0x86, 0x58, 0x0b, 0x1a, 0x56, 0xdf, 0x98, 0x19, 0xc6, 0x52, 0x7a, 0x53, 0xc7, 0x6a, 0x1b,
	0x53, 0x62, 0x88, 0xf1, 0x96, 0x86, 0x21, 0xc2, 0x6b, 0xc4, 0xf2, 0x6d, 0x9f, 0x47, 0x23, 0x6e,
	0x4f, 0x98, 0x10, 0x5c, 0xc8, 0x14, 0x6f, 0x4b, 0x72, 0xc6, 0x5f, 0x43, 0xc7, 0xba, 0x6c, 0x47,
	0x90, 0x26, 0x8c, 0x2c, 0xb7, 0x9a, 0x30, 0xe2, 0x34, 0x61, 0x24, 0x7a, 0xa7, 0x09, 0x23, 0x94,
	0x01, 0x66, 0x29, 0x7d, 0xd7, 0x00, 0xb3, 0xd4, 0x00, 0x23, 0x5d, 0xbf, 0x09, 0x23, 0xe0, 0x75,
	0x72, 0xd6, 0xb7, 0xbd, 0x20, 0x08, 0xdd, 0x4d, 0xdb, 0x0b, 0xed, 0xc8, 0x0e, 0x27, 0x59, 0xc6,
	0xdb, 0x6a, 0x51, 0x57, 0x65, 0xdf, 0x6a, 0x38, 0x78, 0x34, 0x91, 0x21, 0x8d, 0x02, 0x72, 0xbe,
	0x67, 0x10, 0x10, 0xd4, 0x28, 0x20, 0xeb, 0x1d, 0x83, 0x80, 0xb0, 0x66, 0x81, 0xa5, 0xf4, 0x7d,
	0x93, 0xc0, 0x52, 0xb3, 0x80, 0xcc, 0x1f, 0x18, 0x04, 0x84, 0xbe, 0x49, 0xce, 0xd7, 0x85, 0xcd,
	0xfd, 0x58, 0x2d, 0xed, 0x97, 0xa4, 0x62, 0x95, 0xca, 0x12, 0xba, 0x10, 0xbc, 0x45, 0x42, 0xf4,
	0x2f, 0x1b, 0x25, 0x84, 0x6f, 0x91, 0x10, 0x7f, 0xd1, 0x28, 0xa1, 0x00, 0x6d, 0x12, 0x4b, 0xe9,
	0x92, 0x59, 0x62, 0x69, 0x9b, 0x84, 0x32, 0xdc, 0x35, 0x4a, 0x28, 0xc4, 0x9b, 0xe4, 0x5c, 0x5d,
	0xda, 0x63, 0x5e, 0x76, 0x82, 0x2c, 0x4b, 0xe7, 0x54, 0xe9, 0x3c, 0x65, 0x9e, 0x3c, 0x46, 0xcc,
	0x0a, 0xaa, 0xb0, 0x62, 0x52, 0x50, 0x04, 0xb3, 0x82, 0x1a, 0xdc, 0x33, 0x29, 0x28, 0x41, 0x8b,
	0xc2, 0x52, 0xfa, 0xa1, 0x51, 0x61, 0x69, 0x8b, 0x82, 0xfc, 0xf7, 0x4d, 0x0a, 0xe2, 0xf7, 0xc9,
	0x6c, 0xa1, 0x44, 0xdc, 0xc9, 0xce, 0xda, 0xa2, 0x04, 0xab, 0x52, 0x3b, 0xab, 0xb4, 0x01, 0x77,
	0x70, 0xe8, 0xe6, 0x65, 0x68, 0x57, 0x51, 0x8a, 0x8f, 0xda, 0x54, 0x94, 0xa3, 0x5d, 0x45, 0x49,
	0xbe, 0xd2, 0xa6, 0xa2, 0x2c, 0x07, 0xa8, 0x2c, 0xa5, 0x0f, 0x5a, 0x55, 0x96, 0x1e, 0xa0, 0xa2,
	0x44, 0x6b, 0x6d, 0x2a, 0xca, 0xf4, 0x56, 0x65, 0x6b, 0xed, 0x26, 0x3c, 0xe1, 0x65, 0x8d, 0x1e,
	0x4a, 0xef, 0xb4, 0xf2, 0x1e, 0xa3, 0x33, 0xaf, 0x50, 0x8b, 0x85, 0xf2, 0x3c, 0x32, 0x5b, 0x28,
	0x4e, 0x8b, 0x85, 0xca, 0xac, 0x9b, 0x2d, 0xd4, 0xa5, 0xcd, 0x62, 0x29, 0x7d, 0xdc, 0x62, 0xb1,
	0xb4, 0xcd, 0x42, 0x3d, 0x06, 0x66, 0x0b, 0xd5, 0xb8, 0x43, 0x9e, 0x2f, 0xac, 0x09, 0x1b, 0x71,
	0x61, 0xbb, 0x9e, 0x88, 0xbd, 0xc0, 0xc9, 0x2a, 0x32, 0x94, 0xe6, 0x79, 0x65, 0xae, 0x03, 0x58,
	0x56, 0xfd, 0xa8, 0xca, 0x01, 0x36, 0x2a, 0xb3, 0xd1, 0x6e, 0xa3, 0x3a, 0x07, 0xd8, 0xa8, 0xd0,
	0x93, 0x76, 0x1b, 0x55, 0x3a, 0xc8, 0x66, 0x29, 0xfd, 0xea, 0x01, 0x36, 0x4b, 0x0f, 0xb2, 0x51,
	0xb1, 0xa7, 0xed, 0x76, 0x71, 0x90, 0x66, 0x37, 0xe4, 0xd9, 0x03, 0xa6, 0x2c, 0xd6, 0xd7, 0xd4,
	0xa1, 0x24, 0x6f, 0xc9, 0xb3, 0x87, 0xcc, 0xe2, 0x20, 0xad, 0xc1, 0xa8, 0xcd, 0xd7, 0x9b, 0x70,
	0x71, 0x90, 0xd6, 0x60, 0x94, 0xe2, 0xe3, 0x26, 0x5c, 0x1c, 0xa4, 0x75, 0x98, 0xa5, 0xf4, 0x1b,
	0x06, 0x38, 0x3f, 0x48, 0x6b, 0x30, 0x82, 0x7e, 0xb3, 0x09, 0x23, 0xa0, 0x7c, 0xe2, 0x50, 0x47,
	0x42, 0x7e, 0x1b, 0xfe, 0x2d, 0xf5, 0xc4, 0x91, 0x1d, 0x07, 0xea, 0x3e, 0x5c, 0x07, 0x11, 0xed,
	0xdb, 0x3a, 0x58, 0x3c, 0x15, 0x55, 0x40, 0xc4, 0xb2, 0x75, 0xb0, 0x78, 0x2a, 0xaa, 0x82, 0x2c,
	0xa5, 0xdf, 0x69, 0x80, 0xf9, 0x53, 0x51, 0x05, 0x44, 0x1c, 0xa6, 0x83, 0x45, 0x98, 0xd8, 0x9f,
	0xd8, 0x31, 0xdb, 0x1c, 0xab, 0x93, 0x71, 0x53, 0x81, 0x1b, 0xfe, 0x64, 0x43, 0xb6, 0x16, 0x61,
	0x2a, 0x20, 0xc2, 0x38, 0x3a, 0x58, 0x84, 0xa9, 0x80, 0x08, 0xe3, 0xea, 0x60, 0x11, 0xa6, 0x0a,
	0xb2, 0x94, 0xf2, 0x06, 0x98, 0x87, 0xa9, 0x80, 0x08, 0xb3, 0xa5, 0x83, 0x08, 0x73, 0x03, 0xb7,
	0x07, 0x00, 0x5d, 0x4f, 0xec, 0x54, 0x13, 0x8d, 0xd4, 0xb9, 0xb0, 0xe1, 0x4f, 0x96, 0x3d, 0xb1,
	0x53, 0xa6, 0x32, 0x1a, 0x88, 0xb6, 0x6d, 0x32, 0x10, 0xcf, 0x68, 0x20, 0xa3, 0x67, 0x32, 0x90,
	0xd3, 0x6c, 0xb0, 0x94, 0x7e, 0x62, 0x34, 0x58, 0x6a, 0x36, 0x90, 0x7a, 0xc7, 0x64, 0xd4, 0x92,
	0x4b, 0xd8, 0x16, 0xde, 0xa7, 0x2a, 0xf9, 0xb8, 0x34, 0x24, 0x3d, 0x44, 0x4f, 0x2d, 0x79, 0xd5,
	0x40, 0x72, 0xdf, 0x64, 0xd4, 0x92, 0x57, 0x0d, 0x24, 0x0f, 0x4c, 0x46, 0x2d, 0x79, 0xcd, 0x60,
	0x29, 0x0d, 0x8d, 0x46, 0x35, 0x79, 0xd5, 0x40, 0xf2, 0x89, 0xc9, 0x40, 0xf2, 0x8b, 0x64, 0xda,
	0xb7, 0x77, 0x1d, 0x7b, 0x5b, 0x9d, 0x53, 0xbb, 0x12, 0x3c, 0xee, 0x3f, 0x76, 0xee, 0x67, 0xa7,
	0x53, 0x15, 0x40, 0xbe, 0xa8, 0x0a, 0x14, 0x8f, 0x1b, 0x5b, 0xc9, 0x78, 0x6c, 0x0b, 0x87, 0x05,
	0x72, 0x10, 0xa1, 0x1e, 0x10, 0xee, 0x25, 0xe3, 0xf1, 0xd0, 0x61, 0x41, 0xf1, 0xf0, 0x52, 0x62,
	0x18, 0x2a, 0xd6, 0xb0, 0xfa, 0x68, 0x9f, 0x84, 0x5e, 0x36, 0x5a, 0x52, 0xc1, 0x3e, 0x0a, 0x3d,
	0x6d, 0x34, 0x89, 0x61, 0xb4, 0x67, 0x1a, 0x56, 0x8c, 0x56, 0xd6, 0x03, 0xa3, 0xed, 0x29, 0x2c,
	0xaf, 0x44, 0x31, 0x5a, 0xa5, 0x6c, 0x89, 0x4f, 0x53, 0x0d, 0x2b, 0xee, 0x51, 0x4b, 0x2c, 0x0c,
	0xb2, 0x0d, 0x86, 0x51, 0xf7, 0xd5, 0x9d, 0x63, 0x8e, 0x3f, 0x0a, 0xb0, 0xc1, 0x8a, 0xbb, 0xe1,
	0xa6, 0x84, 0x39, 0x3e, 0x35, 0x4a, 0x98, 0xe9, 0x15, 0x72, 0xc2, 0xb7, 0xb7, 0xbc, 0x31, 0x17,
	0x61, 0x94, 0xad, 0xcb, 0x77, 0xf3, 0x74, 0xaa, 0x11, 0x43, 0xd7, 0x29, 0x8c, 0xf8, 0x3d, 0x8d,
	0xc2, 0x58, 0x0b, 0xb8, 0xdd, 0x2b, 0xa8, 0xea, 0x97, 0xfe, 0xbe, 0x9a, 0x3f, 0xa7, 0xcb, 0x2f,
	0x6d, 0x76, 0x30, 0xc3, 0x0f, 0x8c, 0x0e, 0xe6, 0x79, 0x9f, 0xbc, 0xe0, 0xdb, 0x82, 0x8f, 0xb9,
	0x13, 0x67, 0x2b, 0x13, 0xb1, 0x60, 0xc4, 0xcb, 0x65, 0xfc, 0xa1, 0x3a, 0xf7, 0x86, 0x12, 0xc1,
	0x2a, 0x0d, 0x00, 0xe4, 0x2b, 0xfa, 0xc1, 0x01, 0x3a, 0x26, 0xfe, 0x51, 0xa7, 0xdd, 0xc7, 0xf4,
	0xaf, 0xe3, 0x0c, 0x52, 0x7e, 0xa6, 0x62, 0xd2, 0x1f, 0x77, 0xd4, 0x21, 0x94, 0x59, 0xd2, 0xc0,
	0x6c, 0x4d, 0x1a, 0x73, 0xfc, 0xc4, 0x40, 0x63, 0xec, 0x77, 0x08, 0xd5, 0xc7, 0xde, 0xe6, 0x4e,
	0x56, 0xc4, 0x9f, 0x66, 0xce, 0x99, 0xda, 0x0c, 0xe8, 0xc5, 0x34, 0x6d, 0x22, 0x26, 0xfb, 0x59,
	0x9b, 0x88, 0x19, 0xe7, 0x71, 0xcd, 0x96, 0xc5, 0x2f, 0xb3, 0xfc, 0xbc, 0xa3, 0x2e, 0xda, 0xc3,
	0x30, 0x2a, 0x93, 0xe8, 0x24, 0x86, 0xfe, 0x45, 0x83, 0xc4, 0x98, 0xaf, 0x62, 0x97, 0x67, 0x24,
	0x1e, 0xe7, 0x31, 0xe4, 0x2f, 0x3b, 0x6a, 0xc3, 0x48, 0x30, 0xdc, 0x93, 0x97, 0x36, 0x8d, 0xc3,
	0x80, 0xbf, 0xd2, 0xb9, 0xfa, 0x78, 0xc5, 0x3f, 0xfe, 0xaf, 0xab, 0x5c, 0xfe, 0x9f, 0xaf, 0x71,
	0x18, 0xef, 0x37, 0x3a, 0x57, 0xfc, 0x24, 0x13, 0x84, 0xb6, 0x17, 0xb8, 0x3c, 0xb5, 0x13, 0xa1,
	0x7e, 0xf0, 0xf9, 0x6d, 0xbe, 0x28, 0x0f, 0xc3, 0x55, 0xf4, 0x3c, 0x11, 0x95, 0x1f, 0x7c, 0xea,
	0x38, 0x86, 0xfe, 0x9d, 0x01, 0xc7, 0xe8, 0xb7, 0xb0, 0x14, 0x41, 0x68, 0x8f, 0xc2, 0xd0, 0xd5,
	0xa7, 0xf8, 0x7d, 0x47, 0xdd, 0xc5, 0x3e, 0x0c, 0x3f, 0x0c, 0x43, 0xb7, 0x36, 0x4d, 0x9b, 0x87,
	0xb9, 0xfe, 0xd0, 0xe2, 0x61, 0xbe, 0x6b, 0xf8, 0x7a, 0x6e, 0xe8, 0x08, 0x3b, 0xe2, 0x71, 0x12,
	0xe5, 0xbf, 0xd4, 0xfd, 0xb1, 0xa3, 0x1e, 0xb5, 0x97, 0x43, 0x47, 0x0c, 0x54, 0x0f, 0xe6, 0x31,
	0xf0, 0x98, 0xe2, 0x4f, 0x26, 0xbe, 0x65, 0x7c, 0x1c, 0x26, 0x7f, 0x36, 0xf1, 0x38, 0x4c, 0x4c,
	0x3c, 0x4b, 0xe9, 0x67, 0x46, 0x9e, 0xa5, 0x26, 0x1e, 0x07, 0xc9, 0x5f, 0x4c, 0x3c, 0x0e, 0x92,
	0x05, 0x1c, 0x3d, 0x11, 0x17, 0x93, 0x30, 0x10, 0xbc, 0x7a, 0xeb, 0xfa, 0xd7, 0x8e, 0xba, 0x64,
	0x0c, 0x54, 0x67, 0x79, 0xfb, 0x6a, 0x74, 0x90, 0xfa, 0x6f, 0x66, 0x27, 0xbb, 0x9c, 0x19, 0x1c,
	0x24, 0xff, 0xbb, 0xd9, 0x41, 0x76, 0xb3, 0xc3, 0x52, 0xfa, 0x8f, 0x16, 0x87, 0xa5, 0x66, 0x07,
	0x15, 0xf8, 0xa7, 0xd9, 0x41, 0x0d, 0xe4, 0x55, 0x45, 0xd6, 0x0c, 0x3b, 0x3d, 0x5f, 0xf2, 0x7f,
	0xe5, 0x3b, 0x12, 0x25, 0x1b, 0x66, 0x1d, 0xc5, 0x35, 0xa8, 0x46, 0x23, 0xfa, 0xbf, 0x0d, 0x74,
	0x71, 0x7d, 0xab, 0xd1, 0x08, 0xfd, 0x1f, 0x03, 0x8d, 0xc4, 0x06, 0x9a, 0xa5, 0xf4, 0xbf, 0x26,
	0x9a, 0xa5, 0x06, 0x1a, 0x41, 0xff, 0x67, 0xa0, 0xd7, 0xfb, 0xfd, 0xd9, 0x3e, 0xe9, 0x56, 0x5e,
	0xad, 0x59, 0x27, 0xc9, 0xd4, 0x0e, 0xdf, 0x57, 0xaf, 0x16, 0xf1, 0xa7, 0x75, 0x86, 0x1c, 0x79,
	0xc6, 0xc6, 0x09, 0x57, 0x2f, 0x14, 0xb3, 0x0f, 0xb7, 0x0f, 0xbd, 0xdb, 0x99, 0x7d, 0x8f, 0xf4,
	0x6a, 0x2f, 0x6f, 0xaa, 0xf2, 0x61, 0x83, 0x7c, 0xb8, 0x2a, 0xf7, 0x49, 0xb7, 0xf2, 0x1a, 0xe6,
	0xf3, 0xa8, 0x97, 0xaf, 0x13, 0xb2, 0x38, 0xf1, 0xf2, 0xb7, 0xab, 0x97, 0xc8, 0xb4, 0x60, 0xcf,
	0xb8, 0x6b, 0x33, 0x3f, 0x4c, 0x82, 0x58, 0x0e, 0xd1, 0x1b, 0x74, 0x65, 0xdb, 0xa2, 0x6c, 0x5a,
	0x58, 0x22, 0x47, 0xe4, 0x0b, 0x59, 0xab, 0x4f, 0x66, 0x96, 0x59, 0xcc, 0x56, 0x83, 0x98, 0x47,
	0xce, 0x36, 0x2e, 0xa5, 0xd6, 0x29, 0xf9, 0x7e, 0xa8, 0xfa, 0xbe, 0x76, 0x76, 0x26, 0x6b, 0x2a,
	0xa6, 0x98, 0xef, 0xdc, 0xe8, 0x2c, 0x1d, 0xf9, 0x78, 0x6a, 0x97, 0x05, 0x9b, 0x47, 0xe5, 0x2b,
	0xde, 0x9b, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x70, 0x61, 0xc4, 0x4d, 0x0d, 0x1e, 0x00, 0x00,
}
