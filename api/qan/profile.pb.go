// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qan/profile.proto

package qan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ReportRequest defines filtering of metrics report for db server or other dimentions.
type ReportRequest struct {
	PeriodStartFrom      string                 `protobuf:"bytes,1,opt,name=period_start_from,json=periodStartFrom,proto3" json:"period_start_from,omitempty"`
	PeriodStartTo        string                 `protobuf:"bytes,2,opt,name=period_start_to,json=periodStartTo,proto3" json:"period_start_to,omitempty"`
	Keyword              string                 `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	FirstSeen            bool                   `protobuf:"varint,4,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	GroupBy              string                 `protobuf:"bytes,5,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Labels               []*ReportMapFieldEntry `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	IncludeOnlyFields    []string               `protobuf:"bytes,7,rep,name=include_only_fields,json=includeOnlyFields,proto3" json:"include_only_fields,omitempty"`
	OrderBy              string                 `protobuf:"bytes,8,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Offset               uint32                 `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                uint32                 `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReportRequest) Reset()         { *m = ReportRequest{} }
func (m *ReportRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()    {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_901fd0b7173a7eb7, []int{0}
}
func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRequest.Unmarshal(m, b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
}
func (dst *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(dst, src)
}
func (m *ReportRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRequest.Size(m)
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

func (m *ReportRequest) GetPeriodStartFrom() string {
	if m != nil {
		return m.PeriodStartFrom
	}
	return ""
}

func (m *ReportRequest) GetPeriodStartTo() string {
	if m != nil {
		return m.PeriodStartTo
	}
	return ""
}

func (m *ReportRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ReportRequest) GetFirstSeen() bool {
	if m != nil {
		return m.FirstSeen
	}
	return false
}

func (m *ReportRequest) GetGroupBy() string {
	if m != nil {
		return m.GroupBy
	}
	return ""
}

func (m *ReportRequest) GetLabels() []*ReportMapFieldEntry {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ReportRequest) GetIncludeOnlyFields() []string {
	if m != nil {
		return m.IncludeOnlyFields
	}
	return nil
}

func (m *ReportRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ReportRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReportRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ReportMapFieldEntry allows to pass labels/dimentions in form like {"d_server": ["db1", "db2"...]}.
type ReportMapFieldEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportMapFieldEntry) Reset()         { *m = ReportMapFieldEntry{} }
func (m *ReportMapFieldEntry) String() string { return proto.CompactTextString(m) }
func (*ReportMapFieldEntry) ProtoMessage()    {}
func (*ReportMapFieldEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_901fd0b7173a7eb7, []int{1}
}
func (m *ReportMapFieldEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportMapFieldEntry.Unmarshal(m, b)
}
func (m *ReportMapFieldEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportMapFieldEntry.Marshal(b, m, deterministic)
}
func (dst *ReportMapFieldEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportMapFieldEntry.Merge(dst, src)
}
func (m *ReportMapFieldEntry) XXX_Size() int {
	return xxx_messageInfo_ReportMapFieldEntry.Size(m)
}
func (m *ReportMapFieldEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportMapFieldEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ReportMapFieldEntry proto.InternalMessageInfo

func (m *ReportMapFieldEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReportMapFieldEntry) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// ReportReply is list of reports per quieryids, hosts etc.
type ReportReply struct {
	Rows                 []*ProfileRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReportReply) Reset()         { *m = ReportReply{} }
func (m *ReportReply) String() string { return proto.CompactTextString(m) }
func (*ReportReply) ProtoMessage()    {}
func (*ReportReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_901fd0b7173a7eb7, []int{2}
}
func (m *ReportReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportReply.Unmarshal(m, b)
}
func (m *ReportReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportReply.Marshal(b, m, deterministic)
}
func (dst *ReportReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportReply.Merge(dst, src)
}
func (m *ReportReply) XXX_Size() int {
	return xxx_messageInfo_ReportReply.Size(m)
}
func (m *ReportReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReportReply proto.InternalMessageInfo

func (m *ReportReply) GetRows() []*ProfileRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

// ProfileRow define metrics for selected dimention.
type ProfileRow struct {
	Rank                 uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Percentage           float32  `protobuf:"fixed32,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Digest               string   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestText           string   `protobuf:"bytes,4,opt,name=digest_text,json=digestText,proto3" json:"digest_text,omitempty"`
	DServers             string   `protobuf:"bytes,5,opt,name=d_servers,json=dServers,proto3" json:"d_servers,omitempty"`
	DDatabases           string   `protobuf:"bytes,6,opt,name=d_databases,json=dDatabases,proto3" json:"d_databases,omitempty"`
	DSchemas             string   `protobuf:"bytes,7,opt,name=d_schemas,json=dSchemas,proto3" json:"d_schemas,omitempty"`
	DUsernames           string   `protobuf:"bytes,8,opt,name=d_usernames,json=dUsernames,proto3" json:"d_usernames,omitempty"`
	DClientHosts         string   `protobuf:"bytes,9,opt,name=d_client_hosts,json=dClientHosts,proto3" json:"d_client_hosts,omitempty"`
	FirstSeen            string   `protobuf:"bytes,10,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	Qps                  float32  `protobuf:"fixed32,11,opt,name=qps,proto3" json:"qps,omitempty"`
	Load                 float32  `protobuf:"fixed32,12,opt,name=load,proto3" json:"load,omitempty"`
	Stats                *Stats   `protobuf:"bytes,13,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileRow) Reset()         { *m = ProfileRow{} }
func (m *ProfileRow) String() string { return proto.CompactTextString(m) }
func (*ProfileRow) ProtoMessage()    {}
func (*ProfileRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_901fd0b7173a7eb7, []int{3}
}
func (m *ProfileRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileRow.Unmarshal(m, b)
}
func (m *ProfileRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileRow.Marshal(b, m, deterministic)
}
func (dst *ProfileRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRow.Merge(dst, src)
}
func (m *ProfileRow) XXX_Size() int {
	return xxx_messageInfo_ProfileRow.Size(m)
}
func (m *ProfileRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRow.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRow proto.InternalMessageInfo

func (m *ProfileRow) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *ProfileRow) GetPercentage() float32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *ProfileRow) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ProfileRow) GetDigestText() string {
	if m != nil {
		return m.DigestText
	}
	return ""
}

func (m *ProfileRow) GetDServers() string {
	if m != nil {
		return m.DServers
	}
	return ""
}

func (m *ProfileRow) GetDDatabases() string {
	if m != nil {
		return m.DDatabases
	}
	return ""
}

func (m *ProfileRow) GetDSchemas() string {
	if m != nil {
		return m.DSchemas
	}
	return ""
}

func (m *ProfileRow) GetDUsernames() string {
	if m != nil {
		return m.DUsernames
	}
	return ""
}

func (m *ProfileRow) GetDClientHosts() string {
	if m != nil {
		return m.DClientHosts
	}
	return ""
}

func (m *ProfileRow) GetFirstSeen() string {
	if m != nil {
		return m.FirstSeen
	}
	return ""
}

func (m *ProfileRow) GetQps() float32 {
	if m != nil {
		return m.Qps
	}
	return 0
}

func (m *ProfileRow) GetLoad() float32 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *ProfileRow) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Stats metrics.
type Stats struct {
	NumQueries           float32  `protobuf:"fixed32,1,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	MQueryTimeSum        float32  `protobuf:"fixed32,2,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	MQueryTimeMin        float32  `protobuf:"fixed32,3,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	MQueryTimeMax        float32  `protobuf:"fixed32,4,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	MQueryTimeP99        float32  `protobuf:"fixed32,5,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_901fd0b7173a7eb7, []int{4}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (dst *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(dst, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetNumQueries() float32 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *Stats) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *Stats) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *Stats) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *Stats) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func init() {
	proto.RegisterType((*ReportRequest)(nil), "qan.ReportRequest")
	proto.RegisterType((*ReportMapFieldEntry)(nil), "qan.ReportMapFieldEntry")
	proto.RegisterType((*ReportReply)(nil), "qan.ReportReply")
	proto.RegisterType((*ProfileRow)(nil), "qan.ProfileRow")
	proto.RegisterType((*Stats)(nil), "qan.Stats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileClient interface {
	// GetReport returns list of metrics group by queryid or other dimentions.
	GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/qan.Profile/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
type ProfileServer interface {
	// GetReport returns list of metrics group by queryid or other dimentions.
	GetReport(context.Context, *ReportRequest) (*ReportReply, error)
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.Profile/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReport",
			Handler:    _Profile_GetReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qan/profile.proto",
}

func init() { proto.RegisterFile("qan/profile.proto", fileDescriptor_profile_901fd0b7173a7eb7) }

var fileDescriptor_profile_901fd0b7173a7eb7 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x4d, 0x73, 0xeb, 0x34,
	0x14, 0x1d, 0x27, 0x4d, 0x1a, 0xdf, 0x34, 0x34, 0x51, 0x99, 0x8e, 0x28, 0x05, 0x32, 0x81, 0x81,
	0x4c, 0x17, 0x09, 0x84, 0x55, 0x98, 0x61, 0x53, 0xa0, 0xb0, 0xe9, 0xb4, 0x38, 0x65, 0xd3, 0x8d,
	0x47, 0x89, 0x6f, 0x52, 0x4d, 0x6d, 0xc9, 0x91, 0xe4, 0x36, 0xde, 0xf6, 0x2f, 0xf0, 0xb7, 0xd8,
	0xf1, 0x0f, 0xde, 0xbc, 0x1f, 0xf2, 0x46, 0x92, 0xf3, 0x5e, 0xf2, 0xfa, 0x76, 0xf7, 0x9c, 0x7b,
	0x8e, 0xf5, 0x71, 0xe4, 0x0b, 0xbd, 0x35, 0x13, 0xe3, 0x5c, 0xc9, 0x25, 0x4f, 0x71, 0x94, 0x2b,
	0x69, 0x24, 0xa9, 0xaf, 0x99, 0x38, 0x3b, 0x5f, 0x49, 0xb9, 0x4a, 0x71, 0xcc, 0x72, 0x3e, 0x66,
	0x42, 0x48, 0xc3, 0x0c, 0x97, 0x42, 0x7b, 0xc9, 0xe0, 0x4d, 0x0d, 0x3a, 0x11, 0xe6, 0x52, 0x99,
	0x08, 0xd7, 0x05, 0x6a, 0x43, 0x2e, 0xa0, 0x97, 0xa3, 0xe2, 0x32, 0x89, 0xb5, 0x61, 0xca, 0xc4,
	0x4b, 0x25, 0x33, 0x1a, 0xf4, 0x83, 0x61, 0x18, 0x1d, 0xfb, 0xc6, 0xcc, 0xf2, 0x57, 0x4a, 0x66,
	0xe4, 0x7b, 0x38, 0xde, 0xd3, 0x1a, 0x49, 0x6b, 0x4e, 0xd9, 0xd9, 0x51, 0xde, 0x49, 0x42, 0xe1,
	0xf0, 0x11, 0xcb, 0x67, 0xa9, 0x12, 0x5a, 0x77, 0xfd, 0x2d, 0x24, 0x5f, 0x01, 0x2c, 0xb9, 0xd2,
	0x26, 0xd6, 0x88, 0x82, 0x1e, 0xf4, 0x83, 0x61, 0x2b, 0x0a, 0x1d, 0x33, 0x43, 0x14, 0xe4, 0x0b,
	0x68, 0xad, 0x94, 0x2c, 0xf2, 0x78, 0x5e, 0xd2, 0x86, 0x77, 0x3a, 0x7c, 0x59, 0x92, 0x1f, 0xa1,
	0x99, 0xb2, 0x39, 0xa6, 0x9a, 0x36, 0xfb, 0xf5, 0x61, 0x7b, 0x42, 0x47, 0x6b, 0x26, 0x46, 0xfe,
	0x2c, 0xd7, 0x2c, 0xbf, 0xe2, 0x98, 0x26, 0x7f, 0x08, 0xa3, 0xca, 0xa8, 0xd2, 0x91, 0x11, 0x9c,
	0x70, 0xb1, 0x48, 0x8b, 0x04, 0x63, 0x29, 0xd2, 0x32, 0x5e, 0x5a, 0x89, 0xa6, 0x87, 0xfd, 0xfa,
	0x30, 0x8c, 0x7a, 0x55, 0xeb, 0x46, 0xa4, 0xa5, 0xf3, 0x6a, 0xbb, 0xb8, 0x54, 0x09, 0x2a, 0xbb,
	0x78, 0xcb, 0x2f, 0xee, 0xf0, 0x65, 0x49, 0x4e, 0xa1, 0x29, 0x97, 0x4b, 0x8d, 0x86, 0x86, 0xfd,
	0x60, 0xd8, 0x89, 0x2a, 0x44, 0x3e, 0x87, 0x46, 0xca, 0x33, 0x6e, 0x28, 0x38, 0xda, 0x83, 0xc1,
	0xaf, 0x70, 0xf2, 0x89, 0x7d, 0x91, 0x2e, 0xd4, 0x1f, 0xb1, 0xac, 0xee, 0xd6, 0x96, 0xd6, 0xfe,
	0xc4, 0xd2, 0x02, 0x69, 0xcd, 0xed, 0xc9, 0x83, 0xc1, 0x04, 0xda, 0xdb, 0x88, 0xf2, 0xb4, 0x24,
	0xdf, 0xc2, 0x81, 0x92, 0xcf, 0x9a, 0x06, 0xee, 0xd8, 0xc7, 0xee, 0xd8, 0xb7, 0x3e, 0xf7, 0x48,
	0x3e, 0x47, 0xae, 0x39, 0x78, 0xa9, 0x03, 0x7c, 0x20, 0x09, 0x81, 0x03, 0xc5, 0xc4, 0xa3, 0x5b,
	0xab, 0x13, 0xb9, 0x9a, 0x7c, 0x0d, 0x90, 0xa3, 0x5a, 0xa0, 0x30, 0x6c, 0x85, 0x2e, 0xb7, 0x5a,
	0xb4, 0xc3, 0xd8, 0x33, 0x26, 0x7c, 0x85, 0xda, 0x54, 0x99, 0x55, 0x88, 0x7c, 0x03, 0x6d, 0x5f,
	0xc5, 0x06, 0x37, 0xc6, 0x65, 0x16, 0x46, 0xe0, 0xa9, 0x3b, 0xdc, 0x18, 0xf2, 0x25, 0x84, 0x49,
	0xac, 0x51, 0x3d, 0xa1, 0xd2, 0x55, 0x6a, 0xad, 0x64, 0xe6, 0xb1, 0x73, 0xc7, 0x09, 0x33, 0x6c,
	0xce, 0x34, 0xda, 0xec, 0xbc, 0xfb, 0xf7, 0x2d, 0x53, 0xb9, 0x17, 0x0f, 0x98, 0x31, 0x9b, 0x4d,
	0xe5, 0xf6, 0xd8, 0xbb, 0x0b, 0x8d, 0x4a, 0xb0, 0x0c, 0x75, 0x95, 0x0a, 0x24, 0xff, 0x6c, 0x19,
	0xf2, 0x1d, 0x7c, 0x96, 0xc4, 0x8b, 0x94, 0xa3, 0x30, 0xf1, 0x83, 0xd4, 0x46, 0xbb, 0x80, 0xc2,
	0xe8, 0x28, 0xf9, 0xcd, 0x91, 0x7f, 0x59, 0xee, 0xa3, 0x57, 0x07, 0x4e, 0xb1, 0xf3, 0xea, 0xba,
	0x50, 0x5f, 0xe7, 0x9a, 0xb6, 0xdd, 0x95, 0xd8, 0xd2, 0xde, 0x5f, 0x2a, 0x59, 0x42, 0x8f, 0x1c,
	0xe5, 0x6a, 0xd2, 0x87, 0x86, 0x36, 0xcc, 0x68, 0xda, 0xe9, 0x07, 0xc3, 0xf6, 0x04, 0x5c, 0x10,
	0x33, 0xcb, 0x44, 0xbe, 0x31, 0xf8, 0x2f, 0x80, 0x86, 0x23, 0xec, 0xbe, 0x45, 0x91, 0xc5, 0xeb,
	0x02, 0x15, 0x47, 0xed, 0x62, 0xa8, 0x45, 0x20, 0x8a, 0xec, 0x6f, 0xcf, 0x90, 0x1f, 0xa0, 0xeb,
	0xdb, 0x65, 0x6c, 0x78, 0x86, 0xb1, 0x2e, 0xb2, 0x2a, 0x92, 0x8e, 0xd3, 0x94, 0x77, 0x3c, 0xc3,
	0x59, 0x91, 0xbd, 0x12, 0x66, 0x5c, 0xb8, 0x7c, 0xf6, 0x84, 0xd7, 0x5c, 0xbc, 0x16, 0xb2, 0x8d,
	0xcb, 0x6a, 0x5f, 0xc8, 0x36, 0xaf, 0x84, 0xf9, 0x74, 0xea, 0x52, 0xdb, 0x13, 0xde, 0x4e, 0xa7,
	0x93, 0x7b, 0x38, 0xac, 0x9e, 0x14, 0xb9, 0x81, 0xf0, 0x4f, 0x34, 0xfe, 0x55, 0x12, 0xb2, 0xf3,
	0xe7, 0x55, 0x53, 0xe4, 0xac, 0xbb, 0xc7, 0xe5, 0x69, 0x39, 0x38, 0x7f, 0xf9, 0xff, 0xed, 0xbf,
	0xb5, 0xd3, 0x41, 0x6f, 0xfc, 0xf4, 0xd3, 0xd8, 0xce, 0xaa, 0xf7, 0x1f, 0xf8, 0x25, 0xb8, 0xb8,
	0x6c, 0xdc, 0xdb, 0x61, 0x35, 0x6f, 0xba, 0xa9, 0xf4, 0xf3, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x93, 0x28, 0xac, 0x1d, 0xcd, 0x04, 0x00, 0x00,
}
