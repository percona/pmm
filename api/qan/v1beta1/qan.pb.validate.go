// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: qan/v1beta1/qan.proto

package qanv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointMultiError, or nil if none found.
func (m *Point) ValidateAll() error {
	return m.validate(true)
}

func (m *Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Point

	// no validation rules for TimeFrame

	// no validation rules for Timestamp

	// no validation rules for Load

	// no validation rules for NumQueriesPerSec

	// no validation rules for NumQueriesWithErrorsPerSec

	// no validation rules for NumQueriesWithWarningsPerSec

	// no validation rules for MQueryTimeSumPerSec

	// no validation rules for MLockTimeSumPerSec

	// no validation rules for MRowsSentSumPerSec

	// no validation rules for MRowsExaminedSumPerSec

	// no validation rules for MRowsAffectedSumPerSec

	// no validation rules for MRowsReadSumPerSec

	// no validation rules for MMergePassesSumPerSec

	// no validation rules for MInnodbIoROpsSumPerSec

	// no validation rules for MInnodbIoRBytesSumPerSec

	// no validation rules for MInnodbIoRWaitSumPerSec

	// no validation rules for MInnodbRecLockWaitSumPerSec

	// no validation rules for MInnodbQueueWaitSumPerSec

	// no validation rules for MInnodbPagesDistinctSumPerSec

	// no validation rules for MQueryLengthSumPerSec

	// no validation rules for MBytesSentSumPerSec

	// no validation rules for MTmpTablesSumPerSec

	// no validation rules for MTmpDiskTablesSumPerSec

	// no validation rules for MTmpTableSizesSumPerSec

	// no validation rules for MQcHitSumPerSec

	// no validation rules for MFullScanSumPerSec

	// no validation rules for MFullJoinSumPerSec

	// no validation rules for MTmpTableSumPerSec

	// no validation rules for MTmpTableOnDiskSumPerSec

	// no validation rules for MFilesortSumPerSec

	// no validation rules for MFilesortOnDiskSumPerSec

	// no validation rules for MSelectFullRangeJoinSumPerSec

	// no validation rules for MSelectRangeSumPerSec

	// no validation rules for MSelectRangeCheckSumPerSec

	// no validation rules for MSortRangeSumPerSec

	// no validation rules for MSortRowsSumPerSec

	// no validation rules for MSortScanSumPerSec

	// no validation rules for MNoIndexUsedSumPerSec

	// no validation rules for MNoGoodIndexUsedSumPerSec

	// no validation rules for MDocsReturnedSumPerSec

	// no validation rules for MResponseLengthSumPerSec

	// no validation rules for MDocsScannedSumPerSec

	// no validation rules for MSharedBlksHitSumPerSec

	// no validation rules for MSharedBlksReadSumPerSec

	// no validation rules for MSharedBlksDirtiedSumPerSec

	// no validation rules for MSharedBlksWrittenSumPerSec

	// no validation rules for MLocalBlksHitSumPerSec

	// no validation rules for MLocalBlksReadSumPerSec

	// no validation rules for MLocalBlksDirtiedSumPerSec

	// no validation rules for MLocalBlksWrittenSumPerSec

	// no validation rules for MTempBlksReadSumPerSec

	// no validation rules for MTempBlksWrittenSumPerSec

	// no validation rules for MBlkReadTimeSumPerSec

	// no validation rules for MBlkWriteTimeSumPerSec

	// no validation rules for MCpuUserTimeSumPerSec

	// no validation rules for MCpuSysTimeSumPerSec

	// no validation rules for MPlansCallsSumPerSec

	// no validation rules for MWalRecordsSumPerSec

	// no validation rules for MWalFpiSumPerSec

	// no validation rules for MWalBytesSumPerSec

	// no validation rules for MPlanTimeSumPerSec

	if len(errors) > 0 {
		return PointMultiError(errors)
	}

	return nil
}

// PointMultiError is an error wrapping multiple validation errors returned by
// Point.ValidateAll() if the designated constraints aren't met.
type PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointMultiError) AllErrors() []error { return m }

// PointValidationError is the validation error returned by Point.Validate if
// the designated constraints aren't met.
type PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointValidationError) ErrorName() string { return "PointValidationError" }

// Error satisfies the builtin error interface
func (e PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointValidationError{}

// Validate checks the field values on MapFieldEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapFieldEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapFieldEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapFieldEntryMultiError, or
// nil if none found.
func (m *MapFieldEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *MapFieldEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return MapFieldEntryMultiError(errors)
	}

	return nil
}

// MapFieldEntryMultiError is an error wrapping multiple validation errors
// returned by MapFieldEntry.ValidateAll() if the designated constraints
// aren't met.
type MapFieldEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapFieldEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapFieldEntryMultiError) AllErrors() []error { return m }

// MapFieldEntryValidationError is the validation error returned by
// MapFieldEntry.Validate if the designated constraints aren't met.
type MapFieldEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapFieldEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapFieldEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapFieldEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapFieldEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapFieldEntryValidationError) ErrorName() string { return "MapFieldEntryValidationError" }

// Error satisfies the builtin error interface
func (e MapFieldEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapFieldEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapFieldEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapFieldEntryValidationError{}
