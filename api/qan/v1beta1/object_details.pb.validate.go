// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: qan/v1beta1/object_details.proto

package qanv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMetricsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricsRequestMultiError, or nil if none found.
func (m *GetMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetricsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetricsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricsRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetricsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetricsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricsRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetricsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetricsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetricsRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Totals

	if len(errors) > 0 {
		return GetMetricsRequestMultiError(errors)
	}

	return nil
}

// GetMetricsRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetricsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricsRequestMultiError) AllErrors() []error { return m }

// GetMetricsRequestValidationError is the validation error returned by
// GetMetricsRequest.Validate if the designated constraints aren't met.
type GetMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricsRequestValidationError) ErrorName() string {
	return "GetMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricsRequestValidationError{}

// Validate checks the field values on GetMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricsResponseMultiError, or nil if none found.
func (m *GetMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMetrics()))
		i := 0
		for key := range m.GetMetrics() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetrics()[key]
			_ = val

			// no validation rules for Metrics[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetMetricsResponseValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetMetricsResponseValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for TextMetrics

	for idx, item := range m.GetSparkline() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Sparkline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Sparkline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetricsResponseValidationError{
					field:  fmt.Sprintf("Sparkline[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetTotals()))
		i := 0
		for key := range m.GetTotals() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTotals()[key]
			_ = val

			// no validation rules for Totals[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetMetricsResponseValidationError{
							field:  fmt.Sprintf("Totals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetMetricsResponseValidationError{
							field:  fmt.Sprintf("Totals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Totals[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Fingerprint

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetricsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetricsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricsResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetricsResponseMultiError(errors)
	}

	return nil
}

// GetMetricsResponseMultiError is an error wrapping multiple validation errors
// returned by GetMetricsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricsResponseMultiError) AllErrors() []error { return m }

// GetMetricsResponseValidationError is the validation error returned by
// GetMetricsResponse.Validate if the designated constraints aren't met.
type GetMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricsResponseValidationError) ErrorName() string {
	return "GetMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricsResponseValidationError{}

// Validate checks the field values on MetricValues with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricValuesMultiError, or
// nil if none found.
func (m *MetricValues) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	// no validation rules for Cnt

	// no validation rules for Sum

	// no validation rules for Min

	// no validation rules for Max

	// no validation rules for Avg

	// no validation rules for P99

	// no validation rules for PercentOfTotal

	if len(errors) > 0 {
		return MetricValuesMultiError(errors)
	}

	return nil
}

// MetricValuesMultiError is an error wrapping multiple validation errors
// returned by MetricValues.ValidateAll() if the designated constraints aren't met.
type MetricValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricValuesMultiError) AllErrors() []error { return m }

// MetricValuesValidationError is the validation error returned by
// MetricValues.Validate if the designated constraints aren't met.
type MetricValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValuesValidationError) ErrorName() string { return "MetricValuesValidationError" }

// Error satisfies the builtin error interface
func (e MetricValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValuesValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}

	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on GetQueryExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryExampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryExampleRequestMultiError, or nil if none found.
func (m *GetQueryExampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryExampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQueryExampleRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQueryExampleRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQueryExampleRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQueryExampleRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQueryExampleRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQueryExampleRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQueryExampleRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQueryExampleRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQueryExampleRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetQueryExampleRequestMultiError(errors)
	}

	return nil
}

// GetQueryExampleRequestMultiError is an error wrapping multiple validation
// errors returned by GetQueryExampleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQueryExampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryExampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryExampleRequestMultiError) AllErrors() []error { return m }

// GetQueryExampleRequestValidationError is the validation error returned by
// GetQueryExampleRequest.Validate if the designated constraints aren't met.
type GetQueryExampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryExampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryExampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryExampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryExampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryExampleRequestValidationError) ErrorName() string {
	return "GetQueryExampleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryExampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryExampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryExampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryExampleRequestValidationError{}

// Validate checks the field values on GetQueryExampleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryExampleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryExampleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryExampleResponseMultiError, or nil if none found.
func (m *GetQueryExampleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryExampleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQueryExamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQueryExampleResponseValidationError{
						field:  fmt.Sprintf("QueryExamples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQueryExampleResponseValidationError{
						field:  fmt.Sprintf("QueryExamples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQueryExampleResponseValidationError{
					field:  fmt.Sprintf("QueryExamples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQueryExampleResponseMultiError(errors)
	}

	return nil
}

// GetQueryExampleResponseMultiError is an error wrapping multiple validation
// errors returned by GetQueryExampleResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQueryExampleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryExampleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryExampleResponseMultiError) AllErrors() []error { return m }

// GetQueryExampleResponseValidationError is the validation error returned by
// GetQueryExampleResponse.Validate if the designated constraints aren't met.
type GetQueryExampleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryExampleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryExampleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryExampleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryExampleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryExampleResponseValidationError) ErrorName() string {
	return "GetQueryExampleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryExampleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryExampleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryExampleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryExampleResponseValidationError{}

// Validate checks the field values on QueryExample with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExample) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExample with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExampleMultiError, or
// nil if none found.
func (m *QueryExample) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExample) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Example

	// no validation rules for ExampleType

	// no validation rules for IsTruncated

	// no validation rules for PlaceholdersCount

	// no validation rules for ExplainFingerprint

	// no validation rules for QueryId

	// no validation rules for ExampleMetrics

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for Schema

	if len(errors) > 0 {
		return QueryExampleMultiError(errors)
	}

	return nil
}

// QueryExampleMultiError is an error wrapping multiple validation errors
// returned by QueryExample.ValidateAll() if the designated constraints aren't met.
type QueryExampleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExampleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExampleMultiError) AllErrors() []error { return m }

// QueryExampleValidationError is the validation error returned by
// QueryExample.Validate if the designated constraints aren't met.
type QueryExampleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExampleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExampleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExampleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExampleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExampleValidationError) ErrorName() string { return "QueryExampleValidationError" }

// Error satisfies the builtin error interface
func (e QueryExampleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExampleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExampleValidationError{}

// Validate checks the field values on GetLabelsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLabelsRequestMultiError, or nil if none found.
func (m *GetLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLabelsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLabelsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLabelsRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLabelsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLabelsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLabelsRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	if len(errors) > 0 {
		return GetLabelsRequestMultiError(errors)
	}

	return nil
}

// GetLabelsRequestMultiError is an error wrapping multiple validation errors
// returned by GetLabelsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLabelsRequestMultiError) AllErrors() []error { return m }

// GetLabelsRequestValidationError is the validation error returned by
// GetLabelsRequest.Validate if the designated constraints aren't met.
type GetLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelsRequestValidationError) ErrorName() string { return "GetLabelsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelsRequestValidationError{}

// Validate checks the field values on GetLabelsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLabelsResponseMultiError, or nil if none found.
func (m *GetLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			// no validation rules for Labels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetLabelsResponseValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetLabelsResponseValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetLabelsResponseMultiError(errors)
	}

	return nil
}

// GetLabelsResponseMultiError is an error wrapping multiple validation errors
// returned by GetLabelsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLabelsResponseMultiError) AllErrors() []error { return m }

// GetLabelsResponseValidationError is the validation error returned by
// GetLabelsResponse.Validate if the designated constraints aren't met.
type GetLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelsResponseValidationError) ErrorName() string {
	return "GetLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelsResponseValidationError{}

// Validate checks the field values on ListLabelValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLabelValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabelValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLabelValuesMultiError, or nil if none found.
func (m *ListLabelValues) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabelValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLabelValuesMultiError(errors)
	}

	return nil
}

// ListLabelValuesMultiError is an error wrapping multiple validation errors
// returned by ListLabelValues.ValidateAll() if the designated constraints
// aren't met.
type ListLabelValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabelValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabelValuesMultiError) AllErrors() []error { return m }

// ListLabelValuesValidationError is the validation error returned by
// ListLabelValues.Validate if the designated constraints aren't met.
type ListLabelValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabelValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabelValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabelValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabelValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabelValuesValidationError) ErrorName() string { return "ListLabelValuesValidationError" }

// Error satisfies the builtin error interface
func (e ListLabelValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabelValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabelValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabelValuesValidationError{}

// Validate checks the field values on GetQueryPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryPlanRequestMultiError, or nil if none found.
func (m *GetQueryPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Queryid

	if len(errors) > 0 {
		return GetQueryPlanRequestMultiError(errors)
	}

	return nil
}

// GetQueryPlanRequestMultiError is an error wrapping multiple validation
// errors returned by GetQueryPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQueryPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryPlanRequestMultiError) AllErrors() []error { return m }

// GetQueryPlanRequestValidationError is the validation error returned by
// GetQueryPlanRequest.Validate if the designated constraints aren't met.
type GetQueryPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryPlanRequestValidationError) ErrorName() string {
	return "GetQueryPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryPlanRequestValidationError{}

// Validate checks the field values on GetQueryPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryPlanResponseMultiError, or nil if none found.
func (m *GetQueryPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Planid

	// no validation rules for QueryPlan

	if len(errors) > 0 {
		return GetQueryPlanResponseMultiError(errors)
	}

	return nil
}

// GetQueryPlanResponseMultiError is an error wrapping multiple validation
// errors returned by GetQueryPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQueryPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryPlanResponseMultiError) AllErrors() []error { return m }

// GetQueryPlanResponseValidationError is the validation error returned by
// GetQueryPlanResponse.Validate if the designated constraints aren't met.
type GetQueryPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryPlanResponseValidationError) ErrorName() string {
	return "GetQueryPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryPlanResponseValidationError{}

// Validate checks the field values on GetHistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistogramRequestMultiError, or nil if none found.
func (m *GetHistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHistogramRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHistogramRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistogramRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHistogramRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHistogramRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistogramRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHistogramRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHistogramRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHistogramRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Queryid

	if len(errors) > 0 {
		return GetHistogramRequestMultiError(errors)
	}

	return nil
}

// GetHistogramRequestMultiError is an error wrapping multiple validation
// errors returned by GetHistogramRequest.ValidateAll() if the designated
// constraints aren't met.
type GetHistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistogramRequestMultiError) AllErrors() []error { return m }

// GetHistogramRequestValidationError is the validation error returned by
// GetHistogramRequest.Validate if the designated constraints aren't met.
type GetHistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistogramRequestValidationError) ErrorName() string {
	return "GetHistogramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistogramRequestValidationError{}

// Validate checks the field values on GetHistogramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHistogramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistogramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistogramResponseMultiError, or nil if none found.
func (m *GetHistogramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistogramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistogramItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHistogramResponseValidationError{
						field:  fmt.Sprintf("HistogramItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHistogramResponseValidationError{
						field:  fmt.Sprintf("HistogramItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHistogramResponseValidationError{
					field:  fmt.Sprintf("HistogramItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetHistogramResponseMultiError(errors)
	}

	return nil
}

// GetHistogramResponseMultiError is an error wrapping multiple validation
// errors returned by GetHistogramResponse.ValidateAll() if the designated
// constraints aren't met.
type GetHistogramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistogramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistogramResponseMultiError) AllErrors() []error { return m }

// GetHistogramResponseValidationError is the validation error returned by
// GetHistogramResponse.Validate if the designated constraints aren't met.
type GetHistogramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistogramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistogramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistogramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistogramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistogramResponseValidationError) ErrorName() string {
	return "GetHistogramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistogramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistogramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistogramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistogramResponseValidationError{}

// Validate checks the field values on HistogramItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistogramItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistogramItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistogramItemMultiError, or
// nil if none found.
func (m *HistogramItem) ValidateAll() error {
	return m.validate(true)
}

func (m *HistogramItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Range

	// no validation rules for Frequency

	if len(errors) > 0 {
		return HistogramItemMultiError(errors)
	}

	return nil
}

// HistogramItemMultiError is an error wrapping multiple validation errors
// returned by HistogramItem.ValidateAll() if the designated constraints
// aren't met.
type HistogramItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistogramItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistogramItemMultiError) AllErrors() []error { return m }

// HistogramItemValidationError is the validation error returned by
// HistogramItem.Validate if the designated constraints aren't met.
type HistogramItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistogramItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistogramItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistogramItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistogramItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistogramItemValidationError) ErrorName() string { return "HistogramItemValidationError" }

// Error satisfies the builtin error interface
func (e HistogramItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistogramItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistogramItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistogramItemValidationError{}

// Validate checks the field values on QueryExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExistsRequestMultiError, or nil if none found.
func (m *QueryExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Serviceid

	// no validation rules for Query

	if len(errors) > 0 {
		return QueryExistsRequestMultiError(errors)
	}

	return nil
}

// QueryExistsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryExistsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExistsRequestMultiError) AllErrors() []error { return m }

// QueryExistsRequestValidationError is the validation error returned by
// QueryExistsRequest.Validate if the designated constraints aren't met.
type QueryExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExistsRequestValidationError) ErrorName() string {
	return "QueryExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExistsRequestValidationError{}

// Validate checks the field values on QueryExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExistsResponseMultiError, or nil if none found.
func (m *QueryExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return QueryExistsResponseMultiError(errors)
	}

	return nil
}

// QueryExistsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExistsResponseMultiError) AllErrors() []error { return m }

// QueryExistsResponseValidationError is the validation error returned by
// QueryExistsResponse.Validate if the designated constraints aren't met.
type QueryExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExistsResponseValidationError) ErrorName() string {
	return "QueryExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExistsResponseValidationError{}

// Validate checks the field values on SchemaByQueryIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SchemaByQueryIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaByQueryIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SchemaByQueryIDRequestMultiError, or nil if none found.
func (m *SchemaByQueryIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaByQueryIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for QueryId

	if len(errors) > 0 {
		return SchemaByQueryIDRequestMultiError(errors)
	}

	return nil
}

// SchemaByQueryIDRequestMultiError is an error wrapping multiple validation
// errors returned by SchemaByQueryIDRequest.ValidateAll() if the designated
// constraints aren't met.
type SchemaByQueryIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaByQueryIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaByQueryIDRequestMultiError) AllErrors() []error { return m }

// SchemaByQueryIDRequestValidationError is the validation error returned by
// SchemaByQueryIDRequest.Validate if the designated constraints aren't met.
type SchemaByQueryIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaByQueryIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaByQueryIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaByQueryIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaByQueryIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaByQueryIDRequestValidationError) ErrorName() string {
	return "SchemaByQueryIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaByQueryIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaByQueryIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaByQueryIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaByQueryIDRequestValidationError{}

// Validate checks the field values on SchemaByQueryIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SchemaByQueryIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaByQueryIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SchemaByQueryIDResponseMultiError, or nil if none found.
func (m *SchemaByQueryIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaByQueryIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	if len(errors) > 0 {
		return SchemaByQueryIDResponseMultiError(errors)
	}

	return nil
}

// SchemaByQueryIDResponseMultiError is an error wrapping multiple validation
// errors returned by SchemaByQueryIDResponse.ValidateAll() if the designated
// constraints aren't met.
type SchemaByQueryIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaByQueryIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaByQueryIDResponseMultiError) AllErrors() []error { return m }

// SchemaByQueryIDResponseValidationError is the validation error returned by
// SchemaByQueryIDResponse.Validate if the designated constraints aren't met.
type SchemaByQueryIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaByQueryIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaByQueryIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaByQueryIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaByQueryIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaByQueryIDResponseValidationError) ErrorName() string {
	return "SchemaByQueryIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaByQueryIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaByQueryIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaByQueryIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaByQueryIDResponseValidationError{}

// Validate checks the field values on ExplainFingerprintByQueryIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExplainFingerprintByQueryIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainFingerprintByQueryIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExplainFingerprintByQueryIDRequestMultiError, or nil if none found.
func (m *ExplainFingerprintByQueryIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainFingerprintByQueryIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Serviceid

	// no validation rules for QueryId

	if len(errors) > 0 {
		return ExplainFingerprintByQueryIDRequestMultiError(errors)
	}

	return nil
}

// ExplainFingerprintByQueryIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExplainFingerprintByQueryIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainFingerprintByQueryIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainFingerprintByQueryIDRequestMultiError) AllErrors() []error { return m }

// ExplainFingerprintByQueryIDRequestValidationError is the validation error
// returned by ExplainFingerprintByQueryIDRequest.Validate if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainFingerprintByQueryIDRequestValidationError) ErrorName() string {
	return "ExplainFingerprintByQueryIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainFingerprintByQueryIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainFingerprintByQueryIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainFingerprintByQueryIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainFingerprintByQueryIDRequestValidationError{}

// Validate checks the field values on ExplainFingerprintByQueryIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExplainFingerprintByQueryIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainFingerprintByQueryIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExplainFingerprintByQueryIDResponseMultiError, or nil if none found.
func (m *ExplainFingerprintByQueryIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainFingerprintByQueryIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExplainFingerprint

	// no validation rules for PlaceholdersCount

	if len(errors) > 0 {
		return ExplainFingerprintByQueryIDResponseMultiError(errors)
	}

	return nil
}

// ExplainFingerprintByQueryIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExplainFingerprintByQueryIDResponse.ValidateAll() if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainFingerprintByQueryIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainFingerprintByQueryIDResponseMultiError) AllErrors() []error { return m }

// ExplainFingerprintByQueryIDResponseValidationError is the validation error
// returned by ExplainFingerprintByQueryIDResponse.Validate if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainFingerprintByQueryIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainFingerprintByQueryIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainFingerprintByQueryIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainFingerprintByQueryIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainFingerprintByQueryIDResponseValidationError) ErrorName() string {
	return "ExplainFingerprintByQueryIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainFingerprintByQueryIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainFingerprintByQueryIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainFingerprintByQueryIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainFingerprintByQueryIDResponseValidationError{}

// Validate checks the field values on GetSelectedQueryMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSelectedQueryMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelectedQueryMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSelectedQueryMetadataResponseMultiError, or nil if none found.
func (m *GetSelectedQueryMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelectedQueryMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Database

	// no validation rules for Schema

	// no validation rules for Username

	// no validation rules for ReplicationSet

	// no validation rules for Cluster

	// no validation rules for ServiceType

	// no validation rules for ServiceId

	// no validation rules for Environment

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for NodeType

	if len(errors) > 0 {
		return GetSelectedQueryMetadataResponseMultiError(errors)
	}

	return nil
}

// GetSelectedQueryMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetSelectedQueryMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSelectedQueryMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelectedQueryMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelectedQueryMetadataResponseMultiError) AllErrors() []error { return m }

// GetSelectedQueryMetadataResponseValidationError is the validation error
// returned by GetSelectedQueryMetadataResponse.Validate if the designated
// constraints aren't met.
type GetSelectedQueryMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelectedQueryMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelectedQueryMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelectedQueryMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelectedQueryMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelectedQueryMetadataResponseValidationError) ErrorName() string {
	return "GetSelectedQueryMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelectedQueryMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelectedQueryMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelectedQueryMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelectedQueryMetadataResponseValidationError{}
