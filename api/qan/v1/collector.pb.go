// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: qan/v1/collector.proto

package qanv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1 "github.com/percona/pmm/api/inventory/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetricsBucket []*MetricsBucket       `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectRequest) Reset() {
	*x = CollectRequest{}
	mi := &file_qan_v1_collector_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequest) ProtoMessage() {}

func (x *CollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qan_v1_collector_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequest.ProtoReflect.Descriptor instead.
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return file_qan_v1_collector_proto_rawDescGZIP(), []int{0}
}

func (x *CollectRequest) GetMetricsBucket() []*MetricsBucket {
	if x != nil {
		return x.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by pmm-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// contains fingerprint prepared by sql parser, which can be different than fingerprint.
	ExplainFingerprint string `protobuf:"bytes,2,opt,name=explain_fingerprint,json=explainFingerprint,proto3" json:"explain_fingerprint,omitempty"`
	// ammount of variables in query.
	PlaceholdersCount uint32 `protobuf:"varint,3,opt,name=placeholders_count,json=placeholdersCount,proto3" json:"placeholders_count,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,4,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Service Name (can be several Services on one Node).
	ServiceName string `protobuf:"bytes,10,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// MongoDB or PostgreSQL database.
	// Several databases can't be combined in a single declarative query.
	Database string `protobuf:"bytes,11,opt,name=database,proto3" json:"database,omitempty"`
	// MySQL database or PostgreSQL schema.
	// Several schemas can be combined in a single declarative query.
	Schema string `protobuf:"bytes,12,opt,name=schema,proto3" json:"schema,omitempty"`
	// Tables or Collections list.
	Tables []string `protobuf:"bytes,13,rep,name=tables,proto3" json:"tables,omitempty"`
	// client user name.
	Username string `protobuf:"bytes,14,opt,name=username,proto3" json:"username,omitempty"`
	// client IP or hostname.
	ClientHost string `protobuf:"bytes,15,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	// Node identifier
	NodeId string `protobuf:"bytes,20,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name
	NodeName string `protobuf:"bytes,21,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node type
	NodeType string `protobuf:"bytes,22,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	// Machine identifier
	MachineId string `protobuf:"bytes,23,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier
	ContainerId string `protobuf:"bytes,24,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name
	ContainerName string `protobuf:"bytes,25,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model
	NodeModel string `protobuf:"bytes,26,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Region name
	Region string `protobuf:"bytes,27,opt,name=region,proto3" json:"region,omitempty"`
	// Availability zone
	Az string `protobuf:"bytes,28,opt,name=az,proto3" json:"az,omitempty"`
	// Service identifier
	ServiceId string `protobuf:"bytes,29,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Type of service
	ServiceType string `protobuf:"bytes,30,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Environment name
	Environment string `protobuf:"bytes,31,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name
	Cluster string `protobuf:"bytes,32,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of replication set
	ReplicationSet string `protobuf:"bytes,33,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Identifier of agent that collect and send metrics.
	AgentId string `protobuf:"bytes,34,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Metrics source.
	AgentType v1.AgentType `protobuf:"varint,35,opt,name=agent_type,json=agentType,proto3,enum=inventory.v1.AgentType" json:"agent_type,omitempty"`
	// Custom labels names:values.
	Labels map[string]string `protobuf:"bytes,36,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,40,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,41,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// One of query example from set found in bucket.
	Example string `protobuf:"bytes,42,opt,name=example,proto3" json:"example,omitempty"`
	// Indicates if the query example is truncated.
	IsTruncated bool        `protobuf:"varint,43,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType ExampleType `protobuf:"varint,44,opt,name=example_type,json=exampleType,proto3,enum=qan.v1.ExampleType" json:"example_type,omitempty"`
	// Metrics of query example in JSON format.
	ExampleMetrics string `protobuf:"bytes,45,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,50,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// List of warnings: {code: count}.
	Warnings map[uint64]uint64 `protobuf:"bytes,51,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,52,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,53,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Amount queries in this bucket.
	NumQueries float32 `protobuf:"fixed32,54,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	// How many times query_time was found.
	MQueryTimeCnt float32 `protobuf:"fixed32,55,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSum float32 `protobuf:"fixed32,56,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	// Smallest value of query_time in bucket.
	MQueryTimeMin float32 `protobuf:"fixed32,57,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	// Biggest value of query_time in bucket.
	MQueryTimeMax float32 `protobuf:"fixed32,58,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	// 99 percentile of value of query_time in bucket.
	MQueryTimeP99 float32 `protobuf:"fixed32,59,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MLockTimeCnt  float32 `protobuf:"fixed32,60,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSum float32 `protobuf:"fixed32,61,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin float32 `protobuf:"fixed32,62,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax float32 `protobuf:"fixed32,63,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99 float32 `protobuf:"fixed32,64,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt float32 `protobuf:"fixed32,65,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSum     float32 `protobuf:"fixed32,66,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin     float32 `protobuf:"fixed32,67,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax     float32 `protobuf:"fixed32,68,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99     float32 `protobuf:"fixed32,69,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt float32 `protobuf:"fixed32,70,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSum float32 `protobuf:"fixed32,71,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin float32 `protobuf:"fixed32,72,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax float32 `protobuf:"fixed32,73,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99 float32 `protobuf:"fixed32,74,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt float32 `protobuf:"fixed32,75,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSum float32 `protobuf:"fixed32,76,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin float32 `protobuf:"fixed32,77,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax float32 `protobuf:"fixed32,78,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99 float32 `protobuf:"fixed32,79,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt     float32 `protobuf:"fixed32,80,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	// The number of rows read from tables.
	MRowsReadSum    float32 `protobuf:"fixed32,81,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin    float32 `protobuf:"fixed32,82,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax    float32 `protobuf:"fixed32,83,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99    float32 `protobuf:"fixed32,84,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt float32 `protobuf:"fixed32,85,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSum  float32 `protobuf:"fixed32,86,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin  float32 `protobuf:"fixed32,87,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax  float32 `protobuf:"fixed32,88,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99  float32 `protobuf:"fixed32,89,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt float32 `protobuf:"fixed32,90,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSum   float32 `protobuf:"fixed32,91,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin   float32 `protobuf:"fixed32,92,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax   float32 `protobuf:"fixed32,93,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99   float32 `protobuf:"fixed32,94,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt float32 `protobuf:"fixed32,95,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSum float32 `protobuf:"fixed32,96,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin float32 `protobuf:"fixed32,97,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax float32 `protobuf:"fixed32,98,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99 float32 `protobuf:"fixed32,99,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt  float32 `protobuf:"fixed32,100,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSum     float32 `protobuf:"fixed32,101,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin     float32 `protobuf:"fixed32,102,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax     float32 `protobuf:"fixed32,103,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99     float32 `protobuf:"fixed32,104,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt float32 `protobuf:"fixed32,105,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSum float32 `protobuf:"fixed32,106,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin float32 `protobuf:"fixed32,107,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax float32 `protobuf:"fixed32,108,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99 float32 `protobuf:"fixed32,109,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt   float32 `protobuf:"fixed32,110,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSum     float32 `protobuf:"fixed32,111,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32 `protobuf:"fixed32,112,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32 `protobuf:"fixed32,113,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32 `protobuf:"fixed32,114,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32 `protobuf:"fixed32,115,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSum float32 `protobuf:"fixed32,116,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32 `protobuf:"fixed32,117,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32 `protobuf:"fixed32,118,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32 `protobuf:"fixed32,119,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32 `protobuf:"fixed32,120,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	// Shows how long the query is.
	MQueryLengthSum float32 `protobuf:"fixed32,121,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin float32 `protobuf:"fixed32,122,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax float32 `protobuf:"fixed32,123,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99 float32 `protobuf:"fixed32,124,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt   float32 `protobuf:"fixed32,125,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSum float32 `protobuf:"fixed32,126,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin float32 `protobuf:"fixed32,127,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax float32 `protobuf:"fixed32,128,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99 float32 `protobuf:"fixed32,129,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt float32 `protobuf:"fixed32,130,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSum     float32 `protobuf:"fixed32,131,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin     float32 `protobuf:"fixed32,132,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax     float32 `protobuf:"fixed32,133,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99     float32 `protobuf:"fixed32,134,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt float32 `protobuf:"fixed32,135,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSum float32 `protobuf:"fixed32,136,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin float32 `protobuf:"fixed32,137,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax float32 `protobuf:"fixed32,138,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99 float32 `protobuf:"fixed32,139,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt float32 `protobuf:"fixed32,140,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSum float32 `protobuf:"fixed32,141,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin float32 `protobuf:"fixed32,142,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax float32 `protobuf:"fixed32,143,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99 float32 `protobuf:"fixed32,144,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	MQcHitCnt         float32 `protobuf:"fixed32,150,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	// Query Cache hits.
	MQcHitSum    float32 `protobuf:"fixed32,151,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt float32 `protobuf:"fixed32,152,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	// The query performed a full table scan.
	MFullScanSum float32 `protobuf:"fixed32,153,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt float32 `protobuf:"fixed32,154,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSum float32 `protobuf:"fixed32,155,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt float32 `protobuf:"fixed32,156,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSum       float32 `protobuf:"fixed32,157,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt float32 `protobuf:"fixed32,158,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSum float32 `protobuf:"fixed32,159,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt       float32 `protobuf:"fixed32,160,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	// The query used a filesort.
	MFilesortSum       float32 `protobuf:"fixed32,161,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt float32 `protobuf:"fixed32,162,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSum      float32 `protobuf:"fixed32,163,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32 `protobuf:"fixed32,164,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSum float32 `protobuf:"fixed32,165,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32 `protobuf:"fixed32,166,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSum      float32 `protobuf:"fixed32,167,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt float32 `protobuf:"fixed32,168,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSum float32 `protobuf:"fixed32,169,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt        float32 `protobuf:"fixed32,170,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSum float32 `protobuf:"fixed32,171,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt  float32 `protobuf:"fixed32,172,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	// The number of sorted rows.
	MSortRowsSum float32 `protobuf:"fixed32,173,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt float32 `protobuf:"fixed32,174,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSum    float32 `protobuf:"fixed32,175,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt float32 `protobuf:"fixed32,176,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSum     float32 `protobuf:"fixed32,177,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt float32 `protobuf:"fixed32,178,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSum float32 `protobuf:"fixed32,179,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	MDocsReturnedCnt    float32 `protobuf:"fixed32,190,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	// The number of returned documents.
	MDocsReturnedSum   float32 `protobuf:"fixed32,191,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin   float32 `protobuf:"fixed32,192,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax   float32 `protobuf:"fixed32,193,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99   float32 `protobuf:"fixed32,147,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt float32 `protobuf:"fixed32,195,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSum float32 `protobuf:"fixed32,196,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin float32 `protobuf:"fixed32,197,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax float32 `protobuf:"fixed32,198,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99 float32 `protobuf:"fixed32,199,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt    float32 `protobuf:"fixed32,200,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	// The number of scanned documents.
	MDocsScannedSum float32 `protobuf:"fixed32,201,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin float32 `protobuf:"fixed32,202,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax float32 `protobuf:"fixed32,203,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99 float32 `protobuf:"fixed32,204,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	// Plan summary type (COLLSCAN, IXSCAN, etc).
	PlanSummary string `protobuf:"bytes,205,opt,name=plan_summary,json=planSummary,proto3" json:"plan_summary,omitempty"`
	// Total number of documents scanned during query execution.
	MDocsExaminedCnt float32 `protobuf:"fixed32,269,opt,name=m_docs_examined_cnt,json=mDocsExaminedCnt,proto3" json:"m_docs_examined_cnt,omitempty"`
	MDocsExaminedSum float32 `protobuf:"fixed32,270,opt,name=m_docs_examined_sum,json=mDocsExaminedSum,proto3" json:"m_docs_examined_sum,omitempty"`
	MDocsExaminedMin float32 `protobuf:"fixed32,271,opt,name=m_docs_examined_min,json=mDocsExaminedMin,proto3" json:"m_docs_examined_min,omitempty"`
	MDocsExaminedMax float32 `protobuf:"fixed32,272,opt,name=m_docs_examined_max,json=mDocsExaminedMax,proto3" json:"m_docs_examined_max,omitempty"`
	MDocsExaminedP99 float32 `protobuf:"fixed32,273,opt,name=m_docs_examined_p99,json=mDocsExaminedP99,proto3" json:"m_docs_examined_p99,omitempty"`
	// Total number of index keys scanned during query execution.
	MKeysExaminedCnt float32 `protobuf:"fixed32,274,opt,name=m_keys_examined_cnt,json=mKeysExaminedCnt,proto3" json:"m_keys_examined_cnt,omitempty"`
	MKeysExaminedSum float32 `protobuf:"fixed32,275,opt,name=m_keys_examined_sum,json=mKeysExaminedSum,proto3" json:"m_keys_examined_sum,omitempty"`
	MKeysExaminedMin float32 `protobuf:"fixed32,276,opt,name=m_keys_examined_min,json=mKeysExaminedMin,proto3" json:"m_keys_examined_min,omitempty"`
	MKeysExaminedMax float32 `protobuf:"fixed32,277,opt,name=m_keys_examined_max,json=mKeysExaminedMax,proto3" json:"m_keys_examined_max,omitempty"`
	MKeysExaminedP99 float32 `protobuf:"fixed32,278,opt,name=m_keys_examined_p99,json=mKeysExaminedP99,proto3" json:"m_keys_examined_p99,omitempty"`
	// Number of times a global read lock was acquired during query execution.
	MLocksGlobalAcquireCountReadSharedCnt float32 `protobuf:"fixed32,279,opt,name=m_locks_global_acquire_count_read_shared_cnt,json=mLocksGlobalAcquireCountReadSharedCnt,proto3" json:"m_locks_global_acquire_count_read_shared_cnt,omitempty"`
	MLocksGlobalAcquireCountReadSharedSum float32 `protobuf:"fixed32,280,opt,name=m_locks_global_acquire_count_read_shared_sum,json=mLocksGlobalAcquireCountReadSharedSum,proto3" json:"m_locks_global_acquire_count_read_shared_sum,omitempty"`
	// Number of times a global write lock was acquired during query execution.
	MLocksGlobalAcquireCountWriteSharedCnt float32 `protobuf:"fixed32,281,opt,name=m_locks_global_acquire_count_write_shared_cnt,json=mLocksGlobalAcquireCountWriteSharedCnt,proto3" json:"m_locks_global_acquire_count_write_shared_cnt,omitempty"`
	MLocksGlobalAcquireCountWriteSharedSum float32 `protobuf:"fixed32,282,opt,name=m_locks_global_acquire_count_write_shared_sum,json=mLocksGlobalAcquireCountWriteSharedSum,proto3" json:"m_locks_global_acquire_count_write_shared_sum,omitempty"`
	// Number of times a read lock was acquired at the database level during query execution.
	MLocksDatabaseAcquireCountReadSharedCnt float32 `protobuf:"fixed32,283,opt,name=m_locks_database_acquire_count_read_shared_cnt,json=mLocksDatabaseAcquireCountReadSharedCnt,proto3" json:"m_locks_database_acquire_count_read_shared_cnt,omitempty"`
	MLocksDatabaseAcquireCountReadSharedSum float32 `protobuf:"fixed32,284,opt,name=m_locks_database_acquire_count_read_shared_sum,json=mLocksDatabaseAcquireCountReadSharedSum,proto3" json:"m_locks_database_acquire_count_read_shared_sum,omitempty"`
	// Number of times a read lock at the database level was requested but had to wait before being granted.
	MLocksDatabaseAcquireWaitCountReadSharedCnt float32 `protobuf:"fixed32,285,opt,name=m_locks_database_acquire_wait_count_read_shared_cnt,json=mLocksDatabaseAcquireWaitCountReadSharedCnt,proto3" json:"m_locks_database_acquire_wait_count_read_shared_cnt,omitempty"`
	MLocksDatabaseAcquireWaitCountReadSharedSum float32 `protobuf:"fixed32,286,opt,name=m_locks_database_acquire_wait_count_read_shared_sum,json=mLocksDatabaseAcquireWaitCountReadSharedSum,proto3" json:"m_locks_database_acquire_wait_count_read_shared_sum,omitempty"`
	// Indicates the time, spent acquiring a read lock at the database level during an operation.
	MLocksDatabaseTimeAcquiringMicrosReadSharedCnt float32 `protobuf:"fixed32,287,opt,name=m_locks_database_time_acquiring_micros_read_shared_cnt,json=mLocksDatabaseTimeAcquiringMicrosReadSharedCnt,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_cnt,omitempty"`
	MLocksDatabaseTimeAcquiringMicrosReadSharedSum float32 `protobuf:"fixed32,288,opt,name=m_locks_database_time_acquiring_micros_read_shared_sum,json=mLocksDatabaseTimeAcquiringMicrosReadSharedSum,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_sum,omitempty"`
	MLocksDatabaseTimeAcquiringMicrosReadSharedMin float32 `protobuf:"fixed32,289,opt,name=m_locks_database_time_acquiring_micros_read_shared_min,json=mLocksDatabaseTimeAcquiringMicrosReadSharedMin,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_min,omitempty"`
	MLocksDatabaseTimeAcquiringMicrosReadSharedMax float32 `protobuf:"fixed32,290,opt,name=m_locks_database_time_acquiring_micros_read_shared_max,json=mLocksDatabaseTimeAcquiringMicrosReadSharedMax,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_max,omitempty"`
	MLocksDatabaseTimeAcquiringMicrosReadSharedP99 float32 `protobuf:"fixed32,291,opt,name=m_locks_database_time_acquiring_micros_read_shared_p99,json=mLocksDatabaseTimeAcquiringMicrosReadSharedP99,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_p99,omitempty"`
	// Number of times a read lock was acquired on a specific collection during operations.
	MLocksCollectionAcquireCountReadSharedCnt float32 `protobuf:"fixed32,292,opt,name=m_locks_collection_acquire_count_read_shared_cnt,json=mLocksCollectionAcquireCountReadSharedCnt,proto3" json:"m_locks_collection_acquire_count_read_shared_cnt,omitempty"`
	MLocksCollectionAcquireCountReadSharedSum float32 `protobuf:"fixed32,293,opt,name=m_locks_collection_acquire_count_read_shared_sum,json=mLocksCollectionAcquireCountReadSharedSum,proto3" json:"m_locks_collection_acquire_count_read_shared_sum,omitempty"`
	// Total number of bytes read from storage during a specific operation.
	MStorageBytesReadCnt float32 `protobuf:"fixed32,294,opt,name=m_storage_bytes_read_cnt,json=mStorageBytesReadCnt,proto3" json:"m_storage_bytes_read_cnt,omitempty"`
	MStorageBytesReadSum float32 `protobuf:"fixed32,295,opt,name=m_storage_bytes_read_sum,json=mStorageBytesReadSum,proto3" json:"m_storage_bytes_read_sum,omitempty"`
	MStorageBytesReadMin float32 `protobuf:"fixed32,296,opt,name=m_storage_bytes_read_min,json=mStorageBytesReadMin,proto3" json:"m_storage_bytes_read_min,omitempty"`
	MStorageBytesReadMax float32 `protobuf:"fixed32,297,opt,name=m_storage_bytes_read_max,json=mStorageBytesReadMax,proto3" json:"m_storage_bytes_read_max,omitempty"`
	MStorageBytesReadP99 float32 `protobuf:"fixed32,298,opt,name=m_storage_bytes_read_p99,json=mStorageBytesReadP99,proto3" json:"m_storage_bytes_read_p99,omitempty"`
	// Indicates the time, spent reading data from storage during an operation.
	MStorageTimeReadingMicrosCnt float32 `protobuf:"fixed32,299,opt,name=m_storage_time_reading_micros_cnt,json=mStorageTimeReadingMicrosCnt,proto3" json:"m_storage_time_reading_micros_cnt,omitempty"`
	MStorageTimeReadingMicrosSum float32 `protobuf:"fixed32,300,opt,name=m_storage_time_reading_micros_sum,json=mStorageTimeReadingMicrosSum,proto3" json:"m_storage_time_reading_micros_sum,omitempty"`
	MStorageTimeReadingMicrosMin float32 `protobuf:"fixed32,301,opt,name=m_storage_time_reading_micros_min,json=mStorageTimeReadingMicrosMin,proto3" json:"m_storage_time_reading_micros_min,omitempty"`
	MStorageTimeReadingMicrosMax float32 `protobuf:"fixed32,302,opt,name=m_storage_time_reading_micros_max,json=mStorageTimeReadingMicrosMax,proto3" json:"m_storage_time_reading_micros_max,omitempty"`
	MStorageTimeReadingMicrosP99 float32 `protobuf:"fixed32,303,opt,name=m_storage_time_reading_micros_p99,json=mStorageTimeReadingMicrosP99,proto3" json:"m_storage_time_reading_micros_p99,omitempty"`
	MSharedBlksHitCnt            float32 `protobuf:"fixed32,210,opt,name=m_shared_blks_hit_cnt,json=mSharedBlksHitCnt,proto3" json:"m_shared_blks_hit_cnt,omitempty"`
	// Total number of shared block cache hits by the statement.
	MSharedBlksHitSum  float32 `protobuf:"fixed32,211,opt,name=m_shared_blks_hit_sum,json=mSharedBlksHitSum,proto3" json:"m_shared_blks_hit_sum,omitempty"`
	MSharedBlksReadCnt float32 `protobuf:"fixed32,212,opt,name=m_shared_blks_read_cnt,json=mSharedBlksReadCnt,proto3" json:"m_shared_blks_read_cnt,omitempty"`
	// Total number of shared blocks read by the statement.
	MSharedBlksReadSum    float32 `protobuf:"fixed32,213,opt,name=m_shared_blks_read_sum,json=mSharedBlksReadSum,proto3" json:"m_shared_blks_read_sum,omitempty"`
	MSharedBlksDirtiedCnt float32 `protobuf:"fixed32,214,opt,name=m_shared_blks_dirtied_cnt,json=mSharedBlksDirtiedCnt,proto3" json:"m_shared_blks_dirtied_cnt,omitempty"`
	// Total number of shared blocks dirtied by the statement.
	MSharedBlksDirtiedSum float32 `protobuf:"fixed32,215,opt,name=m_shared_blks_dirtied_sum,json=mSharedBlksDirtiedSum,proto3" json:"m_shared_blks_dirtied_sum,omitempty"`
	MSharedBlksWrittenCnt float32 `protobuf:"fixed32,216,opt,name=m_shared_blks_written_cnt,json=mSharedBlksWrittenCnt,proto3" json:"m_shared_blks_written_cnt,omitempty"`
	// Total number of shared blocks written by the statement.
	MSharedBlksWrittenSum float32 `protobuf:"fixed32,217,opt,name=m_shared_blks_written_sum,json=mSharedBlksWrittenSum,proto3" json:"m_shared_blks_written_sum,omitempty"`
	MLocalBlksHitCnt      float32 `protobuf:"fixed32,218,opt,name=m_local_blks_hit_cnt,json=mLocalBlksHitCnt,proto3" json:"m_local_blks_hit_cnt,omitempty"`
	// Total number of local block cache hits by the statement.
	MLocalBlksHitSum  float32 `protobuf:"fixed32,219,opt,name=m_local_blks_hit_sum,json=mLocalBlksHitSum,proto3" json:"m_local_blks_hit_sum,omitempty"`
	MLocalBlksReadCnt float32 `protobuf:"fixed32,220,opt,name=m_local_blks_read_cnt,json=mLocalBlksReadCnt,proto3" json:"m_local_blks_read_cnt,omitempty"`
	// Total number of local blocks read by the statement.
	MLocalBlksReadSum    float32 `protobuf:"fixed32,221,opt,name=m_local_blks_read_sum,json=mLocalBlksReadSum,proto3" json:"m_local_blks_read_sum,omitempty"`
	MLocalBlksDirtiedCnt float32 `protobuf:"fixed32,222,opt,name=m_local_blks_dirtied_cnt,json=mLocalBlksDirtiedCnt,proto3" json:"m_local_blks_dirtied_cnt,omitempty"`
	// Total number of local blocks dirtied by the statement.
	MLocalBlksDirtiedSum float32 `protobuf:"fixed32,223,opt,name=m_local_blks_dirtied_sum,json=mLocalBlksDirtiedSum,proto3" json:"m_local_blks_dirtied_sum,omitempty"`
	MLocalBlksWrittenCnt float32 `protobuf:"fixed32,224,opt,name=m_local_blks_written_cnt,json=mLocalBlksWrittenCnt,proto3" json:"m_local_blks_written_cnt,omitempty"`
	// Total number of local blocks written by the statement.
	MLocalBlksWrittenSum float32 `protobuf:"fixed32,225,opt,name=m_local_blks_written_sum,json=mLocalBlksWrittenSum,proto3" json:"m_local_blks_written_sum,omitempty"`
	MTempBlksReadCnt     float32 `protobuf:"fixed32,226,opt,name=m_temp_blks_read_cnt,json=mTempBlksReadCnt,proto3" json:"m_temp_blks_read_cnt,omitempty"`
	// Total number of temp blocks read by the statement.
	MTempBlksReadSum    float32 `protobuf:"fixed32,227,opt,name=m_temp_blks_read_sum,json=mTempBlksReadSum,proto3" json:"m_temp_blks_read_sum,omitempty"`
	MTempBlksWrittenCnt float32 `protobuf:"fixed32,228,opt,name=m_temp_blks_written_cnt,json=mTempBlksWrittenCnt,proto3" json:"m_temp_blks_written_cnt,omitempty"`
	// Total number of temp blocks written by the statement.
	MTempBlksWrittenSum float32 `protobuf:"fixed32,229,opt,name=m_temp_blks_written_sum,json=mTempBlksWrittenSum,proto3" json:"m_temp_blks_written_sum,omitempty"`
	MBlkReadTimeCnt     float32 `protobuf:"fixed32,230,opt,name=m_blk_read_time_cnt,json=mBlkReadTimeCnt,proto3" json:"m_blk_read_time_cnt,omitempty"`
	// Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkReadTimeSum  float32 `protobuf:"fixed32,231,opt,name=m_blk_read_time_sum,json=mBlkReadTimeSum,proto3" json:"m_blk_read_time_sum,omitempty"`
	MBlkWriteTimeCnt float32 `protobuf:"fixed32,232,opt,name=m_blk_write_time_cnt,json=mBlkWriteTimeCnt,proto3" json:"m_blk_write_time_cnt,omitempty"`
	// Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkWriteTimeSum      float32 `protobuf:"fixed32,233,opt,name=m_blk_write_time_sum,json=mBlkWriteTimeSum,proto3" json:"m_blk_write_time_sum,omitempty"`
	MSharedBlkReadTimeCnt float32 `protobuf:"fixed32,234,opt,name=m_shared_blk_read_time_cnt,json=mSharedBlkReadTimeCnt,proto3" json:"m_shared_blk_read_time_cnt,omitempty"`
	// Total time the statement spent reading shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MSharedBlkReadTimeSum  float32 `protobuf:"fixed32,235,opt,name=m_shared_blk_read_time_sum,json=mSharedBlkReadTimeSum,proto3" json:"m_shared_blk_read_time_sum,omitempty"`
	MSharedBlkWriteTimeCnt float32 `protobuf:"fixed32,236,opt,name=m_shared_blk_write_time_cnt,json=mSharedBlkWriteTimeCnt,proto3" json:"m_shared_blk_write_time_cnt,omitempty"`
	// Total time the statement spent writing shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MSharedBlkWriteTimeSum float32 `protobuf:"fixed32,237,opt,name=m_shared_blk_write_time_sum,json=mSharedBlkWriteTimeSum,proto3" json:"m_shared_blk_write_time_sum,omitempty"`
	MLocalBlkReadTimeCnt   float32 `protobuf:"fixed32,238,opt,name=m_local_blk_read_time_cnt,json=mLocalBlkReadTimeCnt,proto3" json:"m_local_blk_read_time_cnt,omitempty"`
	// Total time the statement spent reading local blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MLocalBlkReadTimeSum  float32 `protobuf:"fixed32,239,opt,name=m_local_blk_read_time_sum,json=mLocalBlkReadTimeSum,proto3" json:"m_local_blk_read_time_sum,omitempty"`
	MLocalBlkWriteTimeCnt float32 `protobuf:"fixed32,240,opt,name=m_local_blk_write_time_cnt,json=mLocalBlkWriteTimeCnt,proto3" json:"m_local_blk_write_time_cnt,omitempty"`
	// Total time the statement spent writing local blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MLocalBlkWriteTimeSum float32 `protobuf:"fixed32,241,opt,name=m_local_blk_write_time_sum,json=mLocalBlkWriteTimeSum,proto3" json:"m_local_blk_write_time_sum,omitempty"`
	MCpuUserTimeCnt       float32 `protobuf:"fixed32,242,opt,name=m_cpu_user_time_cnt,json=mCpuUserTimeCnt,proto3" json:"m_cpu_user_time_cnt,omitempty"`
	// Total time user spent in query.
	MCpuUserTimeSum float32 `protobuf:"fixed32,243,opt,name=m_cpu_user_time_sum,json=mCpuUserTimeSum,proto3" json:"m_cpu_user_time_sum,omitempty"`
	MCpuSysTimeCnt  float32 `protobuf:"fixed32,244,opt,name=m_cpu_sys_time_cnt,json=mCpuSysTimeCnt,proto3" json:"m_cpu_sys_time_cnt,omitempty"`
	// Total time system spent in query.
	MCpuSysTimeSum float32 `protobuf:"fixed32,245,opt,name=m_cpu_sys_time_sum,json=mCpuSysTimeSum,proto3" json:"m_cpu_sys_time_sum,omitempty"`
	// Type of SQL command.
	CmdType string `protobuf:"bytes,246,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// Total number of planned calls.
	MPlansCallsSum float32 `protobuf:"fixed32,250,opt,name=m_plans_calls_sum,json=mPlansCallsSum,proto3" json:"m_plans_calls_sum,omitempty"`
	MPlansCallsCnt float32 `protobuf:"fixed32,251,opt,name=m_plans_calls_cnt,json=mPlansCallsCnt,proto3" json:"m_plans_calls_cnt,omitempty"`
	// Total number of WAL (Write-ahead logging) records.
	MWalRecordsSum float32 `protobuf:"fixed32,252,opt,name=m_wal_records_sum,json=mWalRecordsSum,proto3" json:"m_wal_records_sum,omitempty"`
	MWalRecordsCnt float32 `protobuf:"fixed32,253,opt,name=m_wal_records_cnt,json=mWalRecordsCnt,proto3" json:"m_wal_records_cnt,omitempty"`
	// Total number of FPI (full page images) in WAL (Write-ahead logging) records.
	MWalFpiSum float32 `protobuf:"fixed32,254,opt,name=m_wal_fpi_sum,json=mWalFpiSum,proto3" json:"m_wal_fpi_sum,omitempty"`
	MWalFpiCnt float32 `protobuf:"fixed32,255,opt,name=m_wal_fpi_cnt,json=mWalFpiCnt,proto3" json:"m_wal_fpi_cnt,omitempty"`
	// Total bytes of WAL (Write-ahead logging) records.
	MWalBytesSum float32 `protobuf:"fixed32,256,opt,name=m_wal_bytes_sum,json=mWalBytesSum,proto3" json:"m_wal_bytes_sum,omitempty"`
	MWalBytesCnt float32 `protobuf:"fixed32,257,opt,name=m_wal_bytes_cnt,json=mWalBytesCnt,proto3" json:"m_wal_bytes_cnt,omitempty"`
	// Sum, count, min, max of plan time.
	MPlanTimeSum float32 `protobuf:"fixed32,258,opt,name=m_plan_time_sum,json=mPlanTimeSum,proto3" json:"m_plan_time_sum,omitempty"`
	MPlanTimeCnt float32 `protobuf:"fixed32,259,opt,name=m_plan_time_cnt,json=mPlanTimeCnt,proto3" json:"m_plan_time_cnt,omitempty"`
	MPlanTimeMin float32 `protobuf:"fixed32,260,opt,name=m_plan_time_min,json=mPlanTimeMin,proto3" json:"m_plan_time_min,omitempty"`
	MPlanTimeMax float32 `protobuf:"fixed32,261,opt,name=m_plan_time_max,json=mPlanTimeMax,proto3" json:"m_plan_time_max,omitempty"`
	// Metrics skipped due to different bucket_time in pg_stat_monitor (17min in PMM, 5min in pg_stat_monitor):
	// min_time, max_time, mean_time
	// plan_mean_time
	// stddev_time
	// Other metrics skipped (empty values, codes):
	// cmd_type_text, elevel, sqlcode, message, state_code, state
	TopQueryid      string   `protobuf:"bytes,263,opt,name=top_queryid,json=topQueryid,proto3" json:"top_queryid,omitempty"`
	TopQuery        string   `protobuf:"bytes,264,opt,name=top_query,json=topQuery,proto3" json:"top_query,omitempty"`
	ApplicationName string   `protobuf:"bytes,265,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	Planid          string   `protobuf:"bytes,266,opt,name=planid,proto3" json:"planid,omitempty"`
	QueryPlan       string   `protobuf:"bytes,267,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	HistogramItems  []string `protobuf:"bytes,268,rep,name=histogram_items,json=histogramItems,proto3" json:"histogram_items,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricsBucket) Reset() {
	*x = MetricsBucket{}
	mi := &file_qan_v1_collector_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsBucket) ProtoMessage() {}

func (x *MetricsBucket) ProtoReflect() protoreflect.Message {
	mi := &file_qan_v1_collector_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsBucket.ProtoReflect.Descriptor instead.
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return file_qan_v1_collector_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsBucket) GetQueryid() string {
	if x != nil {
		return x.Queryid
	}
	return ""
}

func (x *MetricsBucket) GetExplainFingerprint() string {
	if x != nil {
		return x.ExplainFingerprint
	}
	return ""
}

func (x *MetricsBucket) GetPlaceholdersCount() uint32 {
	if x != nil {
		return x.PlaceholdersCount
	}
	return 0
}

func (x *MetricsBucket) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *MetricsBucket) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricsBucket) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MetricsBucket) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MetricsBucket) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *MetricsBucket) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MetricsBucket) GetClientHost() string {
	if x != nil {
		return x.ClientHost
	}
	return ""
}

func (x *MetricsBucket) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MetricsBucket) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MetricsBucket) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *MetricsBucket) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *MetricsBucket) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *MetricsBucket) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *MetricsBucket) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *MetricsBucket) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MetricsBucket) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *MetricsBucket) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MetricsBucket) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *MetricsBucket) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MetricsBucket) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MetricsBucket) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *MetricsBucket) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MetricsBucket) GetAgentType() v1.AgentType {
	if x != nil {
		return x.AgentType
	}
	return v1.AgentType(0)
}

func (x *MetricsBucket) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricsBucket) GetPeriodStartUnixSecs() uint32 {
	if x != nil {
		return x.PeriodStartUnixSecs
	}
	return 0
}

func (x *MetricsBucket) GetPeriodLengthSecs() uint32 {
	if x != nil {
		return x.PeriodLengthSecs
	}
	return 0
}

func (x *MetricsBucket) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *MetricsBucket) GetIsTruncated() bool {
	if x != nil {
		return x.IsTruncated
	}
	return false
}

func (x *MetricsBucket) GetExampleType() ExampleType {
	if x != nil {
		return x.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_UNSPECIFIED
}

func (x *MetricsBucket) GetExampleMetrics() string {
	if x != nil {
		return x.ExampleMetrics
	}
	return ""
}

func (x *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if x != nil {
		return x.NumQueriesWithWarnings
	}
	return 0
}

func (x *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if x != nil {
		return x.NumQueriesWithErrors
	}
	return 0
}

func (x *MetricsBucket) GetErrors() map[uint64]uint64 {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *MetricsBucket) GetNumQueries() float32 {
	if x != nil {
		return x.NumQueries
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeCnt() float32 {
	if x != nil {
		return x.MQueryTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeSum() float32 {
	if x != nil {
		return x.MQueryTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMin() float32 {
	if x != nil {
		return x.MQueryTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMax() float32 {
	if x != nil {
		return x.MQueryTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeP99() float32 {
	if x != nil {
		return x.MQueryTimeP99
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeCnt() float32 {
	if x != nil {
		return x.MLockTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeSum() float32 {
	if x != nil {
		return x.MLockTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeMin() float32 {
	if x != nil {
		return x.MLockTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeMax() float32 {
	if x != nil {
		return x.MLockTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeP99() float32 {
	if x != nil {
		return x.MLockTimeP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentCnt() float32 {
	if x != nil {
		return x.MRowsSentCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentSum() float32 {
	if x != nil {
		return x.MRowsSentSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMin() float32 {
	if x != nil {
		return x.MRowsSentMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMax() float32 {
	if x != nil {
		return x.MRowsSentMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentP99() float32 {
	if x != nil {
		return x.MRowsSentP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedCnt() float32 {
	if x != nil {
		return x.MRowsExaminedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedSum() float32 {
	if x != nil {
		return x.MRowsExaminedSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedMin() float32 {
	if x != nil {
		return x.MRowsExaminedMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedMax() float32 {
	if x != nil {
		return x.MRowsExaminedMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedP99() float32 {
	if x != nil {
		return x.MRowsExaminedP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedCnt() float32 {
	if x != nil {
		return x.MRowsAffectedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedSum() float32 {
	if x != nil {
		return x.MRowsAffectedSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedMin() float32 {
	if x != nil {
		return x.MRowsAffectedMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedMax() float32 {
	if x != nil {
		return x.MRowsAffectedMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedP99() float32 {
	if x != nil {
		return x.MRowsAffectedP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadCnt() float32 {
	if x != nil {
		return x.MRowsReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadSum() float32 {
	if x != nil {
		return x.MRowsReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadMin() float32 {
	if x != nil {
		return x.MRowsReadMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadMax() float32 {
	if x != nil {
		return x.MRowsReadMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadP99() float32 {
	if x != nil {
		return x.MRowsReadP99
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesCnt() float32 {
	if x != nil {
		return x.MMergePassesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesSum() float32 {
	if x != nil {
		return x.MMergePassesSum
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesMin() float32 {
	if x != nil {
		return x.MMergePassesMin
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesMax() float32 {
	if x != nil {
		return x.MMergePassesMax
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesP99() float32 {
	if x != nil {
		return x.MMergePassesP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsCnt() float32 {
	if x != nil {
		return x.MInnodbIoROpsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsSum() float32 {
	if x != nil {
		return x.MInnodbIoROpsSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsMin() float32 {
	if x != nil {
		return x.MInnodbIoROpsMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsMax() float32 {
	if x != nil {
		return x.MInnodbIoROpsMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsP99() float32 {
	if x != nil {
		return x.MInnodbIoROpsP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesCnt() float32 {
	if x != nil {
		return x.MInnodbIoRBytesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesSum() float32 {
	if x != nil {
		return x.MInnodbIoRBytesSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesMin() float32 {
	if x != nil {
		return x.MInnodbIoRBytesMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesMax() float32 {
	if x != nil {
		return x.MInnodbIoRBytesMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesP99() float32 {
	if x != nil {
		return x.MInnodbIoRBytesP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitCnt() float32 {
	if x != nil {
		return x.MInnodbIoRWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitSum() float32 {
	if x != nil {
		return x.MInnodbIoRWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitMin() float32 {
	if x != nil {
		return x.MInnodbIoRWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitMax() float32 {
	if x != nil {
		return x.MInnodbIoRWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitP99() float32 {
	if x != nil {
		return x.MInnodbIoRWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitCnt() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitSum() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitMin() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitMax() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitP99() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitCnt() float32 {
	if x != nil {
		return x.MInnodbQueueWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitSum() float32 {
	if x != nil {
		return x.MInnodbQueueWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitMin() float32 {
	if x != nil {
		return x.MInnodbQueueWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitMax() float32 {
	if x != nil {
		return x.MInnodbQueueWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitP99() float32 {
	if x != nil {
		return x.MInnodbQueueWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctCnt() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctSum() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctMin() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctMax() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctP99() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctP99
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthCnt() float32 {
	if x != nil {
		return x.MQueryLengthCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthSum() float32 {
	if x != nil {
		return x.MQueryLengthSum
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthMin() float32 {
	if x != nil {
		return x.MQueryLengthMin
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthMax() float32 {
	if x != nil {
		return x.MQueryLengthMax
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthP99() float32 {
	if x != nil {
		return x.MQueryLengthP99
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentCnt() float32 {
	if x != nil {
		return x.MBytesSentCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentSum() float32 {
	if x != nil {
		return x.MBytesSentSum
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentMin() float32 {
	if x != nil {
		return x.MBytesSentMin
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentMax() float32 {
	if x != nil {
		return x.MBytesSentMax
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentP99() float32 {
	if x != nil {
		return x.MBytesSentP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesCnt() float32 {
	if x != nil {
		return x.MTmpTablesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesSum() float32 {
	if x != nil {
		return x.MTmpTablesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesMin() float32 {
	if x != nil {
		return x.MTmpTablesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesMax() float32 {
	if x != nil {
		return x.MTmpTablesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesP99() float32 {
	if x != nil {
		return x.MTmpTablesP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesCnt() float32 {
	if x != nil {
		return x.MTmpDiskTablesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesSum() float32 {
	if x != nil {
		return x.MTmpDiskTablesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesMin() float32 {
	if x != nil {
		return x.MTmpDiskTablesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesMax() float32 {
	if x != nil {
		return x.MTmpDiskTablesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesP99() float32 {
	if x != nil {
		return x.MTmpDiskTablesP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesCnt() float32 {
	if x != nil {
		return x.MTmpTableSizesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesSum() float32 {
	if x != nil {
		return x.MTmpTableSizesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesMin() float32 {
	if x != nil {
		return x.MTmpTableSizesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesMax() float32 {
	if x != nil {
		return x.MTmpTableSizesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesP99() float32 {
	if x != nil {
		return x.MTmpTableSizesP99
	}
	return 0
}

func (x *MetricsBucket) GetMQcHitCnt() float32 {
	if x != nil {
		return x.MQcHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQcHitSum() float32 {
	if x != nil {
		return x.MQcHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMFullScanCnt() float32 {
	if x != nil {
		return x.MFullScanCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFullScanSum() float32 {
	if x != nil {
		return x.MFullScanSum
	}
	return 0
}

func (x *MetricsBucket) GetMFullJoinCnt() float32 {
	if x != nil {
		return x.MFullJoinCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFullJoinSum() float32 {
	if x != nil {
		return x.MFullJoinSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableCnt() float32 {
	if x != nil {
		return x.MTmpTableCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSum() float32 {
	if x != nil {
		return x.MTmpTableSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableOnDiskCnt() float32 {
	if x != nil {
		return x.MTmpTableOnDiskCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableOnDiskSum() float32 {
	if x != nil {
		return x.MTmpTableOnDiskSum
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortCnt() float32 {
	if x != nil {
		return x.MFilesortCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortSum() float32 {
	if x != nil {
		return x.MFilesortSum
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortOnDiskCnt() float32 {
	if x != nil {
		return x.MFilesortOnDiskCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortOnDiskSum() float32 {
	if x != nil {
		return x.MFilesortOnDiskSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectFullRangeJoinCnt() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectFullRangeJoinSum() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCnt() float32 {
	if x != nil {
		return x.MSelectRangeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeSum() float32 {
	if x != nil {
		return x.MSelectRangeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCheckCnt() float32 {
	if x != nil {
		return x.MSelectRangeCheckCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCheckSum() float32 {
	if x != nil {
		return x.MSelectRangeCheckSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortRangeCnt() float32 {
	if x != nil {
		return x.MSortRangeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortRangeSum() float32 {
	if x != nil {
		return x.MSortRangeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortRowsCnt() float32 {
	if x != nil {
		return x.MSortRowsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortRowsSum() float32 {
	if x != nil {
		return x.MSortRowsSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortScanCnt() float32 {
	if x != nil {
		return x.MSortScanCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortScanSum() float32 {
	if x != nil {
		return x.MSortScanSum
	}
	return 0
}

func (x *MetricsBucket) GetMNoIndexUsedCnt() float32 {
	if x != nil {
		return x.MNoIndexUsedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMNoIndexUsedSum() float32 {
	if x != nil {
		return x.MNoIndexUsedSum
	}
	return 0
}

func (x *MetricsBucket) GetMNoGoodIndexUsedCnt() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMNoGoodIndexUsedSum() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedCnt() float32 {
	if x != nil {
		return x.MDocsReturnedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedSum() float32 {
	if x != nil {
		return x.MDocsReturnedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedMin() float32 {
	if x != nil {
		return x.MDocsReturnedMin
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedMax() float32 {
	if x != nil {
		return x.MDocsReturnedMax
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedP99() float32 {
	if x != nil {
		return x.MDocsReturnedP99
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthCnt() float32 {
	if x != nil {
		return x.MResponseLengthCnt
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthSum() float32 {
	if x != nil {
		return x.MResponseLengthSum
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthMin() float32 {
	if x != nil {
		return x.MResponseLengthMin
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthMax() float32 {
	if x != nil {
		return x.MResponseLengthMax
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthP99() float32 {
	if x != nil {
		return x.MResponseLengthP99
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedCnt() float32 {
	if x != nil {
		return x.MDocsScannedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedSum() float32 {
	if x != nil {
		return x.MDocsScannedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedMin() float32 {
	if x != nil {
		return x.MDocsScannedMin
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedMax() float32 {
	if x != nil {
		return x.MDocsScannedMax
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedP99() float32 {
	if x != nil {
		return x.MDocsScannedP99
	}
	return 0
}

func (x *MetricsBucket) GetPlanSummary() string {
	if x != nil {
		return x.PlanSummary
	}
	return ""
}

func (x *MetricsBucket) GetMDocsExaminedCnt() float32 {
	if x != nil {
		return x.MDocsExaminedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMDocsExaminedSum() float32 {
	if x != nil {
		return x.MDocsExaminedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsExaminedMin() float32 {
	if x != nil {
		return x.MDocsExaminedMin
	}
	return 0
}

func (x *MetricsBucket) GetMDocsExaminedMax() float32 {
	if x != nil {
		return x.MDocsExaminedMax
	}
	return 0
}

func (x *MetricsBucket) GetMDocsExaminedP99() float32 {
	if x != nil {
		return x.MDocsExaminedP99
	}
	return 0
}

func (x *MetricsBucket) GetMKeysExaminedCnt() float32 {
	if x != nil {
		return x.MKeysExaminedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMKeysExaminedSum() float32 {
	if x != nil {
		return x.MKeysExaminedSum
	}
	return 0
}

func (x *MetricsBucket) GetMKeysExaminedMin() float32 {
	if x != nil {
		return x.MKeysExaminedMin
	}
	return 0
}

func (x *MetricsBucket) GetMKeysExaminedMax() float32 {
	if x != nil {
		return x.MKeysExaminedMax
	}
	return 0
}

func (x *MetricsBucket) GetMKeysExaminedP99() float32 {
	if x != nil {
		return x.MKeysExaminedP99
	}
	return 0
}

func (x *MetricsBucket) GetMLocksGlobalAcquireCountReadSharedCnt() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountReadSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksGlobalAcquireCountReadSharedSum() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountReadSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocksGlobalAcquireCountWriteSharedCnt() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountWriteSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksGlobalAcquireCountWriteSharedSum() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountWriteSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseAcquireCountReadSharedCnt() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireCountReadSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseAcquireCountReadSharedSum() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireCountReadSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseAcquireWaitCountReadSharedCnt() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireWaitCountReadSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseAcquireWaitCountReadSharedSum() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireWaitCountReadSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseTimeAcquiringMicrosReadSharedCnt() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseTimeAcquiringMicrosReadSharedSum() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseTimeAcquiringMicrosReadSharedMin() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedMin
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseTimeAcquiringMicrosReadSharedMax() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedMax
	}
	return 0
}

func (x *MetricsBucket) GetMLocksDatabaseTimeAcquiringMicrosReadSharedP99() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedP99
	}
	return 0
}

func (x *MetricsBucket) GetMLocksCollectionAcquireCountReadSharedCnt() float32 {
	if x != nil {
		return x.MLocksCollectionAcquireCountReadSharedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocksCollectionAcquireCountReadSharedSum() float32 {
	if x != nil {
		return x.MLocksCollectionAcquireCountReadSharedSum
	}
	return 0
}

func (x *MetricsBucket) GetMStorageBytesReadCnt() float32 {
	if x != nil {
		return x.MStorageBytesReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMStorageBytesReadSum() float32 {
	if x != nil {
		return x.MStorageBytesReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMStorageBytesReadMin() float32 {
	if x != nil {
		return x.MStorageBytesReadMin
	}
	return 0
}

func (x *MetricsBucket) GetMStorageBytesReadMax() float32 {
	if x != nil {
		return x.MStorageBytesReadMax
	}
	return 0
}

func (x *MetricsBucket) GetMStorageBytesReadP99() float32 {
	if x != nil {
		return x.MStorageBytesReadP99
	}
	return 0
}

func (x *MetricsBucket) GetMStorageTimeReadingMicrosCnt() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosCnt
	}
	return 0
}

func (x *MetricsBucket) GetMStorageTimeReadingMicrosSum() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosSum
	}
	return 0
}

func (x *MetricsBucket) GetMStorageTimeReadingMicrosMin() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosMin
	}
	return 0
}

func (x *MetricsBucket) GetMStorageTimeReadingMicrosMax() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosMax
	}
	return 0
}

func (x *MetricsBucket) GetMStorageTimeReadingMicrosP99() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosP99
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitCnt() float32 {
	if x != nil {
		return x.MSharedBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitSum() float32 {
	if x != nil {
		return x.MSharedBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadCnt() float32 {
	if x != nil {
		return x.MSharedBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadSum() float32 {
	if x != nil {
		return x.MSharedBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedSum() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenCnt() float32 {
	if x != nil {
		return x.MSharedBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenSum() float32 {
	if x != nil {
		return x.MSharedBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitCnt() float32 {
	if x != nil {
		return x.MLocalBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitSum() float32 {
	if x != nil {
		return x.MLocalBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadCnt() float32 {
	if x != nil {
		return x.MLocalBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadSum() float32 {
	if x != nil {
		return x.MLocalBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedSum() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenCnt() float32 {
	if x != nil {
		return x.MLocalBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenSum() float32 {
	if x != nil {
		return x.MLocalBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadCnt() float32 {
	if x != nil {
		return x.MTempBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadSum() float32 {
	if x != nil {
		return x.MTempBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenCnt() float32 {
	if x != nil {
		return x.MTempBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenSum() float32 {
	if x != nil {
		return x.MTempBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeCnt() float32 {
	if x != nil {
		return x.MBlkReadTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeSum() float32 {
	if x != nil {
		return x.MBlkReadTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeCnt() float32 {
	if x != nil {
		return x.MBlkWriteTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeSum() float32 {
	if x != nil {
		return x.MBlkWriteTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlkReadTimeCnt() float32 {
	if x != nil {
		return x.MSharedBlkReadTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlkReadTimeSum() float32 {
	if x != nil {
		return x.MSharedBlkReadTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlkWriteTimeCnt() float32 {
	if x != nil {
		return x.MSharedBlkWriteTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlkWriteTimeSum() float32 {
	if x != nil {
		return x.MSharedBlkWriteTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlkReadTimeCnt() float32 {
	if x != nil {
		return x.MLocalBlkReadTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlkReadTimeSum() float32 {
	if x != nil {
		return x.MLocalBlkReadTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlkWriteTimeCnt() float32 {
	if x != nil {
		return x.MLocalBlkWriteTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlkWriteTimeSum() float32 {
	if x != nil {
		return x.MLocalBlkWriteTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeCnt() float32 {
	if x != nil {
		return x.MCpuUserTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeSum() float32 {
	if x != nil {
		return x.MCpuUserTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeCnt() float32 {
	if x != nil {
		return x.MCpuSysTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeSum() float32 {
	if x != nil {
		return x.MCpuSysTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

func (x *MetricsBucket) GetMPlansCallsSum() float32 {
	if x != nil {
		return x.MPlansCallsSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlansCallsCnt() float32 {
	if x != nil {
		return x.MPlansCallsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsSum() float32 {
	if x != nil {
		return x.MWalRecordsSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsCnt() float32 {
	if x != nil {
		return x.MWalRecordsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiSum() float32 {
	if x != nil {
		return x.MWalFpiSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiCnt() float32 {
	if x != nil {
		return x.MWalFpiCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesSum() float32 {
	if x != nil {
		return x.MWalBytesSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesCnt() float32 {
	if x != nil {
		return x.MWalBytesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeSum() float32 {
	if x != nil {
		return x.MPlanTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeCnt() float32 {
	if x != nil {
		return x.MPlanTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMin() float32 {
	if x != nil {
		return x.MPlanTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMax() float32 {
	if x != nil {
		return x.MPlanTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetTopQueryid() string {
	if x != nil {
		return x.TopQueryid
	}
	return ""
}

func (x *MetricsBucket) GetTopQuery() string {
	if x != nil {
		return x.TopQuery
	}
	return ""
}

func (x *MetricsBucket) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *MetricsBucket) GetPlanid() string {
	if x != nil {
		return x.Planid
	}
	return ""
}

func (x *MetricsBucket) GetQueryPlan() string {
	if x != nil {
		return x.QueryPlan
	}
	return ""
}

func (x *MetricsBucket) GetHistogramItems() []string {
	if x != nil {
		return x.HistogramItems
	}
	return nil
}

type CollectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectResponse) Reset() {
	*x = CollectResponse{}
	mi := &file_qan_v1_collector_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectResponse) ProtoMessage() {}

func (x *CollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qan_v1_collector_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectResponse.ProtoReflect.Descriptor instead.
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return file_qan_v1_collector_proto_rawDescGZIP(), []int{2}
}

var File_qan_v1_collector_proto protoreflect.FileDescriptor

const file_qan_v1_collector_proto_rawDesc = "" +
	"\n" +
	"\x16qan/v1/collector.proto\x12\x06qan.v1\x1a\x1bgoogle/api/visibility.proto\x1a\x19inventory/v1/agents.proto\x1a\x10qan/v1/qan.proto\"N\n" +
	"\x0eCollectRequest\x12<\n" +
	"\x0emetrics_bucket\x18\x01 \x03(\v2\x15.qan.v1.MetricsBucketR\rmetricsBucket\"\xd6h\n" +
	"\rMetricsBucket\x12\x18\n" +
	"\aqueryid\x18\x01 \x01(\tR\aqueryid\x12/\n" +
	"\x13explain_fingerprint\x18\x02 \x01(\tR\x12explainFingerprint\x12-\n" +
	"\x12placeholders_count\x18\x03 \x01(\rR\x11placeholdersCount\x12 \n" +
	"\vfingerprint\x18\x04 \x01(\tR\vfingerprint\x12!\n" +
	"\fservice_name\x18\n" +
	" \x01(\tR\vserviceName\x12\x1a\n" +
	"\bdatabase\x18\v \x01(\tR\bdatabase\x12\x16\n" +
	"\x06schema\x18\f \x01(\tR\x06schema\x12\x16\n" +
	"\x06tables\x18\r \x03(\tR\x06tables\x12\x1a\n" +
	"\busername\x18\x0e \x01(\tR\busername\x12\x1f\n" +
	"\vclient_host\x18\x0f \x01(\tR\n" +
	"clientHost\x12\x17\n" +
	"\anode_id\x18\x14 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18\x15 \x01(\tR\bnodeName\x12\x1b\n" +
	"\tnode_type\x18\x16 \x01(\tR\bnodeType\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x17 \x01(\tR\tmachineId\x12!\n" +
	"\fcontainer_id\x18\x18 \x01(\tR\vcontainerId\x12%\n" +
	"\x0econtainer_name\x18\x19 \x01(\tR\rcontainerName\x12\x1d\n" +
	"\n" +
	"node_model\x18\x1a \x01(\tR\tnodeModel\x12\x16\n" +
	"\x06region\x18\x1b \x01(\tR\x06region\x12\x0e\n" +
	"\x02az\x18\x1c \x01(\tR\x02az\x12\x1d\n" +
	"\n" +
	"service_id\x18\x1d \x01(\tR\tserviceId\x12!\n" +
	"\fservice_type\x18\x1e \x01(\tR\vserviceType\x12 \n" +
	"\venvironment\x18\x1f \x01(\tR\venvironment\x12\x18\n" +
	"\acluster\x18  \x01(\tR\acluster\x12'\n" +
	"\x0freplication_set\x18! \x01(\tR\x0ereplicationSet\x12\x19\n" +
	"\bagent_id\x18\" \x01(\tR\aagentId\x126\n" +
	"\n" +
	"agent_type\x18# \x01(\x0e2\x17.inventory.v1.AgentTypeR\tagentType\x129\n" +
	"\x06labels\x18$ \x03(\v2!.qan.v1.MetricsBucket.LabelsEntryR\x06labels\x123\n" +
	"\x16period_start_unix_secs\x18( \x01(\rR\x13periodStartUnixSecs\x12,\n" +
	"\x12period_length_secs\x18) \x01(\rR\x10periodLengthSecs\x12\x18\n" +
	"\aexample\x18* \x01(\tR\aexample\x12!\n" +
	"\fis_truncated\x18+ \x01(\bR\visTruncated\x126\n" +
	"\fexample_type\x18, \x01(\x0e2\x13.qan.v1.ExampleTypeR\vexampleType\x12'\n" +
	"\x0fexample_metrics\x18- \x01(\tR\x0eexampleMetrics\x129\n" +
	"\x19num_queries_with_warnings\x182 \x01(\x02R\x16numQueriesWithWarnings\x12?\n" +
	"\bwarnings\x183 \x03(\v2#.qan.v1.MetricsBucket.WarningsEntryR\bwarnings\x125\n" +
	"\x17num_queries_with_errors\x184 \x01(\x02R\x14numQueriesWithErrors\x129\n" +
	"\x06errors\x185 \x03(\v2!.qan.v1.MetricsBucket.ErrorsEntryR\x06errors\x12\x1f\n" +
	"\vnum_queries\x186 \x01(\x02R\n" +
	"numQueries\x12'\n" +
	"\x10m_query_time_cnt\x187 \x01(\x02R\rmQueryTimeCnt\x12'\n" +
	"\x10m_query_time_sum\x188 \x01(\x02R\rmQueryTimeSum\x12'\n" +
	"\x10m_query_time_min\x189 \x01(\x02R\rmQueryTimeMin\x12'\n" +
	"\x10m_query_time_max\x18: \x01(\x02R\rmQueryTimeMax\x12'\n" +
	"\x10m_query_time_p99\x18; \x01(\x02R\rmQueryTimeP99\x12%\n" +
	"\x0fm_lock_time_cnt\x18< \x01(\x02R\fmLockTimeCnt\x12%\n" +
	"\x0fm_lock_time_sum\x18= \x01(\x02R\fmLockTimeSum\x12%\n" +
	"\x0fm_lock_time_min\x18> \x01(\x02R\fmLockTimeMin\x12%\n" +
	"\x0fm_lock_time_max\x18? \x01(\x02R\fmLockTimeMax\x12%\n" +
	"\x0fm_lock_time_p99\x18@ \x01(\x02R\fmLockTimeP99\x12%\n" +
	"\x0fm_rows_sent_cnt\x18A \x01(\x02R\fmRowsSentCnt\x12%\n" +
	"\x0fm_rows_sent_sum\x18B \x01(\x02R\fmRowsSentSum\x12%\n" +
	"\x0fm_rows_sent_min\x18C \x01(\x02R\fmRowsSentMin\x12%\n" +
	"\x0fm_rows_sent_max\x18D \x01(\x02R\fmRowsSentMax\x12%\n" +
	"\x0fm_rows_sent_p99\x18E \x01(\x02R\fmRowsSentP99\x12-\n" +
	"\x13m_rows_examined_cnt\x18F \x01(\x02R\x10mRowsExaminedCnt\x12-\n" +
	"\x13m_rows_examined_sum\x18G \x01(\x02R\x10mRowsExaminedSum\x12-\n" +
	"\x13m_rows_examined_min\x18H \x01(\x02R\x10mRowsExaminedMin\x12-\n" +
	"\x13m_rows_examined_max\x18I \x01(\x02R\x10mRowsExaminedMax\x12-\n" +
	"\x13m_rows_examined_p99\x18J \x01(\x02R\x10mRowsExaminedP99\x12-\n" +
	"\x13m_rows_affected_cnt\x18K \x01(\x02R\x10mRowsAffectedCnt\x12-\n" +
	"\x13m_rows_affected_sum\x18L \x01(\x02R\x10mRowsAffectedSum\x12-\n" +
	"\x13m_rows_affected_min\x18M \x01(\x02R\x10mRowsAffectedMin\x12-\n" +
	"\x13m_rows_affected_max\x18N \x01(\x02R\x10mRowsAffectedMax\x12-\n" +
	"\x13m_rows_affected_p99\x18O \x01(\x02R\x10mRowsAffectedP99\x12%\n" +
	"\x0fm_rows_read_cnt\x18P \x01(\x02R\fmRowsReadCnt\x12%\n" +
	"\x0fm_rows_read_sum\x18Q \x01(\x02R\fmRowsReadSum\x12%\n" +
	"\x0fm_rows_read_min\x18R \x01(\x02R\fmRowsReadMin\x12%\n" +
	"\x0fm_rows_read_max\x18S \x01(\x02R\fmRowsReadMax\x12%\n" +
	"\x0fm_rows_read_p99\x18T \x01(\x02R\fmRowsReadP99\x12+\n" +
	"\x12m_merge_passes_cnt\x18U \x01(\x02R\x0fmMergePassesCnt\x12+\n" +
	"\x12m_merge_passes_sum\x18V \x01(\x02R\x0fmMergePassesSum\x12+\n" +
	"\x12m_merge_passes_min\x18W \x01(\x02R\x0fmMergePassesMin\x12+\n" +
	"\x12m_merge_passes_max\x18X \x01(\x02R\x0fmMergePassesMax\x12+\n" +
	"\x12m_merge_passes_p99\x18Y \x01(\x02R\x0fmMergePassesP99\x12/\n" +
	"\x15m_innodb_io_r_ops_cnt\x18Z \x01(\x02R\x10mInnodbIoROpsCnt\x12/\n" +
	"\x15m_innodb_io_r_ops_sum\x18[ \x01(\x02R\x10mInnodbIoROpsSum\x12/\n" +
	"\x15m_innodb_io_r_ops_min\x18\\ \x01(\x02R\x10mInnodbIoROpsMin\x12/\n" +
	"\x15m_innodb_io_r_ops_max\x18] \x01(\x02R\x10mInnodbIoROpsMax\x12/\n" +
	"\x15m_innodb_io_r_ops_p99\x18^ \x01(\x02R\x10mInnodbIoROpsP99\x123\n" +
	"\x17m_innodb_io_r_bytes_cnt\x18_ \x01(\x02R\x12mInnodbIoRBytesCnt\x123\n" +
	"\x17m_innodb_io_r_bytes_sum\x18` \x01(\x02R\x12mInnodbIoRBytesSum\x123\n" +
	"\x17m_innodb_io_r_bytes_min\x18a \x01(\x02R\x12mInnodbIoRBytesMin\x123\n" +
	"\x17m_innodb_io_r_bytes_max\x18b \x01(\x02R\x12mInnodbIoRBytesMax\x123\n" +
	"\x17m_innodb_io_r_bytes_p99\x18c \x01(\x02R\x12mInnodbIoRBytesP99\x121\n" +
	"\x16m_innodb_io_r_wait_cnt\x18d \x01(\x02R\x11mInnodbIoRWaitCnt\x121\n" +
	"\x16m_innodb_io_r_wait_sum\x18e \x01(\x02R\x11mInnodbIoRWaitSum\x121\n" +
	"\x16m_innodb_io_r_wait_min\x18f \x01(\x02R\x11mInnodbIoRWaitMin\x121\n" +
	"\x16m_innodb_io_r_wait_max\x18g \x01(\x02R\x11mInnodbIoRWaitMax\x121\n" +
	"\x16m_innodb_io_r_wait_p99\x18h \x01(\x02R\x11mInnodbIoRWaitP99\x129\n" +
	"\x1am_innodb_rec_lock_wait_cnt\x18i \x01(\x02R\x15mInnodbRecLockWaitCnt\x129\n" +
	"\x1am_innodb_rec_lock_wait_sum\x18j \x01(\x02R\x15mInnodbRecLockWaitSum\x129\n" +
	"\x1am_innodb_rec_lock_wait_min\x18k \x01(\x02R\x15mInnodbRecLockWaitMin\x129\n" +
	"\x1am_innodb_rec_lock_wait_max\x18l \x01(\x02R\x15mInnodbRecLockWaitMax\x129\n" +
	"\x1am_innodb_rec_lock_wait_p99\x18m \x01(\x02R\x15mInnodbRecLockWaitP99\x124\n" +
	"\x17m_innodb_queue_wait_cnt\x18n \x01(\x02R\x13mInnodbQueueWaitCnt\x124\n" +
	"\x17m_innodb_queue_wait_sum\x18o \x01(\x02R\x13mInnodbQueueWaitSum\x124\n" +
	"\x17m_innodb_queue_wait_min\x18p \x01(\x02R\x13mInnodbQueueWaitMin\x124\n" +
	"\x17m_innodb_queue_wait_max\x18q \x01(\x02R\x13mInnodbQueueWaitMax\x124\n" +
	"\x17m_innodb_queue_wait_p99\x18r \x01(\x02R\x13mInnodbQueueWaitP99\x12<\n" +
	"\x1bm_innodb_pages_distinct_cnt\x18s \x01(\x02R\x17mInnodbPagesDistinctCnt\x12<\n" +
	"\x1bm_innodb_pages_distinct_sum\x18t \x01(\x02R\x17mInnodbPagesDistinctSum\x12<\n" +
	"\x1bm_innodb_pages_distinct_min\x18u \x01(\x02R\x17mInnodbPagesDistinctMin\x12<\n" +
	"\x1bm_innodb_pages_distinct_max\x18v \x01(\x02R\x17mInnodbPagesDistinctMax\x12<\n" +
	"\x1bm_innodb_pages_distinct_p99\x18w \x01(\x02R\x17mInnodbPagesDistinctP99\x12+\n" +
	"\x12m_query_length_cnt\x18x \x01(\x02R\x0fmQueryLengthCnt\x12+\n" +
	"\x12m_query_length_sum\x18y \x01(\x02R\x0fmQueryLengthSum\x12+\n" +
	"\x12m_query_length_min\x18z \x01(\x02R\x0fmQueryLengthMin\x12+\n" +
	"\x12m_query_length_max\x18{ \x01(\x02R\x0fmQueryLengthMax\x12+\n" +
	"\x12m_query_length_p99\x18| \x01(\x02R\x0fmQueryLengthP99\x12'\n" +
	"\x10m_bytes_sent_cnt\x18} \x01(\x02R\rmBytesSentCnt\x12'\n" +
	"\x10m_bytes_sent_sum\x18~ \x01(\x02R\rmBytesSentSum\x12'\n" +
	"\x10m_bytes_sent_min\x18\x7f \x01(\x02R\rmBytesSentMin\x12(\n" +
	"\x10m_bytes_sent_max\x18\x80\x01 \x01(\x02R\rmBytesSentMax\x12(\n" +
	"\x10m_bytes_sent_p99\x18\x81\x01 \x01(\x02R\rmBytesSentP99\x12(\n" +
	"\x10m_tmp_tables_cnt\x18\x82\x01 \x01(\x02R\rmTmpTablesCnt\x12(\n" +
	"\x10m_tmp_tables_sum\x18\x83\x01 \x01(\x02R\rmTmpTablesSum\x12(\n" +
	"\x10m_tmp_tables_min\x18\x84\x01 \x01(\x02R\rmTmpTablesMin\x12(\n" +
	"\x10m_tmp_tables_max\x18\x85\x01 \x01(\x02R\rmTmpTablesMax\x12(\n" +
	"\x10m_tmp_tables_p99\x18\x86\x01 \x01(\x02R\rmTmpTablesP99\x121\n" +
	"\x15m_tmp_disk_tables_cnt\x18\x87\x01 \x01(\x02R\x11mTmpDiskTablesCnt\x121\n" +
	"\x15m_tmp_disk_tables_sum\x18\x88\x01 \x01(\x02R\x11mTmpDiskTablesSum\x121\n" +
	"\x15m_tmp_disk_tables_min\x18\x89\x01 \x01(\x02R\x11mTmpDiskTablesMin\x121\n" +
	"\x15m_tmp_disk_tables_max\x18\x8a\x01 \x01(\x02R\x11mTmpDiskTablesMax\x121\n" +
	"\x15m_tmp_disk_tables_p99\x18\x8b\x01 \x01(\x02R\x11mTmpDiskTablesP99\x121\n" +
	"\x15m_tmp_table_sizes_cnt\x18\x8c\x01 \x01(\x02R\x11mTmpTableSizesCnt\x121\n" +
	"\x15m_tmp_table_sizes_sum\x18\x8d\x01 \x01(\x02R\x11mTmpTableSizesSum\x121\n" +
	"\x15m_tmp_table_sizes_min\x18\x8e\x01 \x01(\x02R\x11mTmpTableSizesMin\x121\n" +
	"\x15m_tmp_table_sizes_max\x18\x8f\x01 \x01(\x02R\x11mTmpTableSizesMax\x121\n" +
	"\x15m_tmp_table_sizes_p99\x18\x90\x01 \x01(\x02R\x11mTmpTableSizesP99\x12 \n" +
	"\fm_qc_hit_cnt\x18\x96\x01 \x01(\x02R\tmQcHitCnt\x12 \n" +
	"\fm_qc_hit_sum\x18\x97\x01 \x01(\x02R\tmQcHitSum\x12&\n" +
	"\x0fm_full_scan_cnt\x18\x98\x01 \x01(\x02R\fmFullScanCnt\x12&\n" +
	"\x0fm_full_scan_sum\x18\x99\x01 \x01(\x02R\fmFullScanSum\x12&\n" +
	"\x0fm_full_join_cnt\x18\x9a\x01 \x01(\x02R\fmFullJoinCnt\x12&\n" +
	"\x0fm_full_join_sum\x18\x9b\x01 \x01(\x02R\fmFullJoinSum\x12&\n" +
	"\x0fm_tmp_table_cnt\x18\x9c\x01 \x01(\x02R\fmTmpTableCnt\x12&\n" +
	"\x0fm_tmp_table_sum\x18\x9d\x01 \x01(\x02R\fmTmpTableSum\x124\n" +
	"\x17m_tmp_table_on_disk_cnt\x18\x9e\x01 \x01(\x02R\x12mTmpTableOnDiskCnt\x124\n" +
	"\x17m_tmp_table_on_disk_sum\x18\x9f\x01 \x01(\x02R\x12mTmpTableOnDiskSum\x12%\n" +
	"\x0em_filesort_cnt\x18\xa0\x01 \x01(\x02R\fmFilesortCnt\x12%\n" +
	"\x0em_filesort_sum\x18\xa1\x01 \x01(\x02R\fmFilesortSum\x123\n" +
	"\x16m_filesort_on_disk_cnt\x18\xa2\x01 \x01(\x02R\x12mFilesortOnDiskCnt\x123\n" +
	"\x16m_filesort_on_disk_sum\x18\xa3\x01 \x01(\x02R\x12mFilesortOnDiskSum\x12>\n" +
	"\x1cm_select_full_range_join_cnt\x18\xa4\x01 \x01(\x02R\x17mSelectFullRangeJoinCnt\x12>\n" +
	"\x1cm_select_full_range_join_sum\x18\xa5\x01 \x01(\x02R\x17mSelectFullRangeJoinSum\x12,\n" +
	"\x12m_select_range_cnt\x18\xa6\x01 \x01(\x02R\x0fmSelectRangeCnt\x12,\n" +
	"\x12m_select_range_sum\x18\xa7\x01 \x01(\x02R\x0fmSelectRangeSum\x127\n" +
	"\x18m_select_range_check_cnt\x18\xa8\x01 \x01(\x02R\x14mSelectRangeCheckCnt\x127\n" +
	"\x18m_select_range_check_sum\x18\xa9\x01 \x01(\x02R\x14mSelectRangeCheckSum\x12(\n" +
	"\x10m_sort_range_cnt\x18\xaa\x01 \x01(\x02R\rmSortRangeCnt\x12(\n" +
	"\x10m_sort_range_sum\x18\xab\x01 \x01(\x02R\rmSortRangeSum\x12&\n" +
	"\x0fm_sort_rows_cnt\x18\xac\x01 \x01(\x02R\fmSortRowsCnt\x12&\n" +
	"\x0fm_sort_rows_sum\x18\xad\x01 \x01(\x02R\fmSortRowsSum\x12&\n" +
	"\x0fm_sort_scan_cnt\x18\xae\x01 \x01(\x02R\fmSortScanCnt\x12&\n" +
	"\x0fm_sort_scan_sum\x18\xaf\x01 \x01(\x02R\fmSortScanSum\x12-\n" +
	"\x13m_no_index_used_cnt\x18\xb0\x01 \x01(\x02R\x0fmNoIndexUsedCnt\x12-\n" +
	"\x13m_no_index_used_sum\x18\xb1\x01 \x01(\x02R\x0fmNoIndexUsedSum\x126\n" +
	"\x18m_no_good_index_used_cnt\x18\xb2\x01 \x01(\x02R\x13mNoGoodIndexUsedCnt\x126\n" +
	"\x18m_no_good_index_used_sum\x18\xb3\x01 \x01(\x02R\x13mNoGoodIndexUsedSum\x12.\n" +
	"\x13m_docs_returned_cnt\x18\xbe\x01 \x01(\x02R\x10mDocsReturnedCnt\x12.\n" +
	"\x13m_docs_returned_sum\x18\xbf\x01 \x01(\x02R\x10mDocsReturnedSum\x12.\n" +
	"\x13m_docs_returned_min\x18\xc0\x01 \x01(\x02R\x10mDocsReturnedMin\x12.\n" +
	"\x13m_docs_returned_max\x18\xc1\x01 \x01(\x02R\x10mDocsReturnedMax\x12.\n" +
	"\x13m_docs_returned_p99\x18\x93\x01 \x01(\x02R\x10mDocsReturnedP99\x122\n" +
	"\x15m_response_length_cnt\x18\xc3\x01 \x01(\x02R\x12mResponseLengthCnt\x122\n" +
	"\x15m_response_length_sum\x18\xc4\x01 \x01(\x02R\x12mResponseLengthSum\x122\n" +
	"\x15m_response_length_min\x18\xc5\x01 \x01(\x02R\x12mResponseLengthMin\x122\n" +
	"\x15m_response_length_max\x18\xc6\x01 \x01(\x02R\x12mResponseLengthMax\x122\n" +
	"\x15m_response_length_p99\x18\xc7\x01 \x01(\x02R\x12mResponseLengthP99\x12,\n" +
	"\x12m_docs_scanned_cnt\x18\xc8\x01 \x01(\x02R\x0fmDocsScannedCnt\x12,\n" +
	"\x12m_docs_scanned_sum\x18\xc9\x01 \x01(\x02R\x0fmDocsScannedSum\x12,\n" +
	"\x12m_docs_scanned_min\x18\xca\x01 \x01(\x02R\x0fmDocsScannedMin\x12,\n" +
	"\x12m_docs_scanned_max\x18\xcb\x01 \x01(\x02R\x0fmDocsScannedMax\x12,\n" +
	"\x12m_docs_scanned_p99\x18\xcc\x01 \x01(\x02R\x0fmDocsScannedP99\x12\"\n" +
	"\fplan_summary\x18\xcd\x01 \x01(\tR\vplanSummary\x12.\n" +
	"\x13m_docs_examined_cnt\x18\x8d\x02 \x01(\x02R\x10mDocsExaminedCnt\x12.\n" +
	"\x13m_docs_examined_sum\x18\x8e\x02 \x01(\x02R\x10mDocsExaminedSum\x12.\n" +
	"\x13m_docs_examined_min\x18\x8f\x02 \x01(\x02R\x10mDocsExaminedMin\x12.\n" +
	"\x13m_docs_examined_max\x18\x90\x02 \x01(\x02R\x10mDocsExaminedMax\x12.\n" +
	"\x13m_docs_examined_p99\x18\x91\x02 \x01(\x02R\x10mDocsExaminedP99\x12.\n" +
	"\x13m_keys_examined_cnt\x18\x92\x02 \x01(\x02R\x10mKeysExaminedCnt\x12.\n" +
	"\x13m_keys_examined_sum\x18\x93\x02 \x01(\x02R\x10mKeysExaminedSum\x12.\n" +
	"\x13m_keys_examined_min\x18\x94\x02 \x01(\x02R\x10mKeysExaminedMin\x12.\n" +
	"\x13m_keys_examined_max\x18\x95\x02 \x01(\x02R\x10mKeysExaminedMax\x12.\n" +
	"\x13m_keys_examined_p99\x18\x96\x02 \x01(\x02R\x10mKeysExaminedP99\x12\\\n" +
	",m_locks_global_acquire_count_read_shared_cnt\x18\x97\x02 \x01(\x02R%mLocksGlobalAcquireCountReadSharedCnt\x12\\\n" +
	",m_locks_global_acquire_count_read_shared_sum\x18\x98\x02 \x01(\x02R%mLocksGlobalAcquireCountReadSharedSum\x12^\n" +
	"-m_locks_global_acquire_count_write_shared_cnt\x18\x99\x02 \x01(\x02R&mLocksGlobalAcquireCountWriteSharedCnt\x12^\n" +
	"-m_locks_global_acquire_count_write_shared_sum\x18\x9a\x02 \x01(\x02R&mLocksGlobalAcquireCountWriteSharedSum\x12`\n" +
	".m_locks_database_acquire_count_read_shared_cnt\x18\x9b\x02 \x01(\x02R'mLocksDatabaseAcquireCountReadSharedCnt\x12`\n" +
	".m_locks_database_acquire_count_read_shared_sum\x18\x9c\x02 \x01(\x02R'mLocksDatabaseAcquireCountReadSharedSum\x12i\n" +
	"3m_locks_database_acquire_wait_count_read_shared_cnt\x18\x9d\x02 \x01(\x02R+mLocksDatabaseAcquireWaitCountReadSharedCnt\x12i\n" +
	"3m_locks_database_acquire_wait_count_read_shared_sum\x18\x9e\x02 \x01(\x02R+mLocksDatabaseAcquireWaitCountReadSharedSum\x12o\n" +
	"6m_locks_database_time_acquiring_micros_read_shared_cnt\x18\x9f\x02 \x01(\x02R.mLocksDatabaseTimeAcquiringMicrosReadSharedCnt\x12o\n" +
	"6m_locks_database_time_acquiring_micros_read_shared_sum\x18\xa0\x02 \x01(\x02R.mLocksDatabaseTimeAcquiringMicrosReadSharedSum\x12o\n" +
	"6m_locks_database_time_acquiring_micros_read_shared_min\x18\xa1\x02 \x01(\x02R.mLocksDatabaseTimeAcquiringMicrosReadSharedMin\x12o\n" +
	"6m_locks_database_time_acquiring_micros_read_shared_max\x18\xa2\x02 \x01(\x02R.mLocksDatabaseTimeAcquiringMicrosReadSharedMax\x12o\n" +
	"6m_locks_database_time_acquiring_micros_read_shared_p99\x18\xa3\x02 \x01(\x02R.mLocksDatabaseTimeAcquiringMicrosReadSharedP99\x12d\n" +
	"0m_locks_collection_acquire_count_read_shared_cnt\x18\xa4\x02 \x01(\x02R)mLocksCollectionAcquireCountReadSharedCnt\x12d\n" +
	"0m_locks_collection_acquire_count_read_shared_sum\x18\xa5\x02 \x01(\x02R)mLocksCollectionAcquireCountReadSharedSum\x127\n" +
	"\x18m_storage_bytes_read_cnt\x18\xa6\x02 \x01(\x02R\x14mStorageBytesReadCnt\x127\n" +
	"\x18m_storage_bytes_read_sum\x18\xa7\x02 \x01(\x02R\x14mStorageBytesReadSum\x127\n" +
	"\x18m_storage_bytes_read_min\x18\xa8\x02 \x01(\x02R\x14mStorageBytesReadMin\x127\n" +
	"\x18m_storage_bytes_read_max\x18\xa9\x02 \x01(\x02R\x14mStorageBytesReadMax\x127\n" +
	"\x18m_storage_bytes_read_p99\x18\xaa\x02 \x01(\x02R\x14mStorageBytesReadP99\x12H\n" +
	"!m_storage_time_reading_micros_cnt\x18\xab\x02 \x01(\x02R\x1cmStorageTimeReadingMicrosCnt\x12H\n" +
	"!m_storage_time_reading_micros_sum\x18\xac\x02 \x01(\x02R\x1cmStorageTimeReadingMicrosSum\x12H\n" +
	"!m_storage_time_reading_micros_min\x18\xad\x02 \x01(\x02R\x1cmStorageTimeReadingMicrosMin\x12H\n" +
	"!m_storage_time_reading_micros_max\x18\xae\x02 \x01(\x02R\x1cmStorageTimeReadingMicrosMax\x12H\n" +
	"!m_storage_time_reading_micros_p99\x18\xaf\x02 \x01(\x02R\x1cmStorageTimeReadingMicrosP99\x121\n" +
	"\x15m_shared_blks_hit_cnt\x18\xd2\x01 \x01(\x02R\x11mSharedBlksHitCnt\x121\n" +
	"\x15m_shared_blks_hit_sum\x18\xd3\x01 \x01(\x02R\x11mSharedBlksHitSum\x123\n" +
	"\x16m_shared_blks_read_cnt\x18\xd4\x01 \x01(\x02R\x12mSharedBlksReadCnt\x123\n" +
	"\x16m_shared_blks_read_sum\x18\xd5\x01 \x01(\x02R\x12mSharedBlksReadSum\x129\n" +
	"\x19m_shared_blks_dirtied_cnt\x18\xd6\x01 \x01(\x02R\x15mSharedBlksDirtiedCnt\x129\n" +
	"\x19m_shared_blks_dirtied_sum\x18\xd7\x01 \x01(\x02R\x15mSharedBlksDirtiedSum\x129\n" +
	"\x19m_shared_blks_written_cnt\x18\xd8\x01 \x01(\x02R\x15mSharedBlksWrittenCnt\x129\n" +
	"\x19m_shared_blks_written_sum\x18\xd9\x01 \x01(\x02R\x15mSharedBlksWrittenSum\x12/\n" +
	"\x14m_local_blks_hit_cnt\x18\xda\x01 \x01(\x02R\x10mLocalBlksHitCnt\x12/\n" +
	"\x14m_local_blks_hit_sum\x18\xdb\x01 \x01(\x02R\x10mLocalBlksHitSum\x121\n" +
	"\x15m_local_blks_read_cnt\x18\xdc\x01 \x01(\x02R\x11mLocalBlksReadCnt\x121\n" +
	"\x15m_local_blks_read_sum\x18\xdd\x01 \x01(\x02R\x11mLocalBlksReadSum\x127\n" +
	"\x18m_local_blks_dirtied_cnt\x18\xde\x01 \x01(\x02R\x14mLocalBlksDirtiedCnt\x127\n" +
	"\x18m_local_blks_dirtied_sum\x18\xdf\x01 \x01(\x02R\x14mLocalBlksDirtiedSum\x127\n" +
	"\x18m_local_blks_written_cnt\x18\xe0\x01 \x01(\x02R\x14mLocalBlksWrittenCnt\x127\n" +
	"\x18m_local_blks_written_sum\x18\xe1\x01 \x01(\x02R\x14mLocalBlksWrittenSum\x12/\n" +
	"\x14m_temp_blks_read_cnt\x18\xe2\x01 \x01(\x02R\x10mTempBlksReadCnt\x12/\n" +
	"\x14m_temp_blks_read_sum\x18\xe3\x01 \x01(\x02R\x10mTempBlksReadSum\x125\n" +
	"\x17m_temp_blks_written_cnt\x18\xe4\x01 \x01(\x02R\x13mTempBlksWrittenCnt\x125\n" +
	"\x17m_temp_blks_written_sum\x18\xe5\x01 \x01(\x02R\x13mTempBlksWrittenSum\x12-\n" +
	"\x13m_blk_read_time_cnt\x18\xe6\x01 \x01(\x02R\x0fmBlkReadTimeCnt\x12-\n" +
	"\x13m_blk_read_time_sum\x18\xe7\x01 \x01(\x02R\x0fmBlkReadTimeSum\x12/\n" +
	"\x14m_blk_write_time_cnt\x18\xe8\x01 \x01(\x02R\x10mBlkWriteTimeCnt\x12/\n" +
	"\x14m_blk_write_time_sum\x18\xe9\x01 \x01(\x02R\x10mBlkWriteTimeSum\x12:\n" +
	"\x1am_shared_blk_read_time_cnt\x18\xea\x01 \x01(\x02R\x15mSharedBlkReadTimeCnt\x12:\n" +
	"\x1am_shared_blk_read_time_sum\x18\xeb\x01 \x01(\x02R\x15mSharedBlkReadTimeSum\x12<\n" +
	"\x1bm_shared_blk_write_time_cnt\x18\xec\x01 \x01(\x02R\x16mSharedBlkWriteTimeCnt\x12<\n" +
	"\x1bm_shared_blk_write_time_sum\x18\xed\x01 \x01(\x02R\x16mSharedBlkWriteTimeSum\x128\n" +
	"\x19m_local_blk_read_time_cnt\x18\xee\x01 \x01(\x02R\x14mLocalBlkReadTimeCnt\x128\n" +
	"\x19m_local_blk_read_time_sum\x18\xef\x01 \x01(\x02R\x14mLocalBlkReadTimeSum\x12:\n" +
	"\x1am_local_blk_write_time_cnt\x18\xf0\x01 \x01(\x02R\x15mLocalBlkWriteTimeCnt\x12:\n" +
	"\x1am_local_blk_write_time_sum\x18\xf1\x01 \x01(\x02R\x15mLocalBlkWriteTimeSum\x12-\n" +
	"\x13m_cpu_user_time_cnt\x18\xf2\x01 \x01(\x02R\x0fmCpuUserTimeCnt\x12-\n" +
	"\x13m_cpu_user_time_sum\x18\xf3\x01 \x01(\x02R\x0fmCpuUserTimeSum\x12+\n" +
	"\x12m_cpu_sys_time_cnt\x18\xf4\x01 \x01(\x02R\x0emCpuSysTimeCnt\x12+\n" +
	"\x12m_cpu_sys_time_sum\x18\xf5\x01 \x01(\x02R\x0emCpuSysTimeSum\x12\x1a\n" +
	"\bcmd_type\x18\xf6\x01 \x01(\tR\acmdType\x12*\n" +
	"\x11m_plans_calls_sum\x18\xfa\x01 \x01(\x02R\x0emPlansCallsSum\x12*\n" +
	"\x11m_plans_calls_cnt\x18\xfb\x01 \x01(\x02R\x0emPlansCallsCnt\x12*\n" +
	"\x11m_wal_records_sum\x18\xfc\x01 \x01(\x02R\x0emWalRecordsSum\x12*\n" +
	"\x11m_wal_records_cnt\x18\xfd\x01 \x01(\x02R\x0emWalRecordsCnt\x12\"\n" +
	"\rm_wal_fpi_sum\x18\xfe\x01 \x01(\x02R\n" +
	"mWalFpiSum\x12\"\n" +
	"\rm_wal_fpi_cnt\x18\xff\x01 \x01(\x02R\n" +
	"mWalFpiCnt\x12&\n" +
	"\x0fm_wal_bytes_sum\x18\x80\x02 \x01(\x02R\fmWalBytesSum\x12&\n" +
	"\x0fm_wal_bytes_cnt\x18\x81\x02 \x01(\x02R\fmWalBytesCnt\x12&\n" +
	"\x0fm_plan_time_sum\x18\x82\x02 \x01(\x02R\fmPlanTimeSum\x12&\n" +
	"\x0fm_plan_time_cnt\x18\x83\x02 \x01(\x02R\fmPlanTimeCnt\x12&\n" +
	"\x0fm_plan_time_min\x18\x84\x02 \x01(\x02R\fmPlanTimeMin\x12&\n" +
	"\x0fm_plan_time_max\x18\x85\x02 \x01(\x02R\fmPlanTimeMax\x12 \n" +
	"\vtop_queryid\x18\x87\x02 \x01(\tR\n" +
	"topQueryid\x12\x1c\n" +
	"\ttop_query\x18\x88\x02 \x01(\tR\btopQuery\x12*\n" +
	"\x10application_name\x18\x89\x02 \x01(\tR\x0fapplicationName\x12\x17\n" +
	"\x06planid\x18\x8a\x02 \x01(\tR\x06planid\x12\x1e\n" +
	"\n" +
	"query_plan\x18\x8b\x02 \x01(\tR\tqueryPlan\x12(\n" +
	"\x0fhistogram_items\x18\x8c\x02 \x03(\tR\x0ehistogramItems\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rWarningsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a9\n" +
	"\vErrorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\x11\n" +
	"\x0fCollectResponse2`\n" +
	"\x10CollectorService\x12:\n" +
	"\aCollect\x12\x16.qan.v1.CollectRequest\x1a\x17.qan.v1.CollectResponse\x1a\x10\xfa\xd2\xe4\x93\x02\n" +
	"\x12\bINTERNALB~\n" +
	"\n" +
	"com.qan.v1B\x0eCollectorProtoP\x01Z'github.com/percona/pmm/api/qan/v1;qanv1\xa2\x02\x03QXX\xaa\x02\x06Qan.V1\xca\x02\x06Qan\\V1\xe2\x02\x12Qan\\V1\\GPBMetadata\xea\x02\aQan::V1b\x06proto3"

var (
	file_qan_v1_collector_proto_rawDescOnce sync.Once
	file_qan_v1_collector_proto_rawDescData []byte
)

func file_qan_v1_collector_proto_rawDescGZIP() []byte {
	file_qan_v1_collector_proto_rawDescOnce.Do(func() {
		file_qan_v1_collector_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qan_v1_collector_proto_rawDesc), len(file_qan_v1_collector_proto_rawDesc)))
	})
	return file_qan_v1_collector_proto_rawDescData
}

var (
	file_qan_v1_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
	file_qan_v1_collector_proto_goTypes  = []any{
		(*CollectRequest)(nil),  // 0: qan.v1.CollectRequest
		(*MetricsBucket)(nil),   // 1: qan.v1.MetricsBucket
		(*CollectResponse)(nil), // 2: qan.v1.CollectResponse
		nil,                     // 3: qan.v1.MetricsBucket.LabelsEntry
		nil,                     // 4: qan.v1.MetricsBucket.WarningsEntry
		nil,                     // 5: qan.v1.MetricsBucket.ErrorsEntry
		(v1.AgentType)(0),       // 6: inventory.v1.AgentType
		(ExampleType)(0),        // 7: qan.v1.ExampleType
	}
)

var file_qan_v1_collector_proto_depIdxs = []int32{
	1, // 0: qan.v1.CollectRequest.metrics_bucket:type_name -> qan.v1.MetricsBucket
	6, // 1: qan.v1.MetricsBucket.agent_type:type_name -> inventory.v1.AgentType
	3, // 2: qan.v1.MetricsBucket.labels:type_name -> qan.v1.MetricsBucket.LabelsEntry
	7, // 3: qan.v1.MetricsBucket.example_type:type_name -> qan.v1.ExampleType
	4, // 4: qan.v1.MetricsBucket.warnings:type_name -> qan.v1.MetricsBucket.WarningsEntry
	5, // 5: qan.v1.MetricsBucket.errors:type_name -> qan.v1.MetricsBucket.ErrorsEntry
	0, // 6: qan.v1.CollectorService.Collect:input_type -> qan.v1.CollectRequest
	2, // 7: qan.v1.CollectorService.Collect:output_type -> qan.v1.CollectResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_qan_v1_collector_proto_init() }
func file_qan_v1_collector_proto_init() {
	if File_qan_v1_collector_proto != nil {
		return
	}
	file_qan_v1_qan_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qan_v1_collector_proto_rawDesc), len(file_qan_v1_collector_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qan_v1_collector_proto_goTypes,
		DependencyIndexes: file_qan_v1_collector_proto_depIdxs,
		MessageInfos:      file_qan_v1_collector_proto_msgTypes,
	}.Build()
	File_qan_v1_collector_proto = out.File
	file_qan_v1_collector_proto_goTypes = nil
	file_qan_v1_collector_proto_depIdxs = nil
}
