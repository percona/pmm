// Code generated by go-swagger; DO NOT EDIT.

package qan_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetQueryPlanReader is a Reader for the GetQueryPlan structure.
type GetQueryPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQueryPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQueryPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetQueryPlanDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetQueryPlanOK creates a GetQueryPlanOK with default headers values
func NewGetQueryPlanOK() *GetQueryPlanOK {
	return &GetQueryPlanOK{}
}

/*
GetQueryPlanOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetQueryPlanOK struct {
	Payload *GetQueryPlanOKBody
}

// IsSuccess returns true when this get query plan Ok response has a 2xx status code
func (o *GetQueryPlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get query plan Ok response has a 3xx status code
func (o *GetQueryPlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query plan Ok response has a 4xx status code
func (o *GetQueryPlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get query plan Ok response has a 5xx status code
func (o *GetQueryPlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get query plan Ok response a status code equal to that given
func (o *GetQueryPlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get query plan Ok response
func (o *GetQueryPlanOK) Code() int {
	return 200
}

func (o *GetQueryPlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/qan/query/{queryid}/plan][%d] getQueryPlanOk %s", 200, payload)
}

func (o *GetQueryPlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/qan/query/{queryid}/plan][%d] getQueryPlanOk %s", 200, payload)
}

func (o *GetQueryPlanOK) GetPayload() *GetQueryPlanOKBody {
	return o.Payload
}

func (o *GetQueryPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetQueryPlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryPlanDefault creates a GetQueryPlanDefault with default headers values
func NewGetQueryPlanDefault(code int) *GetQueryPlanDefault {
	return &GetQueryPlanDefault{
		_statusCode: code,
	}
}

/*
GetQueryPlanDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetQueryPlanDefault struct {
	_statusCode int

	Payload *GetQueryPlanDefaultBody
}

// IsSuccess returns true when this get query plan default response has a 2xx status code
func (o *GetQueryPlanDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get query plan default response has a 3xx status code
func (o *GetQueryPlanDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get query plan default response has a 4xx status code
func (o *GetQueryPlanDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get query plan default response has a 5xx status code
func (o *GetQueryPlanDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get query plan default response a status code equal to that given
func (o *GetQueryPlanDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get query plan default response
func (o *GetQueryPlanDefault) Code() int {
	return o._statusCode
}

func (o *GetQueryPlanDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/qan/query/{queryid}/plan][%d] GetQueryPlan default %s", o._statusCode, payload)
}

func (o *GetQueryPlanDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/qan/query/{queryid}/plan][%d] GetQueryPlan default %s", o._statusCode, payload)
}

func (o *GetQueryPlanDefault) GetPayload() *GetQueryPlanDefaultBody {
	return o.Payload
}

func (o *GetQueryPlanDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetQueryPlanDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetQueryPlanDefaultBody get query plan default body
swagger:model GetQueryPlanDefaultBody
*/
type GetQueryPlanDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetQueryPlanDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get query plan default body
func (o *GetQueryPlanDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQueryPlanDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetQueryPlan default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetQueryPlan default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get query plan default body based on the context it is used
func (o *GetQueryPlanDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQueryPlanDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetQueryPlan default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetQueryPlan default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQueryPlanDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQueryPlanDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetQueryPlanDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetQueryPlanDefaultBodyDetailsItems0 get query plan default body details items0
swagger:model GetQueryPlanDefaultBodyDetailsItems0
*/
type GetQueryPlanDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`

	// get query plan default body details items0
	GetQueryPlanDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *GetQueryPlanDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GetQueryPlanDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.GetQueryPlanDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o GetQueryPlanDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.GetQueryPlanDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.GetQueryPlanDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this get query plan default body details items0
func (o *GetQueryPlanDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get query plan default body details items0 based on context it is used
func (o *GetQueryPlanDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetQueryPlanDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQueryPlanDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetQueryPlanDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetQueryPlanOKBody GetQueryPlanResponse contains planid and query_plan.
swagger:model GetQueryPlanOKBody
*/
type GetQueryPlanOKBody struct {
	// planid
	Planid string `json:"planid,omitempty"`

	// query plan
	QueryPlan string `json:"query_plan,omitempty"`
}

// Validate validates this get query plan OK body
func (o *GetQueryPlanOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get query plan OK body based on context it is used
func (o *GetQueryPlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetQueryPlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQueryPlanOKBody) UnmarshalBinary(b []byte) error {
	var res GetQueryPlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
