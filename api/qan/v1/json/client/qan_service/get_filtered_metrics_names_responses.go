// Code generated by go-swagger; DO NOT EDIT.

package qan_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFilteredMetricsNamesReader is a Reader for the GetFilteredMetricsNames structure.
type GetFilteredMetricsNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFilteredMetricsNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFilteredMetricsNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetFilteredMetricsNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFilteredMetricsNamesOK creates a GetFilteredMetricsNamesOK with default headers values
func NewGetFilteredMetricsNamesOK() *GetFilteredMetricsNamesOK {
	return &GetFilteredMetricsNamesOK{}
}

/*
GetFilteredMetricsNamesOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetFilteredMetricsNamesOK struct {
	Payload *GetFilteredMetricsNamesOKBody
}

func (o *GetFilteredMetricsNamesOK) Error() string {
	return fmt.Sprintf("[POST /v1/qan/metrics:getFilters][%d] getFilteredMetricsNamesOk  %+v", 200, o.Payload)
}

func (o *GetFilteredMetricsNamesOK) GetPayload() *GetFilteredMetricsNamesOKBody {
	return o.Payload
}

func (o *GetFilteredMetricsNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetFilteredMetricsNamesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilteredMetricsNamesDefault creates a GetFilteredMetricsNamesDefault with default headers values
func NewGetFilteredMetricsNamesDefault(code int) *GetFilteredMetricsNamesDefault {
	return &GetFilteredMetricsNamesDefault{
		_statusCode: code,
	}
}

/*
GetFilteredMetricsNamesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetFilteredMetricsNamesDefault struct {
	_statusCode int

	Payload *GetFilteredMetricsNamesDefaultBody
}

// Code gets the status code for the get filtered metrics names default response
func (o *GetFilteredMetricsNamesDefault) Code() int {
	return o._statusCode
}

func (o *GetFilteredMetricsNamesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/qan/metrics:getFilters][%d] GetFilteredMetricsNames default  %+v", o._statusCode, o.Payload)
}

func (o *GetFilteredMetricsNamesDefault) GetPayload() *GetFilteredMetricsNamesDefaultBody {
	return o.Payload
}

func (o *GetFilteredMetricsNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetFilteredMetricsNamesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetFilteredMetricsNamesBody GetFilteredMetricsNamesRequest contains period for which we need filters.
swagger:model GetFilteredMetricsNamesBody
*/
type GetFilteredMetricsNamesBody struct {
	// period start from
	// Format: date-time
	PeriodStartFrom strfmt.DateTime `json:"period_start_from,omitempty"`

	// period start to
	// Format: date-time
	PeriodStartTo strfmt.DateTime `json:"period_start_to,omitempty"`

	// main metric name
	MainMetricName string `json:"main_metric_name,omitempty"`

	// labels
	Labels []*GetFilteredMetricsNamesParamsBodyLabelsItems0 `json:"labels"`
}

// Validate validates this get filtered metrics names body
func (o *GetFilteredMetricsNamesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeriodStartFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePeriodStartTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesBody) validatePeriodStartFrom(formats strfmt.Registry) error {
	if swag.IsZero(o.PeriodStartFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"period_start_from", "body", "date-time", o.PeriodStartFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetFilteredMetricsNamesBody) validatePeriodStartTo(formats strfmt.Registry) error {
	if swag.IsZero(o.PeriodStartTo) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"period_start_to", "body", "date-time", o.PeriodStartTo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetFilteredMetricsNamesBody) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get filtered metrics names body based on the context it is used
func (o *GetFilteredMetricsNamesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesBody) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Labels); i++ {
		if o.Labels[i] != nil {
			if err := o.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesBody) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesDefaultBody get filtered metrics names default body
swagger:model GetFilteredMetricsNamesDefaultBody
*/
type GetFilteredMetricsNamesDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetFilteredMetricsNamesDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get filtered metrics names default body
func (o *GetFilteredMetricsNamesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetFilteredMetricsNames default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetFilteredMetricsNames default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get filtered metrics names default body based on the context it is used
func (o *GetFilteredMetricsNamesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetFilteredMetricsNames default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetFilteredMetricsNames default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesDefaultBodyDetailsItems0 get filtered metrics names default body details items0
swagger:model GetFilteredMetricsNamesDefaultBodyDetailsItems0
*/
type GetFilteredMetricsNamesDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get filtered metrics names default body details items0
func (o *GetFilteredMetricsNamesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get filtered metrics names default body details items0 based on context it is used
func (o *GetFilteredMetricsNamesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesOKBody GetFilteredMetricsNamesResponse is map of labels for given period by key.
// Key is label's name and value is label's value and how many times it occur.
swagger:model GetFilteredMetricsNamesOKBody
*/
type GetFilteredMetricsNamesOKBody struct {
	// labels
	Labels map[string]GetFilteredMetricsNamesOKBodyLabelsAnon `json:"labels,omitempty"`
}

// Validate validates this get filtered metrics names OK body
func (o *GetFilteredMetricsNamesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesOKBody) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for k := range o.Labels {

		if swag.IsZero(o.Labels[k]) { // not required
			continue
		}
		if val, ok := o.Labels[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFilteredMetricsNamesOk" + "." + "labels" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getFilteredMetricsNamesOk" + "." + "labels" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get filtered metrics names OK body based on the context it is used
func (o *GetFilteredMetricsNamesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesOKBody) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {
	for k := range o.Labels {
		if val, ok := o.Labels[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBody) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesOKBodyLabelsAnon ListLabels is list of label's values: duplicates are impossible.
swagger:model GetFilteredMetricsNamesOKBodyLabelsAnon
*/
type GetFilteredMetricsNamesOKBodyLabelsAnon struct {
	// name
	Name []*GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0 `json:"name"`
}

// Validate validates this get filtered metrics names OK body labels anon
func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	for i := 0; i < len(o.Name); i++ {
		if swag.IsZero(o.Name[i]) { // not required
			continue
		}

		if o.Name[i] != nil {
			if err := o.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get filtered metrics names OK body labels anon based on the context it is used
func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) contextValidateName(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Name); i++ {
		if o.Name[i] != nil {
			if err := o.Name[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBodyLabelsAnon) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesOKBodyLabelsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0 Values is label values and main metric percent and per second.
swagger:model GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0
*/
type GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0 struct {
	// value
	Value string `json:"value,omitempty"`

	// main metric percent
	MainMetricPercent float32 `json:"main_metric_percent,omitempty"`

	// main metric per sec
	MainMetricPerSec float32 `json:"main_metric_per_sec,omitempty"`
}

// Validate validates this get filtered metrics names OK body labels anon name items0
func (o *GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get filtered metrics names OK body labels anon name items0 based on context it is used
func (o *GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesOKBodyLabelsAnonNameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetFilteredMetricsNamesParamsBodyLabelsItems0 MapFieldEntry allows to pass labels/dimensions in form like {"server": ["db1", "db2"...]}.
swagger:model GetFilteredMetricsNamesParamsBodyLabelsItems0
*/
type GetFilteredMetricsNamesParamsBodyLabelsItems0 struct {
	// key
	Key string `json:"key,omitempty"`

	// value
	Value []string `json:"value"`
}

// Validate validates this get filtered metrics names params body labels items0
func (o *GetFilteredMetricsNamesParamsBodyLabelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get filtered metrics names params body labels items0 based on context it is used
func (o *GetFilteredMetricsNamesParamsBodyLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFilteredMetricsNamesParamsBodyLabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFilteredMetricsNamesParamsBodyLabelsItems0) UnmarshalBinary(b []byte) error {
	var res GetFilteredMetricsNamesParamsBodyLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
