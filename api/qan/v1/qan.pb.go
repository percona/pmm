// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: qan/v1/qan.proto

package qanv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExampleType is a type of query example selected for this query class in given period of time.
type ExampleType int32

const (
	ExampleType_EXAMPLE_TYPE_UNSPECIFIED ExampleType = 0
	ExampleType_EXAMPLE_TYPE_RANDOM      ExampleType = 1
	ExampleType_EXAMPLE_TYPE_SLOWEST     ExampleType = 2
	ExampleType_EXAMPLE_TYPE_FASTEST     ExampleType = 3
	ExampleType_EXAMPLE_TYPE_WITH_ERROR  ExampleType = 4
)

// Enum value maps for ExampleType.
var (
	ExampleType_name = map[int32]string{
		0: "EXAMPLE_TYPE_UNSPECIFIED",
		1: "EXAMPLE_TYPE_RANDOM",
		2: "EXAMPLE_TYPE_SLOWEST",
		3: "EXAMPLE_TYPE_FASTEST",
		4: "EXAMPLE_TYPE_WITH_ERROR",
	}
	ExampleType_value = map[string]int32{
		"EXAMPLE_TYPE_UNSPECIFIED": 0,
		"EXAMPLE_TYPE_RANDOM":      1,
		"EXAMPLE_TYPE_SLOWEST":     2,
		"EXAMPLE_TYPE_FASTEST":     3,
		"EXAMPLE_TYPE_WITH_ERROR":  4,
	}
)

func (x ExampleType) Enum() *ExampleType {
	p := new(ExampleType)
	*p = x
	return p
}

func (x ExampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_qan_v1_qan_proto_enumTypes[0].Descriptor()
}

func (ExampleType) Type() protoreflect.EnumType {
	return &file_qan_v1_qan_proto_enumTypes[0]
}

func (x ExampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleType.Descriptor instead.
func (ExampleType) EnumDescriptor() ([]byte, []int) {
	return file_qan_v1_qan_proto_rawDescGZIP(), []int{0}
}

// Point contains values that represents abscissa (time) and ordinate (volume etc.)
// of every point in a coordinate system of Sparklines.
type Point struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The serial number of the chart point from the largest time in the time interval to the lowest time in the time range.
	Point uint32 `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	// Duration beetween two points.
	TimeFrame uint32 `protobuf:"varint,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	// Time of point in format RFC3339.
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// load is query_time / time_range.
	Load float32 `protobuf:"fixed32,4,opt,name=load,proto3" json:"load,omitempty"`
	// number of queries in bucket.
	NumQueriesPerSec float32 `protobuf:"fixed32,5,opt,name=num_queries_per_sec,json=numQueriesPerSec,proto3" json:"num_queries_per_sec,omitempty"`
	// number of queries with errors.
	NumQueriesWithErrorsPerSec float32 `protobuf:"fixed32,6,opt,name=num_queries_with_errors_per_sec,json=numQueriesWithErrorsPerSec,proto3" json:"num_queries_with_errors_per_sec,omitempty"`
	// number of queries with warnings.
	NumQueriesWithWarningsPerSec float32 `protobuf:"fixed32,7,opt,name=num_queries_with_warnings_per_sec,json=numQueriesWithWarningsPerSec,proto3" json:"num_queries_with_warnings_per_sec,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSumPerSec float32 `protobuf:"fixed32,8,opt,name=m_query_time_sum_per_sec,json=mQueryTimeSumPerSec,proto3" json:"m_query_time_sum_per_sec,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSumPerSec float32 `protobuf:"fixed32,9,opt,name=m_lock_time_sum_per_sec,json=mLockTimeSumPerSec,proto3" json:"m_lock_time_sum_per_sec,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSumPerSec float32 `protobuf:"fixed32,10,opt,name=m_rows_sent_sum_per_sec,json=mRowsSentSumPerSec,proto3" json:"m_rows_sent_sum_per_sec,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSumPerSec float32 `protobuf:"fixed32,11,opt,name=m_rows_examined_sum_per_sec,json=mRowsExaminedSumPerSec,proto3" json:"m_rows_examined_sum_per_sec,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSumPerSec float32 `protobuf:"fixed32,12,opt,name=m_rows_affected_sum_per_sec,json=mRowsAffectedSumPerSec,proto3" json:"m_rows_affected_sum_per_sec,omitempty"`
	// The number of rows read from tables.
	MRowsReadSumPerSec float32 `protobuf:"fixed32,13,opt,name=m_rows_read_sum_per_sec,json=mRowsReadSumPerSec,proto3" json:"m_rows_read_sum_per_sec,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSumPerSec float32 `protobuf:"fixed32,14,opt,name=m_merge_passes_sum_per_sec,json=mMergePassesSumPerSec,proto3" json:"m_merge_passes_sum_per_sec,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSumPerSec float32 `protobuf:"fixed32,15,opt,name=m_innodb_io_r_ops_sum_per_sec,json=mInnodbIoROpsSumPerSec,proto3" json:"m_innodb_io_r_ops_sum_per_sec,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSumPerSec float32 `protobuf:"fixed32,16,opt,name=m_innodb_io_r_bytes_sum_per_sec,json=mInnodbIoRBytesSumPerSec,proto3" json:"m_innodb_io_r_bytes_sum_per_sec,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSumPerSec float32 `protobuf:"fixed32,17,opt,name=m_innodb_io_r_wait_sum_per_sec,json=mInnodbIoRWaitSumPerSec,proto3" json:"m_innodb_io_r_wait_sum_per_sec,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSumPerSec float32 `protobuf:"fixed32,18,opt,name=m_innodb_rec_lock_wait_sum_per_sec,json=mInnodbRecLockWaitSumPerSec,proto3" json:"m_innodb_rec_lock_wait_sum_per_sec,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSumPerSec float32 `protobuf:"fixed32,19,opt,name=m_innodb_queue_wait_sum_per_sec,json=mInnodbQueueWaitSumPerSec,proto3" json:"m_innodb_queue_wait_sum_per_sec,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSumPerSec float32 `protobuf:"fixed32,20,opt,name=m_innodb_pages_distinct_sum_per_sec,json=mInnodbPagesDistinctSumPerSec,proto3" json:"m_innodb_pages_distinct_sum_per_sec,omitempty"`
	// Shows how long the query is.
	MQueryLengthSumPerSec float32 `protobuf:"fixed32,21,opt,name=m_query_length_sum_per_sec,json=mQueryLengthSumPerSec,proto3" json:"m_query_length_sum_per_sec,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSumPerSec float32 `protobuf:"fixed32,22,opt,name=m_bytes_sent_sum_per_sec,json=mBytesSentSumPerSec,proto3" json:"m_bytes_sent_sum_per_sec,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSumPerSec float32 `protobuf:"fixed32,23,opt,name=m_tmp_tables_sum_per_sec,json=mTmpTablesSumPerSec,proto3" json:"m_tmp_tables_sum_per_sec,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSumPerSec float32 `protobuf:"fixed32,24,opt,name=m_tmp_disk_tables_sum_per_sec,json=mTmpDiskTablesSumPerSec,proto3" json:"m_tmp_disk_tables_sum_per_sec,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSumPerSec float32 `protobuf:"fixed32,25,opt,name=m_tmp_table_sizes_sum_per_sec,json=mTmpTableSizesSumPerSec,proto3" json:"m_tmp_table_sizes_sum_per_sec,omitempty"`
	// Query Cache hits.
	MQcHitSumPerSec float32 `protobuf:"fixed32,30,opt,name=m_qc_hit_sum_per_sec,json=mQcHitSumPerSec,proto3" json:"m_qc_hit_sum_per_sec,omitempty"`
	// The query performed a full table scan.
	MFullScanSumPerSec float32 `protobuf:"fixed32,31,opt,name=m_full_scan_sum_per_sec,json=mFullScanSumPerSec,proto3" json:"m_full_scan_sum_per_sec,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSumPerSec float32 `protobuf:"fixed32,32,opt,name=m_full_join_sum_per_sec,json=mFullJoinSumPerSec,proto3" json:"m_full_join_sum_per_sec,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSumPerSec float32 `protobuf:"fixed32,33,opt,name=m_tmp_table_sum_per_sec,json=mTmpTableSumPerSec,proto3" json:"m_tmp_table_sum_per_sec,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSumPerSec float32 `protobuf:"fixed32,34,opt,name=m_tmp_table_on_disk_sum_per_sec,json=mTmpTableOnDiskSumPerSec,proto3" json:"m_tmp_table_on_disk_sum_per_sec,omitempty"`
	// The query used a filesort.
	MFilesortSumPerSec float32 `protobuf:"fixed32,35,opt,name=m_filesort_sum_per_sec,json=mFilesortSumPerSec,proto3" json:"m_filesort_sum_per_sec,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSumPerSec float32 `protobuf:"fixed32,36,opt,name=m_filesort_on_disk_sum_per_sec,json=mFilesortOnDiskSumPerSec,proto3" json:"m_filesort_on_disk_sum_per_sec,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSumPerSec float32 `protobuf:"fixed32,37,opt,name=m_select_full_range_join_sum_per_sec,json=mSelectFullRangeJoinSumPerSec,proto3" json:"m_select_full_range_join_sum_per_sec,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSumPerSec float32 `protobuf:"fixed32,38,opt,name=m_select_range_sum_per_sec,json=mSelectRangeSumPerSec,proto3" json:"m_select_range_sum_per_sec,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSumPerSec float32 `protobuf:"fixed32,39,opt,name=m_select_range_check_sum_per_sec,json=mSelectRangeCheckSumPerSec,proto3" json:"m_select_range_check_sum_per_sec,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSumPerSec float32 `protobuf:"fixed32,40,opt,name=m_sort_range_sum_per_sec,json=mSortRangeSumPerSec,proto3" json:"m_sort_range_sum_per_sec,omitempty"`
	// The number of sorted rows.
	MSortRowsSumPerSec float32 `protobuf:"fixed32,41,opt,name=m_sort_rows_sum_per_sec,json=mSortRowsSumPerSec,proto3" json:"m_sort_rows_sum_per_sec,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSumPerSec float32 `protobuf:"fixed32,42,opt,name=m_sort_scan_sum_per_sec,json=mSortScanSumPerSec,proto3" json:"m_sort_scan_sum_per_sec,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSumPerSec float32 `protobuf:"fixed32,43,opt,name=m_no_index_used_sum_per_sec,json=mNoIndexUsedSumPerSec,proto3" json:"m_no_index_used_sum_per_sec,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSumPerSec float32 `protobuf:"fixed32,44,opt,name=m_no_good_index_used_sum_per_sec,json=mNoGoodIndexUsedSumPerSec,proto3" json:"m_no_good_index_used_sum_per_sec,omitempty"`
	// The number of returned documents.
	MDocsReturnedSumPerSec float32 `protobuf:"fixed32,50,opt,name=m_docs_returned_sum_per_sec,json=mDocsReturnedSumPerSec,proto3" json:"m_docs_returned_sum_per_sec,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSumPerSec float32 `protobuf:"fixed32,51,opt,name=m_response_length_sum_per_sec,json=mResponseLengthSumPerSec,proto3" json:"m_response_length_sum_per_sec,omitempty"`
	// The number of scanned documents.
	MDocsScannedSumPerSec float32 `protobuf:"fixed32,52,opt,name=m_docs_scanned_sum_per_sec,json=mDocsScannedSumPerSec,proto3" json:"m_docs_scanned_sum_per_sec,omitempty"`
	// Total number of documents scanned during query execution.
	MDocsExaminedSumPerSec float32 `protobuf:"fixed32,85,opt,name=m_docs_examined_sum_per_sec,json=mDocsExaminedSumPerSec,proto3" json:"m_docs_examined_sum_per_sec,omitempty"`
	// Total number of index keys scanned during query execution.
	MKeysExaminedSumPerSec float32 `protobuf:"fixed32,86,opt,name=m_keys_examined_sum_per_sec,json=mKeysExaminedSumPerSec,proto3" json:"m_keys_examined_sum_per_sec,omitempty"`
	// Number of times a global read lock was acquired during query execution.
	MLocksGlobalAcquireCountReadSharedSumPerSec float32 `protobuf:"fixed32,87,opt,name=m_locks_global_acquire_count_read_shared_sum_per_sec,json=mLocksGlobalAcquireCountReadSharedSumPerSec,proto3" json:"m_locks_global_acquire_count_read_shared_sum_per_sec,omitempty"`
	// Number of times a global write lock was acquired during query execution.
	MLocksGlobalAcquireCountWriteSharedSumPerSec float32 `protobuf:"fixed32,88,opt,name=m_locks_global_acquire_count_write_shared_sum_per_sec,json=mLocksGlobalAcquireCountWriteSharedSumPerSec,proto3" json:"m_locks_global_acquire_count_write_shared_sum_per_sec,omitempty"`
	// Number of times a read lock was acquired at the database level during query execution.
	MLocksDatabaseAcquireCountReadSharedSumPerSec float32 `protobuf:"fixed32,89,opt,name=m_locks_database_acquire_count_read_shared_sum_per_sec,json=mLocksDatabaseAcquireCountReadSharedSumPerSec,proto3" json:"m_locks_database_acquire_count_read_shared_sum_per_sec,omitempty"`
	// Number of times a read lock at the database level was requested but had to wait before being granted.
	MLocksDatabaseAcquireWaitCountReadSharedSumPerSec float32 `protobuf:"fixed32,90,opt,name=m_locks_database_acquire_wait_count_read_shared_sum_per_sec,json=mLocksDatabaseAcquireWaitCountReadSharedSumPerSec,proto3" json:"m_locks_database_acquire_wait_count_read_shared_sum_per_sec,omitempty"`
	// Indicates the time, spent acquiring a read lock at the database level during an operation.
	MLocksDatabaseTimeAcquiringMicrosReadSharedSumPerSec float32 `protobuf:"fixed32,91,opt,name=m_locks_database_time_acquiring_micros_read_shared_sum_per_sec,json=mLocksDatabaseTimeAcquiringMicrosReadSharedSumPerSec,proto3" json:"m_locks_database_time_acquiring_micros_read_shared_sum_per_sec,omitempty"`
	// Number of times a read lock was acquired on a specific collection during operations.
	MLocksCollectionAcquireCountReadSharedSumPerSec float32 `protobuf:"fixed32,92,opt,name=m_locks_collection_acquire_count_read_shared_sum_per_sec,json=mLocksCollectionAcquireCountReadSharedSumPerSec,proto3" json:"m_locks_collection_acquire_count_read_shared_sum_per_sec,omitempty"`
	// Total number of bytes read from storage during a specific operation.
	MStorageBytesReadSumPerSec float32 `protobuf:"fixed32,93,opt,name=m_storage_bytes_read_sum_per_sec,json=mStorageBytesReadSumPerSec,proto3" json:"m_storage_bytes_read_sum_per_sec,omitempty"`
	// Indicates the time, spent reading data from storage during an operation.
	MStorageTimeReadingMicrosSumPerSec float32 `protobuf:"fixed32,94,opt,name=m_storage_time_reading_micros_sum_per_sec,json=mStorageTimeReadingMicrosSumPerSec,proto3" json:"m_storage_time_reading_micros_sum_per_sec,omitempty"`
	// Total number of shared block cache hits by the statement.
	MSharedBlksHitSumPerSec float32 `protobuf:"fixed32,60,opt,name=m_shared_blks_hit_sum_per_sec,json=mSharedBlksHitSumPerSec,proto3" json:"m_shared_blks_hit_sum_per_sec,omitempty"`
	// Total number of shared blocks read by the statement.
	MSharedBlksReadSumPerSec float32 `protobuf:"fixed32,61,opt,name=m_shared_blks_read_sum_per_sec,json=mSharedBlksReadSumPerSec,proto3" json:"m_shared_blks_read_sum_per_sec,omitempty"`
	// Total number of shared blocks dirtied by the statement.
	MSharedBlksDirtiedSumPerSec float32 `protobuf:"fixed32,62,opt,name=m_shared_blks_dirtied_sum_per_sec,json=mSharedBlksDirtiedSumPerSec,proto3" json:"m_shared_blks_dirtied_sum_per_sec,omitempty"`
	// Total number of shared blocks written by the statement.
	MSharedBlksWrittenSumPerSec float32 `protobuf:"fixed32,63,opt,name=m_shared_blks_written_sum_per_sec,json=mSharedBlksWrittenSumPerSec,proto3" json:"m_shared_blks_written_sum_per_sec,omitempty"`
	// Total time the statement spent reading shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MSharedBlkReadTimeSumPerSec float32 `protobuf:"fixed32,64,opt,name=m_shared_blk_read_time_sum_per_sec,json=mSharedBlkReadTimeSumPerSec,proto3" json:"m_shared_blk_read_time_sum_per_sec,omitempty"`
	// Total time the statement spent writing shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MSharedBlkWriteTimeSumPerSec float32 `protobuf:"fixed32,65,opt,name=m_shared_blk_write_time_sum_per_sec,json=mSharedBlkWriteTimeSumPerSec,proto3" json:"m_shared_blk_write_time_sum_per_sec,omitempty"`
	// Total time the statement spent reading shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MLocalBlkReadTimeSumPerSec float32 `protobuf:"fixed32,66,opt,name=m_local_blk_read_time_sum_per_sec,json=mLocalBlkReadTimeSumPerSec,proto3" json:"m_local_blk_read_time_sum_per_sec,omitempty"`
	// Total time the statement spent writing shared blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MLocalBlkWriteTimeSumPerSec float32 `protobuf:"fixed32,67,opt,name=m_local_blk_write_time_sum_per_sec,json=mLocalBlkWriteTimeSumPerSec,proto3" json:"m_local_blk_write_time_sum_per_sec,omitempty"`
	// Total number of local block cache hits by the statement.
	MLocalBlksHitSumPerSec float32 `protobuf:"fixed32,68,opt,name=m_local_blks_hit_sum_per_sec,json=mLocalBlksHitSumPerSec,proto3" json:"m_local_blks_hit_sum_per_sec,omitempty"`
	// Total number of local blocks read by the statement.
	MLocalBlksReadSumPerSec float32 `protobuf:"fixed32,69,opt,name=m_local_blks_read_sum_per_sec,json=mLocalBlksReadSumPerSec,proto3" json:"m_local_blks_read_sum_per_sec,omitempty"`
	// Total number of local blocks dirtied by the statement.
	MLocalBlksDirtiedSumPerSec float32 `protobuf:"fixed32,70,opt,name=m_local_blks_dirtied_sum_per_sec,json=mLocalBlksDirtiedSumPerSec,proto3" json:"m_local_blks_dirtied_sum_per_sec,omitempty"`
	// Total number of local blocks written by the statement.
	MLocalBlksWrittenSumPerSec float32 `protobuf:"fixed32,71,opt,name=m_local_blks_written_sum_per_sec,json=mLocalBlksWrittenSumPerSec,proto3" json:"m_local_blks_written_sum_per_sec,omitempty"`
	// Total number of temp blocks read by the statement.
	MTempBlksReadSumPerSec float32 `protobuf:"fixed32,72,opt,name=m_temp_blks_read_sum_per_sec,json=mTempBlksReadSumPerSec,proto3" json:"m_temp_blks_read_sum_per_sec,omitempty"`
	// Total number of temp blocks written by the statement.
	MTempBlksWrittenSumPerSec float32 `protobuf:"fixed32,73,opt,name=m_temp_blks_written_sum_per_sec,json=mTempBlksWrittenSumPerSec,proto3" json:"m_temp_blks_written_sum_per_sec,omitempty"`
	// Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkReadTimeSumPerSec float32 `protobuf:"fixed32,74,opt,name=m_blk_read_time_sum_per_sec,json=mBlkReadTimeSumPerSec,proto3" json:"m_blk_read_time_sum_per_sec,omitempty"`
	// Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkWriteTimeSumPerSec float32 `protobuf:"fixed32,75,opt,name=m_blk_write_time_sum_per_sec,json=mBlkWriteTimeSumPerSec,proto3" json:"m_blk_write_time_sum_per_sec,omitempty"`
	// Total time user spent in query.
	MCpuUserTimeSumPerSec float32 `protobuf:"fixed32,76,opt,name=m_cpu_user_time_sum_per_sec,json=mCpuUserTimeSumPerSec,proto3" json:"m_cpu_user_time_sum_per_sec,omitempty"`
	// Total time system spent in query.
	MCpuSysTimeSumPerSec float32 `protobuf:"fixed32,77,opt,name=m_cpu_sys_time_sum_per_sec,json=mCpuSysTimeSumPerSec,proto3" json:"m_cpu_sys_time_sum_per_sec,omitempty"`
	// Total number of planned calls.
	MPlansCallsSumPerSec float32 `protobuf:"fixed32,80,opt,name=m_plans_calls_sum_per_sec,json=mPlansCallsSumPerSec,proto3" json:"m_plans_calls_sum_per_sec,omitempty"`
	// Total number of WAL (Write-ahead logging) records.
	MWalRecordsSumPerSec float32 `protobuf:"fixed32,81,opt,name=m_wal_records_sum_per_sec,json=mWalRecordsSumPerSec,proto3" json:"m_wal_records_sum_per_sec,omitempty"`
	// Total number of FPI (full page images) in WAL (Write-ahead logging) records.
	MWalFpiSumPerSec float32 `protobuf:"fixed32,82,opt,name=m_wal_fpi_sum_per_sec,json=mWalFpiSumPerSec,proto3" json:"m_wal_fpi_sum_per_sec,omitempty"`
	// Total bytes of WAL (Write-ahead logging) records.
	MWalBytesSumPerSec float32 `protobuf:"fixed32,83,opt,name=m_wal_bytes_sum_per_sec,json=mWalBytesSumPerSec,proto3" json:"m_wal_bytes_sum_per_sec,omitempty"`
	// Plan time in per seconds.
	MPlanTimeSumPerSec float32 `protobuf:"fixed32,84,opt,name=m_plan_time_sum_per_sec,json=mPlanTimeSumPerSec,proto3" json:"m_plan_time_sum_per_sec,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_qan_v1_qan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_qan_v1_qan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_qan_v1_qan_proto_rawDescGZIP(), []int{0}
}

func (x *Point) GetPoint() uint32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Point) GetTimeFrame() uint32 {
	if x != nil {
		return x.TimeFrame
	}
	return 0
}

func (x *Point) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Point) GetLoad() float32 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *Point) GetNumQueriesPerSec() float32 {
	if x != nil {
		return x.NumQueriesPerSec
	}
	return 0
}

func (x *Point) GetNumQueriesWithErrorsPerSec() float32 {
	if x != nil {
		return x.NumQueriesWithErrorsPerSec
	}
	return 0
}

func (x *Point) GetNumQueriesWithWarningsPerSec() float32 {
	if x != nil {
		return x.NumQueriesWithWarningsPerSec
	}
	return 0
}

func (x *Point) GetMQueryTimeSumPerSec() float32 {
	if x != nil {
		return x.MQueryTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMLockTimeSumPerSec() float32 {
	if x != nil {
		return x.MLockTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsSentSumPerSec() float32 {
	if x != nil {
		return x.MRowsSentSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsExaminedSumPerSec() float32 {
	if x != nil {
		return x.MRowsExaminedSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsAffectedSumPerSec() float32 {
	if x != nil {
		return x.MRowsAffectedSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsReadSumPerSec() float32 {
	if x != nil {
		return x.MRowsReadSumPerSec
	}
	return 0
}

func (x *Point) GetMMergePassesSumPerSec() float32 {
	if x != nil {
		return x.MMergePassesSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoROpsSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoROpsSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoRBytesSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoRBytesSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoRWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoRWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbRecLockWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbQueueWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbQueueWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbPagesDistinctSumPerSec() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctSumPerSec
	}
	return 0
}

func (x *Point) GetMQueryLengthSumPerSec() float32 {
	if x != nil {
		return x.MQueryLengthSumPerSec
	}
	return 0
}

func (x *Point) GetMBytesSentSumPerSec() float32 {
	if x != nil {
		return x.MBytesSentSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTablesSumPerSec() float32 {
	if x != nil {
		return x.MTmpTablesSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpDiskTablesSumPerSec() float32 {
	if x != nil {
		return x.MTmpDiskTablesSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableSizesSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableSizesSumPerSec
	}
	return 0
}

func (x *Point) GetMQcHitSumPerSec() float32 {
	if x != nil {
		return x.MQcHitSumPerSec
	}
	return 0
}

func (x *Point) GetMFullScanSumPerSec() float32 {
	if x != nil {
		return x.MFullScanSumPerSec
	}
	return 0
}

func (x *Point) GetMFullJoinSumPerSec() float32 {
	if x != nil {
		return x.MFullJoinSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableOnDiskSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableOnDiskSumPerSec
	}
	return 0
}

func (x *Point) GetMFilesortSumPerSec() float32 {
	if x != nil {
		return x.MFilesortSumPerSec
	}
	return 0
}

func (x *Point) GetMFilesortOnDiskSumPerSec() float32 {
	if x != nil {
		return x.MFilesortOnDiskSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectFullRangeJoinSumPerSec() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectRangeSumPerSec() float32 {
	if x != nil {
		return x.MSelectRangeSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectRangeCheckSumPerSec() float32 {
	if x != nil {
		return x.MSelectRangeCheckSumPerSec
	}
	return 0
}

func (x *Point) GetMSortRangeSumPerSec() float32 {
	if x != nil {
		return x.MSortRangeSumPerSec
	}
	return 0
}

func (x *Point) GetMSortRowsSumPerSec() float32 {
	if x != nil {
		return x.MSortRowsSumPerSec
	}
	return 0
}

func (x *Point) GetMSortScanSumPerSec() float32 {
	if x != nil {
		return x.MSortScanSumPerSec
	}
	return 0
}

func (x *Point) GetMNoIndexUsedSumPerSec() float32 {
	if x != nil {
		return x.MNoIndexUsedSumPerSec
	}
	return 0
}

func (x *Point) GetMNoGoodIndexUsedSumPerSec() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedSumPerSec
	}
	return 0
}

func (x *Point) GetMDocsReturnedSumPerSec() float32 {
	if x != nil {
		return x.MDocsReturnedSumPerSec
	}
	return 0
}

func (x *Point) GetMResponseLengthSumPerSec() float32 {
	if x != nil {
		return x.MResponseLengthSumPerSec
	}
	return 0
}

func (x *Point) GetMDocsScannedSumPerSec() float32 {
	if x != nil {
		return x.MDocsScannedSumPerSec
	}
	return 0
}

func (x *Point) GetMDocsExaminedSumPerSec() float32 {
	if x != nil {
		return x.MDocsExaminedSumPerSec
	}
	return 0
}

func (x *Point) GetMKeysExaminedSumPerSec() float32 {
	if x != nil {
		return x.MKeysExaminedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksGlobalAcquireCountReadSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountReadSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksGlobalAcquireCountWriteSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksGlobalAcquireCountWriteSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksDatabaseAcquireCountReadSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireCountReadSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksDatabaseAcquireWaitCountReadSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksDatabaseAcquireWaitCountReadSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksDatabaseTimeAcquiringMicrosReadSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksDatabaseTimeAcquiringMicrosReadSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocksCollectionAcquireCountReadSharedSumPerSec() float32 {
	if x != nil {
		return x.MLocksCollectionAcquireCountReadSharedSumPerSec
	}
	return 0
}

func (x *Point) GetMStorageBytesReadSumPerSec() float32 {
	if x != nil {
		return x.MStorageBytesReadSumPerSec
	}
	return 0
}

func (x *Point) GetMStorageTimeReadingMicrosSumPerSec() float32 {
	if x != nil {
		return x.MStorageTimeReadingMicrosSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksHitSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksHitSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksDirtiedSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlkReadTimeSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlkReadTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlkWriteTimeSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlkWriteTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlkReadTimeSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlkReadTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlkWriteTimeSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlkWriteTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksHitSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksHitSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksDirtiedSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMTempBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MTempBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMTempBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MTempBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMBlkReadTimeSumPerSec() float32 {
	if x != nil {
		return x.MBlkReadTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMBlkWriteTimeSumPerSec() float32 {
	if x != nil {
		return x.MBlkWriteTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMCpuUserTimeSumPerSec() float32 {
	if x != nil {
		return x.MCpuUserTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMCpuSysTimeSumPerSec() float32 {
	if x != nil {
		return x.MCpuSysTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMPlansCallsSumPerSec() float32 {
	if x != nil {
		return x.MPlansCallsSumPerSec
	}
	return 0
}

func (x *Point) GetMWalRecordsSumPerSec() float32 {
	if x != nil {
		return x.MWalRecordsSumPerSec
	}
	return 0
}

func (x *Point) GetMWalFpiSumPerSec() float32 {
	if x != nil {
		return x.MWalFpiSumPerSec
	}
	return 0
}

func (x *Point) GetMWalBytesSumPerSec() float32 {
	if x != nil {
		return x.MWalBytesSumPerSec
	}
	return 0
}

func (x *Point) GetMPlanTimeSumPerSec() float32 {
	if x != nil {
		return x.MPlanTimeSumPerSec
	}
	return 0
}

// MapFieldEntry allows to pass labels/dimensions in form like {"server": ["db1", "db2"...]}.
type MapFieldEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapFieldEntry) Reset() {
	*x = MapFieldEntry{}
	mi := &file_qan_v1_qan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapFieldEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFieldEntry) ProtoMessage() {}

func (x *MapFieldEntry) ProtoReflect() protoreflect.Message {
	mi := &file_qan_v1_qan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFieldEntry.ProtoReflect.Descriptor instead.
func (*MapFieldEntry) Descriptor() ([]byte, []int) {
	return file_qan_v1_qan_proto_rawDescGZIP(), []int{1}
}

func (x *MapFieldEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapFieldEntry) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_qan_v1_qan_proto protoreflect.FileDescriptor

const file_qan_v1_qan_proto_rawDesc = "" +
	"\n" +
	"\x10qan/v1/qan.proto\x12\x06qan.v1\"\xb1&\n" +
	"\x05Point\x12\x14\n" +
	"\x05point\x18\x01 \x01(\rR\x05point\x12\x1d\n" +
	"\n" +
	"time_frame\x18\x02 \x01(\rR\ttimeFrame\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04load\x18\x04 \x01(\x02R\x04load\x12-\n" +
	"\x13num_queries_per_sec\x18\x05 \x01(\x02R\x10numQueriesPerSec\x12C\n" +
	"\x1fnum_queries_with_errors_per_sec\x18\x06 \x01(\x02R\x1anumQueriesWithErrorsPerSec\x12G\n" +
	"!num_queries_with_warnings_per_sec\x18\a \x01(\x02R\x1cnumQueriesWithWarningsPerSec\x125\n" +
	"\x18m_query_time_sum_per_sec\x18\b \x01(\x02R\x13mQueryTimeSumPerSec\x123\n" +
	"\x17m_lock_time_sum_per_sec\x18\t \x01(\x02R\x12mLockTimeSumPerSec\x123\n" +
	"\x17m_rows_sent_sum_per_sec\x18\n" +
	" \x01(\x02R\x12mRowsSentSumPerSec\x12;\n" +
	"\x1bm_rows_examined_sum_per_sec\x18\v \x01(\x02R\x16mRowsExaminedSumPerSec\x12;\n" +
	"\x1bm_rows_affected_sum_per_sec\x18\f \x01(\x02R\x16mRowsAffectedSumPerSec\x123\n" +
	"\x17m_rows_read_sum_per_sec\x18\r \x01(\x02R\x12mRowsReadSumPerSec\x129\n" +
	"\x1am_merge_passes_sum_per_sec\x18\x0e \x01(\x02R\x15mMergePassesSumPerSec\x12=\n" +
	"\x1dm_innodb_io_r_ops_sum_per_sec\x18\x0f \x01(\x02R\x16mInnodbIoROpsSumPerSec\x12A\n" +
	"\x1fm_innodb_io_r_bytes_sum_per_sec\x18\x10 \x01(\x02R\x18mInnodbIoRBytesSumPerSec\x12?\n" +
	"\x1em_innodb_io_r_wait_sum_per_sec\x18\x11 \x01(\x02R\x17mInnodbIoRWaitSumPerSec\x12G\n" +
	"\"m_innodb_rec_lock_wait_sum_per_sec\x18\x12 \x01(\x02R\x1bmInnodbRecLockWaitSumPerSec\x12B\n" +
	"\x1fm_innodb_queue_wait_sum_per_sec\x18\x13 \x01(\x02R\x19mInnodbQueueWaitSumPerSec\x12J\n" +
	"#m_innodb_pages_distinct_sum_per_sec\x18\x14 \x01(\x02R\x1dmInnodbPagesDistinctSumPerSec\x129\n" +
	"\x1am_query_length_sum_per_sec\x18\x15 \x01(\x02R\x15mQueryLengthSumPerSec\x125\n" +
	"\x18m_bytes_sent_sum_per_sec\x18\x16 \x01(\x02R\x13mBytesSentSumPerSec\x125\n" +
	"\x18m_tmp_tables_sum_per_sec\x18\x17 \x01(\x02R\x13mTmpTablesSumPerSec\x12>\n" +
	"\x1dm_tmp_disk_tables_sum_per_sec\x18\x18 \x01(\x02R\x17mTmpDiskTablesSumPerSec\x12>\n" +
	"\x1dm_tmp_table_sizes_sum_per_sec\x18\x19 \x01(\x02R\x17mTmpTableSizesSumPerSec\x12-\n" +
	"\x14m_qc_hit_sum_per_sec\x18\x1e \x01(\x02R\x0fmQcHitSumPerSec\x123\n" +
	"\x17m_full_scan_sum_per_sec\x18\x1f \x01(\x02R\x12mFullScanSumPerSec\x123\n" +
	"\x17m_full_join_sum_per_sec\x18  \x01(\x02R\x12mFullJoinSumPerSec\x123\n" +
	"\x17m_tmp_table_sum_per_sec\x18! \x01(\x02R\x12mTmpTableSumPerSec\x12A\n" +
	"\x1fm_tmp_table_on_disk_sum_per_sec\x18\" \x01(\x02R\x18mTmpTableOnDiskSumPerSec\x122\n" +
	"\x16m_filesort_sum_per_sec\x18# \x01(\x02R\x12mFilesortSumPerSec\x12@\n" +
	"\x1em_filesort_on_disk_sum_per_sec\x18$ \x01(\x02R\x18mFilesortOnDiskSumPerSec\x12K\n" +
	"$m_select_full_range_join_sum_per_sec\x18% \x01(\x02R\x1dmSelectFullRangeJoinSumPerSec\x129\n" +
	"\x1am_select_range_sum_per_sec\x18& \x01(\x02R\x15mSelectRangeSumPerSec\x12D\n" +
	" m_select_range_check_sum_per_sec\x18' \x01(\x02R\x1amSelectRangeCheckSumPerSec\x125\n" +
	"\x18m_sort_range_sum_per_sec\x18( \x01(\x02R\x13mSortRangeSumPerSec\x123\n" +
	"\x17m_sort_rows_sum_per_sec\x18) \x01(\x02R\x12mSortRowsSumPerSec\x123\n" +
	"\x17m_sort_scan_sum_per_sec\x18* \x01(\x02R\x12mSortScanSumPerSec\x12:\n" +
	"\x1bm_no_index_used_sum_per_sec\x18+ \x01(\x02R\x15mNoIndexUsedSumPerSec\x12C\n" +
	" m_no_good_index_used_sum_per_sec\x18, \x01(\x02R\x19mNoGoodIndexUsedSumPerSec\x12;\n" +
	"\x1bm_docs_returned_sum_per_sec\x182 \x01(\x02R\x16mDocsReturnedSumPerSec\x12?\n" +
	"\x1dm_response_length_sum_per_sec\x183 \x01(\x02R\x18mResponseLengthSumPerSec\x129\n" +
	"\x1am_docs_scanned_sum_per_sec\x184 \x01(\x02R\x15mDocsScannedSumPerSec\x12;\n" +
	"\x1bm_docs_examined_sum_per_sec\x18U \x01(\x02R\x16mDocsExaminedSumPerSec\x12;\n" +
	"\x1bm_keys_examined_sum_per_sec\x18V \x01(\x02R\x16mKeysExaminedSumPerSec\x12i\n" +
	"4m_locks_global_acquire_count_read_shared_sum_per_sec\x18W \x01(\x02R+mLocksGlobalAcquireCountReadSharedSumPerSec\x12k\n" +
	"5m_locks_global_acquire_count_write_shared_sum_per_sec\x18X \x01(\x02R,mLocksGlobalAcquireCountWriteSharedSumPerSec\x12m\n" +
	"6m_locks_database_acquire_count_read_shared_sum_per_sec\x18Y \x01(\x02R-mLocksDatabaseAcquireCountReadSharedSumPerSec\x12v\n" +
	";m_locks_database_acquire_wait_count_read_shared_sum_per_sec\x18Z \x01(\x02R1mLocksDatabaseAcquireWaitCountReadSharedSumPerSec\x12|\n" +
	">m_locks_database_time_acquiring_micros_read_shared_sum_per_sec\x18[ \x01(\x02R4mLocksDatabaseTimeAcquiringMicrosReadSharedSumPerSec\x12q\n" +
	"8m_locks_collection_acquire_count_read_shared_sum_per_sec\x18\\ \x01(\x02R/mLocksCollectionAcquireCountReadSharedSumPerSec\x12D\n" +
	" m_storage_bytes_read_sum_per_sec\x18] \x01(\x02R\x1amStorageBytesReadSumPerSec\x12U\n" +
	")m_storage_time_reading_micros_sum_per_sec\x18^ \x01(\x02R\"mStorageTimeReadingMicrosSumPerSec\x12>\n" +
	"\x1dm_shared_blks_hit_sum_per_sec\x18< \x01(\x02R\x17mSharedBlksHitSumPerSec\x12@\n" +
	"\x1em_shared_blks_read_sum_per_sec\x18= \x01(\x02R\x18mSharedBlksReadSumPerSec\x12F\n" +
	"!m_shared_blks_dirtied_sum_per_sec\x18> \x01(\x02R\x1bmSharedBlksDirtiedSumPerSec\x12F\n" +
	"!m_shared_blks_written_sum_per_sec\x18? \x01(\x02R\x1bmSharedBlksWrittenSumPerSec\x12G\n" +
	"\"m_shared_blk_read_time_sum_per_sec\x18@ \x01(\x02R\x1bmSharedBlkReadTimeSumPerSec\x12I\n" +
	"#m_shared_blk_write_time_sum_per_sec\x18A \x01(\x02R\x1cmSharedBlkWriteTimeSumPerSec\x12E\n" +
	"!m_local_blk_read_time_sum_per_sec\x18B \x01(\x02R\x1amLocalBlkReadTimeSumPerSec\x12G\n" +
	"\"m_local_blk_write_time_sum_per_sec\x18C \x01(\x02R\x1bmLocalBlkWriteTimeSumPerSec\x12<\n" +
	"\x1cm_local_blks_hit_sum_per_sec\x18D \x01(\x02R\x16mLocalBlksHitSumPerSec\x12>\n" +
	"\x1dm_local_blks_read_sum_per_sec\x18E \x01(\x02R\x17mLocalBlksReadSumPerSec\x12D\n" +
	" m_local_blks_dirtied_sum_per_sec\x18F \x01(\x02R\x1amLocalBlksDirtiedSumPerSec\x12D\n" +
	" m_local_blks_written_sum_per_sec\x18G \x01(\x02R\x1amLocalBlksWrittenSumPerSec\x12<\n" +
	"\x1cm_temp_blks_read_sum_per_sec\x18H \x01(\x02R\x16mTempBlksReadSumPerSec\x12B\n" +
	"\x1fm_temp_blks_written_sum_per_sec\x18I \x01(\x02R\x19mTempBlksWrittenSumPerSec\x12:\n" +
	"\x1bm_blk_read_time_sum_per_sec\x18J \x01(\x02R\x15mBlkReadTimeSumPerSec\x12<\n" +
	"\x1cm_blk_write_time_sum_per_sec\x18K \x01(\x02R\x16mBlkWriteTimeSumPerSec\x12:\n" +
	"\x1bm_cpu_user_time_sum_per_sec\x18L \x01(\x02R\x15mCpuUserTimeSumPerSec\x128\n" +
	"\x1am_cpu_sys_time_sum_per_sec\x18M \x01(\x02R\x14mCpuSysTimeSumPerSec\x127\n" +
	"\x19m_plans_calls_sum_per_sec\x18P \x01(\x02R\x14mPlansCallsSumPerSec\x127\n" +
	"\x19m_wal_records_sum_per_sec\x18Q \x01(\x02R\x14mWalRecordsSumPerSec\x12/\n" +
	"\x15m_wal_fpi_sum_per_sec\x18R \x01(\x02R\x10mWalFpiSumPerSec\x123\n" +
	"\x17m_wal_bytes_sum_per_sec\x18S \x01(\x02R\x12mWalBytesSumPerSec\x123\n" +
	"\x17m_plan_time_sum_per_sec\x18T \x01(\x02R\x12mPlanTimeSumPerSec\"7\n" +
	"\rMapFieldEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x03(\tR\x05value*\x95\x01\n" +
	"\vExampleType\x12\x1c\n" +
	"\x18EXAMPLE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13EXAMPLE_TYPE_RANDOM\x10\x01\x12\x18\n" +
	"\x14EXAMPLE_TYPE_SLOWEST\x10\x02\x12\x18\n" +
	"\x14EXAMPLE_TYPE_FASTEST\x10\x03\x12\x1b\n" +
	"\x17EXAMPLE_TYPE_WITH_ERROR\x10\x04Bx\n" +
	"\n" +
	"com.qan.v1B\bQanProtoP\x01Z'github.com/percona/pmm/api/qan/v1;qanv1\xa2\x02\x03QXX\xaa\x02\x06Qan.V1\xca\x02\x06Qan\\V1\xe2\x02\x12Qan\\V1\\GPBMetadata\xea\x02\aQan::V1b\x06proto3"

var (
	file_qan_v1_qan_proto_rawDescOnce sync.Once
	file_qan_v1_qan_proto_rawDescData []byte
)

func file_qan_v1_qan_proto_rawDescGZIP() []byte {
	file_qan_v1_qan_proto_rawDescOnce.Do(func() {
		file_qan_v1_qan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qan_v1_qan_proto_rawDesc), len(file_qan_v1_qan_proto_rawDesc)))
	})
	return file_qan_v1_qan_proto_rawDescData
}

var (
	file_qan_v1_qan_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_qan_v1_qan_proto_msgTypes  = make([]protoimpl.MessageInfo, 2)
	file_qan_v1_qan_proto_goTypes   = []any{
		(ExampleType)(0),      // 0: qan.v1.ExampleType
		(*Point)(nil),         // 1: qan.v1.Point
		(*MapFieldEntry)(nil), // 2: qan.v1.MapFieldEntry
	}
)

var file_qan_v1_qan_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_qan_v1_qan_proto_init() }
func file_qan_v1_qan_proto_init() {
	if File_qan_v1_qan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qan_v1_qan_proto_rawDesc), len(file_qan_v1_qan_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qan_v1_qan_proto_goTypes,
		DependencyIndexes: file_qan_v1_qan_proto_depIdxs,
		EnumInfos:         file_qan_v1_qan_proto_enumTypes,
		MessageInfos:      file_qan_v1_qan_proto_msgTypes,
	}.Build()
	File_qan_v1_qan_proto = out.File
	file_qan_v1_qan_proto_goTypes = nil
	file_qan_v1_qan_proto_depIdxs = nil
}
