syntax = "proto3";

package agent;

option go_package = "agent";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Type represents Agent type.
enum Type {
  TYPE_INVALID = 0;
  NODE_EXPORTER = 1;
  MYSQLD_EXPORTER = 2;
}

// Status represents Agent process status.
enum Status {
  STATUS_INVALID = 0;
  STARTING = 1;
  RUNNING = 2;
  WAITING = 3;
  STOPPING = 4;
  DONE = 5;
}

//
//message RegisterRequest {
//  // FIXME We need node information there to create a new node or map new agent to the existing node.
//  //       This is hard problem.
//
//  string hostname = 1;
//}
//
//message RegisterResponse {
//  string id = 1;
//}
//

// QANDataRequest is an AgentMessage for sending QAN data.
message QANDataRequest {
  google.protobuf.Any data = 1; // agent.QANData
}

// QANDataResponse is a ServerMessage for QAN data acceptance.
message QANDataResponse {}

// StateChangedRequest is an AgentMessage describing actual agent status.
message StateChangedRequest {
  string agent_id = 1;
  Status status = 2;
  uint32 listen_port = 3;
}

// StateChangedResponse is a ServerMessage for StateChangedRequest acceptance.
message StateChangedResponse {}

// PingRequest is a ServerMessage for checking connectivity, latency and clock drift.
message PingRequest {}

// PingResponse is an AgentMessage with current time for measuring clock drift.
message PingResponse {
  google.protobuf.Timestamp current_time = 1;
}

// SetStateRequest is a ServerMessage asking pmm-agent to run agents according to desired state.
message SetStateRequest {
  // AgentProcess describes desired configuration of a single agent.
  message AgentProcess {
    string agent_id = 1;
    Type type = 2;
    repeated string args = 3;
    repeated string env = 4;
    map<string, string> configs = 5;
  }
  repeated AgentProcess agent_processes = 1;
}

// SetStateResponse is an AgentMessage for SetStateRequest acceptance.
message SetStateResponse {}

message AgentMessage {
  uint32 id = 1;
  oneof payload {
    // requests from agent
    QANDataRequest qan_data = 2;
    StateChangedRequest state_changed = 3;
    // responses from agent
    PingResponse ping = 8;
    SetStateResponse state = 9;
  }
}

message ServerMessage {
  uint32 id = 1;
  oneof payload {
    // responses from server
    QANDataResponse qan_data = 2;
    StateChangedResponse state_changed = 3;
    // requests from server
    PingRequest ping = 8;
    SetStateRequest state = 9;
  }
}

// Agent service provides private methods for pmm-agent <-> pmm-managed interactions.
service Agent {
  //
  // // Register adds pmm-agent to pmm-managed database and returns agent's ID.
  // rpc Register(RegisterRequest) returns (RegisterResponse);
  //

  // Connect establishes two-way communication channel between pmm-agent and pmm-managed.
  rpc Connect(stream AgentMessage) returns (stream ServerMessage);
}
