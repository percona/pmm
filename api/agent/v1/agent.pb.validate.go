// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent/v1/agent.proto

package agentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	inventoryv1 "github.com/percona/pmm/api/inventory/v1"
	backupv1 "github.com/percona/pmm/api/management/v1/backup"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = backupv1.DataModel(0)

	_ = inventoryv1.AgentStatus(0)
)

// Validate checks the field values on TextFiles with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextFiles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextFiles with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextFilesMultiError, or nil
// if none found.
func (m *TextFiles) ValidateAll() error {
	return m.validate(true)
}

func (m *TextFiles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Files

	// no validation rules for TemplateLeftDelim

	// no validation rules for TemplateRightDelim

	if len(errors) > 0 {
		return TextFilesMultiError(errors)
	}

	return nil
}

// TextFilesMultiError is an error wrapping multiple validation errors returned
// by TextFiles.ValidateAll() if the designated constraints aren't met.
type TextFilesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextFilesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextFilesMultiError) AllErrors() []error { return m }

// TextFilesValidationError is the validation error returned by
// TextFiles.Validate if the designated constraints aren't met.
type TextFilesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextFilesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextFilesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextFilesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextFilesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextFilesValidationError) ErrorName() string { return "TextFilesValidationError" }

// Error satisfies the builtin error interface
func (e TextFilesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextFiles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextFilesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextFilesValidationError{}

// Validate checks the field values on Ping with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingMultiError, or nil if none found.
func (m *Ping) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingMultiError(errors)
	}

	return nil
}

// PingMultiError is an error wrapping multiple validation errors returned by
// Ping.ValidateAll() if the designated constraints aren't met.
type PingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingMultiError) AllErrors() []error { return m }

// PingValidationError is the validation error returned by Ping.Validate if the
// designated constraints aren't met.
type PingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingValidationError) ErrorName() string { return "PingValidationError" }

// Error satisfies the builtin error interface
func (e PingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingValidationError{}

// Validate checks the field values on Pong with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pong with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PongMultiError, or nil if none found.
func (m *Pong) ValidateAll() error {
	return m.validate(true)
}

func (m *Pong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCurrentTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PongValidationError{
					field:  "CurrentTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PongValidationError{
					field:  "CurrentTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PongValidationError{
				field:  "CurrentTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PongMultiError(errors)
	}

	return nil
}

// PongMultiError is an error wrapping multiple validation errors returned by
// Pong.ValidateAll() if the designated constraints aren't met.
type PongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PongMultiError) AllErrors() []error { return m }

// PongValidationError is the validation error returned by Pong.Validate if the
// designated constraints aren't met.
type PongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PongValidationError) ErrorName() string { return "PongValidationError" }

// Error satisfies the builtin error interface
func (e PongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PongValidationError{}

// Validate checks the field values on QANCollectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QANCollectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANCollectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANCollectRequestMultiError, or nil if none found.
func (m *QANCollectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QANCollectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetricsBucket() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QANCollectRequestValidationError{
						field:  fmt.Sprintf("MetricsBucket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QANCollectRequestValidationError{
						field:  fmt.Sprintf("MetricsBucket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QANCollectRequestValidationError{
					field:  fmt.Sprintf("MetricsBucket[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QANCollectRequestMultiError(errors)
	}

	return nil
}

// QANCollectRequestMultiError is an error wrapping multiple validation errors
// returned by QANCollectRequest.ValidateAll() if the designated constraints
// aren't met.
type QANCollectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANCollectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANCollectRequestMultiError) AllErrors() []error { return m }

// QANCollectRequestValidationError is the validation error returned by
// QANCollectRequest.Validate if the designated constraints aren't met.
type QANCollectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANCollectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANCollectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANCollectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANCollectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANCollectRequestValidationError) ErrorName() string {
	return "QANCollectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QANCollectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANCollectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANCollectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANCollectRequestValidationError{}

// Validate checks the field values on QANCollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QANCollectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QANCollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QANCollectResponseMultiError, or nil if none found.
func (m *QANCollectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QANCollectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QANCollectResponseMultiError(errors)
	}

	return nil
}

// QANCollectResponseMultiError is an error wrapping multiple validation errors
// returned by QANCollectResponse.ValidateAll() if the designated constraints
// aren't met.
type QANCollectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QANCollectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QANCollectResponseMultiError) AllErrors() []error { return m }

// QANCollectResponseValidationError is the validation error returned by
// QANCollectResponse.Validate if the designated constraints aren't met.
type QANCollectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QANCollectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QANCollectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QANCollectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QANCollectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QANCollectResponseValidationError) ErrorName() string {
	return "QANCollectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QANCollectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQANCollectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QANCollectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QANCollectResponseValidationError{}

// Validate checks the field values on StateChangedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StateChangedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateChangedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StateChangedRequestMultiError, or nil if none found.
func (m *StateChangedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StateChangedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for Status

	// no validation rules for ListenPort

	// no validation rules for ProcessExecPath

	// no validation rules for Version

	if len(errors) > 0 {
		return StateChangedRequestMultiError(errors)
	}

	return nil
}

// StateChangedRequestMultiError is an error wrapping multiple validation
// errors returned by StateChangedRequest.ValidateAll() if the designated
// constraints aren't met.
type StateChangedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateChangedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateChangedRequestMultiError) AllErrors() []error { return m }

// StateChangedRequestValidationError is the validation error returned by
// StateChangedRequest.Validate if the designated constraints aren't met.
type StateChangedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateChangedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateChangedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateChangedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateChangedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateChangedRequestValidationError) ErrorName() string {
	return "StateChangedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StateChangedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateChangedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateChangedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateChangedRequestValidationError{}

// Validate checks the field values on StateChangedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StateChangedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateChangedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StateChangedResponseMultiError, or nil if none found.
func (m *StateChangedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StateChangedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StateChangedResponseMultiError(errors)
	}

	return nil
}

// StateChangedResponseMultiError is an error wrapping multiple validation
// errors returned by StateChangedResponse.ValidateAll() if the designated
// constraints aren't met.
type StateChangedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateChangedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateChangedResponseMultiError) AllErrors() []error { return m }

// StateChangedResponseValidationError is the validation error returned by
// StateChangedResponse.Validate if the designated constraints aren't met.
type StateChangedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateChangedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateChangedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateChangedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateChangedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateChangedResponseValidationError) ErrorName() string {
	return "StateChangedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StateChangedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateChangedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateChangedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateChangedResponseValidationError{}

// Validate checks the field values on SetStateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateRequestMultiError, or nil if none found.
func (m *SetStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetAgentProcesses()))
		i := 0
		for key := range m.GetAgentProcesses() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAgentProcesses()[key]
			_ = val

			// no validation rules for AgentProcesses[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SetStateRequestValidationError{
							field:  fmt.Sprintf("AgentProcesses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SetStateRequestValidationError{
							field:  fmt.Sprintf("AgentProcesses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SetStateRequestValidationError{
						field:  fmt.Sprintf("AgentProcesses[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetBuiltinAgents()))
		i := 0
		for key := range m.GetBuiltinAgents() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBuiltinAgents()[key]
			_ = val

			// no validation rules for BuiltinAgents[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SetStateRequestValidationError{
							field:  fmt.Sprintf("BuiltinAgents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SetStateRequestValidationError{
							field:  fmt.Sprintf("BuiltinAgents[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SetStateRequestValidationError{
						field:  fmt.Sprintf("BuiltinAgents[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SetStateRequestMultiError(errors)
	}

	return nil
}

// SetStateRequestMultiError is an error wrapping multiple validation errors
// returned by SetStateRequest.ValidateAll() if the designated constraints
// aren't met.
type SetStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateRequestMultiError) AllErrors() []error { return m }

// SetStateRequestValidationError is the validation error returned by
// SetStateRequest.Validate if the designated constraints aren't met.
type SetStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateRequestValidationError) ErrorName() string { return "SetStateRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateRequestValidationError{}

// Validate checks the field values on SetStateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateResponseMultiError, or nil if none found.
func (m *SetStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetStateResponseMultiError(errors)
	}

	return nil
}

// SetStateResponseMultiError is an error wrapping multiple validation errors
// returned by SetStateResponse.ValidateAll() if the designated constraints
// aren't met.
type SetStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateResponseMultiError) AllErrors() []error { return m }

// SetStateResponseValidationError is the validation error returned by
// SetStateResponse.Validate if the designated constraints aren't met.
type SetStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateResponseValidationError) ErrorName() string { return "SetStateResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateResponseValidationError{}

// Validate checks the field values on QueryActionValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryActionValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActionValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActionValueMultiError, or nil if none found.
func (m *QueryActionValue) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActionValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *QueryActionValue_Nil:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Nil
	case *QueryActionValue_Bool:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bool
	case *QueryActionValue_Int64:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64
	case *QueryActionValue_Uint64:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint64
	case *QueryActionValue_Double:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Double
	case *QueryActionValue_Bytes:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bytes
	case *QueryActionValue_Timestamp:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionValueValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QueryActionValue_Slice:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSlice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Slice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Slice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSlice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionValueValidationError{
					field:  "Slice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QueryActionValue_Map:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMap()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionValueValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QueryActionValue_Binary:
		if v == nil {
			err := QueryActionValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBinary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Binary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionValueValidationError{
						field:  "Binary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBinary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionValueValidationError{
					field:  "Binary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return QueryActionValueMultiError(errors)
	}

	return nil
}

// QueryActionValueMultiError is an error wrapping multiple validation errors
// returned by QueryActionValue.ValidateAll() if the designated constraints
// aren't met.
type QueryActionValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActionValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActionValueMultiError) AllErrors() []error { return m }

// QueryActionValueValidationError is the validation error returned by
// QueryActionValue.Validate if the designated constraints aren't met.
type QueryActionValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActionValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActionValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActionValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActionValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActionValueValidationError) ErrorName() string { return "QueryActionValueValidationError" }

// Error satisfies the builtin error interface
func (e QueryActionValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActionValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActionValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActionValueValidationError{}

// Validate checks the field values on QueryActionSlice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryActionSlice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActionSlice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActionSliceMultiError, or nil if none found.
func (m *QueryActionSlice) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActionSlice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionSliceValidationError{
						field:  fmt.Sprintf("Slice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionSliceValidationError{
						field:  fmt.Sprintf("Slice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionSliceValidationError{
					field:  fmt.Sprintf("Slice[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryActionSliceMultiError(errors)
	}

	return nil
}

// QueryActionSliceMultiError is an error wrapping multiple validation errors
// returned by QueryActionSlice.ValidateAll() if the designated constraints
// aren't met.
type QueryActionSliceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActionSliceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActionSliceMultiError) AllErrors() []error { return m }

// QueryActionSliceValidationError is the validation error returned by
// QueryActionSlice.Validate if the designated constraints aren't met.
type QueryActionSliceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActionSliceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActionSliceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActionSliceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActionSliceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActionSliceValidationError) ErrorName() string { return "QueryActionSliceValidationError" }

// Error satisfies the builtin error interface
func (e QueryActionSliceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActionSlice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActionSliceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActionSliceValidationError{}

// Validate checks the field values on QueryActionMap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryActionMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActionMap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryActionMapMultiError,
// or nil if none found.
func (m *QueryActionMap) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActionMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QueryActionMapValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QueryActionMapValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QueryActionMapValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return QueryActionMapMultiError(errors)
	}

	return nil
}

// QueryActionMapMultiError is an error wrapping multiple validation errors
// returned by QueryActionMap.ValidateAll() if the designated constraints
// aren't met.
type QueryActionMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActionMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActionMapMultiError) AllErrors() []error { return m }

// QueryActionMapValidationError is the validation error returned by
// QueryActionMap.Validate if the designated constraints aren't met.
type QueryActionMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActionMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActionMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActionMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActionMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActionMapValidationError) ErrorName() string { return "QueryActionMapValidationError" }

// Error satisfies the builtin error interface
func (e QueryActionMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActionMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActionMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActionMapValidationError{}

// Validate checks the field values on QueryActionBinary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryActionBinary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActionBinary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActionBinaryMultiError, or nil if none found.
func (m *QueryActionBinary) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActionBinary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subtype

	// no validation rules for Bytes

	if len(errors) > 0 {
		return QueryActionBinaryMultiError(errors)
	}

	return nil
}

// QueryActionBinaryMultiError is an error wrapping multiple validation errors
// returned by QueryActionBinary.ValidateAll() if the designated constraints
// aren't met.
type QueryActionBinaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActionBinaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActionBinaryMultiError) AllErrors() []error { return m }

// QueryActionBinaryValidationError is the validation error returned by
// QueryActionBinary.Validate if the designated constraints aren't met.
type QueryActionBinaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActionBinaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActionBinaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActionBinaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActionBinaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActionBinaryValidationError) ErrorName() string {
	return "QueryActionBinaryValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActionBinaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActionBinary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActionBinaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActionBinaryValidationError{}

// Validate checks the field values on QueryActionResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActionResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActionResultMultiError, or nil if none found.
func (m *QueryActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionResultValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionResultValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionResultValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDocs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActionResultValidationError{
						field:  fmt.Sprintf("Docs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActionResultValidationError{
						field:  fmt.Sprintf("Docs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActionResultValidationError{
					field:  fmt.Sprintf("Docs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryActionResultMultiError(errors)
	}

	return nil
}

// QueryActionResultMultiError is an error wrapping multiple validation errors
// returned by QueryActionResult.ValidateAll() if the designated constraints
// aren't met.
type QueryActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActionResultMultiError) AllErrors() []error { return m }

// QueryActionResultValidationError is the validation error returned by
// QueryActionResult.Validate if the designated constraints aren't met.
type QueryActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActionResultValidationError) ErrorName() string {
	return "QueryActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActionResultValidationError{}

// Validate checks the field values on StartActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartActionRequestMultiError, or nil if none found.
func (m *StartActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Params.(type) {
	case *StartActionRequest_MysqlExplainParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplainParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlExplainParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlExplainParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplainParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlExplainParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MysqlShowCreateTableParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowCreateTableParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowCreateTableParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowCreateTableParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowCreateTableParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlShowCreateTableParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MysqlShowTableStatusParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowTableStatusParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowTableStatusParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowTableStatusParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowTableStatusParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlShowTableStatusParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MysqlShowIndexParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowIndexParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowIndexParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlShowIndexParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowIndexParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlShowIndexParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PostgresqlShowCreateTableParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlShowCreateTableParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlShowCreateTableParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlShowCreateTableParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlShowCreateTableParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PostgresqlShowCreateTableParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PostgresqlShowIndexParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlShowIndexParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlShowIndexParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlShowIndexParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlShowIndexParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PostgresqlShowIndexParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbExplainParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExplainParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbExplainParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbExplainParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExplainParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbExplainParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PtSummaryParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtSummaryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtSummaryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PtSummaryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PtPgSummaryParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtPgSummaryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtPgSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtPgSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtPgSummaryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PtPgSummaryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PtMongodbSummaryParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMongodbSummaryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtMongodbSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtMongodbSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMongodbSummaryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PtMongodbSummaryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PtMysqlSummaryParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMysqlSummaryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtMysqlSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PtMysqlSummaryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMysqlSummaryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PtMysqlSummaryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MysqlQueryShowParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlQueryShowParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlQueryShowParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlQueryShowParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlQueryShowParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlQueryShowParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MysqlQuerySelectParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlQuerySelectParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlQuerySelectParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MysqlQuerySelectParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlQuerySelectParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MysqlQuerySelectParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PostgresqlQueryShowParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlQueryShowParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlQueryShowParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlQueryShowParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlQueryShowParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PostgresqlQueryShowParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_PostgresqlQuerySelectParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlQuerySelectParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlQuerySelectParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "PostgresqlQuerySelectParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlQuerySelectParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "PostgresqlQuerySelectParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbQueryGetparameterParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbQueryGetparameterParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetparameterParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetparameterParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbQueryGetparameterParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbQueryGetparameterParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbQueryBuildinfoParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbQueryBuildinfoParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryBuildinfoParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryBuildinfoParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbQueryBuildinfoParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbQueryBuildinfoParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbQueryGetcmdlineoptsParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbQueryGetcmdlineoptsParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetcmdlineoptsParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetcmdlineoptsParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbQueryGetcmdlineoptsParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbQueryGetcmdlineoptsParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbQueryReplsetgetstatusParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbQueryReplsetgetstatusParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryReplsetgetstatusParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryReplsetgetstatusParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbQueryReplsetgetstatusParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbQueryReplsetgetstatusParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_MongodbQueryGetdiagnosticdataParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbQueryGetdiagnosticdataParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetdiagnosticdataParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "MongodbQueryGetdiagnosticdataParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbQueryGetdiagnosticdataParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "MongodbQueryGetdiagnosticdataParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartActionRequest_RestartSysServiceParams:
		if v == nil {
			err := StartActionRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRestartSysServiceParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "RestartSysServiceParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartActionRequestValidationError{
						field:  "RestartSysServiceParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRestartSysServiceParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartActionRequestValidationError{
					field:  "RestartSysServiceParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartActionRequestMultiError(errors)
	}

	return nil
}

// StartActionRequestMultiError is an error wrapping multiple validation errors
// returned by StartActionRequest.ValidateAll() if the designated constraints
// aren't met.
type StartActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequestMultiError) AllErrors() []error { return m }

// StartActionRequestValidationError is the validation error returned by
// StartActionRequest.Validate if the designated constraints aren't met.
type StartActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequestValidationError) ErrorName() string {
	return "StartActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequestValidationError{}

// Validate checks the field values on StartActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartActionResponseMultiError, or nil if none found.
func (m *StartActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartActionResponseMultiError(errors)
	}

	return nil
}

// StartActionResponseMultiError is an error wrapping multiple validation
// errors returned by StartActionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionResponseMultiError) AllErrors() []error { return m }

// StartActionResponseValidationError is the validation error returned by
// StartActionResponse.Validate if the designated constraints aren't met.
type StartActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionResponseValidationError) ErrorName() string {
	return "StartActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionResponseValidationError{}

// Validate checks the field values on StopActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StopActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopActionRequestMultiError, or nil if none found.
func (m *StopActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	if len(errors) > 0 {
		return StopActionRequestMultiError(errors)
	}

	return nil
}

// StopActionRequestMultiError is an error wrapping multiple validation errors
// returned by StopActionRequest.ValidateAll() if the designated constraints
// aren't met.
type StopActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopActionRequestMultiError) AllErrors() []error { return m }

// StopActionRequestValidationError is the validation error returned by
// StopActionRequest.Validate if the designated constraints aren't met.
type StopActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopActionRequestValidationError) ErrorName() string {
	return "StopActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopActionRequestValidationError{}

// Validate checks the field values on StopActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopActionResponseMultiError, or nil if none found.
func (m *StopActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopActionResponseMultiError(errors)
	}

	return nil
}

// StopActionResponseMultiError is an error wrapping multiple validation errors
// returned by StopActionResponse.ValidateAll() if the designated constraints
// aren't met.
type StopActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopActionResponseMultiError) AllErrors() []error { return m }

// StopActionResponseValidationError is the validation error returned by
// StopActionResponse.Validate if the designated constraints aren't met.
type StopActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopActionResponseValidationError) ErrorName() string {
	return "StopActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopActionResponseValidationError{}

// Validate checks the field values on ActionResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionResultRequestMultiError, or nil if none found.
func (m *ActionResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for Output

	// no validation rules for Done

	// no validation rules for Error

	if len(errors) > 0 {
		return ActionResultRequestMultiError(errors)
	}

	return nil
}

// ActionResultRequestMultiError is an error wrapping multiple validation
// errors returned by ActionResultRequest.ValidateAll() if the designated
// constraints aren't met.
type ActionResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionResultRequestMultiError) AllErrors() []error { return m }

// ActionResultRequestValidationError is the validation error returned by
// ActionResultRequest.Validate if the designated constraints aren't met.
type ActionResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionResultRequestValidationError) ErrorName() string {
	return "ActionResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActionResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionResultRequestValidationError{}

// Validate checks the field values on ActionResultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionResultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionResultResponseMultiError, or nil if none found.
func (m *ActionResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActionResultResponseMultiError(errors)
	}

	return nil
}

// ActionResultResponseMultiError is an error wrapping multiple validation
// errors returned by ActionResultResponse.ValidateAll() if the designated
// constraints aren't met.
type ActionResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionResultResponseMultiError) AllErrors() []error { return m }

// ActionResultResponseValidationError is the validation error returned by
// ActionResultResponse.Validate if the designated constraints aren't met.
type ActionResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionResultResponseValidationError) ErrorName() string {
	return "ActionResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActionResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionResultResponseValidationError{}

// Validate checks the field values on PBMSwitchPITRRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PBMSwitchPITRRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PBMSwitchPITRRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PBMSwitchPITRRequestMultiError, or nil if none found.
func (m *PBMSwitchPITRRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PBMSwitchPITRRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PBMSwitchPITRRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PBMSwitchPITRRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PBMSwitchPITRRequestValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return PBMSwitchPITRRequestMultiError(errors)
	}

	return nil
}

// PBMSwitchPITRRequestMultiError is an error wrapping multiple validation
// errors returned by PBMSwitchPITRRequest.ValidateAll() if the designated
// constraints aren't met.
type PBMSwitchPITRRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PBMSwitchPITRRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PBMSwitchPITRRequestMultiError) AllErrors() []error { return m }

// PBMSwitchPITRRequestValidationError is the validation error returned by
// PBMSwitchPITRRequest.Validate if the designated constraints aren't met.
type PBMSwitchPITRRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PBMSwitchPITRRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PBMSwitchPITRRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PBMSwitchPITRRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PBMSwitchPITRRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PBMSwitchPITRRequestValidationError) ErrorName() string {
	return "PBMSwitchPITRRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PBMSwitchPITRRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPBMSwitchPITRRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PBMSwitchPITRRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PBMSwitchPITRRequestValidationError{}

// Validate checks the field values on PBMSwitchPITRResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PBMSwitchPITRResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PBMSwitchPITRResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PBMSwitchPITRResponseMultiError, or nil if none found.
func (m *PBMSwitchPITRResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PBMSwitchPITRResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return PBMSwitchPITRResponseMultiError(errors)
	}

	return nil
}

// PBMSwitchPITRResponseMultiError is an error wrapping multiple validation
// errors returned by PBMSwitchPITRResponse.ValidateAll() if the designated
// constraints aren't met.
type PBMSwitchPITRResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PBMSwitchPITRResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PBMSwitchPITRResponseMultiError) AllErrors() []error { return m }

// PBMSwitchPITRResponseValidationError is the validation error returned by
// PBMSwitchPITRResponse.Validate if the designated constraints aren't met.
type PBMSwitchPITRResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PBMSwitchPITRResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PBMSwitchPITRResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PBMSwitchPITRResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PBMSwitchPITRResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PBMSwitchPITRResponseValidationError) ErrorName() string {
	return "PBMSwitchPITRResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PBMSwitchPITRResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPBMSwitchPITRResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PBMSwitchPITRResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PBMSwitchPITRResponseValidationError{}

// Validate checks the field values on AgentLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AgentLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentLogsRequestMultiError, or nil if none found.
func (m *AgentLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for Limit

	if len(errors) > 0 {
		return AgentLogsRequestMultiError(errors)
	}

	return nil
}

// AgentLogsRequestMultiError is an error wrapping multiple validation errors
// returned by AgentLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type AgentLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentLogsRequestMultiError) AllErrors() []error { return m }

// AgentLogsRequestValidationError is the validation error returned by
// AgentLogsRequest.Validate if the designated constraints aren't met.
type AgentLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentLogsRequestValidationError) ErrorName() string { return "AgentLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e AgentLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentLogsRequestValidationError{}

// Validate checks the field values on AgentLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AgentLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentLogsResponseMultiError, or nil if none found.
func (m *AgentLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentConfigLogLinesCount

	if len(errors) > 0 {
		return AgentLogsResponseMultiError(errors)
	}

	return nil
}

// AgentLogsResponseMultiError is an error wrapping multiple validation errors
// returned by AgentLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type AgentLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentLogsResponseMultiError) AllErrors() []error { return m }

// AgentLogsResponseValidationError is the validation error returned by
// AgentLogsResponse.Validate if the designated constraints aren't met.
type AgentLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentLogsResponseValidationError) ErrorName() string {
	return "AgentLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AgentLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentLogsResponseValidationError{}

// Validate checks the field values on CheckConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckConnectionRequestMultiError, or nil if none found.
func (m *CheckConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckConnectionRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckConnectionRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckConnectionRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckConnectionRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckConnectionRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckConnectionRequestValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return CheckConnectionRequestMultiError(errors)
	}

	return nil
}

// CheckConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckConnectionRequestMultiError) AllErrors() []error { return m }

// CheckConnectionRequestValidationError is the validation error returned by
// CheckConnectionRequest.Validate if the designated constraints aren't met.
type CheckConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckConnectionRequestValidationError) ErrorName() string {
	return "CheckConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckConnectionRequestValidationError{}

// Validate checks the field values on CheckConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckConnectionResponseMultiError, or nil if none found.
func (m *CheckConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return CheckConnectionResponseMultiError(errors)
	}

	return nil
}

// CheckConnectionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckConnectionResponseMultiError) AllErrors() []error { return m }

// CheckConnectionResponseValidationError is the validation error returned by
// CheckConnectionResponse.Validate if the designated constraints aren't met.
type CheckConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckConnectionResponseValidationError) ErrorName() string {
	return "CheckConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckConnectionResponseValidationError{}

// Validate checks the field values on ServiceInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInfoRequestMultiError, or nil if none found.
func (m *ServiceInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInfoRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInfoRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInfoRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceInfoRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceInfoRequestValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceInfoRequestValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return ServiceInfoRequestMultiError(errors)
	}

	return nil
}

// ServiceInfoRequestMultiError is an error wrapping multiple validation errors
// returned by ServiceInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type ServiceInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInfoRequestMultiError) AllErrors() []error { return m }

// ServiceInfoRequestValidationError is the validation error returned by
// ServiceInfoRequest.Validate if the designated constraints aren't met.
type ServiceInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInfoRequestValidationError) ErrorName() string {
	return "ServiceInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInfoRequestValidationError{}

// Validate checks the field values on ServiceInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceInfoResponseMultiError, or nil if none found.
func (m *ServiceInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for TableCount

	// no validation rules for Version

	if len(errors) > 0 {
		return ServiceInfoResponseMultiError(errors)
	}

	return nil
}

// ServiceInfoResponseMultiError is an error wrapping multiple validation
// errors returned by ServiceInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type ServiceInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceInfoResponseMultiError) AllErrors() []error { return m }

// ServiceInfoResponseValidationError is the validation error returned by
// ServiceInfoResponse.Validate if the designated constraints aren't met.
type ServiceInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceInfoResponseValidationError) ErrorName() string {
	return "ServiceInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceInfoResponseValidationError{}

// Validate checks the field values on JobStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobStatusRequestMultiError, or nil if none found.
func (m *JobStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JobStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return JobStatusRequestMultiError(errors)
	}

	return nil
}

// JobStatusRequestMultiError is an error wrapping multiple validation errors
// returned by JobStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type JobStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobStatusRequestMultiError) AllErrors() []error { return m }

// JobStatusRequestValidationError is the validation error returned by
// JobStatusRequest.Validate if the designated constraints aren't met.
type JobStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStatusRequestValidationError) ErrorName() string { return "JobStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e JobStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStatusRequestValidationError{}

// Validate checks the field values on JobStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobStatusResponseMultiError, or nil if none found.
func (m *JobStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JobStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alive

	if len(errors) > 0 {
		return JobStatusResponseMultiError(errors)
	}

	return nil
}

// JobStatusResponseMultiError is an error wrapping multiple validation errors
// returned by JobStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type JobStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobStatusResponseMultiError) AllErrors() []error { return m }

// JobStatusResponseValidationError is the validation error returned by
// JobStatusResponse.Validate if the designated constraints aren't met.
type JobStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStatusResponseValidationError) ErrorName() string {
	return "JobStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JobStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStatusResponseValidationError{}

// Validate checks the field values on S3LocationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *S3LocationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3LocationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3LocationConfigMultiError, or nil if none found.
func (m *S3LocationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *S3LocationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for BucketName

	// no validation rules for BucketRegion

	if len(errors) > 0 {
		return S3LocationConfigMultiError(errors)
	}

	return nil
}

// S3LocationConfigMultiError is an error wrapping multiple validation errors
// returned by S3LocationConfig.ValidateAll() if the designated constraints
// aren't met.
type S3LocationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3LocationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3LocationConfigMultiError) AllErrors() []error { return m }

// S3LocationConfigValidationError is the validation error returned by
// S3LocationConfig.Validate if the designated constraints aren't met.
type S3LocationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3LocationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3LocationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3LocationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3LocationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3LocationConfigValidationError) ErrorName() string { return "S3LocationConfigValidationError" }

// Error satisfies the builtin error interface
func (e S3LocationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3LocationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3LocationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3LocationConfigValidationError{}

// Validate checks the field values on FilesystemLocationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemLocationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemLocationConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemLocationConfigMultiError, or nil if none found.
func (m *FilesystemLocationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemLocationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return FilesystemLocationConfigMultiError(errors)
	}

	return nil
}

// FilesystemLocationConfigMultiError is an error wrapping multiple validation
// errors returned by FilesystemLocationConfig.ValidateAll() if the designated
// constraints aren't met.
type FilesystemLocationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemLocationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemLocationConfigMultiError) AllErrors() []error { return m }

// FilesystemLocationConfigValidationError is the validation error returned by
// FilesystemLocationConfig.Validate if the designated constraints aren't met.
type FilesystemLocationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemLocationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemLocationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemLocationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemLocationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemLocationConfigValidationError) ErrorName() string {
	return "FilesystemLocationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemLocationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemLocationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemLocationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemLocationConfigValidationError{}

// Validate checks the field values on StartJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartJobRequestMultiError, or nil if none found.
func (m *StartJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartJobRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartJobRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartJobRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Job.(type) {
	case *StartJobRequest_MysqlBackup:
		if v == nil {
			err := StartJobRequestValidationError{
				field:  "Job",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequestValidationError{
					field:  "MysqlBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartJobRequest_MysqlRestoreBackup:
		if v == nil {
			err := StartJobRequestValidationError{
				field:  "Job",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlRestoreBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlRestoreBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequestValidationError{
					field:  "MysqlRestoreBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartJobRequest_MongodbBackup:
		if v == nil {
			err := StartJobRequestValidationError{
				field:  "Job",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MongodbBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MongodbBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequestValidationError{
					field:  "MongodbBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartJobRequest_MongodbRestoreBackup:
		if v == nil {
			err := StartJobRequestValidationError{
				field:  "Job",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbRestoreBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MongodbRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequestValidationError{
						field:  "MongodbRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbRestoreBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequestValidationError{
					field:  "MongodbRestoreBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartJobRequestMultiError(errors)
	}

	return nil
}

// StartJobRequestMultiError is an error wrapping multiple validation errors
// returned by StartJobRequest.ValidateAll() if the designated constraints
// aren't met.
type StartJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobRequestMultiError) AllErrors() []error { return m }

// StartJobRequestValidationError is the validation error returned by
// StartJobRequest.Validate if the designated constraints aren't met.
type StartJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobRequestValidationError) ErrorName() string { return "StartJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobRequestValidationError{}

// Validate checks the field values on StartJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartJobResponseMultiError, or nil if none found.
func (m *StartJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return StartJobResponseMultiError(errors)
	}

	return nil
}

// StartJobResponseMultiError is an error wrapping multiple validation errors
// returned by StartJobResponse.ValidateAll() if the designated constraints
// aren't met.
type StartJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobResponseMultiError) AllErrors() []error { return m }

// StartJobResponseValidationError is the validation error returned by
// StartJobResponse.Validate if the designated constraints aren't met.
type StartJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobResponseValidationError) ErrorName() string { return "StartJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e StartJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobResponseValidationError{}

// Validate checks the field values on StopJobRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StopJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StopJobRequestMultiError,
// or nil if none found.
func (m *StopJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return StopJobRequestMultiError(errors)
	}

	return nil
}

// StopJobRequestMultiError is an error wrapping multiple validation errors
// returned by StopJobRequest.ValidateAll() if the designated constraints
// aren't met.
type StopJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopJobRequestMultiError) AllErrors() []error { return m }

// StopJobRequestValidationError is the validation error returned by
// StopJobRequest.Validate if the designated constraints aren't met.
type StopJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopJobRequestValidationError) ErrorName() string { return "StopJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e StopJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopJobRequestValidationError{}

// Validate checks the field values on StopJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StopJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopJobResponseMultiError, or nil if none found.
func (m *StopJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopJobResponseMultiError(errors)
	}

	return nil
}

// StopJobResponseMultiError is an error wrapping multiple validation errors
// returned by StopJobResponse.ValidateAll() if the designated constraints
// aren't met.
type StopJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopJobResponseMultiError) AllErrors() []error { return m }

// StopJobResponseValidationError is the validation error returned by
// StopJobResponse.Validate if the designated constraints aren't met.
type StopJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopJobResponseValidationError) ErrorName() string { return "StopJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e StopJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopJobResponseValidationError{}

// Validate checks the field values on JobResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobResultMultiError, or nil
// if none found.
func (m *JobResult) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobResultValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobResultValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobResultValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Result.(type) {
	case *JobResult_Error_:
		if v == nil {
			err := JobResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobResult_MysqlBackup:
		if v == nil {
			err := JobResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "MysqlBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobResult_MysqlRestoreBackup:
		if v == nil {
			err := JobResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlRestoreBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlRestoreBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "MysqlRestoreBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobResult_MongodbBackup:
		if v == nil {
			err := JobResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MongodbBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MongodbBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "MongodbBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobResult_MongodbRestoreBackup:
		if v == nil {
			err := JobResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbRestoreBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MongodbRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobResultValidationError{
						field:  "MongodbRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbRestoreBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "MongodbRestoreBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobResultMultiError(errors)
	}

	return nil
}

// JobResultMultiError is an error wrapping multiple validation errors returned
// by JobResult.ValidateAll() if the designated constraints aren't met.
type JobResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResultMultiError) AllErrors() []error { return m }

// JobResultValidationError is the validation error returned by
// JobResult.Validate if the designated constraints aren't met.
type JobResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResultValidationError) ErrorName() string { return "JobResultValidationError" }

// Error satisfies the builtin error interface
func (e JobResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResultValidationError{}

// Validate checks the field values on JobProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobProgressMultiError, or
// nil if none found.
func (m *JobProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobProgressValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobProgressValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobProgressValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Result.(type) {
	case *JobProgress_MysqlBackup:
		if v == nil {
			err := JobProgressValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "MysqlBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobProgressValidationError{
					field:  "MysqlBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobProgress_MysqlRestoreBackup:
		if v == nil {
			err := JobProgressValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlRestoreBackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "MysqlRestoreBackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlRestoreBackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobProgressValidationError{
					field:  "MysqlRestoreBackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobProgress_Logs_:
		if v == nil {
			err := JobProgressValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "Logs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobProgressValidationError{
						field:  "Logs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobProgressValidationError{
					field:  "Logs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobProgressMultiError(errors)
	}

	return nil
}

// JobProgressMultiError is an error wrapping multiple validation errors
// returned by JobProgress.ValidateAll() if the designated constraints aren't met.
type JobProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProgressMultiError) AllErrors() []error { return m }

// JobProgressValidationError is the validation error returned by
// JobProgress.Validate if the designated constraints aren't met.
type JobProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProgressValidationError) ErrorName() string { return "JobProgressValidationError" }

// Error satisfies the builtin error interface
func (e JobProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProgressValidationError{}

// Validate checks the field values on GetVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequestMultiError, or nil if none found.
func (m *GetVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSoftwares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequestValidationError{
						field:  fmt.Sprintf("Softwares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequestValidationError{
						field:  fmt.Sprintf("Softwares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequestValidationError{
					field:  fmt.Sprintf("Softwares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetVersionsRequestMultiError(errors)
	}

	return nil
}

// GetVersionsRequestMultiError is an error wrapping multiple validation errors
// returned by GetVersionsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequestMultiError) AllErrors() []error { return m }

// GetVersionsRequestValidationError is the validation error returned by
// GetVersionsRequest.Validate if the designated constraints aren't met.
type GetVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequestValidationError) ErrorName() string {
	return "GetVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequestValidationError{}

// Validate checks the field values on GetVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsResponseMultiError, or nil if none found.
func (m *GetVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetVersionsResponseMultiError(errors)
	}

	return nil
}

// GetVersionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetVersionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsResponseMultiError) AllErrors() []error { return m }

// GetVersionsResponseValidationError is the validation error returned by
// GetVersionsResponse.Validate if the designated constraints aren't met.
type GetVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsResponseValidationError) ErrorName() string {
	return "GetVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsResponseValidationError{}

// Validate checks the field values on AgentMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentMessageMultiError, or
// nil if none found.
func (m *AgentMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentMessageValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentMessageValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentMessageValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Payload.(type) {
	case *AgentMessage_Ping:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_StateChanged:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStateChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStateChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "StateChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_QanCollect:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanCollect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "QanCollect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "QanCollect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanCollect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "QanCollect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_ActionResult:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActionResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "ActionResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "ActionResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "ActionResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_JobResult:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "JobResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_JobProgress:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobProgress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobProgress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobProgress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobProgress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "JobProgress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_Pong:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_SetState:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetState()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "SetState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "SetState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetState()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "SetState",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_StartAction:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StartAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StartAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "StartAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_StopAction:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StopAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StopAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "StopAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_CheckConnection:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCheckConnection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "CheckConnection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "CheckConnection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckConnection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "CheckConnection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_StartJob:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StartJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StartJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "StartJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_StopJob:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StopJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "StopJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "StopJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_JobStatus:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "JobStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "JobStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_GetVersions:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetVersions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "GetVersions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "GetVersions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetVersions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "GetVersions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_PbmSwitchPitr:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPbmSwitchPitr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "PbmSwitchPitr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "PbmSwitchPitr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPbmSwitchPitr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "PbmSwitchPitr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_AgentLogs:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAgentLogs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "AgentLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "AgentLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgentLogs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "AgentLogs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AgentMessage_ServiceInfo:
		if v == nil {
			err := AgentMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetServiceInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "ServiceInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentMessageValidationError{
						field:  "ServiceInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetServiceInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentMessageValidationError{
					field:  "ServiceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AgentMessageMultiError(errors)
	}

	return nil
}

// AgentMessageMultiError is an error wrapping multiple validation errors
// returned by AgentMessage.ValidateAll() if the designated constraints aren't met.
type AgentMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentMessageMultiError) AllErrors() []error { return m }

// AgentMessageValidationError is the validation error returned by
// AgentMessage.Validate if the designated constraints aren't met.
type AgentMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentMessageValidationError) ErrorName() string { return "AgentMessageValidationError" }

// Error satisfies the builtin error interface
func (e AgentMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentMessageValidationError{}

// Validate checks the field values on ServerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMessageMultiError, or
// nil if none found.
func (m *ServerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerMessageValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerMessageValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerMessageValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Payload.(type) {
	case *ServerMessage_Pong:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_StateChanged:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStateChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStateChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "StateChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_QanCollect:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQanCollect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "QanCollect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "QanCollect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQanCollect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "QanCollect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_ActionResult:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActionResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ActionResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ActionResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "ActionResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Ping:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_SetState:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetState()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "SetState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "SetState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetState()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "SetState",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_StartAction:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StartAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StartAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "StartAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_StopAction:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StopAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StopAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "StopAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_CheckConnection:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCheckConnection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "CheckConnection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "CheckConnection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckConnection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "CheckConnection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_StartJob:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StartJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StartJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "StartJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_StopJob:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StopJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "StopJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "StopJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_JobStatus:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "JobStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "JobStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "JobStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_GetVersions:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetVersions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "GetVersions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "GetVersions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetVersions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "GetVersions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_PbmSwitchPitr:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPbmSwitchPitr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "PbmSwitchPitr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "PbmSwitchPitr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPbmSwitchPitr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "PbmSwitchPitr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_AgentLogs:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAgentLogs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "AgentLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "AgentLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgentLogs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "AgentLogs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_ServiceInfo:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetServiceInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ServiceInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ServiceInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetServiceInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "ServiceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerMessageMultiError(errors)
	}

	return nil
}

// ServerMessageMultiError is an error wrapping multiple validation errors
// returned by ServerMessage.ValidateAll() if the designated constraints
// aren't met.
type ServerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMessageMultiError) AllErrors() []error { return m }

// ServerMessageValidationError is the validation error returned by
// ServerMessage.Validate if the designated constraints aren't met.
type ServerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMessageValidationError) ErrorName() string { return "ServerMessageValidationError" }

// Error satisfies the builtin error interface
func (e ServerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMessageValidationError{}

// Validate checks the field values on SetStateRequest_AgentProcess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStateRequest_AgentProcess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateRequest_AgentProcess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateRequest_AgentProcessMultiError, or nil if none found.
func (m *SetStateRequest_AgentProcess) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateRequest_AgentProcess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for TemplateLeftDelim

	// no validation rules for TemplateRightDelim

	// no validation rules for TextFiles

	if len(errors) > 0 {
		return SetStateRequest_AgentProcessMultiError(errors)
	}

	return nil
}

// SetStateRequest_AgentProcessMultiError is an error wrapping multiple
// validation errors returned by SetStateRequest_AgentProcess.ValidateAll() if
// the designated constraints aren't met.
type SetStateRequest_AgentProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateRequest_AgentProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateRequest_AgentProcessMultiError) AllErrors() []error { return m }

// SetStateRequest_AgentProcessValidationError is the validation error returned
// by SetStateRequest_AgentProcess.Validate if the designated constraints
// aren't met.
type SetStateRequest_AgentProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateRequest_AgentProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateRequest_AgentProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateRequest_AgentProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateRequest_AgentProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateRequest_AgentProcessValidationError) ErrorName() string {
	return "SetStateRequest_AgentProcessValidationError"
}

// Error satisfies the builtin error interface
func (e SetStateRequest_AgentProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateRequest_AgentProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateRequest_AgentProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateRequest_AgentProcessValidationError{}

// Validate checks the field values on SetStateRequest_BuiltinAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStateRequest_BuiltinAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateRequest_BuiltinAgent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateRequest_BuiltinAgentMultiError, or nil if none found.
func (m *SetStateRequest_BuiltinAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateRequest_BuiltinAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Dsn

	// no validation rules for MaxQueryLength

	// no validation rules for DisableCommentsParsing

	// no validation rules for DisableQueryExamples

	// no validation rules for MaxQueryLogSize

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetStateRequest_BuiltinAgentValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetStateRequest_BuiltinAgentValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetStateRequest_BuiltinAgentValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tls

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return SetStateRequest_BuiltinAgentMultiError(errors)
	}

	return nil
}

// SetStateRequest_BuiltinAgentMultiError is an error wrapping multiple
// validation errors returned by SetStateRequest_BuiltinAgent.ValidateAll() if
// the designated constraints aren't met.
type SetStateRequest_BuiltinAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateRequest_BuiltinAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateRequest_BuiltinAgentMultiError) AllErrors() []error { return m }

// SetStateRequest_BuiltinAgentValidationError is the validation error returned
// by SetStateRequest_BuiltinAgent.Validate if the designated constraints
// aren't met.
type SetStateRequest_BuiltinAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateRequest_BuiltinAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateRequest_BuiltinAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateRequest_BuiltinAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateRequest_BuiltinAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateRequest_BuiltinAgentValidationError) ErrorName() string {
	return "SetStateRequest_BuiltinAgentValidationError"
}

// Error satisfies the builtin error interface
func (e SetStateRequest_BuiltinAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateRequest_BuiltinAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateRequest_BuiltinAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateRequest_BuiltinAgentValidationError{}

// Validate checks the field values on StartActionRequest_MySQLExplainParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_MySQLExplainParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartActionRequest_MySQLExplainParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartActionRequest_MySQLExplainParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLExplainParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLExplainParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Query

	// no validation rules for Schema

	// no validation rules for OutputFormat

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLExplainParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLExplainParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLExplainParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLExplainParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLExplainParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLExplainParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_MySQLExplainParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLExplainParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLExplainParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLExplainParamsValidationError is the validation error
// returned by StartActionRequest_MySQLExplainParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MySQLExplainParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLExplainParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLExplainParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_MySQLExplainParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLExplainParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLExplainParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLExplainParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLExplainParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLExplainParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLExplainParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLExplainParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MySQLShowCreateTableParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MySQLShowCreateTableParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MySQLShowCreateTableParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_MySQLShowCreateTableParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLShowCreateTableParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLShowCreateTableParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowCreateTableParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowCreateTableParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLShowCreateTableParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLShowCreateTableParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLShowCreateTableParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLShowCreateTableParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MySQLShowCreateTableParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLShowCreateTableParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLShowCreateTableParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLShowCreateTableParamsValidationError is the
// validation error returned by
// StartActionRequest_MySQLShowCreateTableParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_MySQLShowCreateTableParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLShowCreateTableParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLShowCreateTableParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLShowCreateTableParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLShowCreateTableParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLShowCreateTableParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MySQLShowTableStatusParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MySQLShowTableStatusParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MySQLShowTableStatusParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_MySQLShowTableStatusParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLShowTableStatusParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLShowTableStatusParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowTableStatusParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowTableStatusParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLShowTableStatusParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLShowTableStatusParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLShowTableStatusParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLShowTableStatusParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MySQLShowTableStatusParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLShowTableStatusParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLShowTableStatusParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLShowTableStatusParamsValidationError is the
// validation error returned by
// StartActionRequest_MySQLShowTableStatusParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_MySQLShowTableStatusParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLShowTableStatusParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLShowTableStatusParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLShowTableStatusParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLShowTableStatusParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLShowTableStatusParamsValidationError{}

// Validate checks the field values on StartActionRequest_MySQLShowIndexParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_MySQLShowIndexParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MySQLShowIndexParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartActionRequest_MySQLShowIndexParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLShowIndexParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLShowIndexParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowIndexParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLShowIndexParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLShowIndexParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLShowIndexParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLShowIndexParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLShowIndexParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_MySQLShowIndexParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLShowIndexParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLShowIndexParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLShowIndexParamsValidationError is the validation
// error returned by StartActionRequest_MySQLShowIndexParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MySQLShowIndexParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLShowIndexParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLShowIndexParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_MySQLShowIndexParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLShowIndexParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLShowIndexParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLShowIndexParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLShowIndexParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLShowIndexParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLShowIndexParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLShowIndexParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_PostgreSQLShowCreateTableParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_PostgreSQLShowCreateTableParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PostgreSQLShowCreateTableParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartActionRequest_PostgreSQLShowCreateTableParamsMultiError, or nil if
// none found.
func (m *StartActionRequest_PostgreSQLShowCreateTableParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PostgreSQLShowCreateTableParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLShowCreateTableParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLShowCreateTableParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_PostgreSQLShowCreateTableParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_PostgreSQLShowCreateTableParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PostgreSQLShowCreateTableParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_PostgreSQLShowCreateTableParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_PostgreSQLShowCreateTableParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PostgreSQLShowCreateTableParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PostgreSQLShowCreateTableParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PostgreSQLShowCreateTableParamsValidationError is the
// validation error returned by
// StartActionRequest_PostgreSQLShowCreateTableParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_PostgreSQLShowCreateTableParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) ErrorName() string {
	return "StartActionRequest_PostgreSQLShowCreateTableParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PostgreSQLShowCreateTableParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PostgreSQLShowCreateTableParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PostgreSQLShowCreateTableParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PostgreSQLShowCreateTableParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_PostgreSQLShowIndexParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_PostgreSQLShowIndexParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PostgreSQLShowIndexParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_PostgreSQLShowIndexParamsMultiError, or nil if none found.
func (m *StartActionRequest_PostgreSQLShowIndexParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PostgreSQLShowIndexParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLShowIndexParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLShowIndexParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_PostgreSQLShowIndexParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_PostgreSQLShowIndexParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PostgreSQLShowIndexParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_PostgreSQLShowIndexParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_PostgreSQLShowIndexParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PostgreSQLShowIndexParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PostgreSQLShowIndexParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PostgreSQLShowIndexParamsValidationError is the
// validation error returned by
// StartActionRequest_PostgreSQLShowIndexParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_PostgreSQLShowIndexParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) ErrorName() string {
	return "StartActionRequest_PostgreSQLShowIndexParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PostgreSQLShowIndexParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PostgreSQLShowIndexParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PostgreSQLShowIndexParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PostgreSQLShowIndexParamsValidationError{}

// Validate checks the field values on StartActionRequest_MongoDBExplainParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_MongoDBExplainParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBExplainParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartActionRequest_MongoDBExplainParamsMultiError, or nil if none found.
func (m *StartActionRequest_MongoDBExplainParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBExplainParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Query

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBExplainParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBExplainParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBExplainParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBExplainParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBExplainParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MongoDBExplainParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_MongoDBExplainParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBExplainParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBExplainParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MongoDBExplainParamsValidationError is the validation
// error returned by StartActionRequest_MongoDBExplainParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MongoDBExplainParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBExplainParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MongoDBExplainParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_MongoDBExplainParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MongoDBExplainParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MongoDBExplainParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBExplainParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBExplainParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBExplainParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBExplainParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBExplainParamsValidationError{}

// Validate checks the field values on StartActionRequest_PTSummaryParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartActionRequest_PTSummaryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartActionRequest_PTSummaryParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartActionRequest_PTSummaryParamsMultiError, or nil if none found.
func (m *StartActionRequest_PTSummaryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PTSummaryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartActionRequest_PTSummaryParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PTSummaryParamsMultiError is an error wrapping multiple
// validation errors returned by
// StartActionRequest_PTSummaryParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_PTSummaryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PTSummaryParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PTSummaryParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PTSummaryParamsValidationError is the validation error
// returned by StartActionRequest_PTSummaryParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_PTSummaryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PTSummaryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PTSummaryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PTSummaryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PTSummaryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PTSummaryParamsValidationError) ErrorName() string {
	return "StartActionRequest_PTSummaryParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PTSummaryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PTSummaryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PTSummaryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PTSummaryParamsValidationError{}

// Validate checks the field values on StartActionRequest_PTPgSummaryParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_PTPgSummaryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartActionRequest_PTPgSummaryParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartActionRequest_PTPgSummaryParamsMultiError, or nil if none found.
func (m *StartActionRequest_PTPgSummaryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PTPgSummaryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return StartActionRequest_PTPgSummaryParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PTPgSummaryParamsMultiError is an error wrapping multiple
// validation errors returned by
// StartActionRequest_PTPgSummaryParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_PTPgSummaryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PTPgSummaryParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PTPgSummaryParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PTPgSummaryParamsValidationError is the validation error
// returned by StartActionRequest_PTPgSummaryParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_PTPgSummaryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PTPgSummaryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PTPgSummaryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PTPgSummaryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PTPgSummaryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PTPgSummaryParamsValidationError) ErrorName() string {
	return "StartActionRequest_PTPgSummaryParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PTPgSummaryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PTPgSummaryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PTPgSummaryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PTPgSummaryParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_PTMongoDBSummaryParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_PTMongoDBSummaryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PTMongoDBSummaryParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_PTMongoDBSummaryParamsMultiError, or nil if none found.
func (m *StartActionRequest_PTMongoDBSummaryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PTMongoDBSummaryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return StartActionRequest_PTMongoDBSummaryParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PTMongoDBSummaryParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_PTMongoDBSummaryParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_PTMongoDBSummaryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PTMongoDBSummaryParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PTMongoDBSummaryParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PTMongoDBSummaryParamsValidationError is the validation
// error returned by StartActionRequest_PTMongoDBSummaryParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_PTMongoDBSummaryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) ErrorName() string {
	return "StartActionRequest_PTMongoDBSummaryParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PTMongoDBSummaryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PTMongoDBSummaryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PTMongoDBSummaryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PTMongoDBSummaryParamsValidationError{}

// Validate checks the field values on StartActionRequest_PTMySQLSummaryParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_PTMySQLSummaryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PTMySQLSummaryParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartActionRequest_PTMySQLSummaryParamsMultiError, or nil if none found.
func (m *StartActionRequest_PTMySQLSummaryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PTMySQLSummaryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return StartActionRequest_PTMySQLSummaryParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PTMySQLSummaryParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_PTMySQLSummaryParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_PTMySQLSummaryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PTMySQLSummaryParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PTMySQLSummaryParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PTMySQLSummaryParamsValidationError is the validation
// error returned by StartActionRequest_PTMySQLSummaryParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_PTMySQLSummaryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) ErrorName() string {
	return "StartActionRequest_PTMySQLSummaryParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PTMySQLSummaryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PTMySQLSummaryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PTMySQLSummaryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PTMySQLSummaryParamsValidationError{}

// Validate checks the field values on StartActionRequest_MySQLQueryShowParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartActionRequest_MySQLQueryShowParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MySQLQueryShowParams with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StartActionRequest_MySQLQueryShowParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLQueryShowParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLQueryShowParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Query

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLQueryShowParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLQueryShowParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLQueryShowParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLQueryShowParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLQueryShowParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLQueryShowParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_MySQLQueryShowParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLQueryShowParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLQueryShowParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLQueryShowParamsValidationError is the validation
// error returned by StartActionRequest_MySQLQueryShowParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MySQLQueryShowParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLQueryShowParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLQueryShowParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_MySQLQueryShowParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLQueryShowParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLQueryShowParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLQueryShowParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLQueryShowParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLQueryShowParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLQueryShowParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLQueryShowParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MySQLQuerySelectParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MySQLQuerySelectParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MySQLQuerySelectParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_MySQLQuerySelectParamsMultiError, or nil if none found.
func (m *StartActionRequest_MySQLQuerySelectParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MySQLQuerySelectParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Query

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MySQLQuerySelectParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MySQLQuerySelectParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MySQLQuerySelectParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_MySQLQuerySelectParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MySQLQuerySelectParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_MySQLQuerySelectParams.ValidateAll() if the designated
// constraints aren't met.
type StartActionRequest_MySQLQuerySelectParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MySQLQuerySelectParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MySQLQuerySelectParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MySQLQuerySelectParamsValidationError is the validation
// error returned by StartActionRequest_MySQLQuerySelectParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MySQLQuerySelectParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) ErrorName() string {
	return "StartActionRequest_MySQLQuerySelectParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MySQLQuerySelectParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MySQLQuerySelectParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MySQLQuerySelectParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MySQLQuerySelectParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_PostgreSQLQueryShowParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_PostgreSQLQueryShowParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PostgreSQLQueryShowParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_PostgreSQLQueryShowParamsMultiError, or nil if none found.
func (m *StartActionRequest_PostgreSQLQueryShowParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PostgreSQLQueryShowParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLQueryShowParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLQueryShowParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_PostgreSQLQueryShowParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_PostgreSQLQueryShowParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PostgreSQLQueryShowParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_PostgreSQLQueryShowParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_PostgreSQLQueryShowParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PostgreSQLQueryShowParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PostgreSQLQueryShowParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PostgreSQLQueryShowParamsValidationError is the
// validation error returned by
// StartActionRequest_PostgreSQLQueryShowParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_PostgreSQLQueryShowParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) ErrorName() string {
	return "StartActionRequest_PostgreSQLQueryShowParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PostgreSQLQueryShowParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PostgreSQLQueryShowParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PostgreSQLQueryShowParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PostgreSQLQueryShowParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_PostgreSQLQuerySelectParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_PostgreSQLQuerySelectParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_PostgreSQLQuerySelectParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartActionRequest_PostgreSQLQuerySelectParamsMultiError, or nil if none found.
func (m *StartActionRequest_PostgreSQLQuerySelectParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_PostgreSQLQuerySelectParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	// no validation rules for Query

	if all {
		switch v := interface{}(m.GetTlsFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLQuerySelectParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_PostgreSQLQuerySelectParamsValidationError{
					field:  "TlsFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTlsFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_PostgreSQLQuerySelectParamsValidationError{
				field:  "TlsFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TlsSkipVerify

	if len(errors) > 0 {
		return StartActionRequest_PostgreSQLQuerySelectParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_PostgreSQLQuerySelectParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_PostgreSQLQuerySelectParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_PostgreSQLQuerySelectParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_PostgreSQLQuerySelectParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_PostgreSQLQuerySelectParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_PostgreSQLQuerySelectParamsValidationError is the
// validation error returned by
// StartActionRequest_PostgreSQLQuerySelectParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_PostgreSQLQuerySelectParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) ErrorName() string {
	return "StartActionRequest_PostgreSQLQuerySelectParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_PostgreSQLQuerySelectParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_PostgreSQLQuerySelectParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_PostgreSQLQuerySelectParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_PostgreSQLQuerySelectParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MongoDBQueryGetParameterParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MongoDBQueryGetParameterParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBQueryGetParameterParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartActionRequest_MongoDBQueryGetParameterParamsMultiError, or nil if none found.
func (m *StartActionRequest_MongoDBQueryGetParameterParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBQueryGetParameterParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetParameterParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetParameterParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBQueryGetParameterParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBQueryGetParameterParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBQueryGetParameterParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_MongoDBQueryGetParameterParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetParameterParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBQueryGetParameterParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBQueryGetParameterParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MongoDBQueryGetParameterParamsValidationError is the
// validation error returned by
// StartActionRequest_MongoDBQueryGetParameterParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetParameterParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBQueryGetParameterParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBQueryGetParameterParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBQueryGetParameterParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBQueryGetParameterParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBQueryGetParameterParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MongoDBQueryBuildInfoParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MongoDBQueryBuildInfoParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBQueryBuildInfoParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartActionRequest_MongoDBQueryBuildInfoParamsMultiError, or nil if none found.
func (m *StartActionRequest_MongoDBQueryBuildInfoParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBQueryBuildInfoParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryBuildInfoParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryBuildInfoParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBQueryBuildInfoParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBQueryBuildInfoParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBQueryBuildInfoParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_MongoDBQueryBuildInfoParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryBuildInfoParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBQueryBuildInfoParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBQueryBuildInfoParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MongoDBQueryBuildInfoParamsValidationError is the
// validation error returned by
// StartActionRequest_MongoDBQueryBuildInfoParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_MongoDBQueryBuildInfoParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBQueryBuildInfoParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBQueryBuildInfoParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBQueryBuildInfoParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBQueryBuildInfoParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBQueryBuildInfoParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MongoDBQueryGetCmdLineOptsParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MongoDBQueryGetCmdLineOptsParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBQueryGetCmdLineOptsParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError, or nil if
// none found.
func (m *StartActionRequest_MongoDBQueryGetCmdLineOptsParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBQueryGetCmdLineOptsParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_MongoDBQueryGetCmdLineOptsParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBQueryGetCmdLineOptsParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError is the
// validation error returned by
// StartActionRequest_MongoDBQueryGetCmdLineOptsParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBQueryGetCmdLineOptsParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBQueryGetCmdLineOptsParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MongoDBQueryReplSetGetStatusParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MongoDBQueryReplSetGetStatusParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBQueryReplSetGetStatusParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError, or nil if
// none found.
func (m *StartActionRequest_MongoDBQueryReplSetGetStatusParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBQueryReplSetGetStatusParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_MongoDBQueryReplSetGetStatusParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBQueryReplSetGetStatusParamsMultiError) AllErrors() []error {
	return m
}

// StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError is the
// validation error returned by
// StartActionRequest_MongoDBQueryReplSetGetStatusParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBQueryReplSetGetStatusParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBQueryReplSetGetStatusParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_MongoDBQueryGetDiagnosticDataParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_MongoDBQueryGetDiagnosticDataParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_MongoDBQueryGetDiagnosticDataParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError, or nil if
// none found.
func (m *StartActionRequest_MongoDBQueryGetDiagnosticDataParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_MongoDBQueryGetDiagnosticDataParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError is an error
// wrapping multiple validation errors returned by
// StartActionRequest_MongoDBQueryGetDiagnosticDataParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_MongoDBQueryGetDiagnosticDataParamsMultiError) AllErrors() []error {
	return m
}

// StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError is the
// validation error returned by
// StartActionRequest_MongoDBQueryGetDiagnosticDataParams.Validate if the
// designated constraints aren't met.
type StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) ErrorName() string {
	return "StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_MongoDBQueryGetDiagnosticDataParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_MongoDBQueryGetDiagnosticDataParamsValidationError{}

// Validate checks the field values on
// StartActionRequest_RestartSystemServiceParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartActionRequest_RestartSystemServiceParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartActionRequest_RestartSystemServiceParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartActionRequest_RestartSystemServiceParamsMultiError, or nil if none found.
func (m *StartActionRequest_RestartSystemServiceParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartActionRequest_RestartSystemServiceParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemService

	if len(errors) > 0 {
		return StartActionRequest_RestartSystemServiceParamsMultiError(errors)
	}

	return nil
}

// StartActionRequest_RestartSystemServiceParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartActionRequest_RestartSystemServiceParams.ValidateAll() if the
// designated constraints aren't met.
type StartActionRequest_RestartSystemServiceParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartActionRequest_RestartSystemServiceParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartActionRequest_RestartSystemServiceParamsMultiError) AllErrors() []error { return m }

// StartActionRequest_RestartSystemServiceParamsValidationError is the
// validation error returned by
// StartActionRequest_RestartSystemServiceParams.Validate if the designated
// constraints aren't met.
type StartActionRequest_RestartSystemServiceParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartActionRequest_RestartSystemServiceParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartActionRequest_RestartSystemServiceParamsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartActionRequest_RestartSystemServiceParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartActionRequest_RestartSystemServiceParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartActionRequest_RestartSystemServiceParamsValidationError) ErrorName() string {
	return "StartActionRequest_RestartSystemServiceParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartActionRequest_RestartSystemServiceParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartActionRequest_RestartSystemServiceParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartActionRequest_RestartSystemServiceParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartActionRequest_RestartSystemServiceParamsValidationError{}

// Validate checks the field values on CheckConnectionResponse_Stats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckConnectionResponse_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckConnectionResponse_Stats with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckConnectionResponse_StatsMultiError, or nil if none found.
func (m *CheckConnectionResponse_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckConnectionResponse_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableCount

	if len(errors) > 0 {
		return CheckConnectionResponse_StatsMultiError(errors)
	}

	return nil
}

// CheckConnectionResponse_StatsMultiError is an error wrapping multiple
// validation errors returned by CheckConnectionResponse_Stats.ValidateAll()
// if the designated constraints aren't met.
type CheckConnectionResponse_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckConnectionResponse_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckConnectionResponse_StatsMultiError) AllErrors() []error { return m }

// CheckConnectionResponse_StatsValidationError is the validation error
// returned by CheckConnectionResponse_Stats.Validate if the designated
// constraints aren't met.
type CheckConnectionResponse_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckConnectionResponse_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckConnectionResponse_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckConnectionResponse_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckConnectionResponse_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckConnectionResponse_StatsValidationError) ErrorName() string {
	return "CheckConnectionResponse_StatsValidationError"
}

// Error satisfies the builtin error interface
func (e CheckConnectionResponse_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckConnectionResponse_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckConnectionResponse_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckConnectionResponse_StatsValidationError{}

// Validate checks the field values on StartJobRequest_MySQLBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartJobRequest_MySQLBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobRequest_MySQLBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartJobRequest_MySQLBackupMultiError, or nil if none found.
func (m *StartJobRequest_MySQLBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobRequest_MySQLBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for Address

	// no validation rules for Port

	// no validation rules for Socket

	// no validation rules for Name

	// no validation rules for Folder

	switch v := m.LocationConfig.(type) {
	case *StartJobRequest_MySQLBackup_S3Config:
		if v == nil {
			err := StartJobRequest_MySQLBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MySQLBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MySQLBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MySQLBackupValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartJobRequest_MySQLBackupMultiError(errors)
	}

	return nil
}

// StartJobRequest_MySQLBackupMultiError is an error wrapping multiple
// validation errors returned by StartJobRequest_MySQLBackup.ValidateAll() if
// the designated constraints aren't met.
type StartJobRequest_MySQLBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobRequest_MySQLBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobRequest_MySQLBackupMultiError) AllErrors() []error { return m }

// StartJobRequest_MySQLBackupValidationError is the validation error returned
// by StartJobRequest_MySQLBackup.Validate if the designated constraints
// aren't met.
type StartJobRequest_MySQLBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobRequest_MySQLBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobRequest_MySQLBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobRequest_MySQLBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobRequest_MySQLBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobRequest_MySQLBackupValidationError) ErrorName() string {
	return "StartJobRequest_MySQLBackupValidationError"
}

// Error satisfies the builtin error interface
func (e StartJobRequest_MySQLBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobRequest_MySQLBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobRequest_MySQLBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobRequest_MySQLBackupValidationError{}

// Validate checks the field values on StartJobRequest_MySQLRestoreBackup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartJobRequest_MySQLRestoreBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobRequest_MySQLRestoreBackup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartJobRequest_MySQLRestoreBackupMultiError, or nil if none found.
func (m *StartJobRequest_MySQLRestoreBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobRequest_MySQLRestoreBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for Name

	// no validation rules for Folder

	switch v := m.LocationConfig.(type) {
	case *StartJobRequest_MySQLRestoreBackup_S3Config:
		if v == nil {
			err := StartJobRequest_MySQLRestoreBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MySQLRestoreBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MySQLRestoreBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MySQLRestoreBackupValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartJobRequest_MySQLRestoreBackupMultiError(errors)
	}

	return nil
}

// StartJobRequest_MySQLRestoreBackupMultiError is an error wrapping multiple
// validation errors returned by
// StartJobRequest_MySQLRestoreBackup.ValidateAll() if the designated
// constraints aren't met.
type StartJobRequest_MySQLRestoreBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobRequest_MySQLRestoreBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobRequest_MySQLRestoreBackupMultiError) AllErrors() []error { return m }

// StartJobRequest_MySQLRestoreBackupValidationError is the validation error
// returned by StartJobRequest_MySQLRestoreBackup.Validate if the designated
// constraints aren't met.
type StartJobRequest_MySQLRestoreBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobRequest_MySQLRestoreBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobRequest_MySQLRestoreBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobRequest_MySQLRestoreBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobRequest_MySQLRestoreBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobRequest_MySQLRestoreBackupValidationError) ErrorName() string {
	return "StartJobRequest_MySQLRestoreBackupValidationError"
}

// Error satisfies the builtin error interface
func (e StartJobRequest_MySQLRestoreBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobRequest_MySQLRestoreBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobRequest_MySQLRestoreBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobRequest_MySQLRestoreBackupValidationError{}

// Validate checks the field values on StartJobRequest_MongoDBBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartJobRequest_MongoDBBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobRequest_MongoDBBackup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartJobRequest_MongoDBBackupMultiError, or nil if none found.
func (m *StartJobRequest_MongoDBBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobRequest_MongoDBBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartJobRequest_MongoDBBackupValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Folder

	// no validation rules for EnablePitr

	// no validation rules for DataModel

	switch v := m.LocationConfig.(type) {
	case *StartJobRequest_MongoDBBackup_S3Config:
		if v == nil {
			err := StartJobRequest_MongoDBBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MongoDBBackupValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartJobRequest_MongoDBBackup_FilesystemConfig:
		if v == nil {
			err := StartJobRequest_MongoDBBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFilesystemConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBBackupValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MongoDBBackupValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartJobRequest_MongoDBBackupMultiError(errors)
	}

	return nil
}

// StartJobRequest_MongoDBBackupMultiError is an error wrapping multiple
// validation errors returned by StartJobRequest_MongoDBBackup.ValidateAll()
// if the designated constraints aren't met.
type StartJobRequest_MongoDBBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobRequest_MongoDBBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobRequest_MongoDBBackupMultiError) AllErrors() []error { return m }

// StartJobRequest_MongoDBBackupValidationError is the validation error
// returned by StartJobRequest_MongoDBBackup.Validate if the designated
// constraints aren't met.
type StartJobRequest_MongoDBBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobRequest_MongoDBBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobRequest_MongoDBBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobRequest_MongoDBBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobRequest_MongoDBBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobRequest_MongoDBBackupValidationError) ErrorName() string {
	return "StartJobRequest_MongoDBBackupValidationError"
}

// Error satisfies the builtin error interface
func (e StartJobRequest_MongoDBBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobRequest_MongoDBBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobRequest_MongoDBBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobRequest_MongoDBBackupValidationError{}

// Validate checks the field values on StartJobRequest_MongoDBRestoreBackup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartJobRequest_MongoDBRestoreBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartJobRequest_MongoDBRestoreBackup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartJobRequest_MongoDBRestoreBackupMultiError, or nil if none found.
func (m *StartJobRequest_MongoDBRestoreBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *StartJobRequest_MongoDBRestoreBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetTextFiles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "TextFiles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTextFiles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartJobRequest_MongoDBRestoreBackupValidationError{
				field:  "TextFiles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Folder

	if all {
		switch v := interface{}(m.GetPbmMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "PbmMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "PbmMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPbmMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartJobRequest_MongoDBRestoreBackupValidationError{
				field:  "PbmMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPitrTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPitrTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartJobRequest_MongoDBRestoreBackupValidationError{
				field:  "PitrTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.LocationConfig.(type) {
	case *StartJobRequest_MongoDBRestoreBackup_S3Config:
		if v == nil {
			err := StartJobRequest_MongoDBRestoreBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartJobRequest_MongoDBRestoreBackup_FilesystemConfig:
		if v == nil {
			err := StartJobRequest_MongoDBRestoreBackupValidationError{
				field:  "LocationConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFilesystemConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartJobRequest_MongoDBRestoreBackupValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartJobRequest_MongoDBRestoreBackupValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartJobRequest_MongoDBRestoreBackupMultiError(errors)
	}

	return nil
}

// StartJobRequest_MongoDBRestoreBackupMultiError is an error wrapping multiple
// validation errors returned by
// StartJobRequest_MongoDBRestoreBackup.ValidateAll() if the designated
// constraints aren't met.
type StartJobRequest_MongoDBRestoreBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartJobRequest_MongoDBRestoreBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartJobRequest_MongoDBRestoreBackupMultiError) AllErrors() []error { return m }

// StartJobRequest_MongoDBRestoreBackupValidationError is the validation error
// returned by StartJobRequest_MongoDBRestoreBackup.Validate if the designated
// constraints aren't met.
type StartJobRequest_MongoDBRestoreBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobRequest_MongoDBRestoreBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobRequest_MongoDBRestoreBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobRequest_MongoDBRestoreBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobRequest_MongoDBRestoreBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobRequest_MongoDBRestoreBackupValidationError) ErrorName() string {
	return "StartJobRequest_MongoDBRestoreBackupValidationError"
}

// Error satisfies the builtin error interface
func (e StartJobRequest_MongoDBRestoreBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobRequest_MongoDBRestoreBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobRequest_MongoDBRestoreBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobRequest_MongoDBRestoreBackupValidationError{}

// Validate checks the field values on JobResult_Error with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobResult_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobResult_ErrorMultiError, or nil if none found.
func (m *JobResult_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return JobResult_ErrorMultiError(errors)
	}

	return nil
}

// JobResult_ErrorMultiError is an error wrapping multiple validation errors
// returned by JobResult_Error.ValidateAll() if the designated constraints
// aren't met.
type JobResult_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResult_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResult_ErrorMultiError) AllErrors() []error { return m }

// JobResult_ErrorValidationError is the validation error returned by
// JobResult_Error.Validate if the designated constraints aren't met.
type JobResult_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResult_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResult_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResult_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResult_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResult_ErrorValidationError) ErrorName() string { return "JobResult_ErrorValidationError" }

// Error satisfies the builtin error interface
func (e JobResult_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResult_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResult_ErrorValidationError{}

// Validate checks the field values on JobResult_MongoDBBackup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobResult_MongoDBBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult_MongoDBBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobResult_MongoDBBackupMultiError, or nil if none found.
func (m *JobResult_MongoDBBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult_MongoDBBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsShardedCluster

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobResult_MongoDBBackupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobResult_MongoDBBackupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobResult_MongoDBBackupValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobResult_MongoDBBackupMultiError(errors)
	}

	return nil
}

// JobResult_MongoDBBackupMultiError is an error wrapping multiple validation
// errors returned by JobResult_MongoDBBackup.ValidateAll() if the designated
// constraints aren't met.
type JobResult_MongoDBBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResult_MongoDBBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResult_MongoDBBackupMultiError) AllErrors() []error { return m }

// JobResult_MongoDBBackupValidationError is the validation error returned by
// JobResult_MongoDBBackup.Validate if the designated constraints aren't met.
type JobResult_MongoDBBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResult_MongoDBBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResult_MongoDBBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResult_MongoDBBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResult_MongoDBBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResult_MongoDBBackupValidationError) ErrorName() string {
	return "JobResult_MongoDBBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobResult_MongoDBBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult_MongoDBBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResult_MongoDBBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResult_MongoDBBackupValidationError{}

// Validate checks the field values on JobResult_MySQLBackup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobResult_MySQLBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult_MySQLBackup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobResult_MySQLBackupMultiError, or nil if none found.
func (m *JobResult_MySQLBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult_MySQLBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobResult_MySQLBackupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobResult_MySQLBackupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobResult_MySQLBackupValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobResult_MySQLBackupMultiError(errors)
	}

	return nil
}

// JobResult_MySQLBackupMultiError is an error wrapping multiple validation
// errors returned by JobResult_MySQLBackup.ValidateAll() if the designated
// constraints aren't met.
type JobResult_MySQLBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResult_MySQLBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResult_MySQLBackupMultiError) AllErrors() []error { return m }

// JobResult_MySQLBackupValidationError is the validation error returned by
// JobResult_MySQLBackup.Validate if the designated constraints aren't met.
type JobResult_MySQLBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResult_MySQLBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResult_MySQLBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResult_MySQLBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResult_MySQLBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResult_MySQLBackupValidationError) ErrorName() string {
	return "JobResult_MySQLBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobResult_MySQLBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult_MySQLBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResult_MySQLBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResult_MySQLBackupValidationError{}

// Validate checks the field values on JobResult_MySQLRestoreBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobResult_MySQLRestoreBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult_MySQLRestoreBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobResult_MySQLRestoreBackupMultiError, or nil if none found.
func (m *JobResult_MySQLRestoreBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult_MySQLRestoreBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobResult_MySQLRestoreBackupMultiError(errors)
	}

	return nil
}

// JobResult_MySQLRestoreBackupMultiError is an error wrapping multiple
// validation errors returned by JobResult_MySQLRestoreBackup.ValidateAll() if
// the designated constraints aren't met.
type JobResult_MySQLRestoreBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResult_MySQLRestoreBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResult_MySQLRestoreBackupMultiError) AllErrors() []error { return m }

// JobResult_MySQLRestoreBackupValidationError is the validation error returned
// by JobResult_MySQLRestoreBackup.Validate if the designated constraints
// aren't met.
type JobResult_MySQLRestoreBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResult_MySQLRestoreBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResult_MySQLRestoreBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResult_MySQLRestoreBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResult_MySQLRestoreBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResult_MySQLRestoreBackupValidationError) ErrorName() string {
	return "JobResult_MySQLRestoreBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobResult_MySQLRestoreBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult_MySQLRestoreBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResult_MySQLRestoreBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResult_MySQLRestoreBackupValidationError{}

// Validate checks the field values on JobResult_MongoDBRestoreBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobResult_MongoDBRestoreBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobResult_MongoDBRestoreBackup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// JobResult_MongoDBRestoreBackupMultiError, or nil if none found.
func (m *JobResult_MongoDBRestoreBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobResult_MongoDBRestoreBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobResult_MongoDBRestoreBackupMultiError(errors)
	}

	return nil
}

// JobResult_MongoDBRestoreBackupMultiError is an error wrapping multiple
// validation errors returned by JobResult_MongoDBRestoreBackup.ValidateAll()
// if the designated constraints aren't met.
type JobResult_MongoDBRestoreBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobResult_MongoDBRestoreBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobResult_MongoDBRestoreBackupMultiError) AllErrors() []error { return m }

// JobResult_MongoDBRestoreBackupValidationError is the validation error
// returned by JobResult_MongoDBRestoreBackup.Validate if the designated
// constraints aren't met.
type JobResult_MongoDBRestoreBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResult_MongoDBRestoreBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResult_MongoDBRestoreBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResult_MongoDBRestoreBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResult_MongoDBRestoreBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResult_MongoDBRestoreBackupValidationError) ErrorName() string {
	return "JobResult_MongoDBRestoreBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobResult_MongoDBRestoreBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult_MongoDBRestoreBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResult_MongoDBRestoreBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResult_MongoDBRestoreBackupValidationError{}

// Validate checks the field values on JobProgress_MySQLBackup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobProgress_MySQLBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProgress_MySQLBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobProgress_MySQLBackupMultiError, or nil if none found.
func (m *JobProgress_MySQLBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProgress_MySQLBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobProgress_MySQLBackupMultiError(errors)
	}

	return nil
}

// JobProgress_MySQLBackupMultiError is an error wrapping multiple validation
// errors returned by JobProgress_MySQLBackup.ValidateAll() if the designated
// constraints aren't met.
type JobProgress_MySQLBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProgress_MySQLBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProgress_MySQLBackupMultiError) AllErrors() []error { return m }

// JobProgress_MySQLBackupValidationError is the validation error returned by
// JobProgress_MySQLBackup.Validate if the designated constraints aren't met.
type JobProgress_MySQLBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProgress_MySQLBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProgress_MySQLBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProgress_MySQLBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProgress_MySQLBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProgress_MySQLBackupValidationError) ErrorName() string {
	return "JobProgress_MySQLBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobProgress_MySQLBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProgress_MySQLBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProgress_MySQLBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProgress_MySQLBackupValidationError{}

// Validate checks the field values on JobProgress_MySQLRestoreBackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobProgress_MySQLRestoreBackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProgress_MySQLRestoreBackup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// JobProgress_MySQLRestoreBackupMultiError, or nil if none found.
func (m *JobProgress_MySQLRestoreBackup) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProgress_MySQLRestoreBackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobProgress_MySQLRestoreBackupMultiError(errors)
	}

	return nil
}

// JobProgress_MySQLRestoreBackupMultiError is an error wrapping multiple
// validation errors returned by JobProgress_MySQLRestoreBackup.ValidateAll()
// if the designated constraints aren't met.
type JobProgress_MySQLRestoreBackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProgress_MySQLRestoreBackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProgress_MySQLRestoreBackupMultiError) AllErrors() []error { return m }

// JobProgress_MySQLRestoreBackupValidationError is the validation error
// returned by JobProgress_MySQLRestoreBackup.Validate if the designated
// constraints aren't met.
type JobProgress_MySQLRestoreBackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProgress_MySQLRestoreBackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProgress_MySQLRestoreBackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProgress_MySQLRestoreBackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProgress_MySQLRestoreBackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProgress_MySQLRestoreBackupValidationError) ErrorName() string {
	return "JobProgress_MySQLRestoreBackupValidationError"
}

// Error satisfies the builtin error interface
func (e JobProgress_MySQLRestoreBackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProgress_MySQLRestoreBackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProgress_MySQLRestoreBackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProgress_MySQLRestoreBackupValidationError{}

// Validate checks the field values on JobProgress_Logs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobProgress_Logs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProgress_Logs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobProgress_LogsMultiError, or nil if none found.
func (m *JobProgress_Logs) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProgress_Logs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkId

	// no validation rules for Data

	// no validation rules for Done

	if len(errors) > 0 {
		return JobProgress_LogsMultiError(errors)
	}

	return nil
}

// JobProgress_LogsMultiError is an error wrapping multiple validation errors
// returned by JobProgress_Logs.ValidateAll() if the designated constraints
// aren't met.
type JobProgress_LogsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProgress_LogsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProgress_LogsMultiError) AllErrors() []error { return m }

// JobProgress_LogsValidationError is the validation error returned by
// JobProgress_Logs.Validate if the designated constraints aren't met.
type JobProgress_LogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProgress_LogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProgress_LogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProgress_LogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProgress_LogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProgress_LogsValidationError) ErrorName() string { return "JobProgress_LogsValidationError" }

// Error satisfies the builtin error interface
func (e JobProgress_LogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProgress_Logs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProgress_LogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProgress_LogsValidationError{}

// Validate checks the field values on GetVersionsRequest_MySQLd with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_MySQLd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_MySQLd with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_MySQLdMultiError, or nil if none found.
func (m *GetVersionsRequest_MySQLd) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_MySQLd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_MySQLdMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_MySQLdMultiError is an error wrapping multiple validation
// errors returned by GetVersionsRequest_MySQLd.ValidateAll() if the
// designated constraints aren't met.
type GetVersionsRequest_MySQLdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_MySQLdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_MySQLdMultiError) AllErrors() []error { return m }

// GetVersionsRequest_MySQLdValidationError is the validation error returned by
// GetVersionsRequest_MySQLd.Validate if the designated constraints aren't met.
type GetVersionsRequest_MySQLdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_MySQLdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_MySQLdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_MySQLdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_MySQLdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_MySQLdValidationError) ErrorName() string {
	return "GetVersionsRequest_MySQLdValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_MySQLdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_MySQLd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_MySQLdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_MySQLdValidationError{}

// Validate checks the field values on GetVersionsRequest_Xtrabackup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_Xtrabackup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_Xtrabackup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_XtrabackupMultiError, or nil if none found.
func (m *GetVersionsRequest_Xtrabackup) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_Xtrabackup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_XtrabackupMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_XtrabackupMultiError is an error wrapping multiple
// validation errors returned by GetVersionsRequest_Xtrabackup.ValidateAll()
// if the designated constraints aren't met.
type GetVersionsRequest_XtrabackupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_XtrabackupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_XtrabackupMultiError) AllErrors() []error { return m }

// GetVersionsRequest_XtrabackupValidationError is the validation error
// returned by GetVersionsRequest_Xtrabackup.Validate if the designated
// constraints aren't met.
type GetVersionsRequest_XtrabackupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_XtrabackupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_XtrabackupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_XtrabackupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_XtrabackupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_XtrabackupValidationError) ErrorName() string {
	return "GetVersionsRequest_XtrabackupValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_XtrabackupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_Xtrabackup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_XtrabackupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_XtrabackupValidationError{}

// Validate checks the field values on GetVersionsRequest_Xbcloud with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_Xbcloud) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_Xbcloud with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_XbcloudMultiError, or nil if none found.
func (m *GetVersionsRequest_Xbcloud) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_Xbcloud) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_XbcloudMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_XbcloudMultiError is an error wrapping multiple
// validation errors returned by GetVersionsRequest_Xbcloud.ValidateAll() if
// the designated constraints aren't met.
type GetVersionsRequest_XbcloudMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_XbcloudMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_XbcloudMultiError) AllErrors() []error { return m }

// GetVersionsRequest_XbcloudValidationError is the validation error returned
// by GetVersionsRequest_Xbcloud.Validate if the designated constraints aren't met.
type GetVersionsRequest_XbcloudValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_XbcloudValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_XbcloudValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_XbcloudValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_XbcloudValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_XbcloudValidationError) ErrorName() string {
	return "GetVersionsRequest_XbcloudValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_XbcloudValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_Xbcloud.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_XbcloudValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_XbcloudValidationError{}

// Validate checks the field values on GetVersionsRequest_Qpress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_Qpress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_Qpress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_QpressMultiError, or nil if none found.
func (m *GetVersionsRequest_Qpress) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_Qpress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_QpressMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_QpressMultiError is an error wrapping multiple validation
// errors returned by GetVersionsRequest_Qpress.ValidateAll() if the
// designated constraints aren't met.
type GetVersionsRequest_QpressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_QpressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_QpressMultiError) AllErrors() []error { return m }

// GetVersionsRequest_QpressValidationError is the validation error returned by
// GetVersionsRequest_Qpress.Validate if the designated constraints aren't met.
type GetVersionsRequest_QpressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_QpressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_QpressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_QpressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_QpressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_QpressValidationError) ErrorName() string {
	return "GetVersionsRequest_QpressValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_QpressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_Qpress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_QpressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_QpressValidationError{}

// Validate checks the field values on GetVersionsRequest_MongoDB with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_MongoDB) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_MongoDB with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_MongoDBMultiError, or nil if none found.
func (m *GetVersionsRequest_MongoDB) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_MongoDB) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_MongoDBMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_MongoDBMultiError is an error wrapping multiple
// validation errors returned by GetVersionsRequest_MongoDB.ValidateAll() if
// the designated constraints aren't met.
type GetVersionsRequest_MongoDBMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_MongoDBMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_MongoDBMultiError) AllErrors() []error { return m }

// GetVersionsRequest_MongoDBValidationError is the validation error returned
// by GetVersionsRequest_MongoDB.Validate if the designated constraints aren't met.
type GetVersionsRequest_MongoDBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_MongoDBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_MongoDBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_MongoDBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_MongoDBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_MongoDBValidationError) ErrorName() string {
	return "GetVersionsRequest_MongoDBValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_MongoDBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_MongoDB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_MongoDBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_MongoDBValidationError{}

// Validate checks the field values on GetVersionsRequest_PBM with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_PBM) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_PBM with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_PBMMultiError, or nil if none found.
func (m *GetVersionsRequest_PBM) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_PBM) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionsRequest_PBMMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_PBMMultiError is an error wrapping multiple validation
// errors returned by GetVersionsRequest_PBM.ValidateAll() if the designated
// constraints aren't met.
type GetVersionsRequest_PBMMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_PBMMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_PBMMultiError) AllErrors() []error { return m }

// GetVersionsRequest_PBMValidationError is the validation error returned by
// GetVersionsRequest_PBM.Validate if the designated constraints aren't met.
type GetVersionsRequest_PBMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_PBMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_PBMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_PBMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_PBMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_PBMValidationError) ErrorName() string {
	return "GetVersionsRequest_PBMValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_PBMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_PBM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_PBMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_PBMValidationError{}

// Validate checks the field values on GetVersionsRequest_Software with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsRequest_Software) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsRequest_Software with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsRequest_SoftwareMultiError, or nil if none found.
func (m *GetVersionsRequest_Software) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsRequest_Software) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Software.(type) {
	case *GetVersionsRequest_Software_Mysqld:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqld()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Mysqld",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Mysqld",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqld()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Mysqld",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetVersionsRequest_Software_Xtrabackup:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetXtrabackup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Xtrabackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Xtrabackup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXtrabackup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Xtrabackup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetVersionsRequest_Software_Xbcloud:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetXbcloud()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Xbcloud",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Xbcloud",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXbcloud()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Xbcloud",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetVersionsRequest_Software_Qpress:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQpress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Qpress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Qpress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQpress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Qpress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetVersionsRequest_Software_Mongod:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongod()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Mongod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Mongod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Mongod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetVersionsRequest_Software_Pbm:
		if v == nil {
			err := GetVersionsRequest_SoftwareValidationError{
				field:  "Software",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPbm()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Pbm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVersionsRequest_SoftwareValidationError{
						field:  "Pbm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPbm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVersionsRequest_SoftwareValidationError{
					field:  "Pbm",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetVersionsRequest_SoftwareMultiError(errors)
	}

	return nil
}

// GetVersionsRequest_SoftwareMultiError is an error wrapping multiple
// validation errors returned by GetVersionsRequest_Software.ValidateAll() if
// the designated constraints aren't met.
type GetVersionsRequest_SoftwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsRequest_SoftwareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsRequest_SoftwareMultiError) AllErrors() []error { return m }

// GetVersionsRequest_SoftwareValidationError is the validation error returned
// by GetVersionsRequest_Software.Validate if the designated constraints
// aren't met.
type GetVersionsRequest_SoftwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsRequest_SoftwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsRequest_SoftwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsRequest_SoftwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsRequest_SoftwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsRequest_SoftwareValidationError) ErrorName() string {
	return "GetVersionsRequest_SoftwareValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsRequest_SoftwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsRequest_Software.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsRequest_SoftwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsRequest_SoftwareValidationError{}

// Validate checks the field values on GetVersionsResponse_Version with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionsResponse_Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionsResponse_Version with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionsResponse_VersionMultiError, or nil if none found.
func (m *GetVersionsResponse_Version) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionsResponse_Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Error

	if len(errors) > 0 {
		return GetVersionsResponse_VersionMultiError(errors)
	}

	return nil
}

// GetVersionsResponse_VersionMultiError is an error wrapping multiple
// validation errors returned by GetVersionsResponse_Version.ValidateAll() if
// the designated constraints aren't met.
type GetVersionsResponse_VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionsResponse_VersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionsResponse_VersionMultiError) AllErrors() []error { return m }

// GetVersionsResponse_VersionValidationError is the validation error returned
// by GetVersionsResponse_Version.Validate if the designated constraints
// aren't met.
type GetVersionsResponse_VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionsResponse_VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionsResponse_VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionsResponse_VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionsResponse_VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionsResponse_VersionValidationError) ErrorName() string {
	return "GetVersionsResponse_VersionValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionsResponse_VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionsResponse_Version.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionsResponse_VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionsResponse_VersionValidationError{}
