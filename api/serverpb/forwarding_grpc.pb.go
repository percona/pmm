// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: serverpb/forwarding.proto

package serverpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentForwarding_ForwardRequest_FullMethodName     = "/serverpb.AgentForwarding/ForwardRequest"
	AgentForwarding_SyncFullAgentState_FullMethodName = "/serverpb.AgentForwarding/SyncFullAgentState"
)

// AgentForwardingClient is the client API for AgentForwarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentForwarding service handles forwarding agent requests between PMM servers in HA mode.
type AgentForwardingClient interface {
	// ForwardRequest forwards any agent request to the server where the agent is connected.
	// Handles actions, state updates, jobs, and connection checks.
	ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error)
	// SyncFullAgentState synchronizes full agent location state between servers.
	// Used when a server joins the cluster or needs to recover state.
	SyncFullAgentState(ctx context.Context, in *FullStateSyncRequest, opts ...grpc.CallOption) (*FullStateSyncResponse, error)
}

type agentForwardingClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentForwardingClient(cc grpc.ClientConnInterface) AgentForwardingClient {
	return &agentForwardingClient{cc}
}

func (c *agentForwardingClient) ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardRequestResponse)
	err := c.cc.Invoke(ctx, AgentForwarding_ForwardRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentForwardingClient) SyncFullAgentState(ctx context.Context, in *FullStateSyncRequest, opts ...grpc.CallOption) (*FullStateSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullStateSyncResponse)
	err := c.cc.Invoke(ctx, AgentForwarding_SyncFullAgentState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentForwardingServer is the server API for AgentForwarding service.
// All implementations must embed UnimplementedAgentForwardingServer
// for forward compatibility.
//
// AgentForwarding service handles forwarding agent requests between PMM servers in HA mode.
type AgentForwardingServer interface {
	// ForwardRequest forwards any agent request to the server where the agent is connected.
	// Handles actions, state updates, jobs, and connection checks.
	ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error)
	// SyncFullAgentState synchronizes full agent location state between servers.
	// Used when a server joins the cluster or needs to recover state.
	SyncFullAgentState(context.Context, *FullStateSyncRequest) (*FullStateSyncResponse, error)
	mustEmbedUnimplementedAgentForwardingServer()
}

// UnimplementedAgentForwardingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentForwardingServer struct{}

func (UnimplementedAgentForwardingServer) ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}

func (UnimplementedAgentForwardingServer) SyncFullAgentState(context.Context, *FullStateSyncRequest) (*FullStateSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFullAgentState not implemented")
}
func (UnimplementedAgentForwardingServer) mustEmbedUnimplementedAgentForwardingServer() {}
func (UnimplementedAgentForwardingServer) testEmbeddedByValue()                         {}

// UnsafeAgentForwardingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentForwardingServer will
// result in compilation errors.
type UnsafeAgentForwardingServer interface {
	mustEmbedUnimplementedAgentForwardingServer()
}

func RegisterAgentForwardingServer(s grpc.ServiceRegistrar, srv AgentForwardingServer) {
	// If the following call pancis, it indicates UnimplementedAgentForwardingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentForwarding_ServiceDesc, srv)
}

func _AgentForwarding_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentForwardingServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentForwarding_ForwardRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentForwardingServer).ForwardRequest(ctx, req.(*ForwardRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentForwarding_SyncFullAgentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullStateSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentForwardingServer).SyncFullAgentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentForwarding_SyncFullAgentState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentForwardingServer).SyncFullAgentState(ctx, req.(*FullStateSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentForwarding_ServiceDesc is the grpc.ServiceDesc for AgentForwarding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentForwarding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.AgentForwarding",
	HandlerType: (*AgentForwardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardRequest",
			Handler:    _AgentForwarding_ForwardRequest_Handler,
		},
		{
			MethodName: "SyncFullAgentState",
			Handler:    _AgentForwarding_SyncFullAgentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverpb/forwarding.proto",
}
