syntax = "proto3";

package server;

option go_package = "api/serverpb;serverpb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// DistributionMethod defines PMM Server distribution method: Docker image, OVF/OVA, or AMI.
enum DistributionMethod {
  DISTRIBUTION_METHOD_INVALID = 0;
  DOCKER = 1;
  OVF = 2;
  AMI = 3;
}

// VersionInfo describes component version, or PMM Server as a whole.
message VersionInfo {
  // User-visible version.
  string version = 1;
  // Full version for debugging.
  string full_version = 2;
  // Build or release date.
  google.protobuf.Timestamp timestamp = 3;
}

message VersionRequest {
  // Dummy parameter for internal testing. Do not use.
  string dummy = 1;
}

message VersionResponse {
  // PMM Server version.
  string version = 1;
  // Detailed PMM Server version information.
  VersionInfo server = 2;
  // pmm-managed version information for debugging.
  VersionInfo managed = 3;
  // PMM Server distribution method.
  DistributionMethod distribution_method = 4;
  // TODO Versions and statuses of Grafana, Prometheus, PostgreSQL, qan-api2, ClickHouse, pmm-agent, etc.

}

message ReadinessRequest {}

message ReadinessResponse {
  // This probe is available without authentication, so it should not contain any data.

}

message CheckUpdatesRequest {
  // If false, cached information may be returned.
  bool force = 1;
}

message CheckUpdatesResponse {
  // Currently installed PMM Server version.
  VersionInfo installed = 1;
  // Latest available PMM Server version.
  VersionInfo latest = 2;
  // True if there is a PMM Server update available.
  bool update_available = 3;
  // Latest available PMM Server release announcement URL.
  string latest_news_url = 4;
  // Last check time.
  google.protobuf.Timestamp last_check = 5;
}

message StartUpdateRequest {}

message StartUpdateResponse {
  // Authentication token for getting update statuses.
  string auth_token = 1;
  // Progress log offset.
  uint32 log_offset = 2;
}

message UpdateStatusRequest {
  // Authentication token.
  string auth_token = 1;
  // Progress log offset.
  uint32 log_offset = 2;
}

message UpdateStatusResponse {
  // Progress log lines.
  repeated string log_lines = 1;
  // Progress log offset for the next request.
  uint32 log_offset = 2;
  // True when update is done.
  bool done = 3;
}

// MetricsResolutions represents Prometheus exporters metrics resolutions.
message MetricsResolutions {
  // High resolution. Should have a suffix in JSON: 1s, 1m, 1h.
  google.protobuf.Duration hr = 1;
  // Medium resolution. Should have a suffix in JSON: 1s, 1m, 1h.
  google.protobuf.Duration mr = 2;
  // Low resolution. Should have a suffix in JSON: 1s, 1m, 1h.
  google.protobuf.Duration lr = 3;
}

// EmailAlertingSettings represents email (SMTP) configuration for Integrated Alerting.
message EmailAlertingSettings {
  // SMTP From header field.
  string from = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // SMTP host and port.
  string smarthost = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Hostname to identify to the SMTP server.
  string hello = 3;
  // Auth using CRAM-MD5, LOGIN and PLAIN.
  string username = 4;
  // Auth using LOGIN and PLAIN.
  string password = 5;
  // Auth using PLAIN.
  string identity = 6;
  // Auth using CRAM-MD5.
  string secret = 7;
}

// SlackAlertingSettings represents Slack configuration for Integrated Alerting.
message SlackAlertingSettings {
  // Slack API (webhook) URL.
  string url = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

// STTCheckIntervals represents intervals between STT checks.
message STTCheckIntervals {
  // Standard check interval.
  google.protobuf.Duration standard_interval = 1;
  // Interval for rare check runs.
  google.protobuf.Duration rare_interval = 2;
  // Interval for frequent check runs.
  google.protobuf.Duration frequent_interval = 3;
}

// Settings represents PMM Server settings.
message Settings {
  // True if updates are disabled.
  bool updates_disabled = 1;
  // True if telemetry is enabled.
  bool telemetry_enabled = 2;
  MetricsResolutions metrics_resolutions = 3;
  google.protobuf.Duration data_retention = 4;
  string ssh_key = 5;
  repeated string aws_partitions = 6;
  // External AlertManager URL (e.g., https://username:password@1.2.3.4/path).
  string alert_manager_url = 7;
  // alert_manager_rules field name is incorrect
  // (they never were _Alertmanager_ rules), but we can't rename it for compatibility reasons.

  // Custom alerting or recording rules.
  string alert_manager_rules = 8;
  // True if Security Threat Tool is enabled.
  bool stt_enabled = 9;
  // Percona Platform user's email, if this PMM instance is linked to the Platform.
  string platform_email = 10;
  // True if DBaaS is enabled.
  bool dbaas_enabled = 11;
  // True if Integrated Alerting is enabled.
  bool alerting_enabled = 12;
  // Integrated Alerting email (SMTP) settings.
  EmailAlertingSettings email_alerting_settings = 13;
  // Integrated Alerting Slack settings.
  SlackAlertingSettings slack_alerting_settings = 14;
  // PMM Server public address.
  string pmm_public_address = 15;
  // Intervals between STT check runs.
  STTCheckIntervals stt_check_intervals = 16;
}

message GetSettingsRequest {}

message GetSettingsResponse {
  Settings settings = 1;
}

message ChangeSettingsRequest {
  bool enable_telemetry = 1;
  bool disable_telemetry = 2;
  MetricsResolutions metrics_resolutions = 3;
  // A number of full days for Prometheus and QAN data retention. Should have a suffix in JSON: 2592000s, 43200m, 720h.
  google.protobuf.Duration data_retention = 4;
  string ssh_key = 5;
  repeated string aws_partitions = 6;
  // External AlertManager URL (e.g., https://username:password@1.2.3.4/path).
  string alert_manager_url = 7;
  // Remove external AlertManager URL.
  bool remove_alert_manager_url = 8;
  // alert_manager_rules and remove_alert_manager_rules field names are incorrect
  // (they never were _Alertmanager_ rules), but we can't rename them for compatibility reasons.

  // Custom alerting or recording rules.
  string alert_manager_rules = 9;
  // Remove custom alerting or recording rules.
  bool remove_alert_manager_rules = 10;
  // Enable Security Threat Tool.
  bool enable_stt = 11;
  // Disable Security Threat Tool.
  bool disable_stt = 12;
  // Enable Integrated Alerting.
  bool enable_alerting = 13;
  // Disable Integrated Alerting.
  bool disable_alerting = 14;
  // Change Integrated Alerting email (SMTP) settings, if set.
  EmailAlertingSettings email_alerting_settings = 15;
  // If true, removes Integrated Alerting email (SMTP) settings.
  bool remove_email_alerting_settings = 16;
  // Change Integrated Alerting Slack settings, if set.
  SlackAlertingSettings slack_alerting_settings = 17;
  // If true, removes Integrated Alerting Slack settings.
  bool remove_slack_alerting_settings = 18;
  // PMM Server public address.
  string pmm_public_address = 19;
  bool remove_pmm_public_address = 20;
  // Intervals between STT check runs.
  STTCheckIntervals stt_check_intervals = 21;
}

message ChangeSettingsResponse {
  Settings settings = 1;
}

message AWSInstanceCheckRequest {
  // AWS EC2 instance ID (i-1234567890abcdef0).
  string instance_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message AWSInstanceCheckResponse {}

message PlatformSignUpRequest {
  // New Percona Platform user's email.
  string email = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // New Percona Platform user's password.
  string password = 2;
}

message PlatformSignUpResponse {}

message PlatformSignInRequest {
  // Existing Percona Platform user's email.
  string email = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Existing Percona Platform user's password.
  string password = 2;
}

message PlatformSignInResponse {}

message PlatformSignOutRequest {}

message PlatformSignOutResponse {}

// Server service provides generic PMM Server public APIs.
service Server {
  // Version returns PMM Server versions.
  rpc Version(VersionRequest) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/v1/version"
    };
  }
  // Readiness returns an error when some PMM Server component is not ready yet or is being restarted.
  // It can be used as for Docker health check or Kubernetes readiness probe.
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1/readyz"
    };
  }
  // CheckUpdates checks PMM Server updates availability.
  rpc CheckUpdates(CheckUpdatesRequest) returns (CheckUpdatesResponse) {
    option (google.api.http) = {
      post: "/v1/Updates/Check"
      body: "*"
    };
  }
  // StartUpdate starts PMM Server update.
  rpc StartUpdate(StartUpdateRequest) returns (StartUpdateResponse) {
    option (google.api.http) = {
      post: "/v1/Updates/Start"
      body: "*"
    };
  }
  // UpdateStatus returns PMM Server update status.
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse) {
    option (google.api.http) = {
      post: "/v1/Updates/Status"
      body: "*"
    };
  }
  // GetSettings returns current PMM Server settings.
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      post: "/v1/Settings/Get"
      body: "*"
    };
  }
  // ChangeSettings changes PMM Server settings.
  rpc ChangeSettings(ChangeSettingsRequest) returns (ChangeSettingsResponse) {
    option (google.api.http) = {
      post: "/v1/Settings/Change"
      body: "*"
    };
  }
  // AWSInstanceCheck checks AWS EC2 instance ID.
  rpc AWSInstanceCheck(AWSInstanceCheckRequest) returns (AWSInstanceCheckResponse) {
    option (google.api.http) = {
      post: "/v1/AWSInstanceCheck"
      body: "*"
    };
  }
  // PlatformSignUp creates a new Percona Platform user.
  rpc PlatformSignUp(PlatformSignUpRequest) returns (PlatformSignUpResponse) {
    option (google.api.http) = {
      post: "/v1/Platform/SignUp"
      body: "*"
    };
  }
  // PlatformSignIn links that PMM instance to Percona Platform user.
  rpc PlatformSignIn(PlatformSignInRequest) returns (PlatformSignInResponse) {
    option (google.api.http) = {
      post: "/v1/Platform/SignIn"
      body: "*"
    };
  }
  // PlatformSignOut logouts this PMM instance from Percona Platform account.
  rpc PlatformSignOut(PlatformSignOutRequest) returns (PlatformSignOutResponse) {
    option (google.api.http) = {
      post: "/v1/Platform/SignOut"
      body: "*"
    };
  }
}
