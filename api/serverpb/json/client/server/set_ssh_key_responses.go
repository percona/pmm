// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// SetSSHKeyReader is a Reader for the SetSSHKey structure.
type SetSSHKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetSSHKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetSSHKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSetSSHKeyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSetSSHKeyOK creates a SetSSHKeyOK with default headers values
func NewSetSSHKeyOK() *SetSSHKeyOK {
	return &SetSSHKeyOK{}
}

/*SetSSHKeyOK handles this case with default header values.

A successful response.
*/
type SetSSHKeyOK struct {
	Payload interface{}
}

func (o *SetSSHKeyOK) Error() string {
	return fmt.Sprintf("[POST /v1/SSH/SetKey][%d] setSshKeyOk  %+v", 200, o.Payload)
}

func (o *SetSSHKeyOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetSSHKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetSSHKeyDefault creates a SetSSHKeyDefault with default headers values
func NewSetSSHKeyDefault(code int) *SetSSHKeyDefault {
	return &SetSSHKeyDefault{
		_statusCode: code,
	}
}

/*SetSSHKeyDefault handles this case with default header values.

An error response.
*/
type SetSSHKeyDefault struct {
	_statusCode int

	Payload *SetSSHKeyDefaultBody
}

// Code gets the status code for the set SSH key default response
func (o *SetSSHKeyDefault) Code() int {
	return o._statusCode
}

func (o *SetSSHKeyDefault) Error() string {
	return fmt.Sprintf("[POST /v1/SSH/SetKey][%d] SetSSHKey default  %+v", o._statusCode, o.Payload)
}

func (o *SetSSHKeyDefault) GetPayload() *SetSSHKeyDefaultBody {
	return o.Payload
}

func (o *SetSSHKeyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetSSHKeyDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetSSHKeyBody set SSH key body
swagger:model SetSSHKeyBody
*/
type SetSSHKeyBody struct {

	// ssh key
	SSHKey string `json:"ssh_key,omitempty"`
}

// Validate validates this set SSH key body
func (o *SetSSHKeyBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetSSHKeyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetSSHKeyBody) UnmarshalBinary(b []byte) error {
	var res SetSSHKeyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetSSHKeyDefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model SetSSHKeyDefaultBody
*/
type SetSSHKeyDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this set SSH key default body
func (o *SetSSHKeyDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetSSHKeyDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetSSHKeyDefaultBody) UnmarshalBinary(b []byte) error {
	var res SetSSHKeyDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
