// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewServerVersionParams creates a new ServerVersionParams object
// with the default values initialized.
func NewServerVersionParams() *ServerVersionParams {
	var ()
	return &ServerVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewServerVersionParamsWithTimeout creates a new ServerVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServerVersionParamsWithTimeout(timeout time.Duration) *ServerVersionParams {
	var ()
	return &ServerVersionParams{

		timeout: timeout,
	}
}

// NewServerVersionParamsWithContext creates a new ServerVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewServerVersionParamsWithContext(ctx context.Context) *ServerVersionParams {
	var ()
	return &ServerVersionParams{

		Context: ctx,
	}
}

// NewServerVersionParamsWithHTTPClient creates a new ServerVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServerVersionParamsWithHTTPClient(client *http.Client) *ServerVersionParams {
	var ()
	return &ServerVersionParams{
		HTTPClient: client,
	}
}

/*ServerVersionParams contains all the parameters to send to the API endpoint
for the server version operation typically these are written to a http.Request
*/
type ServerVersionParams struct {

	/*Dummy
	  Dummy parameter for internal testing. Do not use.

	*/
	Dummy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the server version params
func (o *ServerVersionParams) WithTimeout(timeout time.Duration) *ServerVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the server version params
func (o *ServerVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the server version params
func (o *ServerVersionParams) WithContext(ctx context.Context) *ServerVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the server version params
func (o *ServerVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the server version params
func (o *ServerVersionParams) WithHTTPClient(client *http.Client) *ServerVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the server version params
func (o *ServerVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDummy adds the dummy to the server version params
func (o *ServerVersionParams) WithDummy(dummy *string) *ServerVersionParams {
	o.SetDummy(dummy)
	return o
}

// SetDummy adds the dummy to the server version params
func (o *ServerVersionParams) SetDummy(dummy *string) {
	o.Dummy = dummy
}

// WriteToRequest writes these params to a swagger request
func (o *ServerVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dummy != nil {

		// query param dummy
		var qrDummy string
		if o.Dummy != nil {
			qrDummy = *o.Dummy
		}
		qDummy := qrDummy
		if qDummy != "" {
			if err := r.SetQueryParam("dummy", qDummy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
