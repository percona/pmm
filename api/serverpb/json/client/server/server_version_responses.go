// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerVersionReader is a Reader for the ServerVersion structure.
type ServerVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServerVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServerVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServerVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServerVersionOK creates a ServerVersionOK with default headers values
func NewServerVersionOK() *ServerVersionOK {
	return &ServerVersionOK{}
}

/*ServerVersionOK handles this case with default header values.

A successful response.
*/
type ServerVersionOK struct {
	Payload *ServerVersionOKBody
}

func (o *ServerVersionOK) Error() string {
	return fmt.Sprintf("[GET /v1/version][%d] serverVersionOk  %+v", 200, o.Payload)
}

func (o *ServerVersionOK) GetPayload() *ServerVersionOKBody {
	return o.Payload
}

func (o *ServerVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServerVersionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServerVersionDefault creates a ServerVersionDefault with default headers values
func NewServerVersionDefault(code int) *ServerVersionDefault {
	return &ServerVersionDefault{
		_statusCode: code,
	}
}

/*ServerVersionDefault handles this case with default header values.

An unexpected error response.
*/
type ServerVersionDefault struct {
	_statusCode int

	Payload *ServerVersionDefaultBody
}

// Code gets the status code for the server version default response
func (o *ServerVersionDefault) Code() int {
	return o._statusCode
}

func (o *ServerVersionDefault) Error() string {
	return fmt.Sprintf("[GET /v1/version][%d] Server_Version default  %+v", o._statusCode, o.Payload)
}

func (o *ServerVersionDefault) GetPayload() *ServerVersionDefaultBody {
	return o.Payload
}

func (o *ServerVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServerVersionDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ServerVersionDefaultBody server version default body
swagger:model ServerVersionDefaultBody
*/
type ServerVersionDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this server version default body
func (o *ServerVersionDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerVersionDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Server_Version default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerVersionDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerVersionDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServerVersionDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServerVersionOKBody server version OK body
swagger:model ServerVersionOKBody
*/
type ServerVersionOKBody struct {

	// PMM Server version.
	Version string `json:"version,omitempty"`

	// DistributionMethod defines PMM Server distribution method: Docker image, OVF/OVA, or AMI.
	// Enum: [DISTRIBUTION_METHOD_INVALID DOCKER OVF AMI]
	DistributionMethod *string `json:"distribution_method,omitempty"`

	// managed
	Managed *ServerVersionOKBodyManaged `json:"managed,omitempty"`

	// server
	Server *ServerVersionOKBodyServer `json:"server,omitempty"`
}

// Validate validates this server version OK body
func (o *ServerVersionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDistributionMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateManaged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverVersionOkBodyTypeDistributionMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISTRIBUTION_METHOD_INVALID","DOCKER","OVF","AMI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverVersionOkBodyTypeDistributionMethodPropEnum = append(serverVersionOkBodyTypeDistributionMethodPropEnum, v)
	}
}

const (

	// ServerVersionOKBodyDistributionMethodDISTRIBUTIONMETHODINVALID captures enum value "DISTRIBUTION_METHOD_INVALID"
	ServerVersionOKBodyDistributionMethodDISTRIBUTIONMETHODINVALID string = "DISTRIBUTION_METHOD_INVALID"

	// ServerVersionOKBodyDistributionMethodDOCKER captures enum value "DOCKER"
	ServerVersionOKBodyDistributionMethodDOCKER string = "DOCKER"

	// ServerVersionOKBodyDistributionMethodOVF captures enum value "OVF"
	ServerVersionOKBodyDistributionMethodOVF string = "OVF"

	// ServerVersionOKBodyDistributionMethodAMI captures enum value "AMI"
	ServerVersionOKBodyDistributionMethodAMI string = "AMI"
)

// prop value enum
func (o *ServerVersionOKBody) validateDistributionMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverVersionOkBodyTypeDistributionMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ServerVersionOKBody) validateDistributionMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.DistributionMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validateDistributionMethodEnum("serverVersionOk"+"."+"distribution_method", "body", *o.DistributionMethod); err != nil {
		return err
	}

	return nil
}

func (o *ServerVersionOKBody) validateManaged(formats strfmt.Registry) error {

	if swag.IsZero(o.Managed) { // not required
		return nil
	}

	if o.Managed != nil {
		if err := o.Managed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverVersionOk" + "." + "managed")
			}
			return err
		}
	}

	return nil
}

func (o *ServerVersionOKBody) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(o.Server) { // not required
		return nil
	}

	if o.Server != nil {
		if err := o.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverVersionOk" + "." + "server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerVersionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerVersionOKBody) UnmarshalBinary(b []byte) error {
	var res ServerVersionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServerVersionOKBodyManaged VersionInfo describes component version, or PMM Server as a whole.
swagger:model ServerVersionOKBodyManaged
*/
type ServerVersionOKBodyManaged struct {

	// User-visible version.
	Version string `json:"version,omitempty"`

	// Full version for debugging.
	FullVersion string `json:"full_version,omitempty"`

	// Build or release date.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this server version OK body managed
func (o *ServerVersionOKBodyManaged) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerVersionOKBodyManaged) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("serverVersionOk"+"."+"managed"+"."+"timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerVersionOKBodyManaged) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerVersionOKBodyManaged) UnmarshalBinary(b []byte) error {
	var res ServerVersionOKBodyManaged
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServerVersionOKBodyServer VersionInfo describes component version, or PMM Server as a whole.
swagger:model ServerVersionOKBodyServer
*/
type ServerVersionOKBodyServer struct {

	// User-visible version.
	Version string `json:"version,omitempty"`

	// Full version for debugging.
	FullVersion string `json:"full_version,omitempty"`

	// Build or release date.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this server version OK body server
func (o *ServerVersionOKBodyServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerVersionOKBodyServer) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("serverVersionOk"+"."+"server"+"."+"timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerVersionOKBodyServer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerVersionOKBodyServer) UnmarshalBinary(b []byte) error {
	var res ServerVersionOKBodyServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
