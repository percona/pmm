// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Logs(params *LogsParams, writer io.Writer) (*LogsOK, error)

	ServerAWSInstanceCheck(params *ServerAWSInstanceCheckParams) (*ServerAWSInstanceCheckOK, error)

	ServerChangeSettings(params *ServerChangeSettingsParams) (*ServerChangeSettingsOK, error)

	ServerCheckUpdates(params *ServerCheckUpdatesParams) (*ServerCheckUpdatesOK, error)

	ServerGetSettings(params *ServerGetSettingsParams) (*ServerGetSettingsOK, error)

	ServerPlatformSignIn(params *ServerPlatformSignInParams) (*ServerPlatformSignInOK, error)

	ServerPlatformSignOut(params *ServerPlatformSignOutParams) (*ServerPlatformSignOutOK, error)

	ServerPlatformSignUp(params *ServerPlatformSignUpParams) (*ServerPlatformSignUpOK, error)

	ServerReadiness(params *ServerReadinessParams) (*ServerReadinessOK, error)

	ServerStartUpdate(params *ServerStartUpdateParams) (*ServerStartUpdateOK, error)

	ServerUpdateStatus(params *ServerUpdateStatusParams) (*ServerUpdateStatusOK, error)

	ServerVersion(params *ServerVersionParams) (*ServerVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Logs logs returns logs of the PMM server
*/
func (a *Client) Logs(params *LogsParams, writer io.Writer) (*LogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Logs",
		Method:             "GET",
		PathPattern:        "/logs.zip",
		ProducesMediaTypes: []string{"application/zip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LogsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerAWSInstanceCheck AWSs instance check checks AWS e c2 instance ID
*/
func (a *Client) ServerAWSInstanceCheck(params *ServerAWSInstanceCheckParams) (*ServerAWSInstanceCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerAWSInstanceCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_AWSInstanceCheck",
		Method:             "POST",
		PathPattern:        "/v1/AWSInstanceCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerAWSInstanceCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerAWSInstanceCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerAWSInstanceCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerChangeSettings changes settings changes PMM server settings
*/
func (a *Client) ServerChangeSettings(params *ServerChangeSettingsParams) (*ServerChangeSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerChangeSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_ChangeSettings",
		Method:             "POST",
		PathPattern:        "/v1/Settings/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerChangeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerChangeSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerChangeSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerCheckUpdates checks updates checks PMM server updates availability
*/
func (a *Client) ServerCheckUpdates(params *ServerCheckUpdatesParams) (*ServerCheckUpdatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerCheckUpdatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_CheckUpdates",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerCheckUpdatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerCheckUpdatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerCheckUpdatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerGetSettings gets settings returns current PMM server settings
*/
func (a *Client) ServerGetSettings(params *ServerGetSettingsParams) (*ServerGetSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_GetSettings",
		Method:             "POST",
		PathPattern:        "/v1/Settings/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerGetSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerGetSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerPlatformSignIn platforms sign in links that PMM instance to percona platform user
*/
func (a *Client) ServerPlatformSignIn(params *ServerPlatformSignInParams) (*ServerPlatformSignInOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPlatformSignInParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_PlatformSignIn",
		Method:             "POST",
		PathPattern:        "/v1/Platform/SignIn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerPlatformSignInReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPlatformSignInOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerPlatformSignInDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerPlatformSignOut platforms sign out logouts this PMM instance from percona platform account
*/
func (a *Client) ServerPlatformSignOut(params *ServerPlatformSignOutParams) (*ServerPlatformSignOutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPlatformSignOutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_PlatformSignOut",
		Method:             "POST",
		PathPattern:        "/v1/Platform/SignOut",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerPlatformSignOutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPlatformSignOutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerPlatformSignOutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerPlatformSignUp platforms sign up creates a new percona platform user
*/
func (a *Client) ServerPlatformSignUp(params *ServerPlatformSignUpParams) (*ServerPlatformSignUpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPlatformSignUpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_PlatformSignUp",
		Method:             "POST",
		PathPattern:        "/v1/Platform/SignUp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerPlatformSignUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPlatformSignUpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerPlatformSignUpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerReadiness readinesses returns an error when some PMM server component is not ready yet or is being restarted it can be used as for docker health check or kubernetes readiness probe
*/
func (a *Client) ServerReadiness(params *ServerReadinessParams) (*ServerReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerReadinessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_Readiness",
		Method:             "GET",
		PathPattern:        "/v1/readyz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerReadinessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerReadinessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerReadinessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerStartUpdate starts update starts PMM server update
*/
func (a *Client) ServerStartUpdate(params *ServerStartUpdateParams) (*ServerStartUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerStartUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_StartUpdate",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerStartUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerStartUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerStartUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerUpdateStatus updates status returns PMM server update status
*/
func (a *Client) ServerUpdateStatus(params *ServerUpdateStatusParams) (*ServerUpdateStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUpdateStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_UpdateStatus",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerUpdateStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUpdateStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerUpdateStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerVersion versions returns PMM server versions
*/
func (a *Client) ServerVersion(params *ServerVersionParams) (*ServerVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_Version",
		Method:             "GET",
		PathPattern:        "/v1/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
