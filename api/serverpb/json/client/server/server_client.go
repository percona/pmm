// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Logs(params *LogsParams, writer io.Writer) (*LogsOK, error)

	ServerAWSInstanceCheck(params *ServerAWSInstanceCheckParams) (*ServerAWSInstanceCheckOK, error)

	ServerChangeSettings(params *ServerChangeSettingsParams) (*ServerChangeSettingsOK, error)

	ServerCheckUpdates(params *ServerCheckUpdatesParams) (*ServerCheckUpdatesOK, error)

	ServerGetSettings(params *ServerGetSettingsParams) (*ServerGetSettingsOK, error)

	ServerReadiness(params *ServerReadinessParams) (*ServerReadinessOK, error)

	ServerStartUpdate(params *ServerStartUpdateParams) (*ServerStartUpdateOK, error)

	ServerTestEmailAlertingSettings(params *ServerTestEmailAlertingSettingsParams) (*ServerTestEmailAlertingSettingsOK, error)

	ServerUpdateStatus(params *ServerUpdateStatusParams) (*ServerUpdateStatusOK, error)

	ServerVersion(params *ServerVersionParams) (*ServerVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Logs logs

  Returns the PMM Server logs.
*/
func (a *Client) Logs(params *LogsParams, writer io.Writer) (*LogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Logs",
		Method:             "GET",
		PathPattern:        "/logs.zip",
		ProducesMediaTypes: []string{"application/zip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LogsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerAWSInstanceCheck AWSs instance check

  Checks AWS EC2 instance ID.
*/
func (a *Client) ServerAWSInstanceCheck(params *ServerAWSInstanceCheckParams) (*ServerAWSInstanceCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerAWSInstanceCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_AWSInstanceCheck",
		Method:             "POST",
		PathPattern:        "/v1/AWSInstanceCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerAWSInstanceCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerAWSInstanceCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerAWSInstanceCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerChangeSettings changes settings

  Changes PMM Server settings.
*/
func (a *Client) ServerChangeSettings(params *ServerChangeSettingsParams) (*ServerChangeSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerChangeSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_ChangeSettings",
		Method:             "POST",
		PathPattern:        "/v1/Settings/Change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerChangeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerChangeSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerChangeSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerCheckUpdates checks updates

  Checks for available PMM Server updates.
*/
func (a *Client) ServerCheckUpdates(params *ServerCheckUpdatesParams) (*ServerCheckUpdatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerCheckUpdatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_CheckUpdates",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerCheckUpdatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerCheckUpdatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerCheckUpdatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerGetSettings gets settings

  Returns current PMM Server settings.
*/
func (a *Client) ServerGetSettings(params *ServerGetSettingsParams) (*ServerGetSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_GetSettings",
		Method:             "POST",
		PathPattern:        "/v1/Settings/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerGetSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerGetSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerReadiness checks server readiness

  Returns an error when Server components being restarted are not ready yet. Use this API for checking the health of Docker containers and for probing Kubernetes readiness.
*/
func (a *Client) ServerReadiness(params *ServerReadinessParams) (*ServerReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerReadinessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_Readiness",
		Method:             "GET",
		PathPattern:        "/v1/readyz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerReadinessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerReadinessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerReadinessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerStartUpdate starts update

  Starts PMM Server update.
*/
func (a *Client) ServerStartUpdate(params *ServerStartUpdateParams) (*ServerStartUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerStartUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_StartUpdate",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerStartUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerStartUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerStartUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerTestEmailAlertingSettings tests email alerting

  Sends test email to check current SMTP settings for email alerting.
*/
func (a *Client) ServerTestEmailAlertingSettings(params *ServerTestEmailAlertingSettingsParams) (*ServerTestEmailAlertingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerTestEmailAlertingSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_TestEmailAlertingSettings",
		Method:             "POST",
		PathPattern:        "/v1/Settings/TestEmailAlertingSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerTestEmailAlertingSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerTestEmailAlertingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerTestEmailAlertingSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerUpdateStatus updates status

  Returns PMM Server update status.
*/
func (a *Client) ServerUpdateStatus(params *ServerUpdateStatusParams) (*ServerUpdateStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUpdateStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_UpdateStatus",
		Method:             "POST",
		PathPattern:        "/v1/Updates/Status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerUpdateStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUpdateStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerUpdateStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerVersion versions

  Returns PMM Server versions.
*/
func (a *Client) ServerVersion(params *ServerVersionParams) (*ServerVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Server_Version",
		Method:             "GET",
		PathPattern:        "/v1/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
