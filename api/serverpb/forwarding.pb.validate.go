// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: serverpb/forwarding.proto

package serverpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ForwardRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardRequestRequestMultiError, or nil if none found.
func (m *ForwardRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for ForwardedBy

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardRequestRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardRequestRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardRequestRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProtocolVersion

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardRequestRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardRequestRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardRequestRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardRequestRequestMultiError(errors)
	}

	return nil
}

// ForwardRequestRequestMultiError is an error wrapping multiple validation
// errors returned by ForwardRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type ForwardRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardRequestRequestMultiError) AllErrors() []error { return m }

// ForwardRequestRequestValidationError is the validation error returned by
// ForwardRequestRequest.Validate if the designated constraints aren't met.
type ForwardRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardRequestRequestValidationError) ErrorName() string {
	return "ForwardRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardRequestRequestValidationError{}

// Validate checks the field values on ForwardRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardRequestResponseMultiError, or nil if none found.
func (m *ForwardRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardRequestResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardRequestResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardRequestResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	// no validation rules for ProcessedBy

	if len(errors) > 0 {
		return ForwardRequestResponseMultiError(errors)
	}

	return nil
}

// ForwardRequestResponseMultiError is an error wrapping multiple validation
// errors returned by ForwardRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type ForwardRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardRequestResponseMultiError) AllErrors() []error { return m }

// ForwardRequestResponseValidationError is the validation error returned by
// ForwardRequestResponse.Validate if the designated constraints aren't met.
type ForwardRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardRequestResponseValidationError) ErrorName() string {
	return "ForwardRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardRequestResponseValidationError{}

// Validate checks the field values on FullStateSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FullStateSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FullStateSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FullStateSyncRequestMultiError, or nil if none found.
func (m *FullStateSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FullStateSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequesterServerId

	if len(errors) > 0 {
		return FullStateSyncRequestMultiError(errors)
	}

	return nil
}

// FullStateSyncRequestMultiError is an error wrapping multiple validation
// errors returned by FullStateSyncRequest.ValidateAll() if the designated
// constraints aren't met.
type FullStateSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FullStateSyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FullStateSyncRequestMultiError) AllErrors() []error { return m }

// FullStateSyncRequestValidationError is the validation error returned by
// FullStateSyncRequest.Validate if the designated constraints aren't met.
type FullStateSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullStateSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullStateSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullStateSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullStateSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullStateSyncRequestValidationError) ErrorName() string {
	return "FullStateSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FullStateSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullStateSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullStateSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullStateSyncRequestValidationError{}

// Validate checks the field values on FullStateSyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FullStateSyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FullStateSyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FullStateSyncResponseMultiError, or nil if none found.
func (m *FullStateSyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FullStateSyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentLocations

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FullStateSyncResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FullStateSyncResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullStateSyncResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentCount

	if len(errors) > 0 {
		return FullStateSyncResponseMultiError(errors)
	}

	return nil
}

// FullStateSyncResponseMultiError is an error wrapping multiple validation
// errors returned by FullStateSyncResponse.ValidateAll() if the designated
// constraints aren't met.
type FullStateSyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FullStateSyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FullStateSyncResponseMultiError) AllErrors() []error { return m }

// FullStateSyncResponseValidationError is the validation error returned by
// FullStateSyncResponse.Validate if the designated constraints aren't met.
type FullStateSyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullStateSyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullStateSyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullStateSyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullStateSyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullStateSyncResponseValidationError) ErrorName() string {
	return "FullStateSyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FullStateSyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullStateSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullStateSyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullStateSyncResponseValidationError{}
