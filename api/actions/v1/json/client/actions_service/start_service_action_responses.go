// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartServiceActionReader is a Reader for the StartServiceAction structure.
type StartServiceActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartServiceActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartServiceActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStartServiceActionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartServiceActionOK creates a StartServiceActionOK with default headers values
func NewStartServiceActionOK() *StartServiceActionOK {
	return &StartServiceActionOK{}
}

/*
StartServiceActionOK describes a response with status code 200, with default header values.

A successful response.
*/
type StartServiceActionOK struct {
	Payload *StartServiceActionOKBody
}

func (o *StartServiceActionOK) Error() string {
	return fmt.Sprintf("[POST /v1/actions:startServiceAction][%d] startServiceActionOk  %+v", 200, o.Payload)
}

func (o *StartServiceActionOK) GetPayload() *StartServiceActionOKBody {
	return o.Payload
}

func (o *StartServiceActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(StartServiceActionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartServiceActionDefault creates a StartServiceActionDefault with default headers values
func NewStartServiceActionDefault(code int) *StartServiceActionDefault {
	return &StartServiceActionDefault{
		_statusCode: code,
	}
}

/*
StartServiceActionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type StartServiceActionDefault struct {
	_statusCode int

	Payload *StartServiceActionDefaultBody
}

// Code gets the status code for the start service action default response
func (o *StartServiceActionDefault) Code() int {
	return o._statusCode
}

func (o *StartServiceActionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/actions:startServiceAction][%d] StartServiceAction default  %+v", o._statusCode, o.Payload)
}

func (o *StartServiceActionDefault) GetPayload() *StartServiceActionDefaultBody {
	return o.Payload
}

func (o *StartServiceActionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(StartServiceActionDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
StartServiceActionBody start service action body
swagger:model StartServiceActionBody
*/
type StartServiceActionBody struct {
	// mongodb explain
	MongodbExplain *StartServiceActionParamsBodyMongodbExplain `json:"mongodb_explain,omitempty"`

	// mysql explain
	MysqlExplain *StartServiceActionParamsBodyMysqlExplain `json:"mysql_explain,omitempty"`

	// mysql explain json
	MysqlExplainJSON *StartServiceActionParamsBodyMysqlExplainJSON `json:"mysql_explain_json,omitempty"`

	// mysql explain traditional json
	MysqlExplainTraditionalJSON *StartServiceActionParamsBodyMysqlExplainTraditionalJSON `json:"mysql_explain_traditional_json,omitempty"`

	// mysql show create table
	MysqlShowCreateTable *StartServiceActionParamsBodyMysqlShowCreateTable `json:"mysql_show_create_table,omitempty"`

	// mysql show index
	MysqlShowIndex *StartServiceActionParamsBodyMysqlShowIndex `json:"mysql_show_index,omitempty"`

	// mysql show table status
	MysqlShowTableStatus *StartServiceActionParamsBodyMysqlShowTableStatus `json:"mysql_show_table_status,omitempty"`

	// postgres show create table
	PostgresShowCreateTable *StartServiceActionParamsBodyPostgresShowCreateTable `json:"postgres_show_create_table,omitempty"`

	// postgres show index
	PostgresShowIndex *StartServiceActionParamsBodyPostgresShowIndex `json:"postgres_show_index,omitempty"`

	// pt mongodb summary
	PTMongodbSummary *StartServiceActionParamsBodyPTMongodbSummary `json:"pt_mongodb_summary,omitempty"`

	// pt mysql summary
	PTMysqlSummary *StartServiceActionParamsBodyPTMysqlSummary `json:"pt_mysql_summary,omitempty"`

	// pt postgres summary
	PTPostgresSummary *StartServiceActionParamsBodyPTPostgresSummary `json:"pt_postgres_summary,omitempty"`
}

// Validate validates this start service action body
func (o *StartServiceActionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMongodbExplain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplainJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplainTraditionalJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowCreateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowTableStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresShowCreateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresShowIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTMongodbSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTMysqlSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTPostgresSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionBody) validateMongodbExplain(formats strfmt.Registry) error {
	if swag.IsZero(o.MongodbExplain) { // not required
		return nil
	}

	if o.MongodbExplain != nil {
		if err := o.MongodbExplain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlExplain(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplain) { // not required
		return nil
	}

	if o.MysqlExplain != nil {
		if err := o.MysqlExplain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlExplainJSON(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplainJSON) { // not required
		return nil
	}

	if o.MysqlExplainJSON != nil {
		if err := o.MysqlExplainJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlExplainTraditionalJSON(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplainTraditionalJSON) { // not required
		return nil
	}

	if o.MysqlExplainTraditionalJSON != nil {
		if err := o.MysqlExplainTraditionalJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain_traditional_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain_traditional_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlShowCreateTable(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowCreateTable) { // not required
		return nil
	}

	if o.MysqlShowCreateTable != nil {
		if err := o.MysqlShowCreateTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlShowIndex(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowIndex) { // not required
		return nil
	}

	if o.MysqlShowIndex != nil {
		if err := o.MysqlShowIndex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validateMysqlShowTableStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowTableStatus) { // not required
		return nil
	}

	if o.MysqlShowTableStatus != nil {
		if err := o.MysqlShowTableStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_table_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_table_status")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validatePostgresShowCreateTable(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresShowCreateTable) { // not required
		return nil
	}

	if o.PostgresShowCreateTable != nil {
		if err := o.PostgresShowCreateTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgres_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgres_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validatePostgresShowIndex(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresShowIndex) { // not required
		return nil
	}

	if o.PostgresShowIndex != nil {
		if err := o.PostgresShowIndex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgres_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgres_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validatePTMongodbSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTMongodbSummary) { // not required
		return nil
	}

	if o.PTMongodbSummary != nil {
		if err := o.PTMongodbSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_mongodb_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_mongodb_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validatePTMysqlSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTMysqlSummary) { // not required
		return nil
	}

	if o.PTMysqlSummary != nil {
		if err := o.PTMysqlSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_mysql_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_mysql_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) validatePTPostgresSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTPostgresSummary) { // not required
		return nil
	}

	if o.PTPostgresSummary != nil {
		if err := o.PTPostgresSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_postgres_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_postgres_summary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this start service action body based on the context it is used
func (o *StartServiceActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMongodbExplain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplainJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplainTraditionalJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowCreateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowTableStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresShowCreateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresShowIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTMongodbSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTMysqlSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTPostgresSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionBody) contextValidateMongodbExplain(ctx context.Context, formats strfmt.Registry) error {
	if o.MongodbExplain != nil {
		if err := o.MongodbExplain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mongodb_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mongodb_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlExplain(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplain != nil {
		if err := o.MysqlExplain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlExplainJSON(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplainJSON != nil {
		if err := o.MysqlExplainJSON.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlExplainTraditionalJSON(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplainTraditionalJSON != nil {
		if err := o.MysqlExplainTraditionalJSON.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_explain_traditional_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_explain_traditional_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlShowCreateTable(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowCreateTable != nil {
		if err := o.MysqlShowCreateTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlShowIndex(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowIndex != nil {
		if err := o.MysqlShowIndex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidateMysqlShowTableStatus(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowTableStatus != nil {
		if err := o.MysqlShowTableStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "mysql_show_table_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "mysql_show_table_status")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidatePostgresShowCreateTable(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresShowCreateTable != nil {
		if err := o.PostgresShowCreateTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgres_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgres_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidatePostgresShowIndex(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresShowIndex != nil {
		if err := o.PostgresShowIndex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "postgres_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "postgres_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidatePTMongodbSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTMongodbSummary != nil {
		if err := o.PTMongodbSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_mongodb_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_mongodb_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidatePTMysqlSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTMysqlSummary != nil {
		if err := o.PTMysqlSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_mysql_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_mysql_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionBody) contextValidatePTPostgresSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTPostgresSummary != nil {
		if err := o.PTPostgresSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pt_postgres_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pt_postgres_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionBody) UnmarshalBinary(b []byte) error {
	var res StartServiceActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionDefaultBody start service action default body
swagger:model StartServiceActionDefaultBody
*/
type StartServiceActionDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*StartServiceActionDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this start service action default body
func (o *StartServiceActionDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartServiceAction default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartServiceAction default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this start service action default body based on the context it is used
func (o *StartServiceActionDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartServiceAction default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartServiceAction default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionDefaultBody) UnmarshalBinary(b []byte) error {
	var res StartServiceActionDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionDefaultBodyDetailsItems0 start service action default body details items0
swagger:model StartServiceActionDefaultBodyDetailsItems0
*/
type StartServiceActionDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this start service action default body details items0
func (o *StartServiceActionDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action default body details items0 based on context it is used
func (o *StartServiceActionDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res StartServiceActionDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBody start service action OK body
swagger:model StartServiceActionOKBody
*/
type StartServiceActionOKBody struct {
	// mongodb explain
	MongodbExplain *StartServiceActionOKBodyMongodbExplain `json:"mongodb_explain,omitempty"`

	// mysql explain
	MysqlExplain *StartServiceActionOKBodyMysqlExplain `json:"mysql_explain,omitempty"`

	// mysql explain json
	MysqlExplainJSON *StartServiceActionOKBodyMysqlExplainJSON `json:"mysql_explain_json,omitempty"`

	// mysql explain traditional json
	MysqlExplainTraditionalJSON *StartServiceActionOKBodyMysqlExplainTraditionalJSON `json:"mysql_explain_traditional_json,omitempty"`

	// mysql show create table
	MysqlShowCreateTable *StartServiceActionOKBodyMysqlShowCreateTable `json:"mysql_show_create_table,omitempty"`

	// mysql show index
	MysqlShowIndex *StartServiceActionOKBodyMysqlShowIndex `json:"mysql_show_index,omitempty"`

	// mysql show table status
	MysqlShowTableStatus *StartServiceActionOKBodyMysqlShowTableStatus `json:"mysql_show_table_status,omitempty"`

	// postgresql show create table
	PostgresqlShowCreateTable *StartServiceActionOKBodyPostgresqlShowCreateTable `json:"postgresql_show_create_table,omitempty"`

	// postgresql show index
	PostgresqlShowIndex *StartServiceActionOKBodyPostgresqlShowIndex `json:"postgresql_show_index,omitempty"`

	// pt mongodb summary
	PTMongodbSummary *StartServiceActionOKBodyPTMongodbSummary `json:"pt_mongodb_summary,omitempty"`

	// pt mysql summary
	PTMysqlSummary *StartServiceActionOKBodyPTMysqlSummary `json:"pt_mysql_summary,omitempty"`

	// pt postgres summary
	PTPostgresSummary *StartServiceActionOKBodyPTPostgresSummary `json:"pt_postgres_summary,omitempty"`
}

// Validate validates this start service action OK body
func (o *StartServiceActionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMongodbExplain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplainJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlExplainTraditionalJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowCreateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlShowTableStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresqlShowCreateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresqlShowIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTMongodbSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTMysqlSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePTPostgresSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionOKBody) validateMongodbExplain(formats strfmt.Registry) error {
	if swag.IsZero(o.MongodbExplain) { // not required
		return nil
	}

	if o.MongodbExplain != nil {
		if err := o.MongodbExplain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mongodb_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mongodb_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlExplain(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplain) { // not required
		return nil
	}

	if o.MysqlExplain != nil {
		if err := o.MysqlExplain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlExplainJSON(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplainJSON) { // not required
		return nil
	}

	if o.MysqlExplainJSON != nil {
		if err := o.MysqlExplainJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlExplainTraditionalJSON(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlExplainTraditionalJSON) { // not required
		return nil
	}

	if o.MysqlExplainTraditionalJSON != nil {
		if err := o.MysqlExplainTraditionalJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain_traditional_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain_traditional_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlShowCreateTable(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowCreateTable) { // not required
		return nil
	}

	if o.MysqlShowCreateTable != nil {
		if err := o.MysqlShowCreateTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlShowIndex(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowIndex) { // not required
		return nil
	}

	if o.MysqlShowIndex != nil {
		if err := o.MysqlShowIndex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validateMysqlShowTableStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqlShowTableStatus) { // not required
		return nil
	}

	if o.MysqlShowTableStatus != nil {
		if err := o.MysqlShowTableStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_table_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_table_status")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validatePostgresqlShowCreateTable(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresqlShowCreateTable) { // not required
		return nil
	}

	if o.PostgresqlShowCreateTable != nil {
		if err := o.PostgresqlShowCreateTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "postgresql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "postgresql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validatePostgresqlShowIndex(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresqlShowIndex) { // not required
		return nil
	}

	if o.PostgresqlShowIndex != nil {
		if err := o.PostgresqlShowIndex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "postgresql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "postgresql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validatePTMongodbSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTMongodbSummary) { // not required
		return nil
	}

	if o.PTMongodbSummary != nil {
		if err := o.PTMongodbSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_mongodb_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_mongodb_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validatePTMysqlSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTMysqlSummary) { // not required
		return nil
	}

	if o.PTMysqlSummary != nil {
		if err := o.PTMysqlSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_mysql_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_mysql_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) validatePTPostgresSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.PTPostgresSummary) { // not required
		return nil
	}

	if o.PTPostgresSummary != nil {
		if err := o.PTPostgresSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_postgres_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_postgres_summary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this start service action OK body based on the context it is used
func (o *StartServiceActionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMongodbExplain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplainJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlExplainTraditionalJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowCreateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqlShowTableStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresqlShowCreateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresqlShowIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTMongodbSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTMysqlSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePTPostgresSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartServiceActionOKBody) contextValidateMongodbExplain(ctx context.Context, formats strfmt.Registry) error {
	if o.MongodbExplain != nil {
		if err := o.MongodbExplain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mongodb_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mongodb_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlExplain(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplain != nil {
		if err := o.MysqlExplain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlExplainJSON(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplainJSON != nil {
		if err := o.MysqlExplainJSON.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlExplainTraditionalJSON(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlExplainTraditionalJSON != nil {
		if err := o.MysqlExplainTraditionalJSON.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_explain_traditional_json")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_explain_traditional_json")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlShowCreateTable(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowCreateTable != nil {
		if err := o.MysqlShowCreateTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlShowIndex(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowIndex != nil {
		if err := o.MysqlShowIndex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidateMysqlShowTableStatus(ctx context.Context, formats strfmt.Registry) error {
	if o.MysqlShowTableStatus != nil {
		if err := o.MysqlShowTableStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "mysql_show_table_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "mysql_show_table_status")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidatePostgresqlShowCreateTable(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresqlShowCreateTable != nil {
		if err := o.PostgresqlShowCreateTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "postgresql_show_create_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "postgresql_show_create_table")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidatePostgresqlShowIndex(ctx context.Context, formats strfmt.Registry) error {
	if o.PostgresqlShowIndex != nil {
		if err := o.PostgresqlShowIndex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "postgresql_show_index")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "postgresql_show_index")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidatePTMongodbSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTMongodbSummary != nil {
		if err := o.PTMongodbSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_mongodb_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_mongodb_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidatePTMysqlSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTMysqlSummary != nil {
		if err := o.PTMysqlSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_mysql_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_mysql_summary")
			}
			return err
		}
	}

	return nil
}

func (o *StartServiceActionOKBody) contextValidatePTPostgresSummary(ctx context.Context, formats strfmt.Registry) error {
	if o.PTPostgresSummary != nil {
		if err := o.PTPostgresSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startServiceActionOk" + "." + "pt_postgres_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startServiceActionOk" + "." + "pt_postgres_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBody) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMongodbExplain start service action OK body mongodb explain
swagger:model StartServiceActionOKBodyMongodbExplain
*/
type StartServiceActionOKBodyMongodbExplain struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mongodb explain
func (o *StartServiceActionOKBodyMongodbExplain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mongodb explain based on context it is used
func (o *StartServiceActionOKBodyMongodbExplain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMongodbExplain) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMongodbExplain) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMongodbExplain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlExplain start service action OK body mysql explain
swagger:model StartServiceActionOKBodyMysqlExplain
*/
type StartServiceActionOKBodyMysqlExplain struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql explain
func (o *StartServiceActionOKBodyMysqlExplain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql explain based on context it is used
func (o *StartServiceActionOKBodyMysqlExplain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplain) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplain) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlExplain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlExplainJSON start service action OK body mysql explain JSON
swagger:model StartServiceActionOKBodyMysqlExplainJSON
*/
type StartServiceActionOKBodyMysqlExplainJSON struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql explain JSON
func (o *StartServiceActionOKBodyMysqlExplainJSON) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql explain JSON based on context it is used
func (o *StartServiceActionOKBodyMysqlExplainJSON) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplainJSON) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplainJSON) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlExplainJSON
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlExplainTraditionalJSON start service action OK body mysql explain traditional JSON
swagger:model StartServiceActionOKBodyMysqlExplainTraditionalJSON
*/
type StartServiceActionOKBodyMysqlExplainTraditionalJSON struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql explain traditional JSON
func (o *StartServiceActionOKBodyMysqlExplainTraditionalJSON) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql explain traditional JSON based on context it is used
func (o *StartServiceActionOKBodyMysqlExplainTraditionalJSON) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplainTraditionalJSON) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlExplainTraditionalJSON) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlExplainTraditionalJSON
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlShowCreateTable start service action OK body mysql show create table
swagger:model StartServiceActionOKBodyMysqlShowCreateTable
*/
type StartServiceActionOKBodyMysqlShowCreateTable struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql show create table
func (o *StartServiceActionOKBodyMysqlShowCreateTable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql show create table based on context it is used
func (o *StartServiceActionOKBodyMysqlShowCreateTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowCreateTable) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowCreateTable) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlShowCreateTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlShowIndex start service action OK body mysql show index
swagger:model StartServiceActionOKBodyMysqlShowIndex
*/
type StartServiceActionOKBodyMysqlShowIndex struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql show index
func (o *StartServiceActionOKBodyMysqlShowIndex) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql show index based on context it is used
func (o *StartServiceActionOKBodyMysqlShowIndex) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowIndex) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowIndex) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlShowIndex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyMysqlShowTableStatus start service action OK body mysql show table status
swagger:model StartServiceActionOKBodyMysqlShowTableStatus
*/
type StartServiceActionOKBodyMysqlShowTableStatus struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body mysql show table status
func (o *StartServiceActionOKBodyMysqlShowTableStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body mysql show table status based on context it is used
func (o *StartServiceActionOKBodyMysqlShowTableStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowTableStatus) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyMysqlShowTableStatus) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyMysqlShowTableStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyPTMongodbSummary Message to retrieve the prepared pt-mongodb-summary data
swagger:model StartServiceActionOKBodyPTMongodbSummary
*/
type StartServiceActionOKBodyPTMongodbSummary struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body PT mongodb summary
func (o *StartServiceActionOKBodyPTMongodbSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body PT mongodb summary based on context it is used
func (o *StartServiceActionOKBodyPTMongodbSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTMongodbSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTMongodbSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyPTMongodbSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyPTMysqlSummary Message to retrieve the prepared pt-mysql-summary data
swagger:model StartServiceActionOKBodyPTMysqlSummary
*/
type StartServiceActionOKBodyPTMysqlSummary struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body PT mysql summary
func (o *StartServiceActionOKBodyPTMysqlSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body PT mysql summary based on context it is used
func (o *StartServiceActionOKBodyPTMysqlSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTMysqlSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTMysqlSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyPTMysqlSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyPTPostgresSummary Message to retrieve the prepared pt-pg-summary data
swagger:model StartServiceActionOKBodyPTPostgresSummary
*/
type StartServiceActionOKBodyPTPostgresSummary struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body PT postgres summary
func (o *StartServiceActionOKBodyPTPostgresSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body PT postgres summary based on context it is used
func (o *StartServiceActionOKBodyPTPostgresSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTPostgresSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyPTPostgresSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyPTPostgresSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyPostgresqlShowCreateTable start service action OK body postgresql show create table
swagger:model StartServiceActionOKBodyPostgresqlShowCreateTable
*/
type StartServiceActionOKBodyPostgresqlShowCreateTable struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body postgresql show create table
func (o *StartServiceActionOKBodyPostgresqlShowCreateTable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body postgresql show create table based on context it is used
func (o *StartServiceActionOKBodyPostgresqlShowCreateTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyPostgresqlShowCreateTable) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyPostgresqlShowCreateTable) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyPostgresqlShowCreateTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionOKBodyPostgresqlShowIndex start service action OK body postgresql show index
swagger:model StartServiceActionOKBodyPostgresqlShowIndex
*/
type StartServiceActionOKBodyPostgresqlShowIndex struct {
	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start service action OK body postgresql show index
func (o *StartServiceActionOKBodyPostgresqlShowIndex) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action OK body postgresql show index based on context it is used
func (o *StartServiceActionOKBodyPostgresqlShowIndex) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionOKBodyPostgresqlShowIndex) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionOKBodyPostgresqlShowIndex) UnmarshalBinary(b []byte) error {
	var res StartServiceActionOKBodyPostgresqlShowIndex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMongodbExplain start service action params body mongodb explain
swagger:model StartServiceActionParamsBodyMongodbExplain
*/
type StartServiceActionParamsBodyMongodbExplain struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Query. Required.
	Query string `json:"query,omitempty"`
}

// Validate validates this start service action params body mongodb explain
func (o *StartServiceActionParamsBodyMongodbExplain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mongodb explain based on context it is used
func (o *StartServiceActionParamsBodyMongodbExplain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMongodbExplain) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMongodbExplain) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMongodbExplain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlExplain start service action params body mysql explain
swagger:model StartServiceActionParamsBodyMysqlExplain
*/
type StartServiceActionParamsBodyMysqlExplain struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Query ID of query.
	QueryID string `json:"query_id,omitempty"`

	// Array of placeholder values
	Placeholders []string `json:"placeholders"`

	// Database name. Required if it can't be deduced from the query ID.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql explain
func (o *StartServiceActionParamsBodyMysqlExplain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql explain based on context it is used
func (o *StartServiceActionParamsBodyMysqlExplain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplain) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplain) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlExplain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlExplainJSON start service action params body mysql explain JSON
swagger:model StartServiceActionParamsBodyMysqlExplainJSON
*/
type StartServiceActionParamsBodyMysqlExplainJSON struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Query ID of query.
	QueryID string `json:"query_id,omitempty"`

	// Array of placeholder values
	Placeholders []string `json:"placeholders"`

	// Database name. Required if it can't be deduced from the query ID.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql explain JSON
func (o *StartServiceActionParamsBodyMysqlExplainJSON) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql explain JSON based on context it is used
func (o *StartServiceActionParamsBodyMysqlExplainJSON) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplainJSON) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplainJSON) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlExplainJSON
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlExplainTraditionalJSON start service action params body mysql explain traditional JSON
swagger:model StartServiceActionParamsBodyMysqlExplainTraditionalJSON
*/
type StartServiceActionParamsBodyMysqlExplainTraditionalJSON struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Query ID of query.
	QueryID string `json:"query_id,omitempty"`

	// Array of placeholder values
	Placeholders []string `json:"placeholders"`

	// Database name. Required if it can't be deduced from the query ID.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql explain traditional JSON
func (o *StartServiceActionParamsBodyMysqlExplainTraditionalJSON) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql explain traditional JSON based on context it is used
func (o *StartServiceActionParamsBodyMysqlExplainTraditionalJSON) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplainTraditionalJSON) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlExplainTraditionalJSON) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlExplainTraditionalJSON
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlShowCreateTable start service action params body mysql show create table
swagger:model StartServiceActionParamsBodyMysqlShowCreateTable
*/
type StartServiceActionParamsBodyMysqlShowCreateTable struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Table name. Required. May additionally contain a database name.
	TableName string `json:"table_name,omitempty"`

	// Database name. Required if not given in the table_name field.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql show create table
func (o *StartServiceActionParamsBodyMysqlShowCreateTable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql show create table based on context it is used
func (o *StartServiceActionParamsBodyMysqlShowCreateTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowCreateTable) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowCreateTable) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlShowCreateTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlShowIndex start service action params body mysql show index
swagger:model StartServiceActionParamsBodyMysqlShowIndex
*/
type StartServiceActionParamsBodyMysqlShowIndex struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Table name. Required. May additionally contain a database name.
	TableName string `json:"table_name,omitempty"`

	// Database name. Required if not given in the table_name field.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql show index
func (o *StartServiceActionParamsBodyMysqlShowIndex) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql show index based on context it is used
func (o *StartServiceActionParamsBodyMysqlShowIndex) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowIndex) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowIndex) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlShowIndex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyMysqlShowTableStatus start service action params body mysql show table status
swagger:model StartServiceActionParamsBodyMysqlShowTableStatus
*/
type StartServiceActionParamsBodyMysqlShowTableStatus struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Table name. Required. May additionally contain a database name.
	TableName string `json:"table_name,omitempty"`

	// Database name. Required if not given in the table_name field.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body mysql show table status
func (o *StartServiceActionParamsBodyMysqlShowTableStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body mysql show table status based on context it is used
func (o *StartServiceActionParamsBodyMysqlShowTableStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowTableStatus) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyMysqlShowTableStatus) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyMysqlShowTableStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyPTMongodbSummary Message to prepare pt-mongodb-summary data
swagger:model StartServiceActionParamsBodyPTMongodbSummary
*/
type StartServiceActionParamsBodyPTMongodbSummary struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this start service action params body PT mongodb summary
func (o *StartServiceActionParamsBodyPTMongodbSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body PT mongodb summary based on context it is used
func (o *StartServiceActionParamsBodyPTMongodbSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTMongodbSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTMongodbSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyPTMongodbSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyPTMysqlSummary Message to prepare pt-mysql-summary data
swagger:model StartServiceActionParamsBodyPTMysqlSummary
*/
type StartServiceActionParamsBodyPTMysqlSummary struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this start service action params body PT mysql summary
func (o *StartServiceActionParamsBodyPTMysqlSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body PT mysql summary based on context it is used
func (o *StartServiceActionParamsBodyPTMysqlSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTMysqlSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTMysqlSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyPTMysqlSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyPTPostgresSummary Message to prepare pt-pg-summary data
swagger:model StartServiceActionParamsBodyPTPostgresSummary
*/
type StartServiceActionParamsBodyPTPostgresSummary struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this start service action params body PT postgres summary
func (o *StartServiceActionParamsBodyPTPostgresSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body PT postgres summary based on context it is used
func (o *StartServiceActionParamsBodyPTPostgresSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTPostgresSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPTPostgresSummary) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyPTPostgresSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyPostgresShowCreateTable start service action params body postgres show create table
swagger:model StartServiceActionParamsBodyPostgresShowCreateTable
*/
type StartServiceActionParamsBodyPostgresShowCreateTable struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Table name. Required. May additionally contain a database name.
	TableName string `json:"table_name,omitempty"`

	// Database name. Required if not given in the table_name field.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body postgres show create table
func (o *StartServiceActionParamsBodyPostgresShowCreateTable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body postgres show create table based on context it is used
func (o *StartServiceActionParamsBodyPostgresShowCreateTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPostgresShowCreateTable) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPostgresShowCreateTable) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyPostgresShowCreateTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StartServiceActionParamsBodyPostgresShowIndex start service action params body postgres show index
swagger:model StartServiceActionParamsBodyPostgresShowIndex
*/
type StartServiceActionParamsBodyPostgresShowIndex struct {
	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action. Required.
	ServiceID string `json:"service_id,omitempty"`

	// Table name. Required. May additionally contain a database name.
	TableName string `json:"table_name,omitempty"`

	// Database name. Required if not given in the table_name field.
	Database string `json:"database,omitempty"`
}

// Validate validates this start service action params body postgres show index
func (o *StartServiceActionParamsBodyPostgresShowIndex) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start service action params body postgres show index based on context it is used
func (o *StartServiceActionParamsBodyPostgresShowIndex) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPostgresShowIndex) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartServiceActionParamsBodyPostgresShowIndex) UnmarshalBinary(b []byte) error {
	var res StartServiceActionParamsBodyPostgresShowIndex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
