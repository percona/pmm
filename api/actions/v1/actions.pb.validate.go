// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: actions/v1/actions.proto

package actionsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionRequestMultiError, or nil if none found.
func (m *GetActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActionId()) < 1 {
		err := GetActionRequestValidationError{
			field:  "ActionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetActionRequestMultiError(errors)
	}

	return nil
}

// GetActionRequestMultiError is an error wrapping multiple validation errors
// returned by GetActionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionRequestMultiError) AllErrors() []error { return m }

// GetActionRequestValidationError is the validation error returned by
// GetActionRequest.Validate if the designated constraints aren't met.
type GetActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionRequestValidationError) ErrorName() string { return "GetActionRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionRequestValidationError{}

// Validate checks the field values on GetActionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionResponseMultiError, or nil if none found.
func (m *GetActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	// no validation rules for Output

	// no validation rules for Done

	// no validation rules for Error

	if len(errors) > 0 {
		return GetActionResponseMultiError(errors)
	}

	return nil
}

// GetActionResponseMultiError is an error wrapping multiple validation errors
// returned by GetActionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionResponseMultiError) AllErrors() []error { return m }

// GetActionResponseValidationError is the validation error returned by
// GetActionResponse.Validate if the designated constraints aren't met.
type GetActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionResponseValidationError) ErrorName() string {
	return "GetActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionResponseValidationError{}

// Validate checks the field values on StartMySQLExplainActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainActionParamsMultiError, or nil if none found.
func (m *StartMySQLExplainActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLExplainActionParamsMultiError is an error wrapping multiple
// validation errors returned by StartMySQLExplainActionParams.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLExplainActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLExplainActionParamsValidationError is the validation error
// returned by StartMySQLExplainActionParams.Validate if the designated
// constraints aren't met.
type StartMySQLExplainActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainActionParamsValidationError) ErrorName() string {
	return "StartMySQLExplainActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainActionParamsValidationError{}

// Validate checks the field values on StartMySQLExplainActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainActionResultMultiError, or nil if none found.
func (m *StartMySQLExplainActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLExplainActionResultMultiError is an error wrapping multiple
// validation errors returned by StartMySQLExplainActionResult.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLExplainActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainActionResultMultiError) AllErrors() []error { return m }

// StartMySQLExplainActionResultValidationError is the validation error
// returned by StartMySQLExplainActionResult.Validate if the designated
// constraints aren't met.
type StartMySQLExplainActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainActionResultValidationError) ErrorName() string {
	return "StartMySQLExplainActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainActionResultValidationError{}

// Validate checks the field values on StartMySQLExplainJSONActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLExplainJSONActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainJSONActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainJSONActionParamsMultiError, or nil if none found.
func (m *StartMySQLExplainJSONActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainJSONActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainJSONActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainJSONActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLExplainJSONActionParamsMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLExplainJSONActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainJSONActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainJSONActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLExplainJSONActionParamsValidationError is the validation error
// returned by StartMySQLExplainJSONActionParams.Validate if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainJSONActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainJSONActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainJSONActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainJSONActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainJSONActionParamsValidationError) ErrorName() string {
	return "StartMySQLExplainJSONActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainJSONActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainJSONActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainJSONActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainJSONActionParamsValidationError{}

// Validate checks the field values on StartMySQLExplainJSONActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartMySQLExplainJSONActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLExplainJSONActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLExplainJSONActionResultMultiError, or nil if none found.
func (m *StartMySQLExplainJSONActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainJSONActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainJSONActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLExplainJSONActionResultMultiError is an error wrapping multiple
// validation errors returned by
// StartMySQLExplainJSONActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainJSONActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainJSONActionResultMultiError) AllErrors() []error { return m }

// StartMySQLExplainJSONActionResultValidationError is the validation error
// returned by StartMySQLExplainJSONActionResult.Validate if the designated
// constraints aren't met.
type StartMySQLExplainJSONActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainJSONActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainJSONActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainJSONActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainJSONActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainJSONActionResultValidationError) ErrorName() string {
	return "StartMySQLExplainJSONActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainJSONActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainJSONActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainJSONActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainJSONActionResultValidationError{}

// Validate checks the field values on
// StartMySQLExplainTraditionalJSONActionParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainTraditionalJSONActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLExplainTraditionalJSONActionParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartMySQLExplainTraditionalJSONActionParamsMultiError, or nil if none found.
func (m *StartMySQLExplainTraditionalJSONActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainTraditionalJSONActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLExplainTraditionalJSONActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueryId

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLExplainTraditionalJSONActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLExplainTraditionalJSONActionParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLExplainTraditionalJSONActionParams.ValidateAll() if the
// designated constraints aren't met.
type StartMySQLExplainTraditionalJSONActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainTraditionalJSONActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainTraditionalJSONActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLExplainTraditionalJSONActionParamsValidationError is the
// validation error returned by
// StartMySQLExplainTraditionalJSONActionParams.Validate if the designated
// constraints aren't met.
type StartMySQLExplainTraditionalJSONActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) ErrorName() string {
	return "StartMySQLExplainTraditionalJSONActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainTraditionalJSONActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainTraditionalJSONActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainTraditionalJSONActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainTraditionalJSONActionParamsValidationError{}

// Validate checks the field values on
// StartMySQLExplainTraditionalJSONActionResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartMySQLExplainTraditionalJSONActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartMySQLExplainTraditionalJSONActionResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartMySQLExplainTraditionalJSONActionResultMultiError, or nil if none found.
func (m *StartMySQLExplainTraditionalJSONActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLExplainTraditionalJSONActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLExplainTraditionalJSONActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLExplainTraditionalJSONActionResultMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLExplainTraditionalJSONActionResult.ValidateAll() if the
// designated constraints aren't met.
type StartMySQLExplainTraditionalJSONActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLExplainTraditionalJSONActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLExplainTraditionalJSONActionResultMultiError) AllErrors() []error { return m }

// StartMySQLExplainTraditionalJSONActionResultValidationError is the
// validation error returned by
// StartMySQLExplainTraditionalJSONActionResult.Validate if the designated
// constraints aren't met.
type StartMySQLExplainTraditionalJSONActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) ErrorName() string {
	return "StartMySQLExplainTraditionalJSONActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLExplainTraditionalJSONActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLExplainTraditionalJSONActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLExplainTraditionalJSONActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLExplainTraditionalJSONActionResultValidationError{}

// Validate checks the field values on StartMySQLShowCreateTableActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowCreateTableActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowCreateTableActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLShowCreateTableActionParamsMultiError, or nil if none found.
func (m *StartMySQLShowCreateTableActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowCreateTableActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowCreateTableActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowCreateTableActionParamsValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowCreateTableActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLShowCreateTableActionParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowCreateTableActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowCreateTableActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowCreateTableActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowCreateTableActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLShowCreateTableActionParamsValidationError is the validation error
// returned by StartMySQLShowCreateTableActionParams.Validate if the
// designated constraints aren't met.
type StartMySQLShowCreateTableActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowCreateTableActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowCreateTableActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowCreateTableActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowCreateTableActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowCreateTableActionParamsValidationError) ErrorName() string {
	return "StartMySQLShowCreateTableActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowCreateTableActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowCreateTableActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowCreateTableActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowCreateTableActionParamsValidationError{}

// Validate checks the field values on StartMySQLShowCreateTableActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowCreateTableActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowCreateTableActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLShowCreateTableActionResultMultiError, or nil if none found.
func (m *StartMySQLShowCreateTableActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowCreateTableActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowCreateTableActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLShowCreateTableActionResultMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowCreateTableActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowCreateTableActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowCreateTableActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowCreateTableActionResultMultiError) AllErrors() []error { return m }

// StartMySQLShowCreateTableActionResultValidationError is the validation error
// returned by StartMySQLShowCreateTableActionResult.Validate if the
// designated constraints aren't met.
type StartMySQLShowCreateTableActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowCreateTableActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowCreateTableActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowCreateTableActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowCreateTableActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowCreateTableActionResultValidationError) ErrorName() string {
	return "StartMySQLShowCreateTableActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowCreateTableActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowCreateTableActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowCreateTableActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowCreateTableActionResultValidationError{}

// Validate checks the field values on StartMySQLShowTableStatusActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowTableStatusActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowTableStatusActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLShowTableStatusActionParamsMultiError, or nil if none found.
func (m *StartMySQLShowTableStatusActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowTableStatusActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowTableStatusActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowTableStatusActionParamsValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowTableStatusActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLShowTableStatusActionParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowTableStatusActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowTableStatusActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowTableStatusActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowTableStatusActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLShowTableStatusActionParamsValidationError is the validation error
// returned by StartMySQLShowTableStatusActionParams.Validate if the
// designated constraints aren't met.
type StartMySQLShowTableStatusActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowTableStatusActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowTableStatusActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowTableStatusActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowTableStatusActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowTableStatusActionParamsValidationError) ErrorName() string {
	return "StartMySQLShowTableStatusActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowTableStatusActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowTableStatusActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowTableStatusActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowTableStatusActionParamsValidationError{}

// Validate checks the field values on StartMySQLShowTableStatusActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartMySQLShowTableStatusActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowTableStatusActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartMySQLShowTableStatusActionResultMultiError, or nil if none found.
func (m *StartMySQLShowTableStatusActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowTableStatusActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowTableStatusActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLShowTableStatusActionResultMultiError is an error wrapping
// multiple validation errors returned by
// StartMySQLShowTableStatusActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartMySQLShowTableStatusActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowTableStatusActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowTableStatusActionResultMultiError) AllErrors() []error { return m }

// StartMySQLShowTableStatusActionResultValidationError is the validation error
// returned by StartMySQLShowTableStatusActionResult.Validate if the
// designated constraints aren't met.
type StartMySQLShowTableStatusActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowTableStatusActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowTableStatusActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowTableStatusActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowTableStatusActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowTableStatusActionResultValidationError) ErrorName() string {
	return "StartMySQLShowTableStatusActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowTableStatusActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowTableStatusActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowTableStatusActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowTableStatusActionResultValidationError{}

// Validate checks the field values on StartMySQLShowIndexActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLShowIndexActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowIndexActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLShowIndexActionParamsMultiError, or nil if none found.
func (m *StartMySQLShowIndexActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowIndexActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMySQLShowIndexActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartMySQLShowIndexActionParamsValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartMySQLShowIndexActionParamsMultiError(errors)
	}

	return nil
}

// StartMySQLShowIndexActionParamsMultiError is an error wrapping multiple
// validation errors returned by StartMySQLShowIndexActionParams.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLShowIndexActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowIndexActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowIndexActionParamsMultiError) AllErrors() []error { return m }

// StartMySQLShowIndexActionParamsValidationError is the validation error
// returned by StartMySQLShowIndexActionParams.Validate if the designated
// constraints aren't met.
type StartMySQLShowIndexActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowIndexActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowIndexActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowIndexActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowIndexActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowIndexActionParamsValidationError) ErrorName() string {
	return "StartMySQLShowIndexActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowIndexActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowIndexActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowIndexActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowIndexActionParamsValidationError{}

// Validate checks the field values on StartMySQLShowIndexActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMySQLShowIndexActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMySQLShowIndexActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMySQLShowIndexActionResultMultiError, or nil if none found.
func (m *StartMySQLShowIndexActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMySQLShowIndexActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMySQLShowIndexActionResultMultiError(errors)
	}

	return nil
}

// StartMySQLShowIndexActionResultMultiError is an error wrapping multiple
// validation errors returned by StartMySQLShowIndexActionResult.ValidateAll()
// if the designated constraints aren't met.
type StartMySQLShowIndexActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMySQLShowIndexActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMySQLShowIndexActionResultMultiError) AllErrors() []error { return m }

// StartMySQLShowIndexActionResultValidationError is the validation error
// returned by StartMySQLShowIndexActionResult.Validate if the designated
// constraints aren't met.
type StartMySQLShowIndexActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMySQLShowIndexActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMySQLShowIndexActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMySQLShowIndexActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMySQLShowIndexActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMySQLShowIndexActionResultValidationError) ErrorName() string {
	return "StartMySQLShowIndexActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMySQLShowIndexActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMySQLShowIndexActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMySQLShowIndexActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMySQLShowIndexActionResultValidationError{}

// Validate checks the field values on
// StartPostgreSQLShowCreateTableActionParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartPostgreSQLShowCreateTableActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartPostgreSQLShowCreateTableActionParams with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartPostgreSQLShowCreateTableActionParamsMultiError, or nil if none found.
func (m *StartPostgreSQLShowCreateTableActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowCreateTableActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartPostgreSQLShowCreateTableActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartPostgreSQLShowCreateTableActionParamsValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartPostgreSQLShowCreateTableActionParamsMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowCreateTableActionParamsMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowCreateTableActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowCreateTableActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowCreateTableActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowCreateTableActionParamsMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowCreateTableActionParamsValidationError is the validation
// error returned by StartPostgreSQLShowCreateTableActionParams.Validate if
// the designated constraints aren't met.
type StartPostgreSQLShowCreateTableActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) ErrorName() string {
	return "StartPostgreSQLShowCreateTableActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowCreateTableActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowCreateTableActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowCreateTableActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowCreateTableActionParamsValidationError{}

// Validate checks the field values on
// StartPostgreSQLShowCreateTableActionResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartPostgreSQLShowCreateTableActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartPostgreSQLShowCreateTableActionResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartPostgreSQLShowCreateTableActionResultMultiError, or nil if none found.
func (m *StartPostgreSQLShowCreateTableActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowCreateTableActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPostgreSQLShowCreateTableActionResultMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowCreateTableActionResultMultiError is an error wrapping
// multiple validation errors returned by
// StartPostgreSQLShowCreateTableActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowCreateTableActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowCreateTableActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowCreateTableActionResultMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowCreateTableActionResultValidationError is the validation
// error returned by StartPostgreSQLShowCreateTableActionResult.Validate if
// the designated constraints aren't met.
type StartPostgreSQLShowCreateTableActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowCreateTableActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowCreateTableActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowCreateTableActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowCreateTableActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowCreateTableActionResultValidationError) ErrorName() string {
	return "StartPostgreSQLShowCreateTableActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowCreateTableActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowCreateTableActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowCreateTableActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowCreateTableActionResultValidationError{}

// Validate checks the field values on StartPostgreSQLShowIndexActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartPostgreSQLShowIndexActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPostgreSQLShowIndexActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPostgreSQLShowIndexActionParamsMultiError, or nil if none found.
func (m *StartPostgreSQLShowIndexActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowIndexActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartPostgreSQLShowIndexActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := StartPostgreSQLShowIndexActionParamsValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return StartPostgreSQLShowIndexActionParamsMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowIndexActionParamsMultiError is an error wrapping multiple
// validation errors returned by
// StartPostgreSQLShowIndexActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowIndexActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowIndexActionParamsMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowIndexActionParamsValidationError is the validation error
// returned by StartPostgreSQLShowIndexActionParams.Validate if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowIndexActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowIndexActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowIndexActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowIndexActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowIndexActionParamsValidationError) ErrorName() string {
	return "StartPostgreSQLShowIndexActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowIndexActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowIndexActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowIndexActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowIndexActionParamsValidationError{}

// Validate checks the field values on StartPostgreSQLShowIndexActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StartPostgreSQLShowIndexActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPostgreSQLShowIndexActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPostgreSQLShowIndexActionResultMultiError, or nil if none found.
func (m *StartPostgreSQLShowIndexActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPostgreSQLShowIndexActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPostgreSQLShowIndexActionResultMultiError(errors)
	}

	return nil
}

// StartPostgreSQLShowIndexActionResultMultiError is an error wrapping multiple
// validation errors returned by
// StartPostgreSQLShowIndexActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPostgreSQLShowIndexActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPostgreSQLShowIndexActionResultMultiError) AllErrors() []error { return m }

// StartPostgreSQLShowIndexActionResultValidationError is the validation error
// returned by StartPostgreSQLShowIndexActionResult.Validate if the designated
// constraints aren't met.
type StartPostgreSQLShowIndexActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPostgreSQLShowIndexActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPostgreSQLShowIndexActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPostgreSQLShowIndexActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPostgreSQLShowIndexActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPostgreSQLShowIndexActionResultValidationError) ErrorName() string {
	return "StartPostgreSQLShowIndexActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartPostgreSQLShowIndexActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPostgreSQLShowIndexActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPostgreSQLShowIndexActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPostgreSQLShowIndexActionResultValidationError{}

// Validate checks the field values on StartMongoDBExplainActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMongoDBExplainActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMongoDBExplainActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMongoDBExplainActionParamsMultiError, or nil if none found.
func (m *StartMongoDBExplainActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMongoDBExplainActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := StartMongoDBExplainActionParamsValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetQuery()) < 1 {
		err := StartMongoDBExplainActionParamsValidationError{
			field:  "Query",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartMongoDBExplainActionParamsMultiError(errors)
	}

	return nil
}

// StartMongoDBExplainActionParamsMultiError is an error wrapping multiple
// validation errors returned by StartMongoDBExplainActionParams.ValidateAll()
// if the designated constraints aren't met.
type StartMongoDBExplainActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMongoDBExplainActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMongoDBExplainActionParamsMultiError) AllErrors() []error { return m }

// StartMongoDBExplainActionParamsValidationError is the validation error
// returned by StartMongoDBExplainActionParams.Validate if the designated
// constraints aren't met.
type StartMongoDBExplainActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMongoDBExplainActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMongoDBExplainActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMongoDBExplainActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMongoDBExplainActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMongoDBExplainActionParamsValidationError) ErrorName() string {
	return "StartMongoDBExplainActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartMongoDBExplainActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMongoDBExplainActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMongoDBExplainActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMongoDBExplainActionParamsValidationError{}

// Validate checks the field values on StartMongoDBExplainActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMongoDBExplainActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMongoDBExplainActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartMongoDBExplainActionResultMultiError, or nil if none found.
func (m *StartMongoDBExplainActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMongoDBExplainActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartMongoDBExplainActionResultMultiError(errors)
	}

	return nil
}

// StartMongoDBExplainActionResultMultiError is an error wrapping multiple
// validation errors returned by StartMongoDBExplainActionResult.ValidateAll()
// if the designated constraints aren't met.
type StartMongoDBExplainActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMongoDBExplainActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMongoDBExplainActionResultMultiError) AllErrors() []error { return m }

// StartMongoDBExplainActionResultValidationError is the validation error
// returned by StartMongoDBExplainActionResult.Validate if the designated
// constraints aren't met.
type StartMongoDBExplainActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMongoDBExplainActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMongoDBExplainActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMongoDBExplainActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMongoDBExplainActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMongoDBExplainActionResultValidationError) ErrorName() string {
	return "StartMongoDBExplainActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartMongoDBExplainActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMongoDBExplainActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMongoDBExplainActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMongoDBExplainActionResultValidationError{}

// Validate checks the field values on StartPTPgSummaryActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTPgSummaryActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTPgSummaryActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTPgSummaryActionParamsMultiError, or nil if none found.
func (m *StartPTPgSummaryActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTPgSummaryActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTPgSummaryActionParamsMultiError(errors)
	}

	return nil
}

// StartPTPgSummaryActionParamsMultiError is an error wrapping multiple
// validation errors returned by StartPTPgSummaryActionParams.ValidateAll() if
// the designated constraints aren't met.
type StartPTPgSummaryActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTPgSummaryActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTPgSummaryActionParamsMultiError) AllErrors() []error { return m }

// StartPTPgSummaryActionParamsValidationError is the validation error returned
// by StartPTPgSummaryActionParams.Validate if the designated constraints
// aren't met.
type StartPTPgSummaryActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTPgSummaryActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTPgSummaryActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTPgSummaryActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTPgSummaryActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTPgSummaryActionParamsValidationError) ErrorName() string {
	return "StartPTPgSummaryActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTPgSummaryActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTPgSummaryActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTPgSummaryActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTPgSummaryActionParamsValidationError{}

// Validate checks the field values on StartPTPgSummaryActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTPgSummaryActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTPgSummaryActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTPgSummaryActionResultMultiError, or nil if none found.
func (m *StartPTPgSummaryActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTPgSummaryActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTPgSummaryActionResultMultiError(errors)
	}

	return nil
}

// StartPTPgSummaryActionResultMultiError is an error wrapping multiple
// validation errors returned by StartPTPgSummaryActionResult.ValidateAll() if
// the designated constraints aren't met.
type StartPTPgSummaryActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTPgSummaryActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTPgSummaryActionResultMultiError) AllErrors() []error { return m }

// StartPTPgSummaryActionResultValidationError is the validation error returned
// by StartPTPgSummaryActionResult.Validate if the designated constraints
// aren't met.
type StartPTPgSummaryActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTPgSummaryActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTPgSummaryActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTPgSummaryActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTPgSummaryActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTPgSummaryActionResultValidationError) ErrorName() string {
	return "StartPTPgSummaryActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTPgSummaryActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTPgSummaryActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTPgSummaryActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTPgSummaryActionResultValidationError{}

// Validate checks the field values on StartPTMongoDBSummaryActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMongoDBSummaryActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMongoDBSummaryActionParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPTMongoDBSummaryActionParamsMultiError, or nil if none found.
func (m *StartPTMongoDBSummaryActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMongoDBSummaryActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTMongoDBSummaryActionParamsMultiError(errors)
	}

	return nil
}

// StartPTMongoDBSummaryActionParamsMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMongoDBSummaryActionParams.ValidateAll() if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMongoDBSummaryActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMongoDBSummaryActionParamsMultiError) AllErrors() []error { return m }

// StartPTMongoDBSummaryActionParamsValidationError is the validation error
// returned by StartPTMongoDBSummaryActionParams.Validate if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMongoDBSummaryActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMongoDBSummaryActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMongoDBSummaryActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMongoDBSummaryActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMongoDBSummaryActionParamsValidationError) ErrorName() string {
	return "StartPTMongoDBSummaryActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMongoDBSummaryActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMongoDBSummaryActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMongoDBSummaryActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMongoDBSummaryActionParamsValidationError{}

// Validate checks the field values on StartPTMongoDBSummaryActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StartPTMongoDBSummaryActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMongoDBSummaryActionResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StartPTMongoDBSummaryActionResultMultiError, or nil if none found.
func (m *StartPTMongoDBSummaryActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMongoDBSummaryActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTMongoDBSummaryActionResultMultiError(errors)
	}

	return nil
}

// StartPTMongoDBSummaryActionResultMultiError is an error wrapping multiple
// validation errors returned by
// StartPTMongoDBSummaryActionResult.ValidateAll() if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMongoDBSummaryActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMongoDBSummaryActionResultMultiError) AllErrors() []error { return m }

// StartPTMongoDBSummaryActionResultValidationError is the validation error
// returned by StartPTMongoDBSummaryActionResult.Validate if the designated
// constraints aren't met.
type StartPTMongoDBSummaryActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMongoDBSummaryActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMongoDBSummaryActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMongoDBSummaryActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMongoDBSummaryActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMongoDBSummaryActionResultValidationError) ErrorName() string {
	return "StartPTMongoDBSummaryActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMongoDBSummaryActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMongoDBSummaryActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMongoDBSummaryActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMongoDBSummaryActionResultValidationError{}

// Validate checks the field values on StartPTMySQLSummaryActionParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTMySQLSummaryActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMySQLSummaryActionParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartPTMySQLSummaryActionParamsMultiError, or nil if none found.
func (m *StartPTMySQLSummaryActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMySQLSummaryActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return StartPTMySQLSummaryActionParamsMultiError(errors)
	}

	return nil
}

// StartPTMySQLSummaryActionParamsMultiError is an error wrapping multiple
// validation errors returned by StartPTMySQLSummaryActionParams.ValidateAll()
// if the designated constraints aren't met.
type StartPTMySQLSummaryActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMySQLSummaryActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMySQLSummaryActionParamsMultiError) AllErrors() []error { return m }

// StartPTMySQLSummaryActionParamsValidationError is the validation error
// returned by StartPTMySQLSummaryActionParams.Validate if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMySQLSummaryActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMySQLSummaryActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMySQLSummaryActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMySQLSummaryActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMySQLSummaryActionParamsValidationError) ErrorName() string {
	return "StartPTMySQLSummaryActionParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMySQLSummaryActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMySQLSummaryActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMySQLSummaryActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMySQLSummaryActionParamsValidationError{}

// Validate checks the field values on StartPTMySQLSummaryActionResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTMySQLSummaryActionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTMySQLSummaryActionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartPTMySQLSummaryActionResultMultiError, or nil if none found.
func (m *StartPTMySQLSummaryActionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTMySQLSummaryActionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTMySQLSummaryActionResultMultiError(errors)
	}

	return nil
}

// StartPTMySQLSummaryActionResultMultiError is an error wrapping multiple
// validation errors returned by StartPTMySQLSummaryActionResult.ValidateAll()
// if the designated constraints aren't met.
type StartPTMySQLSummaryActionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTMySQLSummaryActionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTMySQLSummaryActionResultMultiError) AllErrors() []error { return m }

// StartPTMySQLSummaryActionResultValidationError is the validation error
// returned by StartPTMySQLSummaryActionResult.Validate if the designated
// constraints aren't met.
type StartPTMySQLSummaryActionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTMySQLSummaryActionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTMySQLSummaryActionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTMySQLSummaryActionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTMySQLSummaryActionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTMySQLSummaryActionResultValidationError) ErrorName() string {
	return "StartPTMySQLSummaryActionResultValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTMySQLSummaryActionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTMySQLSummaryActionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTMySQLSummaryActionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTMySQLSummaryActionResultValidationError{}

// Validate checks the field values on StartPTSummaryActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTSummaryActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTSummaryActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTSummaryActionRequestMultiError, or nil if none found.
func (m *StartPTSummaryActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTSummaryActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PmmAgentId

	// no validation rules for NodeId

	if len(errors) > 0 {
		return StartPTSummaryActionRequestMultiError(errors)
	}

	return nil
}

// StartPTSummaryActionRequestMultiError is an error wrapping multiple
// validation errors returned by StartPTSummaryActionRequest.ValidateAll() if
// the designated constraints aren't met.
type StartPTSummaryActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTSummaryActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTSummaryActionRequestMultiError) AllErrors() []error { return m }

// StartPTSummaryActionRequestValidationError is the validation error returned
// by StartPTSummaryActionRequest.Validate if the designated constraints
// aren't met.
type StartPTSummaryActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTSummaryActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTSummaryActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTSummaryActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTSummaryActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTSummaryActionRequestValidationError) ErrorName() string {
	return "StartPTSummaryActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTSummaryActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTSummaryActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTSummaryActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTSummaryActionRequestValidationError{}

// Validate checks the field values on StartPTSummaryActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPTSummaryActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPTSummaryActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPTSummaryActionResponseMultiError, or nil if none found.
func (m *StartPTSummaryActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPTSummaryActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	// no validation rules for PmmAgentId

	if len(errors) > 0 {
		return StartPTSummaryActionResponseMultiError(errors)
	}

	return nil
}

// StartPTSummaryActionResponseMultiError is an error wrapping multiple
// validation errors returned by StartPTSummaryActionResponse.ValidateAll() if
// the designated constraints aren't met.
type StartPTSummaryActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPTSummaryActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPTSummaryActionResponseMultiError) AllErrors() []error { return m }

// StartPTSummaryActionResponseValidationError is the validation error returned
// by StartPTSummaryActionResponse.Validate if the designated constraints
// aren't met.
type StartPTSummaryActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPTSummaryActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPTSummaryActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPTSummaryActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPTSummaryActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPTSummaryActionResponseValidationError) ErrorName() string {
	return "StartPTSummaryActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPTSummaryActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPTSummaryActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPTSummaryActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPTSummaryActionResponseValidationError{}

// Validate checks the field values on CancelActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelActionRequestMultiError, or nil if none found.
func (m *CancelActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActionId()) < 1 {
		err := CancelActionRequestValidationError{
			field:  "ActionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelActionRequestMultiError(errors)
	}

	return nil
}

// CancelActionRequestMultiError is an error wrapping multiple validation
// errors returned by CancelActionRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelActionRequestMultiError) AllErrors() []error { return m }

// CancelActionRequestValidationError is the validation error returned by
// CancelActionRequest.Validate if the designated constraints aren't met.
type CancelActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelActionRequestValidationError) ErrorName() string {
	return "CancelActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelActionRequestValidationError{}

// Validate checks the field values on CancelActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelActionResponseMultiError, or nil if none found.
func (m *CancelActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelActionResponseMultiError(errors)
	}

	return nil
}

// CancelActionResponseMultiError is an error wrapping multiple validation
// errors returned by CancelActionResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelActionResponseMultiError) AllErrors() []error { return m }

// CancelActionResponseValidationError is the validation error returned by
// CancelActionResponse.Validate if the designated constraints aren't met.
type CancelActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelActionResponseValidationError) ErrorName() string {
	return "CancelActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelActionResponseValidationError{}

// Validate checks the field values on StartServiceActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartServiceActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartServiceActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartServiceActionRequestMultiError, or nil if none found.
func (m *StartServiceActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartServiceActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Action.(type) {
	case *StartServiceActionRequest_MysqlExplain:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlExplain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MysqlExplainJson:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplainJson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplainJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplainJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplainJson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlExplainJson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MysqlExplainTraditionalJson:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplainTraditionalJson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplainTraditionalJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlExplainTraditionalJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplainTraditionalJson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlExplainTraditionalJson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MysqlShowIndex:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowIndex()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowIndex()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlShowIndex",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MysqlShowCreateTable:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowCreateTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowCreateTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlShowCreateTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MysqlShowTableStatus:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowTableStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowTableStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MysqlShowTableStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowTableStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MysqlShowTableStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_PostgresShowCreateTable:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresShowCreateTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PostgresShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PostgresShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresShowCreateTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "PostgresShowCreateTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_PostgresShowIndex:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresShowIndex()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PostgresShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PostgresShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresShowIndex()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "PostgresShowIndex",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_MongodbExplain:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExplain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MongodbExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "MongodbExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExplain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "MongodbExplain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_PtMongodbSummary:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMongodbSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtMongodbSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtMongodbSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMongodbSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "PtMongodbSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_PtMysqlSummary:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMysqlSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtMysqlSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtMysqlSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMysqlSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "PtMysqlSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionRequest_PtPostgresSummary:
		if v == nil {
			err := StartServiceActionRequestValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtPostgresSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtPostgresSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionRequestValidationError{
						field:  "PtPostgresSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtPostgresSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionRequestValidationError{
					field:  "PtPostgresSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartServiceActionRequestMultiError(errors)
	}

	return nil
}

// StartServiceActionRequestMultiError is an error wrapping multiple validation
// errors returned by StartServiceActionRequest.ValidateAll() if the
// designated constraints aren't met.
type StartServiceActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartServiceActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartServiceActionRequestMultiError) AllErrors() []error { return m }

// StartServiceActionRequestValidationError is the validation error returned by
// StartServiceActionRequest.Validate if the designated constraints aren't met.
type StartServiceActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartServiceActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartServiceActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartServiceActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartServiceActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartServiceActionRequestValidationError) ErrorName() string {
	return "StartServiceActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartServiceActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartServiceActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartServiceActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartServiceActionRequestValidationError{}

// Validate checks the field values on StartServiceActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartServiceActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartServiceActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartServiceActionResponseMultiError, or nil if none found.
func (m *StartServiceActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartServiceActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Action.(type) {
	case *StartServiceActionResponse_MysqlExplain:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlExplain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MysqlExplainJson:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplainJson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplainJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplainJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplainJson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlExplainJson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MysqlExplainTraditionalJson:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlExplainTraditionalJson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplainTraditionalJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlExplainTraditionalJson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlExplainTraditionalJson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlExplainTraditionalJson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MysqlShowIndex:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowIndex()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowIndex()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlShowIndex",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MysqlShowCreateTable:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowCreateTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowCreateTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlShowCreateTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MysqlShowTableStatus:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlShowTableStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowTableStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MysqlShowTableStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlShowTableStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MysqlShowTableStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_PostgresqlShowCreateTable:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlShowCreateTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PostgresqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PostgresqlShowCreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlShowCreateTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "PostgresqlShowCreateTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_PostgresqlShowIndex:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresqlShowIndex()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PostgresqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PostgresqlShowIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresqlShowIndex()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "PostgresqlShowIndex",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_MongodbExplain:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbExplain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MongodbExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "MongodbExplain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbExplain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "MongodbExplain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_PtMongodbSummary:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMongodbSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtMongodbSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtMongodbSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMongodbSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "PtMongodbSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_PtMysqlSummary:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtMysqlSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtMysqlSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtMysqlSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtMysqlSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "PtMysqlSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartServiceActionResponse_PtPostgresSummary:
		if v == nil {
			err := StartServiceActionResponseValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPtPostgresSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtPostgresSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartServiceActionResponseValidationError{
						field:  "PtPostgresSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPtPostgresSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartServiceActionResponseValidationError{
					field:  "PtPostgresSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartServiceActionResponseMultiError(errors)
	}

	return nil
}

// StartServiceActionResponseMultiError is an error wrapping multiple
// validation errors returned by StartServiceActionResponse.ValidateAll() if
// the designated constraints aren't met.
type StartServiceActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartServiceActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartServiceActionResponseMultiError) AllErrors() []error { return m }

// StartServiceActionResponseValidationError is the validation error returned
// by StartServiceActionResponse.Validate if the designated constraints aren't met.
type StartServiceActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartServiceActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartServiceActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartServiceActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartServiceActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartServiceActionResponseValidationError) ErrorName() string {
	return "StartServiceActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartServiceActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartServiceActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartServiceActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartServiceActionResponseValidationError{}
