// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: uievents/v1/server.proto

package uieventsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NotificationEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotificationEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationEventMultiError, or nil if none found.
func (m *NotificationEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Location

	// no validation rules for LocationParams

	if len(errors) > 0 {
		return NotificationEventMultiError(errors)
	}

	return nil
}

// NotificationEventMultiError is an error wrapping multiple validation errors
// returned by NotificationEvent.ValidateAll() if the designated constraints
// aren't met.
type NotificationEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventMultiError) AllErrors() []error { return m }

// NotificationEventValidationError is the validation error returned by
// NotificationEvent.Validate if the designated constraints aren't met.
type NotificationEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventValidationError) ErrorName() string {
	return "NotificationEventValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventValidationError{}

// Validate checks the field values on FetchingEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchingEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchingEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchingEventMultiError, or
// nil if none found.
func (m *FetchingEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchingEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Component

	// no validation rules for LoadTime

	// no validation rules for Location

	// no validation rules for LocationParams

	if len(errors) > 0 {
		return FetchingEventMultiError(errors)
	}

	return nil
}

// FetchingEventMultiError is an error wrapping multiple validation errors
// returned by FetchingEvent.ValidateAll() if the designated constraints
// aren't met.
type FetchingEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchingEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchingEventMultiError) AllErrors() []error { return m }

// FetchingEventValidationError is the validation error returned by
// FetchingEvent.Validate if the designated constraints aren't met.
type FetchingEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchingEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchingEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchingEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchingEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchingEventValidationError) ErrorName() string { return "FetchingEventValidationError" }

// Error satisfies the builtin error interface
func (e FetchingEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchingEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchingEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchingEventValidationError{}

// Validate checks the field values on DashboardUsageEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardUsageEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardUsageEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardUsageEventMultiError, or nil if none found.
func (m *DashboardUsageEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardUsageEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Title

	// no validation rules for LoadTime

	// no validation rules for Location

	// no validation rules for LocationParams

	if len(errors) > 0 {
		return DashboardUsageEventMultiError(errors)
	}

	return nil
}

// DashboardUsageEventMultiError is an error wrapping multiple validation
// errors returned by DashboardUsageEvent.ValidateAll() if the designated
// constraints aren't met.
type DashboardUsageEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardUsageEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardUsageEventMultiError) AllErrors() []error { return m }

// DashboardUsageEventValidationError is the validation error returned by
// DashboardUsageEvent.Validate if the designated constraints aren't met.
type DashboardUsageEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardUsageEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardUsageEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardUsageEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardUsageEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardUsageEventValidationError) ErrorName() string {
	return "DashboardUsageEventValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardUsageEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardUsageEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardUsageEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardUsageEventValidationError{}

// Validate checks the field values on UserFlowEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFlowEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFlowEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFlowEventMultiError, or
// nil if none found.
func (m *UserFlowEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFlowEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FlowId

	// no validation rules for StoryId

	// no validation rules for Event

	// no validation rules for Params

	if len(errors) > 0 {
		return UserFlowEventMultiError(errors)
	}

	return nil
}

// UserFlowEventMultiError is an error wrapping multiple validation errors
// returned by UserFlowEvent.ValidateAll() if the designated constraints
// aren't met.
type UserFlowEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFlowEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFlowEventMultiError) AllErrors() []error { return m }

// UserFlowEventValidationError is the validation error returned by
// UserFlowEvent.Validate if the designated constraints aren't met.
type UserFlowEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFlowEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFlowEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFlowEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFlowEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFlowEventValidationError) ErrorName() string { return "UserFlowEventValidationError" }

// Error satisfies the builtin error interface
func (e UserFlowEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFlowEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFlowEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFlowEventValidationError{}

// Validate checks the field values on StoreRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreRequestMultiError, or
// nil if none found.
func (m *StoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFetching() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("Fetching[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("Fetching[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreRequestValidationError{
					field:  fmt.Sprintf("Fetching[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDashboardUsage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("DashboardUsage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("DashboardUsage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreRequestValidationError{
					field:  fmt.Sprintf("DashboardUsage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserFlowEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("UserFlowEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreRequestValidationError{
						field:  fmt.Sprintf("UserFlowEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreRequestValidationError{
					field:  fmt.Sprintf("UserFlowEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StoreRequestMultiError(errors)
	}

	return nil
}

// StoreRequestMultiError is an error wrapping multiple validation errors
// returned by StoreRequest.ValidateAll() if the designated constraints aren't met.
type StoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreRequestMultiError) AllErrors() []error { return m }

// StoreRequestValidationError is the validation error returned by
// StoreRequest.Validate if the designated constraints aren't met.
type StoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreRequestValidationError) ErrorName() string { return "StoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e StoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreRequestValidationError{}

// Validate checks the field values on StoreResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreResponseMultiError, or
// nil if none found.
func (m *StoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreResponseMultiError(errors)
	}

	return nil
}

// StoreResponseMultiError is an error wrapping multiple validation errors
// returned by StoreResponse.ValidateAll() if the designated constraints
// aren't met.
type StoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreResponseMultiError) AllErrors() []error { return m }

// StoreResponseValidationError is the validation error returned by
// StoreResponse.Validate if the designated constraints aren't met.
type StoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreResponseValidationError) ErrorName() string { return "StoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e StoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreResponseValidationError{}
