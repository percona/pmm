syntax = "proto3";

package jobs;

option go_package = "api/jobspb;jobspb";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

// StartJob asks pmm-agent to start job.
message StartJob {
  // Echo is a simple echo job that can be delayed.
  message Echo {
    string message = 1;
    google.protobuf.Duration delay = 2;
  }
  // Timeout for the job.
  google.protobuf.Duration timeout = 1;
  oneof job {
    Echo echo = 10;
  }
}

// StopJob asks pmm-agent to stop job.
message StopJob {}

// JobResult represents job result.
message JobResult {
  // Error contains job error message.
  message Error {
    string message = 1;
  }
  // Echo contains result for echo job.
  message Echo {
    string message = 1;
  }
  google.protobuf.Timestamp timestamp = 1;
  oneof result {
    Error error = 10;
    Echo echo = 11;
  }
}

// JobProgress represents job progress messages like percentage of completion, status updates, etc.
message JobProgress {
  // Echo contains echo job status update.
  message Echo {
    string status = 1;
  }
  google.protobuf.Timestamp timestamp = 1;
  oneof result {
    Echo echo = 10;
  }
}

// AgentMessage is a container for the agent messages.
message AgentMessage {
  string job_id = 1;
  google.rpc.Status status = 2;
  oneof payload {
    JobResult job_result = 10;
    JobProgress job_progress = 11;
  }
}

// ServerMessage is a container for the server messages.
message ServerMessage {
  string job_id = 1;
  google.rpc.Status status = 2;
  oneof payload {
    StartJob start_job = 11;
    StopJob stop_job = 12;
  }
}

// Jobs provides asynchronous API for long running jobs execution on pmm-agent side.
service Jobs {
  // Connect establishes two-way communication channel between pmm-agent and pmm-managed.
  rpc Connect(stream AgentMessage) returns (stream ServerMessage);
}
