syntax = "proto3";

package inventory;

// This option is used to set the default error response for all Swagger APIs generated from this file.
// See also header.json.
// It has to be copy&pasted into each file.
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default"
    value: {
      description: "An error response."
      schema: {
        json_schema: {
          ref: "#/definitions/inventorypbErrorResponse"
        }
      }
    }
  }
};
option go_package = "inventorypb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/agent_status.proto";
import "protoc-gen-swagger/options/annotations.proto";

// AgentType describes supported Agent types.
enum AgentType {
  AGENT_TYPE_INVALID = 0;
  PMM_AGENT = 1;
  NODE_EXPORTER = 2;
  MYSQLD_EXPORTER = 3;
  MONGODB_EXPORTER = 4;
  POSTGRES_EXPORTER = 5;
  QAN_MYSQL_PERFSCHEMA_AGENT = 6;
  QAN_MYSQL_SLOWLOG_AGENT = 7;
  QAN_MONGODB_PROFILER_AGENT = 8;
  RDS_EXPORTER = 9;
  EXTERNAL_EXPORTER = 10;
}

// PMMAgent runs on Generic on Container Node.
message PMMAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2;
  //
  // Status fields below.
  //

  // True if Agent is running and connected to pmm-managed.
  bool connected = 3;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// NodeExporter runs on Generic on Container Node and exposes its metrics.
message NodeExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Actual Agent status.
  AgentStatus status = 4;
  // Listen port for scraping metrics.
  uint32 listen_port = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// MySQLdExporter runs on Generic or Container Node and exposes MySQL and AmazonRDSMySQL Service metrics.
message MySQLdExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MySQL username for scraping metrics.
  string username = 4;
  // MySQL password for scraping metrics.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
message MongoDBExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MongoDB username for scraping metrics.
  string username = 4;
  // MongoDB password for scraping metrics.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
message PostgresExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // PostgreSQL username for scraping metrics.
  string username = 4;
  // PostgreSQL password for scraping metrics.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
message QANMySQLPerfSchemaAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MySQL username for getting performance data.
  string username = 4;
  // MySQL password for getting performance data.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
message QANMySQLSlowlogAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MySQL username for getting performance data.
  string username = 4;
  // MySQL password for getting performance data.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// QANMongoDBProfilerAgent runs within pmm-agent and sends MongoDB Query Analytics data to the PMM Server.
message QANMongoDBProfilerAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Service identifier.
  string service_id = 3;
  // MongoDB username for getting profiler data.
  string username = 4;
  // MongoDB password for getting profiler data.
  string password = 5;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 6;
  // Actual Agent status.
  AgentStatus status = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// RDSExporter runs on Generic or Container Node and exposes RemoteAmazonRDS Node and AmazonRDSMySQL Service metrics.
message RDSExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // A list of Service identifiers (Node identifiers are extracted from Services).
  repeated string service_ids = 3;
  // TODO AWS credentials

  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool enabled = 4;

  // Actual Agent status.
  AgentStatus status = 5;
  // Listen port for scraping metrics.
  uint32 listen_port = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// ExternalExporter does not run on any Inventory Node.
message ExternalExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // URL for scraping metrics.
  string metrics_url = 2;
  //
  // Status fields below.
  //

  // Desired Agent status: enabled (false) or disabled (true).
  // TODO https://jira.percona.com/browse/PMM-3470
  // bool disabled = 3;

  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// List

message ListAgentsRequest {
  oneof filter {
    // Return only Agents started by this pmm-agent.
    string pmm_agent_id = 1;
    // Return only Agents that provide insights for that Node.
    string node_id = 2;
    // Return only Agents that provide insights for that Service.
    string service_id = 3;
  }
}

message ListAgentsResponse {
  repeated PMMAgent pmm_agent = 1;
  repeated NodeExporter node_exporter = 2;
  repeated MySQLdExporter mysqld_exporter = 3;
  repeated MongoDBExporter mongodb_exporter = 4;
  repeated PostgresExporter postgres_exporter = 5;
  repeated QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 6;
  repeated QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 7;
  repeated QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 8;
  repeated RDSExporter rds_exporter = 9;
  repeated ExternalExporter external_exporter = 10;
}

// Get

message GetAgentRequest {
  // Unique randomly generated instance identifier.
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetAgentResponse {
  oneof agent {
    PMMAgent pmm_agent = 1;
    NodeExporter node_exporter = 2;
    MySQLdExporter mysqld_exporter = 3;
    MongoDBExporter mongodb_exporter = 4;
    PostgresExporter postgres_exporter = 5;
    QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 6;
    QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 7;
    QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 8;
    RDSExporter rds_exporter = 9;
    ExternalExporter external_exporter = 10;
  }
}

// Add/Change PMMAgent

message AddPMMAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddPMMAgentResponse {
  PMMAgent pmm_agent = 1;
}

message ChangePMMAgentRequest {}

message ChangePMMAgentResponse {
  PMMAgent pmm_agent = 1;
}

// Add/Change NodeExporter

message AddNodeExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddNodeExporterResponse {
  NodeExporter node_exporter = 1;
}

message ChangeNodeExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeNodeExporterResponse {
  NodeExporter node_exporter = 1;
}

// Add/Change MySQLdExporter

message AddMySQLdExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for scraping metrics.
  string username = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for scraping metrics.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddMySQLdExporterResponse {
  MySQLdExporter mysqld_exporter = 1;
}

message ChangeMySQLdExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeMySQLdExporterResponse {
  MySQLdExporter mysqld_exporter = 1;
}

// Add/Change MongoDBExporter

message AddMongoDBExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MongoDB username for scraping metrics.
  string username = 4;
  // MongoDB password for scraping metrics.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddMongoDBExporterResponse {
  MongoDBExporter mongodb_exporter = 1;
}

message ChangeMongoDBExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeMongoDBExporterResponse {
  MongoDBExporter mongodb_exporter = 1;
}

// Add/Change PostgresExporter

message AddPostgresExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL username for scraping metrics.
  string username = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL password for scraping metrics.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddPostgresExporterResponse {
  PostgresExporter postgres_exporter = 1;
}

message ChangePostgresExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangePostgresExporterResponse {
  PostgresExporter postgres_exporter = 1;
}

// Add/Change QANMySQLPerfSchemaAgent

message AddQANMySQLPerfSchemaAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for getting performance data.
  string username = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for getting performance data.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddQANMySQLPerfSchemaAgentResponse {
  QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 1;
}

message ChangeQANMySQLPerfSchemaAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeQANMySQLPerfSchemaAgentResponse {
  QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 1;
}

// Add/Change QANMySQLSlowlogAgent

message AddQANMySQLSlowlogAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for getting slowlog data.
  string username = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for getting slowlog data.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddQANMySQLSlowlogAgentResponse {
  QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 1;
}

message ChangeQANMySQLSlowlogAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeQANMySQLSlowlogAgentResponse {
  QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 1;
}

// Add/Change QANMongoDBProfilerAgent

message AddQANMongoDBProfilerAgentRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MongoDB username for getting profile data.
  string username = 4;
  // MongoDB password for getting profile data.
  string password = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddQANMongoDBProfilerAgentResponse {
  QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 1;
}

message ChangeQANMongoDBProfilerAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Enable or disable this Agent.
  oneof change_disabled {
    bool enabled = 2;
    bool disabled = 3;
  }
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 4;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 5;
}

message ChangeQANMongoDBProfilerAgentResponse {
  QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 1;
}

// Add/Change RDSExporter

message AddRDSExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // A list of Service identifiers (Node identifiers are extracted from Services).
  repeated string service_ids = 3;
  //
  // TODO AWS credentials
  //

  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddRDSExporterResponse {
  RDSExporter rds_exporter = 1;
}

message ChangeRDSExporterRequest {}

message ChangeRDSExporterResponse {
  RDSExporter rds_exporter = 1;
}

// Add/Change ExternalExporter

message AddExternalExporterRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // URL for scraping metrics.
  string metrics_url = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddExternalExporterResponse {
  ExternalExporter external_exporter = 1;
}

message ChangeExternalExporterRequest {}

message ChangeExternalExporterResponse {
  ExternalExporter external_exporter = 1;
}

// Remove

message RemoveAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message RemoveAgentResponse {}

// Agents service provides public methods for managing Agents.
service Agents {
  // ListAgents returns a list of all Agents.
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/List"
      body: "*"
    };
  }
  // GetAgent returns a single Agent by ID.
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Get"
      body: "*"
    };
  }
  // AddPMMAgent adds pmm-agent Agent.
  rpc AddPMMAgent(AddPMMAgentRequest) returns (AddPMMAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddPMMAgent"
      body: "*"
    };
  }
  // ChangePMMAgent changes pmm-agent Agent.
  rpc ChangePMMAgent(ChangePMMAgentRequest) returns (ChangePMMAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangePMMAgent"
      body: "*"
    };
  }
  // AddNodeExporter adds node_exporter Agent.
  rpc AddNodeExporter(AddNodeExporterRequest) returns (AddNodeExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddNodeExporter"
      body: "*"
    };
  }
  // ChangeNodeExporter changes node_exporter Agent.
  rpc ChangeNodeExporter(ChangeNodeExporterRequest) returns (ChangeNodeExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeNodeExporter"
      body: "*"
    };
  }
  // AddMySQLdExporter adds mysqld_exporter Agent.
  rpc AddMySQLdExporter(AddMySQLdExporterRequest) returns (AddMySQLdExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMySQLdExporter"
      body: "*"
    };
  }
  // ChangeMySQLdExporter changes mysqld_exporter Agent.
  rpc ChangeMySQLdExporter(ChangeMySQLdExporterRequest) returns (ChangeMySQLdExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeMySQLdExporter"
      body: "*"
    };
  }
  // AddMongoDBExporter adds mongodb_exporter Agent.
  rpc AddMongoDBExporter(AddMongoDBExporterRequest) returns (AddMongoDBExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMongoDBExporter"
      body: "*"
    };
  }
  // ChangeMongoDBExporter changes mongodb_exporter Agent.
  rpc ChangeMongoDBExporter(ChangeMongoDBExporterRequest) returns (ChangeMongoDBExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeMongoDBExporter"
      body: "*"
    };
  }
  // AddPostgresExporter adds postgres_exporter Agent.
  rpc AddPostgresExporter(AddPostgresExporterRequest) returns (AddPostgresExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddPostgresExporter"
      body: "*"
    };
  }
  // ChangePostgresExporter changes postgres_exporter Agent.
  rpc ChangePostgresExporter(ChangePostgresExporterRequest) returns (ChangePostgresExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangePostgresExporter"
      body: "*"
    };
  }
  // AddQANMySQLPerfSchemaAgent adds MySQL PerfSchema QAN Agent.
  rpc AddQANMySQLPerfSchemaAgent(AddQANMySQLPerfSchemaAgentRequest) returns (AddQANMySQLPerfSchemaAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMySQLPerfSchemaAgent"
      body: "*"
    };
  }
  // ChangeQANMySQLPerfSchemaAgent changes MySQL PerfSchema QAN Agent.
  rpc ChangeQANMySQLPerfSchemaAgent(ChangeQANMySQLPerfSchemaAgentRequest) returns (ChangeQANMySQLPerfSchemaAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMySQLPerfSchemaAgent"
      body: "*"
    };
  }
  // AddQANMySQLSlowlogAgent adds MySQL PerfSchema QAN Agent.
  rpc AddQANMySQLSlowlogAgent(AddQANMySQLSlowlogAgentRequest) returns (AddQANMySQLSlowlogAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMySQLSlowlogAgent"
      body: "*"
    };
  }
  // ChangeQANMySQLSlowlogAgent changes MySQL PerfSchema QAN Agent.
  rpc ChangeQANMySQLSlowlogAgent(ChangeQANMySQLSlowlogAgentRequest) returns (ChangeQANMySQLSlowlogAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMySQLSlowlogAgent"
      body: "*"
    };
  }
  // AddQANMongoDBProfilerAgent adds MongoDB Profiler QAN Agent.
  rpc AddQANMongoDBProfilerAgent(AddQANMongoDBProfilerAgentRequest) returns (AddQANMongoDBProfilerAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMongoDBProfilerAgent"
      body: "*"
    };
  }
  // ChangeQANMongoDBProfilerAgent changes MongoDB Profiler QAN Agent.
  rpc ChangeQANMongoDBProfilerAgent(ChangeQANMongoDBProfilerAgentRequest) returns (ChangeQANMongoDBProfilerAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMongoDBProfilerAgent"
      body: "*"
    };
  }
  // AddRDSExporter adds rds_exporter Agent.
  rpc AddRDSExporter(AddRDSExporterRequest) returns (AddRDSExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddRDSExporter"
      body: "*"
    };
  }
  // ChangeRDSExporter changes rds_exporter Agent.
  rpc ChangeRDSExporter(ChangeRDSExporterRequest) returns (ChangeRDSExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeRDSExporter"
      body: "*"
    };
  }
  // AddExternalExporter adds External Agent.
  rpc AddExternalExporter(AddExternalExporterRequest) returns (AddExternalExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddExternalExporter"
      body: "*"
    };
  }
  // ChangeExternalExporter changes External Agent.
  rpc ChangeExternalExporter(ChangeExternalExporterRequest) returns (ChangeExternalExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeExternalExporter"
      body: "*"
    };
  }
  // RemoveAgent removes Agent.
  rpc RemoveAgent(RemoveAgentRequest) returns (RemoveAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Remove"
      body: "*"
    };
  }
}
