syntax = "proto3";

package inventory;

option go_package = "inventorypb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "inventorypb/agent_status.proto";

// AgentType describes supported Agent types.
enum AgentType {
  AGENT_TYPE_INVALID = 0;
  PMM_AGENT = 1;
  NODE_EXPORTER = 2;
  MYSQLD_EXPORTER = 3;
  MONGODB_EXPORTER = 4;
  POSTGRES_EXPORTER = 5;
  PROXYSQL_EXPORTER = 6;
  QAN_MYSQL_PERFSCHEMA_AGENT = 7;
  QAN_MYSQL_SLOWLOG_AGENT = 8;
  QAN_MONGODB_PROFILER_AGENT = 9;
  QAN_POSTGRESQL_PGSTATEMENTS_AGENT = 10;
  RDS_EXPORTER = 11;
  EXTERNAL_EXPORTER = 12;
}

// PMMAgent runs on Generic or Container Node.
message PMMAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 3;
  //
  // Status fields below.
  //

  // True if Agent is running and connected to pmm-managed.
  bool connected = 4;
}

// NodeExporter runs on Generic or Container Node and exposes its metrics.
message NodeExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 4;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 5;
  // Listen port for scraping metrics.
  uint32 listen_port = 6;
}

// MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
message MySQLdExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // MySQL username for scraping metrics.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // Tablestats group collectors are disabled if there are more than that number of tables.
  // 0 means tablestats group collectors are always enabled (no limit).
  // Negative value means tablestats group collectors are always disabled.
  int32 tablestats_group_table_limit = 11;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 9;
  // Listen port for scraping metrics.
  uint32 listen_port = 10;
  // True if tablestats group collectors are currently disabled.
  bool tablestats_group_disabled = 12;
}

// MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
message MongoDBExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // MongoDB username for scraping metrics.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 9;
  // Listen port for scraping metrics.
  uint32 listen_port = 10;
}

// PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
message PostgresExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // PostgreSQL username for scraping metrics.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
  bool tls_skip_verify = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 9;
  // Listen port for scraping metrics.
  uint32 listen_port = 10;
}

// ProxySQLExporter runs on Generic or Container Node and exposes ProxySQL Service metrics.
message ProxySQLExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // ProxySQL username for scraping metrics.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 9;
  // Listen port for scraping metrics.
  uint32 listen_port = 10;
}

// QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
message QANMySQLPerfSchemaAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // MySQL username for getting performance data.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // True if query examples are disabled.
  bool query_examples_disabled = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 10;
}

// QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
message QANMySQLSlowlogAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // MySQL username for getting performance data.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // True if query examples are disabled.
  bool query_examples_disabled = 8;
  // Slowlog file is rotated at this size if > 0.
  int64 max_slowlog_file_size = 9;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 11;
}

// QANMongoDBProfilerAgent runs within pmm-agent and sends MongoDB Query Analytics data to the PMM Server.
message QANMongoDBProfilerAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // MongoDB username for getting profiler data.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // True if query examples are disabled.
  // bool query_examples_disabled = 8; TODO https://jira.percona.com/browse/PMM-4650

  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 10;
}

// QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
message QANPostgreSQLPgStatementsAgent {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // PostgreSQL username for getting pg stat statements data.
  string username = 5;
  // Use TLS for database connections.
  bool tls = 6;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  //
  // Status fields below.
  //

  // Actual Agent status.
  AgentStatus status = 9;
}

// RDSExporter runs on Generic or Container Node and exposes RemoteRDS Node metrics.
message RDSExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 2;
  // Desired Agent status: enabled (false) or disabled (true).
  bool disabled = 3;
  // Node identifier.
  string node_id = 4;
  // AWS Access Key.
  string aws_access_key = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 6;
  //
  // Status fields below.
  //

  // Actual Agent status (the same for several configurations).
  AgentStatus status = 7;
  // Listen port for scraping metrics (the same for several configurations).
  uint32 listen_port = 8;
  //
  // Metric collections flags below.
  //

  // Basic metrics are disabled.
  bool basic_metrics_disabled = 9;
  // Enhanced metrics are disabled.
  bool enhanced_metrics_disabled = 10;
}

// ExternalExporter runs on any Node type, including Remote Node.
message ExternalExporter {
  // Unique randomly generated instance identifier.
  string agent_id = 1;
  // Node identifier where this instance runs.
  string runs_on_node_id = 2;
  // If disabled, metrics from this exporter will not be collected.
  bool disabled = 3;
  // Service identifier.
  string service_id = 4;
  // HTTP basic auth username for collecting metrics.
  string username = 5;
  // Scheme to generate URI to exporter metrics endpoints.
  string scheme = 6;
  // Path under which metrics are exposed, used to generate URI.
  string metrics_path = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
  // Listen port for scraping metrics.
  uint32 listen_port = 8;
}

// ChangeCommonAgentParams contains parameters that can be changed for all Agents.
message ChangeCommonAgentParams {
  // Enable this Agent. Can't be used with disabled.
  bool enable = 1;
  // Disable this Agent. Can't be used with enabled.
  bool disable = 2;
  // Replace all custom user-assigned labels.
  map<string, string> custom_labels = 3;
  // Remove all custom user-assigned labels.
  bool remove_custom_labels = 4;
}

// List

message ListAgentsRequest {
  // Return only Agents started by this pmm-agent.
  // Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
  string pmm_agent_id = 1;
  // Return only Agents that provide insights for that Node.
  // Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
  string node_id = 2;
  // Return only Agents that provide insights for that Service.
  // Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
  string service_id = 3;
  // Do not use yet.
  // TODO https://jira.percona.com/browse/PMM-5112
  AgentType agent_type = 4;
}

message ListAgentsResponse {
  repeated PMMAgent pmm_agent = 1;
  repeated NodeExporter node_exporter = 2;
  repeated MySQLdExporter mysqld_exporter = 3;
  repeated MongoDBExporter mongodb_exporter = 4;
  repeated PostgresExporter postgres_exporter = 5;
  repeated ProxySQLExporter proxysql_exporter = 6;
  repeated QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 7;
  repeated QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 8;
  repeated QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 9;
  repeated QANPostgreSQLPgStatementsAgent qan_postgresql_pgstatements_agent = 10;
  repeated RDSExporter rds_exporter = 11;
  repeated ExternalExporter external_exporter = 12;
}

// Get

message GetAgentRequest {
  // Unique randomly generated instance identifier.
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetAgentResponse {
  oneof agent {
    PMMAgent pmm_agent = 1;
    NodeExporter node_exporter = 2;
    MySQLdExporter mysqld_exporter = 3;
    MongoDBExporter mongodb_exporter = 4;
    PostgresExporter postgres_exporter = 5;
    ProxySQLExporter proxysql_exporter = 6;
    QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 7;
    QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 8;
    QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 9;
    QANPostgreSQLPgStatementsAgent qan_postgresql_pgstatements_agent = 10;
    RDSExporter rds_exporter = 11;
    ExternalExporter external_exporter = 12;
  }
}

// Add PMMAgent

message AddPMMAgentRequest {
  // Node identifier where this instance runs.
  string runs_on_node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 2;
}

message AddPMMAgentResponse {
  PMMAgent pmm_agent = 1;
}

// Add/Change NodeExporter

message AddNodeExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 2;
}

message AddNodeExporterResponse {
  NodeExporter node_exporter = 1;
}

message ChangeNodeExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeNodeExporterResponse {
  NodeExporter node_exporter = 1;
}

// Add/Change MySQLdExporter

message AddMySQLdExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for scraping metrics.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for scraping metrics.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Tablestats group collectors will be disabled if there are more than that number of tables.
  // 0 means tablestats group collectors are always enabled (no limit).
  // Negative value means tablestats group collectors are always disabled.
  int32 tablestats_group_table_limit = 9;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddMySQLdExporterResponse {
  MySQLdExporter mysqld_exporter = 1;
  // Actual table count at the moment of adding.
  int32 table_count = 2;
}

message ChangeMySQLdExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeMySQLdExporterResponse {
  MySQLdExporter mysqld_exporter = 1;
}

// Add/Change MongoDBExporter

message AddMongoDBExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MongoDB username for scraping metrics.
  string username = 3;
  // MongoDB password for scraping metrics.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddMongoDBExporterResponse {
  MongoDBExporter mongodb_exporter = 1;
}

message ChangeMongoDBExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeMongoDBExporterResponse {
  MongoDBExporter mongodb_exporter = 1;
}

// Add/Change PostgresExporter

message AddPostgresExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL username for scraping metrics.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL password for scraping metrics.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
  bool tls_skip_verify = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddPostgresExporterResponse {
  PostgresExporter postgres_exporter = 1;
}

message ChangePostgresExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangePostgresExporterResponse {
  PostgresExporter postgres_exporter = 1;
}

// Add/Change ProxySQLExporter

message AddProxySQLExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // ProxySQL username for scraping metrics.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // ProxySQL password for scraping metrics.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddProxySQLExporterResponse {
  ProxySQLExporter proxysql_exporter = 1;
}

message ChangeProxySQLExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeProxySQLExporterResponse {
  ProxySQLExporter proxysql_exporter = 1;
}

// Add/Change QANMySQLPerfSchemaAgent

message AddQANMySQLPerfSchemaAgentRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for getting performance data.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for getting performance data.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Disable query examples.
  bool disable_query_examples = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  // Skip connection check.
  bool skip_connection_check = 9;
}

message AddQANMySQLPerfSchemaAgentResponse {
  QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 1;
}

message ChangeQANMySQLPerfSchemaAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeQANMySQLPerfSchemaAgentResponse {
  QANMySQLPerfSchemaAgent qan_mysql_perfschema_agent = 1;
}

// Add/Change QANMySQLSlowlogAgent

message AddQANMySQLSlowlogAgentRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL username for getting slowlog data.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MySQL password for getting slowlog data.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Disable query examples.
  bool disable_query_examples = 7;
  // Rotate slowlog file at this size if > 0.
  // Use zero or negative value to disable rotation.
  int64 max_slowlog_file_size = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
  // Skip connection check.
  bool skip_connection_check = 10;
}

message AddQANMySQLSlowlogAgentResponse {
  QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 1;
}

message ChangeQANMySQLSlowlogAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeQANMySQLSlowlogAgentResponse {
  QANMySQLSlowlogAgent qan_mysql_slowlog_agent = 1;
}

// Add/Change QANMongoDBProfilerAgent

message AddQANMongoDBProfilerAgentRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // MongoDB username for getting profile data.
  string username = 3;
  // MongoDB password for getting profile data.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddQANMongoDBProfilerAgentResponse {
  QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 1;
}

message ChangeQANMongoDBProfilerAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeQANMongoDBProfilerAgentResponse {
  QANMongoDBProfilerAgent qan_mongodb_profiler_agent = 1;
}

// Add/Change QANPostgreSQLPgStatementsAgent

message AddQANPostgreSQLPgStatementsAgentRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL username for getting pg stat statements data.
  string username = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // PostgreSQL password for getting pg stat statements data.
  string password = 4;
  // Use TLS for database connections.
  bool tls = 5;
  // Skip TLS certificate and hostname validation.
  bool tls_skip_verify = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // Skip connection check.
  bool skip_connection_check = 8;
}

message AddQANPostgreSQLPgStatementsAgentResponse {
  QANPostgreSQLPgStatementsAgent qan_postgresql_pgstatements_agent = 1;
}

message ChangeQANPostgreSQLPgStatementsAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeQANPostgreSQLPgStatementsAgentResponse {
  QANPostgreSQLPgStatementsAgent qan_postgresql_pgstatements_agent = 1;
}

// Add/Change RDSExporter

message AddRDSExporterRequest {
  // The pmm-agent identifier which runs this instance.
  string pmm_agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node identifier.
  string node_id = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // AWS Access Key.
  string aws_access_key = 3;
  // AWS Secret Key.
  string aws_secret_key = 4;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 5;
  // Skip connection check.
  bool skip_connection_check = 6;
  // Disable basic metrics.
  bool disable_basic_metrics = 7;
  // Disable enhanced metrics.
  bool disable_enhanced_metrics = 8;
}

message AddRDSExporterResponse {
  RDSExporter rds_exporter = 1;
}

message ChangeRDSExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeRDSExporterResponse {
  RDSExporter rds_exporter = 1;
}

// Add/Change ExternalExporter

message AddExternalExporterRequest {
  // The node identifier where this instance is run.
  string runs_on_node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Service identifier.
  string service_id = 2;
  // HTTP basic auth username for collecting metrics.
  string username = 3;
  // HTTP basic auth password for collecting metrics.
  string password = 4;
  // Scheme to generate URI to exporter metrics endpoints(default: http).
  string scheme = 6;
  // Path under which metrics are exposed, used to generate URI(default: /metrics).
  string metrics_path = 7;
  // Listen port for scraping metrics.
  uint32 listen_port = 8 [
    (validator.field) = {
      int_gt: 0
      int_lt: 65536
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddExternalExporterResponse {
  ExternalExporter external_exporter = 1;
}

message ChangeExternalExporterRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  ChangeCommonAgentParams common = 2;
}

message ChangeExternalExporterResponse {
  ExternalExporter external_exporter = 1;
}

// Remove

message RemoveAgentRequest {
  string agent_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Remove agent with all dependencies.
  bool force = 2;
}

message RemoveAgentResponse {}

// Agents service provides public methods for managing Agents.
service Agents {
  // ListAgents returns a list of all Agents.
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/List"
      body: "*"
    };
  }
  // GetAgent returns a single Agent by ID.
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Get"
      body: "*"
    };
  }
  // AddPMMAgent adds pmm-agent Agent.
  rpc AddPMMAgent(AddPMMAgentRequest) returns (AddPMMAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddPMMAgent"
      body: "*"
    };
  }
  // AddNodeExporter adds node_exporter Agent.
  rpc AddNodeExporter(AddNodeExporterRequest) returns (AddNodeExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddNodeExporter"
      body: "*"
    };
  }
  // ChangeNodeExporter changes node_exporter Agent.
  rpc ChangeNodeExporter(ChangeNodeExporterRequest) returns (ChangeNodeExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeNodeExporter"
      body: "*"
    };
  }
  // AddMySQLdExporter adds mysqld_exporter Agent.
  rpc AddMySQLdExporter(AddMySQLdExporterRequest) returns (AddMySQLdExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMySQLdExporter"
      body: "*"
    };
  }
  // ChangeMySQLdExporter changes mysqld_exporter Agent.
  rpc ChangeMySQLdExporter(ChangeMySQLdExporterRequest) returns (ChangeMySQLdExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeMySQLdExporter"
      body: "*"
    };
  }
  // AddMongoDBExporter adds mongodb_exporter Agent.
  rpc AddMongoDBExporter(AddMongoDBExporterRequest) returns (AddMongoDBExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddMongoDBExporter"
      body: "*"
    };
  }
  // ChangeMongoDBExporter changes mongodb_exporter Agent.
  rpc ChangeMongoDBExporter(ChangeMongoDBExporterRequest) returns (ChangeMongoDBExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeMongoDBExporter"
      body: "*"
    };
  }
  // AddPostgresExporter adds postgres_exporter Agent.
  rpc AddPostgresExporter(AddPostgresExporterRequest) returns (AddPostgresExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddPostgresExporter"
      body: "*"
    };
  }
  // ChangePostgresExporter changes postgres_exporter Agent.
  rpc ChangePostgresExporter(ChangePostgresExporterRequest) returns (ChangePostgresExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangePostgresExporter"
      body: "*"
    };
  }
  // AddProxySQLExporter adds proxysql_exporter Agent.
  rpc AddProxySQLExporter(AddProxySQLExporterRequest) returns (AddProxySQLExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddProxySQLExporter"
      body: "*"
    };
  }
  // ChangeProxySQLExporter changes proxysql_exporter Agent.
  rpc ChangeProxySQLExporter(ChangeProxySQLExporterRequest) returns (ChangeProxySQLExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeProxySQLExporter"
      body: "*"
    };
  }
  // AddQANMySQLPerfSchemaAgent adds MySQL PerfSchema QAN Agent.
  rpc AddQANMySQLPerfSchemaAgent(AddQANMySQLPerfSchemaAgentRequest) returns (AddQANMySQLPerfSchemaAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMySQLPerfSchemaAgent"
      body: "*"
    };
  }
  // ChangeQANMySQLPerfSchemaAgent changes MySQL PerfSchema QAN Agent.
  rpc ChangeQANMySQLPerfSchemaAgent(ChangeQANMySQLPerfSchemaAgentRequest) returns (ChangeQANMySQLPerfSchemaAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMySQLPerfSchemaAgent"
      body: "*"
    };
  }
  // AddQANMySQLSlowlogAgent adds MySQL PerfSchema QAN Agent.
  rpc AddQANMySQLSlowlogAgent(AddQANMySQLSlowlogAgentRequest) returns (AddQANMySQLSlowlogAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMySQLSlowlogAgent"
      body: "*"
    };
  }
  // ChangeQANMySQLSlowlogAgent changes MySQL PerfSchema QAN Agent.
  rpc ChangeQANMySQLSlowlogAgent(ChangeQANMySQLSlowlogAgentRequest) returns (ChangeQANMySQLSlowlogAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMySQLSlowlogAgent"
      body: "*"
    };
  }
  // AddQANMongoDBProfilerAgent adds MongoDB Profiler QAN Agent.
  rpc AddQANMongoDBProfilerAgent(AddQANMongoDBProfilerAgentRequest) returns (AddQANMongoDBProfilerAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANMongoDBProfilerAgent"
      body: "*"
    };
  }
  // ChangeQANMongoDBProfilerAgent changes MongoDB Profiler QAN Agent.
  rpc ChangeQANMongoDBProfilerAgent(ChangeQANMongoDBProfilerAgentRequest) returns (ChangeQANMongoDBProfilerAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANMongoDBProfilerAgent"
      body: "*"
    };
  }
  // AddQANPostgreSQLPgStatementsAgent adds PostgreSQL Pg Stat Statements QAN Agent.
  rpc AddQANPostgreSQLPgStatementsAgent(AddQANPostgreSQLPgStatementsAgentRequest) returns (AddQANPostgreSQLPgStatementsAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddQANPostgreSQLPgStatementsAgent"
      body: "*"
    };
  }
  // ChangeQANPostgreSQLPgStatementsAgent changes PostgreSQL Pg Stat Statements QAN Agent.
  rpc ChangeQANPostgreSQLPgStatementsAgent(ChangeQANPostgreSQLPgStatementsAgentRequest) returns (ChangeQANPostgreSQLPgStatementsAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeQANPostgreSQLPgStatementsAgent"
      body: "*"
    };
  }
  // AddRDSExporter adds rds_exporter Agent.
  rpc AddRDSExporter(AddRDSExporterRequest) returns (AddRDSExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddRDSExporter"
      body: "*"
    };
  }
  // ChangeRDSExporter changes rds_exporter Agent.
  rpc ChangeRDSExporter(ChangeRDSExporterRequest) returns (ChangeRDSExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeRDSExporter"
      body: "*"
    };
  }
  // AddExternalExporter adds external_exporter Agent.
  rpc AddExternalExporter(AddExternalExporterRequest) returns (AddExternalExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/AddExternalExporter"
      body: "*"
    };
  }
  // ChangeExternalExporter changes external_exporter Agent.
  rpc ChangeExternalExporter(ChangeExternalExporterRequest) returns (ChangeExternalExporterResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/ChangeExternalExporter"
      body: "*"
    };
  }
  // RemoveAgent removes Agent.
  rpc RemoveAgent(RemoveAgentRequest) returns (RemoveAgentResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Agents/Remove"
      body: "*"
    };
  }
}
