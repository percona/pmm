syntax = "proto3";

package inventory;

option go_package = "inventorypb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";

// NodeType describes supported Node types.
enum NodeType {
  NODE_TYPE_INVALID = 0;
  GENERIC_NODE = 1;
  CONTAINER_NODE = 2;
  REMOTE_NODE = 3;
  REMOTE_RDS_NODE = 4;
}

// GenericNode represents a bare metal server or virtual machine.
message GenericNode {
  // Unique randomly generated instance identifier.
  string node_id = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2;
  // Node address (DNS name or IP).
  string address = 3;
  // Linux machine-id.
  string machine_id = 4;
  // Linux distribution name and version.
  string distro = 5;
  // Node model.
  string node_model = 6;
  // Node region.
  string region = 7;
  // Node availability zone.
  string az = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
}

// ContainerNode represents a Docker container.
message ContainerNode {
  // Unique randomly generated instance identifier.
  string node_id = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2;
  // Node address (DNS name or IP).
  string address = 3;
  // Linux machine-id of the Generic Node where this Container Node runs.
  string machine_id = 4;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 5;
  // Container name.
  string container_name = 6;
  // Node model.
  string node_model = 7;
  // Node region.
  string region = 8;
  // Node availability zone.
  string az = 9;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

// RemoteNode represents generic remote Node. It's a node where we don't run pmm-agents. Only external exporters can run on Remote Nodes.
message RemoteNode {
  // Unique randomly generated instance identifier.
  string node_id = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2;
  // Node address (DNS name or IP).
  string address = 3;
  // Node model.
  string node_model = 4;
  // Node region.
  string region = 5;
  // Node availability zone.
  string az = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
}

// RemoteRDSNode represents remote RDS Node. Agents can't run on Remote RDS Nodes.
message RemoteRDSNode {
  // Unique randomly generated instance identifier.
  string node_id = 1;
  // Unique across all Nodes user-defined name.
  string node_name = 2;
  // DB instance identifier.
  string address = 3;
  // Node model.
  string node_model = 4;
  // Node region.
  string region = 5;
  // Node availability zone.
  string az = 6;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 7;
  // TODO https://jira.percona.com/browse/PMM-4314
  // string az = 8;
  // string node_model = 9;

}

// List

message ListNodesRequest {
  // Do not use yet.
  // TODO https://jira.percona.com/browse/PMM-5112
  NodeType node_type = 1;
}

message ListNodesResponse {
  repeated GenericNode generic = 1;
  repeated ContainerNode container = 2;
  repeated RemoteNode remote = 3;
  repeated RemoteRDSNode remote_rds = 4;
}

// Get

message GetNodeRequest {
  // Unique randomly generated instance identifier.
  string node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetNodeResponse {
  oneof node {
    GenericNode generic = 1;
    ContainerNode container = 2;
    RemoteNode remote = 3;
    RemoteRDSNode remote_rds = 4;
  }
}

// Add Generic

message AddGenericNodeRequest {
  // Unique across all Nodes user-defined name.
  string node_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node address (DNS name or IP).
  string address = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id.
  string machine_id = 3;
  // Linux distribution name and version.
  string distro = 4;
  // Node model.
  string node_model = 5;
  // Node region.
  string region = 6;
  // Node availability zone.
  string az = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
}

message AddGenericNodeResponse {
  GenericNode generic = 1;
}

// Add Container

message AddContainerNodeRequest {
  // Unique across all Nodes user-defined name.
  string node_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node address (DNS name or IP).
  string address = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id of the Generic Node where this Container Node runs.
  string machine_id = 3;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 4;
  // Container name.
  string container_name = 5;
  // Node model.
  string node_model = 6;
  // Node region.
  string region = 7;
  // Node availability zone.
  string az = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
}

message AddContainerNodeResponse {
  ContainerNode container = 1;
}

// Add Remote

message AddRemoteNodeRequest {
  // Unique across all Nodes user-defined name.
  string node_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node address (DNS name or IP).
  string address = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node model.
  string node_model = 3;
  // Node region.
  string region = 4;
  // Node availability zone.
  string az = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 6;
}

message AddRemoteNodeResponse {
  RemoteNode remote = 1;
}

// Add Remote RDS

message AddRemoteRDSNodeRequest {
  // Unique across all Nodes user-defined name.
  string node_name = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // DB instance identifier.
  string address = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node model.
  string node_model = 3;
  // Node region.
  string region = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Node availability zone.
  string az = 5;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 6;
}

message AddRemoteRDSNodeResponse {
  RemoteRDSNode remote_rds = 1;
}

// Remove

message RemoveNodeRequest {
  // Unique randomly generated instance identifier.
  string node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Remove node with all dependencies.
  bool force = 2;
}

message RemoveNodeResponse {}

// Nodes service provides public methods for managing Nodes.
service Nodes {
  // ListNodes returns a list of all Nodes.
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/List"
      body: "*"
    };
  }
  // GetNode returns a single Node by ID.
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/Get"
      body: "*"
    };
  }
  // AddGenericNode adds generic Node.
  rpc AddGenericNode(AddGenericNodeRequest) returns (AddGenericNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddGeneric"
      body: "*"
    };
  }
  // AddContainerNode adds Container Node.
  rpc AddContainerNode(AddContainerNodeRequest) returns (AddContainerNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddContainer"
      body: "*"
    };
  }
  // AddRemoteNode adds remote Node.
  rpc AddRemoteNode(AddRemoteNodeRequest) returns (AddRemoteNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddRemote"
      body: "*"
    };
  }
  // AddRemoteRDSNode adds remote RDS Node.
  rpc AddRemoteRDSNode(AddRemoteRDSNodeRequest) returns (AddRemoteRDSNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddRemoteRDS"
      body: "*"
    };
  }
  // RemoveNode removes Node.
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/Remove"
      body: "*"
    };
  }
}
