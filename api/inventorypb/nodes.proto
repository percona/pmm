syntax = "proto3";

package inventory;

// This option is used to set the default error response for all Swagger APIs generated from this file.
// See also header.json.
// It has to be copy&pasted into each file.
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default"
    value: {
      description: "An error response."
      schema: {
        json_schema: {
          ref: "#/definitions/inventorypbErrorResponse"
        }
      }
    }
  }
};
option go_package = "inventorypb";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// NodeType describes supported Node types.
enum NodeType {
  NODE_TYPE_INVALID = 0;
  GENERIC_NODE = 1;
  CONTAINER_NODE = 2;
  REMOTE_NODE = 3;
  REMOTE_AMAZON_RDS_NODE = 4;
}

// GenericNode represents a bare metal server or virtual machine.
message GenericNode {
  // Unique randomly generated instance identifier. Can't be changed.
  string node_id = 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2;
  // Linux machine-id. Auto-detected and auto-updated.
  // Must be unique across all Generic Nodes if specified.
  string machine_id = 3;
  // Linux distribution name and version. Auto-detected and auto-updated.
  string distro = 4;
  // Node model. Auto-detected and auto-updated.
  string node_model = 5;
  // Node region. Auto-detected and auto-updated.
  string region = 6;
  // Node availability zone. Auto-detected and auto-updated.
  string az = 7;
  // Custom user-assigned labels. Can be changed.
  map<string, string> custom_labels = 8;
  // Address FIXME https://jira.percona.com/browse/PMM-3786
  string address = 42;
}

// ContainerNode represents a Docker container.
message ContainerNode {
  // Unique randomly generated instance identifier. Can't be changed.
  string node_id = 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2;
  // Linux machine-id of the Generic Node where this Container Node runs. Auto-detected and auto-updated.
  // If defined, Generic Node with that machine_id must exist.
  string machine_id = 3;
  // Container identifier. If specified, must be a unique Docker container identifier.
  // Auto-detected and auto-updated.
  string container_id = 4;
  // Container name. Auto-detected and auto-updated.
  string container_name = 5;
  // Node model. Auto-detected and auto-updated.
  string node_model = 6;
  // Node region. Auto-detected and auto-updated.
  string region = 7;
  // Node availability zone. Auto-detected and auto-updated.
  string az = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
  // Address FIXME https://jira.percona.com/browse/PMM-3786
  string address = 42;
}

// RemoteNode represents generic remote Node. Agents can't run on Remote Nodes.
message RemoteNode {
  // Unique randomly generated instance identifier. Can't be changed.
  string node_id = 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2;
  // Custom user-assigned labels. Can be changed.
  map<string, string> custom_labels = 10;
}

// RemoteAmazonRDSNode represents a Remote Node for Amazon RDS. Agents can't run on Remote Nodes.
message RemoteAmazonRDSNode {
  // Unique randomly generated instance identifier. Can't be changed.
  string node_id = 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2;
  // DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region. Can be changed.
  string instance = 3;
  // Unique across all RemoteAmazonRDS Nodes in combination with instance. Can't be changed.
  string region = 4;
  // Custom user-assigned labels. Can be changed.
  map<string, string> custom_labels = 10;
}

// List

message ListNodesRequest {}

message ListNodesResponse {
  repeated GenericNode generic = 1;
  repeated ContainerNode container = 2;
  repeated RemoteNode remote = 3;
  repeated RemoteAmazonRDSNode remote_amazon_rds = 4;
}

// Get

message GetNodeRequest {
  // Unique randomly generated instance identifier.
  string node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetNodeResponse {
  oneof node {
    GenericNode generic = 1;
    ContainerNode container = 2;
    RemoteNode remote = 3;
    RemoteAmazonRDSNode remote_amazon_rds = 4;
  }
}

// Add Generic

message AddGenericNodeRequest {
  // Unique randomly generated instance identifier. Can't be changed.
  reserved 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id. Auto-detected and auto-updated.
  // Must be unique across all Generic Nodes if specified.
  string machine_id = 3;
  // Linux distribution name and version. Auto-detected and auto-updated.
  string distro = 4;
  // Node model. Auto-detected and auto-updated.
  string node_model = 5;
  // Node region. Auto-detected and auto-updated.
  string region = 6;
  // Node availability zone. Auto-detected and auto-updated.
  string az = 7;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 8;
  // Address FIXME https://jira.percona.com/browse/PMM-3786
  string address = 42 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message AddGenericNodeResponse {
  GenericNode generic = 1;
}

// Add Container

message AddContainerNodeRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Linux machine-id of the Generic Node where this Container Node runs. Auto-detected and auto-updated.
  // If defined, Generic Node with that machine_id must exist.
  string machine_id = 3;
  // Container identifier. If specified, must be a unique Docker container identifier.
  string container_id = 4;
  // Container name.
  string container_name = 5;
  // Node model. Auto-detected and auto-updated.
  string node_model = 6;
  // Node region. Auto-detected and auto-updated.
  string region = 7;
  // Node availability zone. Auto-detected and auto-updated.
  string az = 8;
  // Custom user-assigned labels.
  map<string, string> custom_labels = 9;
  // Address FIXME https://jira.percona.com/browse/PMM-3786
  string address = 42 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message AddContainerNodeResponse {
  ContainerNode container = 1;
}

// Add Remote

message AddRemoteNodeRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddRemoteNodeResponse {
  RemoteNode remote = 1;
}

// Add RemoteAmazonRDS

message AddRemoteAmazonRDSNodeRequest {
  // Unique randomly generated instance identifier.
  reserved 1;
  // Unique across all Nodes user-defined name. Can't be changed.
  string node_name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region.
  string instance = 3 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Unique across all RemoteAmazonRDS Nodes in combination with instance.
  string region = 4 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Custom user-assigned labels.
  map<string, string> custom_labels = 10;
}

message AddRemoteAmazonRDSNodeResponse {
  RemoteAmazonRDSNode remote_amazon_rds = 1;
}

// Remove

message RemoveNodeRequest {
  // Unique randomly generated instance identifier.
  string node_id = 1 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message RemoveNodeResponse {}

// Nodes service provides public methods for managing Nodes.
service Nodes {
  // ListNodes returns a list of all Nodes.
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/List"
      body: "*"
    };
  }
  // GetNode returns a single Node by ID.
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/Get"
      body: "*"
    };
  }
  // AddGenericNode adds generic Node.
  rpc AddGenericNode(AddGenericNodeRequest) returns (AddGenericNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddGeneric"
      body: "*"
    };
  }
  // AddContainerNode adds Container Node.
  rpc AddContainerNode(AddContainerNodeRequest) returns (AddContainerNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddContainer"
      body: "*"
    };
  }
  // AddRemoteNode adds remote Node.
  rpc AddRemoteNode(AddRemoteNodeRequest) returns (AddRemoteNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddRemote"
      body: "*"
    };
  }
  // AddRemoteAmazonRDSNode adds Amazon (AWS) RDS remote Node.
  rpc AddRemoteAmazonRDSNode(AddRemoteAmazonRDSNodeRequest) returns (AddRemoteAmazonRDSNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/AddRemoteAmazonRDS"
      body: "*"
    };
  }
  // RemoveNode removes Node without any Agents and Services.
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse) {
    option (google.api.http) = {
      post: "/v1/inventory/Nodes/Remove"
      body: "*"
    };
  }
}
