// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventorypb/nodes.proto

package inventorypb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenericNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenericNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenericNodeMultiError, or
// nil if none found.
func (m *GenericNode) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Address

	// no validation rules for MachineId

	// no validation rules for Distro

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return GenericNodeMultiError(errors)
	}

	return nil
}

// GenericNodeMultiError is an error wrapping multiple validation errors
// returned by GenericNode.ValidateAll() if the designated constraints aren't met.
type GenericNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericNodeMultiError) AllErrors() []error { return m }

// GenericNodeValidationError is the validation error returned by
// GenericNode.Validate if the designated constraints aren't met.
type GenericNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericNodeValidationError) ErrorName() string { return "GenericNodeValidationError" }

// Error satisfies the builtin error interface
func (e GenericNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericNodeValidationError{}

// Validate checks the field values on ContainerNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerNodeMultiError, or
// nil if none found.
func (m *ContainerNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Address

	// no validation rules for MachineId

	// no validation rules for ContainerId

	// no validation rules for ContainerName

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return ContainerNodeMultiError(errors)
	}

	return nil
}

// ContainerNodeMultiError is an error wrapping multiple validation errors
// returned by ContainerNode.ValidateAll() if the designated constraints
// aren't met.
type ContainerNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerNodeMultiError) AllErrors() []error { return m }

// ContainerNodeValidationError is the validation error returned by
// ContainerNode.Validate if the designated constraints aren't met.
type ContainerNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerNodeValidationError) ErrorName() string { return "ContainerNodeValidationError" }

// Error satisfies the builtin error interface
func (e ContainerNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerNodeValidationError{}

// Validate checks the field values on RemoteNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoteNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoteNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoteNodeMultiError, or
// nil if none found.
func (m *RemoteNode) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoteNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Address

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return RemoteNodeMultiError(errors)
	}

	return nil
}

// RemoteNodeMultiError is an error wrapping multiple validation errors
// returned by RemoteNode.ValidateAll() if the designated constraints aren't met.
type RemoteNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoteNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoteNodeMultiError) AllErrors() []error { return m }

// RemoteNodeValidationError is the validation error returned by
// RemoteNode.Validate if the designated constraints aren't met.
type RemoteNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteNodeValidationError) ErrorName() string { return "RemoteNodeValidationError" }

// Error satisfies the builtin error interface
func (e RemoteNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteNodeValidationError{}

// Validate checks the field values on RemoteRDSNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoteRDSNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoteRDSNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoteRDSNodeMultiError, or
// nil if none found.
func (m *RemoteRDSNode) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoteRDSNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Address

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return RemoteRDSNodeMultiError(errors)
	}

	return nil
}

// RemoteRDSNodeMultiError is an error wrapping multiple validation errors
// returned by RemoteRDSNode.ValidateAll() if the designated constraints
// aren't met.
type RemoteRDSNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoteRDSNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoteRDSNodeMultiError) AllErrors() []error { return m }

// RemoteRDSNodeValidationError is the validation error returned by
// RemoteRDSNode.Validate if the designated constraints aren't met.
type RemoteRDSNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteRDSNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteRDSNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteRDSNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteRDSNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteRDSNodeValidationError) ErrorName() string { return "RemoteRDSNodeValidationError" }

// Error satisfies the builtin error interface
func (e RemoteRDSNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteRDSNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteRDSNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteRDSNodeValidationError{}

// Validate checks the field values on RemoteAzureDatabaseNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoteAzureDatabaseNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoteAzureDatabaseNode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoteAzureDatabaseNodeMultiError, or nil if none found.
func (m *RemoteAzureDatabaseNode) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoteAzureDatabaseNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for Address

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return RemoteAzureDatabaseNodeMultiError(errors)
	}

	return nil
}

// RemoteAzureDatabaseNodeMultiError is an error wrapping multiple validation
// errors returned by RemoteAzureDatabaseNode.ValidateAll() if the designated
// constraints aren't met.
type RemoteAzureDatabaseNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoteAzureDatabaseNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoteAzureDatabaseNodeMultiError) AllErrors() []error { return m }

// RemoteAzureDatabaseNodeValidationError is the validation error returned by
// RemoteAzureDatabaseNode.Validate if the designated constraints aren't met.
type RemoteAzureDatabaseNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteAzureDatabaseNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteAzureDatabaseNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteAzureDatabaseNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteAzureDatabaseNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteAzureDatabaseNodeValidationError) ErrorName() string {
	return "RemoteAzureDatabaseNodeValidationError"
}

// Error satisfies the builtin error interface
func (e RemoteAzureDatabaseNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteAzureDatabaseNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteAzureDatabaseNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteAzureDatabaseNodeValidationError{}

// Validate checks the field values on ListNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodesRequestMultiError, or nil if none found.
func (m *ListNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeType

	if len(errors) > 0 {
		return ListNodesRequestMultiError(errors)
	}

	return nil
}

// ListNodesRequestMultiError is an error wrapping multiple validation errors
// returned by ListNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodesRequestMultiError) AllErrors() []error { return m }

// ListNodesRequestValidationError is the validation error returned by
// ListNodesRequest.Validate if the designated constraints aren't met.
type ListNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesRequestValidationError) ErrorName() string { return "ListNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesRequestValidationError{}

// Validate checks the field values on ListNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodesResponseMultiError, or nil if none found.
func (m *ListNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGeneric() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Generic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Generic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesResponseValidationError{
					field:  fmt.Sprintf("Generic[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetContainer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesResponseValidationError{
					field:  fmt.Sprintf("Container[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRemote() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Remote[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("Remote[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesResponseValidationError{
					field:  fmt.Sprintf("Remote[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRemoteRds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("RemoteRds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("RemoteRds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesResponseValidationError{
					field:  fmt.Sprintf("RemoteRds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRemoteAzureDatabase() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("RemoteAzureDatabase[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodesResponseValidationError{
						field:  fmt.Sprintf("RemoteAzureDatabase[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesResponseValidationError{
					field:  fmt.Sprintf("RemoteAzureDatabase[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNodesResponseMultiError(errors)
	}

	return nil
}

// ListNodesResponseMultiError is an error wrapping multiple validation errors
// returned by ListNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodesResponseMultiError) AllErrors() []error { return m }

// ListNodesResponseValidationError is the validation error returned by
// ListNodesResponse.Validate if the designated constraints aren't met.
type ListNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesResponseValidationError) ErrorName() string {
	return "ListNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesResponseValidationError{}

// Validate checks the field values on GetNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeRequestMultiError,
// or nil if none found.
func (m *GetNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := GetNodeRequestValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNodeRequestMultiError(errors)
	}

	return nil
}

// GetNodeRequestMultiError is an error wrapping multiple validation errors
// returned by GetNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeRequestMultiError) AllErrors() []error { return m }

// GetNodeRequestValidationError is the validation error returned by
// GetNodeRequest.Validate if the designated constraints aren't met.
type GetNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRequestValidationError) ErrorName() string { return "GetNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRequestValidationError{}

// Validate checks the field values on GetNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeResponseMultiError, or nil if none found.
func (m *GetNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *GetNodeResponse_Generic:
		if v == nil {
			err := GetNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeneric()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetNodeResponse_Container:
		if v == nil {
			err := GetNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetNodeResponse_Remote:
		if v == nil {
			err := GetNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemote()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemote()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetNodeResponse_RemoteRds:
		if v == nil {
			err := GetNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteRds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  "RemoteRds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetNodeResponse_RemoteAzureDatabase:
		if v == nil {
			err := GetNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteAzureDatabase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "RemoteAzureDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeResponseValidationError{
						field:  "RemoteAzureDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteAzureDatabase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  "RemoteAzureDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetNodeResponseMultiError(errors)
	}

	return nil
}

// GetNodeResponseMultiError is an error wrapping multiple validation errors
// returned by GetNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeResponseMultiError) AllErrors() []error { return m }

// GetNodeResponseValidationError is the validation error returned by
// GetNodeResponse.Validate if the designated constraints aren't met.
type GetNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeResponseValidationError) ErrorName() string { return "GetNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeResponseValidationError{}

// Validate checks the field values on AddNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddNodeRequestMultiError,
// or nil if none found.
func (m *AddNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Request.(type) {
	case *AddNodeRequest_Generic:
		if v == nil {
			err := AddNodeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeneric()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeRequestValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeRequest_Container:
		if v == nil {
			err := AddNodeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeRequestValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeRequest_Remote:
		if v == nil {
			err := AddNodeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemote()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemote()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeRequestValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeRequest_RemoteRds:
		if v == nil {
			err := AddNodeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteRds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeRequestValidationError{
					field:  "RemoteRds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeRequest_RemoteAzure:
		if v == nil {
			err := AddNodeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteAzure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "RemoteAzure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeRequestValidationError{
						field:  "RemoteAzure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteAzure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeRequestValidationError{
					field:  "RemoteAzure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddNodeRequestMultiError(errors)
	}

	return nil
}

// AddNodeRequestMultiError is an error wrapping multiple validation errors
// returned by AddNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type AddNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeRequestMultiError) AllErrors() []error { return m }

// AddNodeRequestValidationError is the validation error returned by
// AddNodeRequest.Validate if the designated constraints aren't met.
type AddNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeRequestValidationError) ErrorName() string { return "AddNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeRequestValidationError{}

// Validate checks the field values on AddNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNodeResponseMultiError, or nil if none found.
func (m *AddNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *AddNodeResponse_Generic:
		if v == nil {
			err := AddNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeneric()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeResponseValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeResponse_Container:
		if v == nil {
			err := AddNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeResponse_Remote:
		if v == nil {
			err := AddNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemote()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemote()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeResponseValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeResponse_RemoteRds:
		if v == nil {
			err := AddNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteRds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "RemoteRds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeResponseValidationError{
					field:  "RemoteRds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddNodeResponse_RemoteAzureDatabase:
		if v == nil {
			err := AddNodeResponseValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemoteAzureDatabase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "RemoteAzureDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddNodeResponseValidationError{
						field:  "RemoteAzureDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemoteAzureDatabase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddNodeResponseValidationError{
					field:  "RemoteAzureDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddNodeResponseMultiError(errors)
	}

	return nil
}

// AddNodeResponseMultiError is an error wrapping multiple validation errors
// returned by AddNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type AddNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeResponseMultiError) AllErrors() []error { return m }

// AddNodeResponseValidationError is the validation error returned by
// AddNodeResponse.Validate if the designated constraints aren't met.
type AddNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeResponseValidationError) ErrorName() string { return "AddNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeResponseValidationError{}

// Validate checks the field values on AddGenericNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGenericNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGenericNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGenericNodeRequestMultiError, or nil if none found.
func (m *AddGenericNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGenericNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := AddGenericNodeRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := AddGenericNodeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MachineId

	// no validation rules for Distro

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddGenericNodeRequestMultiError(errors)
	}

	return nil
}

// AddGenericNodeRequestMultiError is an error wrapping multiple validation
// errors returned by AddGenericNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddGenericNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGenericNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGenericNodeRequestMultiError) AllErrors() []error { return m }

// AddGenericNodeRequestValidationError is the validation error returned by
// AddGenericNodeRequest.Validate if the designated constraints aren't met.
type AddGenericNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGenericNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGenericNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGenericNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGenericNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGenericNodeRequestValidationError) ErrorName() string {
	return "AddGenericNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGenericNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGenericNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGenericNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGenericNodeRequestValidationError{}

// Validate checks the field values on AddGenericNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGenericNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGenericNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGenericNodeResponseMultiError, or nil if none found.
func (m *AddGenericNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGenericNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGeneric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGenericNodeResponseValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGenericNodeResponseValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGenericNodeResponseValidationError{
				field:  "Generic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddGenericNodeResponseMultiError(errors)
	}

	return nil
}

// AddGenericNodeResponseMultiError is an error wrapping multiple validation
// errors returned by AddGenericNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type AddGenericNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGenericNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGenericNodeResponseMultiError) AllErrors() []error { return m }

// AddGenericNodeResponseValidationError is the validation error returned by
// AddGenericNodeResponse.Validate if the designated constraints aren't met.
type AddGenericNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGenericNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGenericNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGenericNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGenericNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGenericNodeResponseValidationError) ErrorName() string {
	return "AddGenericNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGenericNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGenericNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGenericNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGenericNodeResponseValidationError{}

// Validate checks the field values on AddContainerNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContainerNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContainerNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContainerNodeRequestMultiError, or nil if none found.
func (m *AddContainerNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContainerNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := AddContainerNodeRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := AddContainerNodeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MachineId

	// no validation rules for ContainerId

	// no validation rules for ContainerName

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddContainerNodeRequestMultiError(errors)
	}

	return nil
}

// AddContainerNodeRequestMultiError is an error wrapping multiple validation
// errors returned by AddContainerNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddContainerNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContainerNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContainerNodeRequestMultiError) AllErrors() []error { return m }

// AddContainerNodeRequestValidationError is the validation error returned by
// AddContainerNodeRequest.Validate if the designated constraints aren't met.
type AddContainerNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContainerNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContainerNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContainerNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContainerNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContainerNodeRequestValidationError) ErrorName() string {
	return "AddContainerNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddContainerNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContainerNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContainerNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContainerNodeRequestValidationError{}

// Validate checks the field values on AddContainerNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContainerNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContainerNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContainerNodeResponseMultiError, or nil if none found.
func (m *AddContainerNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContainerNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddContainerNodeResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddContainerNodeResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddContainerNodeResponseValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddContainerNodeResponseMultiError(errors)
	}

	return nil
}

// AddContainerNodeResponseMultiError is an error wrapping multiple validation
// errors returned by AddContainerNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type AddContainerNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContainerNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContainerNodeResponseMultiError) AllErrors() []error { return m }

// AddContainerNodeResponseValidationError is the validation error returned by
// AddContainerNodeResponse.Validate if the designated constraints aren't met.
type AddContainerNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContainerNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContainerNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContainerNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContainerNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContainerNodeResponseValidationError) ErrorName() string {
	return "AddContainerNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddContainerNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContainerNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContainerNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContainerNodeResponseValidationError{}

// Validate checks the field values on AddRemoteNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRemoteNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRemoteNodeRequestMultiError, or nil if none found.
func (m *AddRemoteNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := AddRemoteNodeRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := AddRemoteNodeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeModel

	// no validation rules for Region

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddRemoteNodeRequestMultiError(errors)
	}

	return nil
}

// AddRemoteNodeRequestMultiError is an error wrapping multiple validation
// errors returned by AddRemoteNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteNodeRequestMultiError) AllErrors() []error { return m }

// AddRemoteNodeRequestValidationError is the validation error returned by
// AddRemoteNodeRequest.Validate if the designated constraints aren't met.
type AddRemoteNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteNodeRequestValidationError) ErrorName() string {
	return "AddRemoteNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteNodeRequestValidationError{}

// Validate checks the field values on AddRemoteNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRemoteNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRemoteNodeResponseMultiError, or nil if none found.
func (m *AddRemoteNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRemote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRemoteNodeResponseValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRemoteNodeResponseValidationError{
					field:  "Remote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRemoteNodeResponseValidationError{
				field:  "Remote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddRemoteNodeResponseMultiError(errors)
	}

	return nil
}

// AddRemoteNodeResponseMultiError is an error wrapping multiple validation
// errors returned by AddRemoteNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteNodeResponseMultiError) AllErrors() []error { return m }

// AddRemoteNodeResponseValidationError is the validation error returned by
// AddRemoteNodeResponse.Validate if the designated constraints aren't met.
type AddRemoteNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteNodeResponseValidationError) ErrorName() string {
	return "AddRemoteNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteNodeResponseValidationError{}

// Validate checks the field values on AddRemoteRDSNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRemoteRDSNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteRDSNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRemoteRDSNodeRequestMultiError, or nil if none found.
func (m *AddRemoteRDSNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteRDSNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := AddRemoteRDSNodeRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := AddRemoteRDSNodeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeModel

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := AddRemoteRDSNodeRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddRemoteRDSNodeRequestMultiError(errors)
	}

	return nil
}

// AddRemoteRDSNodeRequestMultiError is an error wrapping multiple validation
// errors returned by AddRemoteRDSNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteRDSNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteRDSNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteRDSNodeRequestMultiError) AllErrors() []error { return m }

// AddRemoteRDSNodeRequestValidationError is the validation error returned by
// AddRemoteRDSNodeRequest.Validate if the designated constraints aren't met.
type AddRemoteRDSNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteRDSNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteRDSNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteRDSNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteRDSNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteRDSNodeRequestValidationError) ErrorName() string {
	return "AddRemoteRDSNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteRDSNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteRDSNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteRDSNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteRDSNodeRequestValidationError{}

// Validate checks the field values on AddRemoteRDSNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRemoteRDSNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteRDSNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRemoteRDSNodeResponseMultiError, or nil if none found.
func (m *AddRemoteRDSNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteRDSNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRemoteRds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRemoteRDSNodeResponseValidationError{
					field:  "RemoteRds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRemoteRDSNodeResponseValidationError{
					field:  "RemoteRds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteRds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRemoteRDSNodeResponseValidationError{
				field:  "RemoteRds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddRemoteRDSNodeResponseMultiError(errors)
	}

	return nil
}

// AddRemoteRDSNodeResponseMultiError is an error wrapping multiple validation
// errors returned by AddRemoteRDSNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteRDSNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteRDSNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteRDSNodeResponseMultiError) AllErrors() []error { return m }

// AddRemoteRDSNodeResponseValidationError is the validation error returned by
// AddRemoteRDSNodeResponse.Validate if the designated constraints aren't met.
type AddRemoteRDSNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteRDSNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteRDSNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteRDSNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteRDSNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteRDSNodeResponseValidationError) ErrorName() string {
	return "AddRemoteRDSNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteRDSNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteRDSNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteRDSNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteRDSNodeResponseValidationError{}

// Validate checks the field values on AddRemoteAzureDatabaseNodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddRemoteAzureDatabaseNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteAzureDatabaseNodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddRemoteAzureDatabaseNodeRequestMultiError, or nil if none found.
func (m *AddRemoteAzureDatabaseNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteAzureDatabaseNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := AddRemoteAzureDatabaseNodeRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := AddRemoteAzureDatabaseNodeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeModel

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := AddRemoteAzureDatabaseNodeRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Az

	// no validation rules for CustomLabels

	if len(errors) > 0 {
		return AddRemoteAzureDatabaseNodeRequestMultiError(errors)
	}

	return nil
}

// AddRemoteAzureDatabaseNodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddRemoteAzureDatabaseNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteAzureDatabaseNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteAzureDatabaseNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteAzureDatabaseNodeRequestMultiError) AllErrors() []error { return m }

// AddRemoteAzureDatabaseNodeRequestValidationError is the validation error
// returned by AddRemoteAzureDatabaseNodeRequest.Validate if the designated
// constraints aren't met.
type AddRemoteAzureDatabaseNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteAzureDatabaseNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteAzureDatabaseNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteAzureDatabaseNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteAzureDatabaseNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteAzureDatabaseNodeRequestValidationError) ErrorName() string {
	return "AddRemoteAzureDatabaseNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteAzureDatabaseNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteAzureDatabaseNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteAzureDatabaseNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteAzureDatabaseNodeRequestValidationError{}

// Validate checks the field values on AddRemoteAzureDatabaseNodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddRemoteAzureDatabaseNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRemoteAzureDatabaseNodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddRemoteAzureDatabaseNodeResponseMultiError, or nil if none found.
func (m *AddRemoteAzureDatabaseNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRemoteAzureDatabaseNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRemoteAzureDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRemoteAzureDatabaseNodeResponseValidationError{
					field:  "RemoteAzureDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRemoteAzureDatabaseNodeResponseValidationError{
					field:  "RemoteAzureDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteAzureDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRemoteAzureDatabaseNodeResponseValidationError{
				field:  "RemoteAzureDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddRemoteAzureDatabaseNodeResponseMultiError(errors)
	}

	return nil
}

// AddRemoteAzureDatabaseNodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddRemoteAzureDatabaseNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRemoteAzureDatabaseNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRemoteAzureDatabaseNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRemoteAzureDatabaseNodeResponseMultiError) AllErrors() []error { return m }

// AddRemoteAzureDatabaseNodeResponseValidationError is the validation error
// returned by AddRemoteAzureDatabaseNodeResponse.Validate if the designated
// constraints aren't met.
type AddRemoteAzureDatabaseNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRemoteAzureDatabaseNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRemoteAzureDatabaseNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRemoteAzureDatabaseNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRemoteAzureDatabaseNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRemoteAzureDatabaseNodeResponseValidationError) ErrorName() string {
	return "AddRemoteAzureDatabaseNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRemoteAzureDatabaseNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRemoteAzureDatabaseNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRemoteAzureDatabaseNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRemoteAzureDatabaseNodeResponseValidationError{}

// Validate checks the field values on RemoveNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveNodeRequestMultiError, or nil if none found.
func (m *RemoveNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := RemoveNodeRequestValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return RemoveNodeRequestMultiError(errors)
	}

	return nil
}

// RemoveNodeRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveNodeRequestMultiError) AllErrors() []error { return m }

// RemoveNodeRequestValidationError is the validation error returned by
// RemoveNodeRequest.Validate if the designated constraints aren't met.
type RemoveNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveNodeRequestValidationError) ErrorName() string {
	return "RemoveNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveNodeRequestValidationError{}

// Validate checks the field values on RemoveNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveNodeResponseMultiError, or nil if none found.
func (m *RemoveNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveNodeResponseMultiError(errors)
	}

	return nil
}

// RemoveNodeResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveNodeResponseMultiError) AllErrors() []error { return m }

// RemoveNodeResponseValidationError is the validation error returned by
// RemoveNodeResponse.Validate if the designated constraints aren't met.
type RemoveNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveNodeResponseValidationError) ErrorName() string {
	return "RemoveNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveNodeResponseValidationError{}
