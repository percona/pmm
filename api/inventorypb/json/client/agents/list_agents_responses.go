// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAgentsReader is a Reader for the ListAgents structure.
type ListAgentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAgentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAgentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListAgentsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAgentsOK creates a ListAgentsOK with default headers values
func NewListAgentsOK() *ListAgentsOK {
	return &ListAgentsOK{}
}

/* ListAgentsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListAgentsOK struct {
	Payload *ListAgentsOKBody
}

func (o *ListAgentsOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/List][%d] listAgentsOk  %+v", 200, o.Payload)
}

func (o *ListAgentsOK) GetPayload() *ListAgentsOKBody {
	return o.Payload
}

func (o *ListAgentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListAgentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAgentsDefault creates a ListAgentsDefault with default headers values
func NewListAgentsDefault(code int) *ListAgentsDefault {
	return &ListAgentsDefault{
		_statusCode: code,
	}
}

/* ListAgentsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListAgentsDefault struct {
	_statusCode int

	Payload *ListAgentsDefaultBody
}

// Code gets the status code for the list agents default response
func (o *ListAgentsDefault) Code() int {
	return o._statusCode
}

func (o *ListAgentsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/List][%d] ListAgents default  %+v", o._statusCode, o.Payload)
}

func (o *ListAgentsDefault) GetPayload() *ListAgentsDefaultBody {
	return o.Payload
}

func (o *ListAgentsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListAgentsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListAgentsBody list agents body
swagger:model ListAgentsBody
*/
type ListAgentsBody struct {
	// Return only Agents started by this pmm-agent.
	// Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Return only Agents that provide insights for that Node.
	// Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
	NodeID string `json:"node_id,omitempty"`

	// Return only Agents that provide insights for that Service.
	// Exactly one of these parameters should be present: pmm_agent_id, node_id, service_id.
	ServiceID string `json:"service_id,omitempty"`

	// AgentType describes supported Agent types.
	// Enum: [AGENT_TYPE_INVALID PMM_AGENT VM_AGENT NODE_EXPORTER MYSQLD_EXPORTER MONGODB_EXPORTER POSTGRES_EXPORTER PROXYSQL_EXPORTER QAN_MYSQL_PERFSCHEMA_AGENT QAN_MYSQL_SLOWLOG_AGENT QAN_MONGODB_PROFILER_AGENT QAN_POSTGRESQL_PGSTATEMENTS_AGENT QAN_POSTGRESQL_PGSTATMONITOR_AGENT RDS_EXPORTER EXTERNAL_EXPORTER AZURE_DATABASE_EXPORTER]
	AgentType *string `json:"agent_type,omitempty"`
}

// Validate validates this list agents body
func (o *ListAgentsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAgentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsBodyTypeAgentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_TYPE_INVALID","PMM_AGENT","VM_AGENT","NODE_EXPORTER","MYSQLD_EXPORTER","MONGODB_EXPORTER","POSTGRES_EXPORTER","PROXYSQL_EXPORTER","QAN_MYSQL_PERFSCHEMA_AGENT","QAN_MYSQL_SLOWLOG_AGENT","QAN_MONGODB_PROFILER_AGENT","QAN_POSTGRESQL_PGSTATEMENTS_AGENT","QAN_POSTGRESQL_PGSTATMONITOR_AGENT","RDS_EXPORTER","EXTERNAL_EXPORTER","AZURE_DATABASE_EXPORTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsBodyTypeAgentTypePropEnum = append(listAgentsBodyTypeAgentTypePropEnum, v)
	}
}

const (

	// ListAgentsBodyAgentTypeAGENTTYPEINVALID captures enum value "AGENT_TYPE_INVALID"
	ListAgentsBodyAgentTypeAGENTTYPEINVALID string = "AGENT_TYPE_INVALID"

	// ListAgentsBodyAgentTypePMMAGENT captures enum value "PMM_AGENT"
	ListAgentsBodyAgentTypePMMAGENT string = "PMM_AGENT"

	// ListAgentsBodyAgentTypeVMAGENT captures enum value "VM_AGENT"
	ListAgentsBodyAgentTypeVMAGENT string = "VM_AGENT"

	// ListAgentsBodyAgentTypeNODEEXPORTER captures enum value "NODE_EXPORTER"
	ListAgentsBodyAgentTypeNODEEXPORTER string = "NODE_EXPORTER"

	// ListAgentsBodyAgentTypeMYSQLDEXPORTER captures enum value "MYSQLD_EXPORTER"
	ListAgentsBodyAgentTypeMYSQLDEXPORTER string = "MYSQLD_EXPORTER"

	// ListAgentsBodyAgentTypeMONGODBEXPORTER captures enum value "MONGODB_EXPORTER"
	ListAgentsBodyAgentTypeMONGODBEXPORTER string = "MONGODB_EXPORTER"

	// ListAgentsBodyAgentTypePOSTGRESEXPORTER captures enum value "POSTGRES_EXPORTER"
	ListAgentsBodyAgentTypePOSTGRESEXPORTER string = "POSTGRES_EXPORTER"

	// ListAgentsBodyAgentTypePROXYSQLEXPORTER captures enum value "PROXYSQL_EXPORTER"
	ListAgentsBodyAgentTypePROXYSQLEXPORTER string = "PROXYSQL_EXPORTER"

	// ListAgentsBodyAgentTypeQANMYSQLPERFSCHEMAAGENT captures enum value "QAN_MYSQL_PERFSCHEMA_AGENT"
	ListAgentsBodyAgentTypeQANMYSQLPERFSCHEMAAGENT string = "QAN_MYSQL_PERFSCHEMA_AGENT"

	// ListAgentsBodyAgentTypeQANMYSQLSLOWLOGAGENT captures enum value "QAN_MYSQL_SLOWLOG_AGENT"
	ListAgentsBodyAgentTypeQANMYSQLSLOWLOGAGENT string = "QAN_MYSQL_SLOWLOG_AGENT"

	// ListAgentsBodyAgentTypeQANMONGODBPROFILERAGENT captures enum value "QAN_MONGODB_PROFILER_AGENT"
	ListAgentsBodyAgentTypeQANMONGODBPROFILERAGENT string = "QAN_MONGODB_PROFILER_AGENT"

	// ListAgentsBodyAgentTypeQANPOSTGRESQLPGSTATEMENTSAGENT captures enum value "QAN_POSTGRESQL_PGSTATEMENTS_AGENT"
	ListAgentsBodyAgentTypeQANPOSTGRESQLPGSTATEMENTSAGENT string = "QAN_POSTGRESQL_PGSTATEMENTS_AGENT"

	// ListAgentsBodyAgentTypeQANPOSTGRESQLPGSTATMONITORAGENT captures enum value "QAN_POSTGRESQL_PGSTATMONITOR_AGENT"
	ListAgentsBodyAgentTypeQANPOSTGRESQLPGSTATMONITORAGENT string = "QAN_POSTGRESQL_PGSTATMONITOR_AGENT"

	// ListAgentsBodyAgentTypeRDSEXPORTER captures enum value "RDS_EXPORTER"
	ListAgentsBodyAgentTypeRDSEXPORTER string = "RDS_EXPORTER"

	// ListAgentsBodyAgentTypeEXTERNALEXPORTER captures enum value "EXTERNAL_EXPORTER"
	ListAgentsBodyAgentTypeEXTERNALEXPORTER string = "EXTERNAL_EXPORTER"

	// ListAgentsBodyAgentTypeAZUREDATABASEEXPORTER captures enum value "AZURE_DATABASE_EXPORTER"
	ListAgentsBodyAgentTypeAZUREDATABASEEXPORTER string = "AZURE_DATABASE_EXPORTER"
)

// prop value enum
func (o *ListAgentsBody) validateAgentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsBodyTypeAgentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsBody) validateAgentType(formats strfmt.Registry) error {
	if swag.IsZero(o.AgentType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAgentTypeEnum("body"+"."+"agent_type", "body", *o.AgentType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents body based on context it is used
func (o *ListAgentsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsBody) UnmarshalBinary(b []byte) error {
	var res ListAgentsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsDefaultBody list agents default body
swagger:model ListAgentsDefaultBody
*/
type ListAgentsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListAgentsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list agents default body
func (o *ListAgentsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAgentsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAgents default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAgents default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list agents default body based on the context it is used
func (o *ListAgentsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAgentsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAgents default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAgents default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAgentsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsDefaultBodyDetailsItems0 list agents default body details items0
swagger:model ListAgentsDefaultBodyDetailsItems0
*/
type ListAgentsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list agents default body details items0
func (o *ListAgentsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list agents default body details items0 based on context it is used
func (o *ListAgentsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBody list agents OK body
swagger:model ListAgentsOKBody
*/
type ListAgentsOKBody struct {
	// pmm agent
	PMMAgent []*ListAgentsOKBodyPMMAgentItems0 `json:"pmm_agent"`

	// vm agent
	VMAgent []*ListAgentsOKBodyVMAgentItems0 `json:"vm_agent"`

	// node exporter
	NodeExporter []*ListAgentsOKBodyNodeExporterItems0 `json:"node_exporter"`

	// mysqld exporter
	MysqldExporter []*ListAgentsOKBodyMysqldExporterItems0 `json:"mysqld_exporter"`

	// mongodb exporter
	MongodbExporter []*ListAgentsOKBodyMongodbExporterItems0 `json:"mongodb_exporter"`

	// postgres exporter
	PostgresExporter []*ListAgentsOKBodyPostgresExporterItems0 `json:"postgres_exporter"`

	// proxysql exporter
	ProxysqlExporter []*ListAgentsOKBodyProxysqlExporterItems0 `json:"proxysql_exporter"`

	// qan mysql perfschema agent
	QANMysqlPerfschemaAgent []*ListAgentsOKBodyQANMysqlPerfschemaAgentItems0 `json:"qan_mysql_perfschema_agent"`

	// qan mysql slowlog agent
	QANMysqlSlowlogAgent []*ListAgentsOKBodyQANMysqlSlowlogAgentItems0 `json:"qan_mysql_slowlog_agent"`

	// qan mongodb profiler agent
	QANMongodbProfilerAgent []*ListAgentsOKBodyQANMongodbProfilerAgentItems0 `json:"qan_mongodb_profiler_agent"`

	// qan postgresql pgstatements agent
	QANPostgresqlPgstatementsAgent []*ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0 `json:"qan_postgresql_pgstatements_agent"`

	// qan postgresql pgstatmonitor agent
	QANPostgresqlPgstatmonitorAgent []*ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0 `json:"qan_postgresql_pgstatmonitor_agent"`

	// rds exporter
	RDSExporter []*ListAgentsOKBodyRDSExporterItems0 `json:"rds_exporter"`

	// external exporter
	ExternalExporter []*ListAgentsOKBodyExternalExporterItems0 `json:"external_exporter"`

	// azure database exporter
	AzureDatabaseExporter []*ListAgentsOKBodyAzureDatabaseExporterItems0 `json:"azure_database_exporter"`
}

// Validate validates this list agents OK body
func (o *ListAgentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePMMAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVMAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodbExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschemaAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlSlowlogAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMongodbProfilerAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatementsAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatmonitorAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDSExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAzureDatabaseExporter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAgentsOKBody) validatePMMAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.PMMAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.PMMAgent); i++ {
		if swag.IsZero(o.PMMAgent[i]) { // not required
			continue
		}

		if o.PMMAgent[i] != nil {
			if err := o.PMMAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "pmm_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "pmm_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateVMAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.VMAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.VMAgent); i++ {
		if swag.IsZero(o.VMAgent[i]) { // not required
			continue
		}

		if o.VMAgent[i] != nil {
			if err := o.VMAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "vm_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "vm_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateNodeExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.NodeExporter); i++ {
		if swag.IsZero(o.NodeExporter[i]) { // not required
			continue
		}

		if o.NodeExporter[i] != nil {
			if err := o.NodeExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "node_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "node_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateMysqldExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.MysqldExporter); i++ {
		if swag.IsZero(o.MysqldExporter[i]) { // not required
			continue
		}

		if o.MysqldExporter[i] != nil {
			if err := o.MysqldExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "mysqld_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "mysqld_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateMongodbExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.MongodbExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.MongodbExporter); i++ {
		if swag.IsZero(o.MongodbExporter[i]) { // not required
			continue
		}

		if o.MongodbExporter[i] != nil {
			if err := o.MongodbExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "mongodb_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "mongodb_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validatePostgresExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.PostgresExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.PostgresExporter); i++ {
		if swag.IsZero(o.PostgresExporter[i]) { // not required
			continue
		}

		if o.PostgresExporter[i] != nil {
			if err := o.PostgresExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "postgres_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "postgres_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateProxysqlExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.ProxysqlExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.ProxysqlExporter); i++ {
		if swag.IsZero(o.ProxysqlExporter[i]) { // not required
			continue
		}

		if o.ProxysqlExporter[i] != nil {
			if err := o.ProxysqlExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "proxysql_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "proxysql_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateQANMysqlPerfschemaAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMysqlPerfschemaAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.QANMysqlPerfschemaAgent); i++ {
		if swag.IsZero(o.QANMysqlPerfschemaAgent[i]) { // not required
			continue
		}

		if o.QANMysqlPerfschemaAgent[i] != nil {
			if err := o.QANMysqlPerfschemaAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mysql_perfschema_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mysql_perfschema_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateQANMysqlSlowlogAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMysqlSlowlogAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.QANMysqlSlowlogAgent); i++ {
		if swag.IsZero(o.QANMysqlSlowlogAgent[i]) { // not required
			continue
		}

		if o.QANMysqlSlowlogAgent[i] != nil {
			if err := o.QANMysqlSlowlogAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mysql_slowlog_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mysql_slowlog_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateQANMongodbProfilerAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANMongodbProfilerAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.QANMongodbProfilerAgent); i++ {
		if swag.IsZero(o.QANMongodbProfilerAgent[i]) { // not required
			continue
		}

		if o.QANMongodbProfilerAgent[i] != nil {
			if err := o.QANMongodbProfilerAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mongodb_profiler_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mongodb_profiler_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateQANPostgresqlPgstatementsAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANPostgresqlPgstatementsAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.QANPostgresqlPgstatementsAgent); i++ {
		if swag.IsZero(o.QANPostgresqlPgstatementsAgent[i]) { // not required
			continue
		}

		if o.QANPostgresqlPgstatementsAgent[i] != nil {
			if err := o.QANPostgresqlPgstatementsAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatements_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatements_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateQANPostgresqlPgstatmonitorAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.QANPostgresqlPgstatmonitorAgent) { // not required
		return nil
	}

	for i := 0; i < len(o.QANPostgresqlPgstatmonitorAgent); i++ {
		if swag.IsZero(o.QANPostgresqlPgstatmonitorAgent[i]) { // not required
			continue
		}

		if o.QANPostgresqlPgstatmonitorAgent[i] != nil {
			if err := o.QANPostgresqlPgstatmonitorAgent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatmonitor_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatmonitor_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateRDSExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.RDSExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.RDSExporter); i++ {
		if swag.IsZero(o.RDSExporter[i]) { // not required
			continue
		}

		if o.RDSExporter[i] != nil {
			if err := o.RDSExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "rds_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "rds_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateExternalExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.ExternalExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.ExternalExporter); i++ {
		if swag.IsZero(o.ExternalExporter[i]) { // not required
			continue
		}

		if o.ExternalExporter[i] != nil {
			if err := o.ExternalExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "external_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "external_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAgentsOKBody) validateAzureDatabaseExporter(formats strfmt.Registry) error {
	if swag.IsZero(o.AzureDatabaseExporter) { // not required
		return nil
	}

	for i := 0; i < len(o.AzureDatabaseExporter); i++ {
		if swag.IsZero(o.AzureDatabaseExporter[i]) { // not required
			continue
		}

		if o.AzureDatabaseExporter[i] != nil {
			if err := o.AzureDatabaseExporter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "azure_database_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "azure_database_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list agents OK body based on the context it is used
func (o *ListAgentsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePMMAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVMAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNodeExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMysqldExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMongodbExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePostgresExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProxysqlExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMysqlPerfschemaAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMysqlSlowlogAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANMongodbProfilerAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANPostgresqlPgstatementsAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQANPostgresqlPgstatmonitorAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRDSExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExternalExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAzureDatabaseExporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAgentsOKBody) contextValidatePMMAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.PMMAgent); i++ {
		if o.PMMAgent[i] != nil {
			if err := o.PMMAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "pmm_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "pmm_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateVMAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.VMAgent); i++ {
		if o.VMAgent[i] != nil {
			if err := o.VMAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "vm_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "vm_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateNodeExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.NodeExporter); i++ {
		if o.NodeExporter[i] != nil {
			if err := o.NodeExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "node_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "node_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateMysqldExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.MysqldExporter); i++ {
		if o.MysqldExporter[i] != nil {
			if err := o.MysqldExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "mysqld_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "mysqld_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateMongodbExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.MongodbExporter); i++ {
		if o.MongodbExporter[i] != nil {
			if err := o.MongodbExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "mongodb_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "mongodb_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidatePostgresExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.PostgresExporter); i++ {
		if o.PostgresExporter[i] != nil {
			if err := o.PostgresExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "postgres_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "postgres_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateProxysqlExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.ProxysqlExporter); i++ {
		if o.ProxysqlExporter[i] != nil {
			if err := o.ProxysqlExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "proxysql_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "proxysql_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateQANMysqlPerfschemaAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.QANMysqlPerfschemaAgent); i++ {
		if o.QANMysqlPerfschemaAgent[i] != nil {
			if err := o.QANMysqlPerfschemaAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mysql_perfschema_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mysql_perfschema_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateQANMysqlSlowlogAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.QANMysqlSlowlogAgent); i++ {
		if o.QANMysqlSlowlogAgent[i] != nil {
			if err := o.QANMysqlSlowlogAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mysql_slowlog_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mysql_slowlog_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateQANMongodbProfilerAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.QANMongodbProfilerAgent); i++ {
		if o.QANMongodbProfilerAgent[i] != nil {
			if err := o.QANMongodbProfilerAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_mongodb_profiler_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_mongodb_profiler_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateQANPostgresqlPgstatementsAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.QANPostgresqlPgstatementsAgent); i++ {
		if o.QANPostgresqlPgstatementsAgent[i] != nil {
			if err := o.QANPostgresqlPgstatementsAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatements_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatements_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateQANPostgresqlPgstatmonitorAgent(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.QANPostgresqlPgstatmonitorAgent); i++ {
		if o.QANPostgresqlPgstatmonitorAgent[i] != nil {
			if err := o.QANPostgresqlPgstatmonitorAgent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatmonitor_agent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "qan_postgresql_pgstatmonitor_agent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateRDSExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.RDSExporter); i++ {
		if o.RDSExporter[i] != nil {
			if err := o.RDSExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "rds_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "rds_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateExternalExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.ExternalExporter); i++ {
		if o.ExternalExporter[i] != nil {
			if err := o.ExternalExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "external_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "external_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

func (o *ListAgentsOKBody) contextValidateAzureDatabaseExporter(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.AzureDatabaseExporter); i++ {
		if o.AzureDatabaseExporter[i] != nil {
			if err := o.AzureDatabaseExporter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAgentsOk" + "." + "azure_database_exporter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAgentsOk" + "." + "azure_database_exporter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBody) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyAzureDatabaseExporterItems0 AzureDatabaseExporter runs on Generic or Container Node and exposes RemoteAzure Node metrics.
swagger:model ListAgentsOKBodyAzureDatabaseExporterItems0
*/
type ListAgentsOKBodyAzureDatabaseExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// Azure database subscription ID.
	AzureDatabaseSubscriptionID string `json:"azure_database_subscription_id,omitempty"`

	// Azure database resource type (mysql, maria, postgres)
	AzureDatabaseResourceType string `json:"azure_database_resource_type,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if the exporter operates in push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body azure database exporter items0
func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyAzureDatabaseExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyAzureDatabaseExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyAzureDatabaseExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyAzureDatabaseExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyAzureDatabaseExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyAzureDatabaseExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body azure database exporter items0 based on context it is used
func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyAzureDatabaseExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyAzureDatabaseExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyExternalExporterItems0 ExternalExporter runs on any Node type, including Remote Node.
swagger:model ListAgentsOKBodyExternalExporterItems0
*/
type ListAgentsOKBodyExternalExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// If disabled, metrics from this exporter will not be collected.
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body external exporter items0
func (o *ListAgentsOKBodyExternalExporterItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list agents OK body external exporter items0 based on context it is used
func (o *ListAgentsOKBodyExternalExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyExternalExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyExternalExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyExternalExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyMongodbExporterItems0 MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
swagger:model ListAgentsOKBodyMongodbExporterItems0
*/
type ListAgentsOKBodyMongodbExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// List of colletions to get stats from. Can use *
	StatsCollections []string `json:"stats_collections"`

	// Collections limit. Only get Databases and collection stats if the total number of collections in the server
	// is less than this value. 0: no limit
	CollectionsLimit int32 `json:"collections_limit,omitempty"`

	// Enable All collectors.
	EnableAllCollectors bool `json:"enable_all_collectors,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	// Enum: [auto fatal error warn info debug]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this list agents OK body mongodb exporter items0
func (o *ListAgentsOKBodyMongodbExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyMongodbExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyMongodbExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyMongodbExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyMongodbExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyMongodbExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyMongodbExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyMongodbExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyMongodbExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyMongodbExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyMongodbExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyMongodbExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyMongodbExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyMongodbExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyMongodbExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyMongodbExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyMongodbExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyMongodbExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyMongodbExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyMongodbExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyMongodbExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var listAgentsOkBodyMongodbExporterItems0TypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","fatal","error","warn","info","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyMongodbExporterItems0TypeLogLevelPropEnum = append(listAgentsOkBodyMongodbExporterItems0TypeLogLevelPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyMongodbExporterItems0LogLevelAuto captures enum value "auto"
	ListAgentsOKBodyMongodbExporterItems0LogLevelAuto string = "auto"

	// ListAgentsOKBodyMongodbExporterItems0LogLevelFatal captures enum value "fatal"
	ListAgentsOKBodyMongodbExporterItems0LogLevelFatal string = "fatal"

	// ListAgentsOKBodyMongodbExporterItems0LogLevelError captures enum value "error"
	ListAgentsOKBodyMongodbExporterItems0LogLevelError string = "error"

	// ListAgentsOKBodyMongodbExporterItems0LogLevelWarn captures enum value "warn"
	ListAgentsOKBodyMongodbExporterItems0LogLevelWarn string = "warn"

	// ListAgentsOKBodyMongodbExporterItems0LogLevelInfo captures enum value "info"
	ListAgentsOKBodyMongodbExporterItems0LogLevelInfo string = "info"

	// ListAgentsOKBodyMongodbExporterItems0LogLevelDebug captures enum value "debug"
	ListAgentsOKBodyMongodbExporterItems0LogLevelDebug string = "debug"
)

// prop value enum
func (o *ListAgentsOKBodyMongodbExporterItems0) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyMongodbExporterItems0TypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyMongodbExporterItems0) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body mongodb exporter items0 based on context it is used
func (o *ListAgentsOKBodyMongodbExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyMongodbExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyMongodbExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyMongodbExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyMysqldExporterItems0 MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
swagger:model ListAgentsOKBodyMysqldExporterItems0
*/
type ListAgentsOKBodyMysqldExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if tablestats group collectors are currently disabled.
	TablestatsGroupDisabled bool `json:"tablestats_group_disabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	// Enum: [auto fatal error warn info debug]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this list agents OK body mysqld exporter items0
func (o *ListAgentsOKBodyMysqldExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyMysqldExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyMysqldExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyMysqldExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyMysqldExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyMysqldExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyMysqldExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyMysqldExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyMysqldExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyMysqldExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyMysqldExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyMysqldExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyMysqldExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyMysqldExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyMysqldExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyMysqldExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyMysqldExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyMysqldExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyMysqldExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyMysqldExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyMysqldExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var listAgentsOkBodyMysqldExporterItems0TypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","fatal","error","warn","info","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyMysqldExporterItems0TypeLogLevelPropEnum = append(listAgentsOkBodyMysqldExporterItems0TypeLogLevelPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyMysqldExporterItems0LogLevelAuto captures enum value "auto"
	ListAgentsOKBodyMysqldExporterItems0LogLevelAuto string = "auto"

	// ListAgentsOKBodyMysqldExporterItems0LogLevelFatal captures enum value "fatal"
	ListAgentsOKBodyMysqldExporterItems0LogLevelFatal string = "fatal"

	// ListAgentsOKBodyMysqldExporterItems0LogLevelError captures enum value "error"
	ListAgentsOKBodyMysqldExporterItems0LogLevelError string = "error"

	// ListAgentsOKBodyMysqldExporterItems0LogLevelWarn captures enum value "warn"
	ListAgentsOKBodyMysqldExporterItems0LogLevelWarn string = "warn"

	// ListAgentsOKBodyMysqldExporterItems0LogLevelInfo captures enum value "info"
	ListAgentsOKBodyMysqldExporterItems0LogLevelInfo string = "info"

	// ListAgentsOKBodyMysqldExporterItems0LogLevelDebug captures enum value "debug"
	ListAgentsOKBodyMysqldExporterItems0LogLevelDebug string = "debug"
)

// prop value enum
func (o *ListAgentsOKBodyMysqldExporterItems0) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyMysqldExporterItems0TypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyMysqldExporterItems0) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body mysqld exporter items0 based on context it is used
func (o *ListAgentsOKBodyMysqldExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyMysqldExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyMysqldExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyMysqldExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyNodeExporterItems0 NodeExporter runs on Generic or Container Node and exposes its metrics.
swagger:model ListAgentsOKBodyNodeExporterItems0
*/
type ListAgentsOKBodyNodeExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body node exporter items0
func (o *ListAgentsOKBodyNodeExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyNodeExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyNodeExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyNodeExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyNodeExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyNodeExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyNodeExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyNodeExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyNodeExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyNodeExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyNodeExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyNodeExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyNodeExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyNodeExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyNodeExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyNodeExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyNodeExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyNodeExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyNodeExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyNodeExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyNodeExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body node exporter items0 based on context it is used
func (o *ListAgentsOKBodyNodeExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyNodeExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyNodeExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyNodeExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyPMMAgentItems0 PMMAgent runs on Generic or Container Node.
swagger:model ListAgentsOKBodyPMMAgentItems0
*/
type ListAgentsOKBodyPMMAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	Connected bool `json:"connected,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body PMM agent items0
func (o *ListAgentsOKBodyPMMAgentItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list agents OK body PMM agent items0 based on context it is used
func (o *ListAgentsOKBodyPMMAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyPMMAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyPMMAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyPMMAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyPostgresExporterItems0 PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model ListAgentsOKBodyPostgresExporterItems0
*/
type ListAgentsOKBodyPostgresExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	// Enum: [auto fatal error warn info debug]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this list agents OK body postgres exporter items0
func (o *ListAgentsOKBodyPostgresExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyPostgresExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyPostgresExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyPostgresExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyPostgresExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyPostgresExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyPostgresExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyPostgresExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyPostgresExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyPostgresExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyPostgresExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyPostgresExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyPostgresExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyPostgresExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyPostgresExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyPostgresExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyPostgresExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyPostgresExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyPostgresExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyPostgresExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyPostgresExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var listAgentsOkBodyPostgresExporterItems0TypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","fatal","error","warn","info","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyPostgresExporterItems0TypeLogLevelPropEnum = append(listAgentsOkBodyPostgresExporterItems0TypeLogLevelPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyPostgresExporterItems0LogLevelAuto captures enum value "auto"
	ListAgentsOKBodyPostgresExporterItems0LogLevelAuto string = "auto"

	// ListAgentsOKBodyPostgresExporterItems0LogLevelFatal captures enum value "fatal"
	ListAgentsOKBodyPostgresExporterItems0LogLevelFatal string = "fatal"

	// ListAgentsOKBodyPostgresExporterItems0LogLevelError captures enum value "error"
	ListAgentsOKBodyPostgresExporterItems0LogLevelError string = "error"

	// ListAgentsOKBodyPostgresExporterItems0LogLevelWarn captures enum value "warn"
	ListAgentsOKBodyPostgresExporterItems0LogLevelWarn string = "warn"

	// ListAgentsOKBodyPostgresExporterItems0LogLevelInfo captures enum value "info"
	ListAgentsOKBodyPostgresExporterItems0LogLevelInfo string = "info"

	// ListAgentsOKBodyPostgresExporterItems0LogLevelDebug captures enum value "debug"
	ListAgentsOKBodyPostgresExporterItems0LogLevelDebug string = "debug"
)

// prop value enum
func (o *ListAgentsOKBodyPostgresExporterItems0) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyPostgresExporterItems0TypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyPostgresExporterItems0) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body postgres exporter items0 based on context it is used
func (o *ListAgentsOKBodyPostgresExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyPostgresExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyPostgresExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyPostgresExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyProxysqlExporterItems0 ProxySQLExporter runs on Generic or Container Node and exposes ProxySQL Service metrics.
swagger:model ListAgentsOKBodyProxysqlExporterItems0
*/
type ListAgentsOKBodyProxysqlExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Log level for exporters
	// Enum: [auto fatal error warn info debug]
	LogLevel *string `json:"log_level,omitempty"`
}

// Validate validates this list agents OK body proxysql exporter items0
func (o *ListAgentsOKBodyProxysqlExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyProxysqlExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyProxysqlExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyProxysqlExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyProxysqlExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyProxysqlExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyProxysqlExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyProxysqlExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyProxysqlExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyProxysqlExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyProxysqlExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyProxysqlExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyProxysqlExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyProxysqlExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyProxysqlExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyProxysqlExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyProxysqlExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyProxysqlExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyProxysqlExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyProxysqlExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyProxysqlExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

var listAgentsOkBodyProxysqlExporterItems0TypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","fatal","error","warn","info","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyProxysqlExporterItems0TypeLogLevelPropEnum = append(listAgentsOkBodyProxysqlExporterItems0TypeLogLevelPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelAuto captures enum value "auto"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelAuto string = "auto"

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelFatal captures enum value "fatal"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelFatal string = "fatal"

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelError captures enum value "error"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelError string = "error"

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelWarn captures enum value "warn"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelWarn string = "warn"

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelInfo captures enum value "info"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelInfo string = "info"

	// ListAgentsOKBodyProxysqlExporterItems0LogLevelDebug captures enum value "debug"
	ListAgentsOKBodyProxysqlExporterItems0LogLevelDebug string = "debug"
)

// prop value enum
func (o *ListAgentsOKBodyProxysqlExporterItems0) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyProxysqlExporterItems0TypeLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyProxysqlExporterItems0) validateLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := o.validateLogLevelEnum("log_level", "body", *o.LogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body proxysql exporter items0 based on context it is used
func (o *ListAgentsOKBodyProxysqlExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyProxysqlExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyProxysqlExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyProxysqlExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyQANMongodbProfilerAgentItems0 QANMongoDBProfilerAgent runs within pmm-agent and sends MongoDB Query Analytics data to the PMM Server.
swagger:model ListAgentsOKBodyQANMongodbProfilerAgentItems0
*/
type ListAgentsOKBodyQANMongodbProfilerAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for getting profiler data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body QAN mongodb profiler agent items0
func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyQanMongodbProfilerAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyQanMongodbProfilerAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyQanMongodbProfilerAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyQANMongodbProfilerAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyQanMongodbProfilerAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body QAN mongodb profiler agent items0 based on context it is used
func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMongodbProfilerAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyQANMongodbProfilerAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyQANMysqlPerfschemaAgentItems0 QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model ListAgentsOKBodyQANMysqlPerfschemaAgentItems0
*/
type ListAgentsOKBodyQANMysqlPerfschemaAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body QAN mysql perfschema agent items0
func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyQanMysqlPerfschemaAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyQanMysqlPerfschemaAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyQanMysqlPerfschemaAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyQANMysqlPerfschemaAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyQanMysqlPerfschemaAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body QAN mysql perfschema agent items0 based on context it is used
func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMysqlPerfschemaAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyQANMysqlPerfschemaAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyQANMysqlSlowlogAgentItems0 QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model ListAgentsOKBodyQANMysqlSlowlogAgentItems0
*/
type ListAgentsOKBodyQANMysqlSlowlogAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Slowlog file is rotated at this size if > 0.
	MaxSlowlogFileSize string `json:"max_slowlog_file_size,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// mod tidy
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body QAN mysql slowlog agent items0
func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyQanMysqlSlowlogAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyQanMysqlSlowlogAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyQanMysqlSlowlogAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyQANMysqlSlowlogAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyQanMysqlSlowlogAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body QAN mysql slowlog agent items0 based on context it is used
func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyQANMysqlSlowlogAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyQANMysqlSlowlogAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0 QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0
*/
type ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat statements data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body QAN postgresql pgstatements agent items0
func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyQanPostgresqlPgstatementsAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyQanPostgresqlPgstatementsAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyQanPostgresqlPgstatementsAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyQanPostgresqlPgstatementsAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body QAN postgresql pgstatements agent items0 based on context it is used
func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyQANPostgresqlPgstatementsAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0 QANPostgreSQLPgStatMonitorAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0
*/
type ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat monitor data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body QAN postgresql pgstatmonitor agent items0
func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyQanPostgresqlPgstatmonitorAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyQanPostgresqlPgstatmonitorAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyQanPostgresqlPgstatmonitorAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyQanPostgresqlPgstatmonitorAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body QAN postgresql pgstatmonitor agent items0 based on context it is used
func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyQANPostgresqlPgstatmonitorAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyRDSExporterItems0 RDSExporter runs on Generic or Container Node and exposes RemoteRDS Node metrics.
swagger:model ListAgentsOKBodyRDSExporterItems0
*/
type ListAgentsOKBodyRDSExporterItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// AWS Access Key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// Basic metrics are disabled.
	BasicMetricsDisabled bool `json:"basic_metrics_disabled,omitempty"`

	// Enhanced metrics are disabled.
	EnhancedMetricsDisabled bool `json:"enhanced_metrics_disabled,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`
}

// Validate validates this list agents OK body RDS exporter items0
func (o *ListAgentsOKBodyRDSExporterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyRdsExporterItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyRdsExporterItems0TypeStatusPropEnum = append(listAgentsOkBodyRdsExporterItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyRDSExporterItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyRDSExporterItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyRDSExporterItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyRDSExporterItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyRDSExporterItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyRDSExporterItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyRDSExporterItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyRDSExporterItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyRDSExporterItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyRDSExporterItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyRDSExporterItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyRDSExporterItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyRDSExporterItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyRDSExporterItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyRDSExporterItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyRdsExporterItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyRDSExporterItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body RDS exporter items0 based on context it is used
func (o *ListAgentsOKBodyRDSExporterItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyRDSExporterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyRDSExporterItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyRDSExporterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAgentsOKBodyVMAgentItems0 VMAgent runs on Generic or Container Node alongside pmm-agent.
// It scrapes other exporter Agents that are configured with push_metrics_enabled
// and uses Prometheus remote write protocol to push metrics to PMM Server.
swagger:model ListAgentsOKBodyVMAgentItems0
*/
type ListAgentsOKBodyVMAgentItems0 struct {
	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Path to exec process.
	ProcessExecPath string `json:"process_exec_path,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this list agents OK body VM agent items0
func (o *ListAgentsOKBodyVMAgentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAgentsOkBodyVmAgentItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAgentsOkBodyVmAgentItems0TypeStatusPropEnum = append(listAgentsOkBodyVmAgentItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListAgentsOKBodyVMAgentItems0StatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	ListAgentsOKBodyVMAgentItems0StatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// ListAgentsOKBodyVMAgentItems0StatusSTARTING captures enum value "STARTING"
	ListAgentsOKBodyVMAgentItems0StatusSTARTING string = "STARTING"

	// ListAgentsOKBodyVMAgentItems0StatusRUNNING captures enum value "RUNNING"
	ListAgentsOKBodyVMAgentItems0StatusRUNNING string = "RUNNING"

	// ListAgentsOKBodyVMAgentItems0StatusWAITING captures enum value "WAITING"
	ListAgentsOKBodyVMAgentItems0StatusWAITING string = "WAITING"

	// ListAgentsOKBodyVMAgentItems0StatusSTOPPING captures enum value "STOPPING"
	ListAgentsOKBodyVMAgentItems0StatusSTOPPING string = "STOPPING"

	// ListAgentsOKBodyVMAgentItems0StatusDONE captures enum value "DONE"
	ListAgentsOKBodyVMAgentItems0StatusDONE string = "DONE"

	// ListAgentsOKBodyVMAgentItems0StatusUNKNOWN captures enum value "UNKNOWN"
	ListAgentsOKBodyVMAgentItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *ListAgentsOKBodyVMAgentItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAgentsOkBodyVmAgentItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAgentsOKBodyVMAgentItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list agents OK body VM agent items0 based on context it is used
func (o *ListAgentsOKBodyVMAgentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAgentsOKBodyVMAgentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAgentsOKBodyVMAgentItems0) UnmarshalBinary(b []byte) error {
	var res ListAgentsOKBodyVMAgentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
