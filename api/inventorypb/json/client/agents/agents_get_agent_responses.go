// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentsGetAgentReader is a Reader for the AgentsGetAgent structure.
type AgentsGetAgentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AgentsGetAgentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAgentsGetAgentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAgentsGetAgentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAgentsGetAgentOK creates a AgentsGetAgentOK with default headers values
func NewAgentsGetAgentOK() *AgentsGetAgentOK {
	return &AgentsGetAgentOK{}
}

/*AgentsGetAgentOK handles this case with default header values.

A successful response.
*/
type AgentsGetAgentOK struct {
	Payload *AgentsGetAgentOKBody
}

func (o *AgentsGetAgentOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/Get][%d] agentsGetAgentOk  %+v", 200, o.Payload)
}

func (o *AgentsGetAgentOK) GetPayload() *AgentsGetAgentOKBody {
	return o.Payload
}

func (o *AgentsGetAgentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AgentsGetAgentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAgentsGetAgentDefault creates a AgentsGetAgentDefault with default headers values
func NewAgentsGetAgentDefault(code int) *AgentsGetAgentDefault {
	return &AgentsGetAgentDefault{
		_statusCode: code,
	}
}

/*AgentsGetAgentDefault handles this case with default header values.

An unexpected error response.
*/
type AgentsGetAgentDefault struct {
	_statusCode int

	Payload *AgentsGetAgentDefaultBody
}

// Code gets the status code for the agents get agent default response
func (o *AgentsGetAgentDefault) Code() int {
	return o._statusCode
}

func (o *AgentsGetAgentDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/Get][%d] Agents_GetAgent default  %+v", o._statusCode, o.Payload)
}

func (o *AgentsGetAgentDefault) GetPayload() *AgentsGetAgentDefaultBody {
	return o.Payload
}

func (o *AgentsGetAgentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AgentsGetAgentDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AgentsGetAgentBody agents get agent body
swagger:model AgentsGetAgentBody
*/
type AgentsGetAgentBody struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`
}

// Validate validates this agents get agent body
func (o *AgentsGetAgentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentBody) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentDefaultBody agents get agent default body
swagger:model AgentsGetAgentDefaultBody
*/
type AgentsGetAgentDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this agents get agent default body
func (o *AgentsGetAgentDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentsGetAgentDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Agents_GetAgent default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentDefaultBody) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBody agents get agent OK body
swagger:model AgentsGetAgentOKBody
*/
type AgentsGetAgentOKBody struct {

	// azure database exporter
	AzureDatabaseExporter *AgentsGetAgentOKBodyAzureDatabaseExporter `json:"azure_database_exporter,omitempty"`

	// external exporter
	ExternalExporter *AgentsGetAgentOKBodyExternalExporter `json:"external_exporter,omitempty"`

	// mongodb exporter
	MongodbExporter *AgentsGetAgentOKBodyMongodbExporter `json:"mongodb_exporter,omitempty"`

	// mysqld exporter
	MysqldExporter *AgentsGetAgentOKBodyMysqldExporter `json:"mysqld_exporter,omitempty"`

	// node exporter
	NodeExporter *AgentsGetAgentOKBodyNodeExporter `json:"node_exporter,omitempty"`

	// pmm agent
	PMMAgent *AgentsGetAgentOKBodyPMMAgent `json:"pmm_agent,omitempty"`

	// postgres exporter
	PostgresExporter *AgentsGetAgentOKBodyPostgresExporter `json:"postgres_exporter,omitempty"`

	// proxysql exporter
	ProxysqlExporter *AgentsGetAgentOKBodyProxysqlExporter `json:"proxysql_exporter,omitempty"`

	// qan mongodb profiler agent
	QANMongodbProfilerAgent *AgentsGetAgentOKBodyQANMongodbProfilerAgent `json:"qan_mongodb_profiler_agent,omitempty"`

	// qan mysql perfschema agent
	QANMysqlPerfschemaAgent *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent `json:"qan_mysql_perfschema_agent,omitempty"`

	// qan mysql slowlog agent
	QANMysqlSlowlogAgent *AgentsGetAgentOKBodyQANMysqlSlowlogAgent `json:"qan_mysql_slowlog_agent,omitempty"`

	// qan postgresql pgstatements agent
	QANPostgresqlPgstatementsAgent *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent `json:"qan_postgresql_pgstatements_agent,omitempty"`

	// qan postgresql pgstatmonitor agent
	QANPostgresqlPgstatmonitorAgent *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent `json:"qan_postgresql_pgstatmonitor_agent,omitempty"`

	// rds exporter
	RDSExporter *AgentsGetAgentOKBodyRDSExporter `json:"rds_exporter,omitempty"`

	// vmagent
	Vmagent *AgentsGetAgentOKBodyVmagent `json:"vmagent,omitempty"`
}

// Validate validates this agents get agent OK body
func (o *AgentsGetAgentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAzureDatabaseExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodbExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqldExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePMMAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysqlExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMongodbProfilerAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlPerfschemaAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANMysqlSlowlogAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatementsAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQANPostgresqlPgstatmonitorAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRDSExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVmagent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentsGetAgentOKBody) validateAzureDatabaseExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.AzureDatabaseExporter) { // not required
		return nil
	}

	if o.AzureDatabaseExporter != nil {
		if err := o.AzureDatabaseExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "azure_database_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateExternalExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.ExternalExporter) { // not required
		return nil
	}

	if o.ExternalExporter != nil {
		if err := o.ExternalExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "external_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateMongodbExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.MongodbExporter) { // not required
		return nil
	}

	if o.MongodbExporter != nil {
		if err := o.MongodbExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "mongodb_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateMysqldExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.MysqldExporter) { // not required
		return nil
	}

	if o.MysqldExporter != nil {
		if err := o.MysqldExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "mysqld_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateNodeExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.NodeExporter) { // not required
		return nil
	}

	if o.NodeExporter != nil {
		if err := o.NodeExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "node_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validatePMMAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.PMMAgent) { // not required
		return nil
	}

	if o.PMMAgent != nil {
		if err := o.PMMAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "pmm_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validatePostgresExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.PostgresExporter) { // not required
		return nil
	}

	if o.PostgresExporter != nil {
		if err := o.PostgresExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "postgres_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateProxysqlExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxysqlExporter) { // not required
		return nil
	}

	if o.ProxysqlExporter != nil {
		if err := o.ProxysqlExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "proxysql_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateQANMongodbProfilerAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMongodbProfilerAgent) { // not required
		return nil
	}

	if o.QANMongodbProfilerAgent != nil {
		if err := o.QANMongodbProfilerAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "qan_mongodb_profiler_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateQANMysqlPerfschemaAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMysqlPerfschemaAgent) { // not required
		return nil
	}

	if o.QANMysqlPerfschemaAgent != nil {
		if err := o.QANMysqlPerfschemaAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "qan_mysql_perfschema_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateQANMysqlSlowlogAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.QANMysqlSlowlogAgent) { // not required
		return nil
	}

	if o.QANMysqlSlowlogAgent != nil {
		if err := o.QANMysqlSlowlogAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "qan_mysql_slowlog_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateQANPostgresqlPgstatementsAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.QANPostgresqlPgstatementsAgent) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatementsAgent != nil {
		if err := o.QANPostgresqlPgstatementsAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "qan_postgresql_pgstatements_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateQANPostgresqlPgstatmonitorAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.QANPostgresqlPgstatmonitorAgent) { // not required
		return nil
	}

	if o.QANPostgresqlPgstatmonitorAgent != nil {
		if err := o.QANPostgresqlPgstatmonitorAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "qan_postgresql_pgstatmonitor_agent")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateRDSExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.RDSExporter) { // not required
		return nil
	}

	if o.RDSExporter != nil {
		if err := o.RDSExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "rds_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AgentsGetAgentOKBody) validateVmagent(formats strfmt.Registry) error {

	if swag.IsZero(o.Vmagent) { // not required
		return nil
	}

	if o.Vmagent != nil {
		if err := o.Vmagent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsGetAgentOk" + "." + "vmagent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBody) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyAzureDatabaseExporter AzureDatabaseExporter runs on Generic or Container Node and exposes RemoteAzure Node metrics.
swagger:model AgentsGetAgentOKBodyAzureDatabaseExporter
*/
type AgentsGetAgentOKBodyAzureDatabaseExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// Azure database subscription ID.
	AzureDatabaseSubscriptionID string `json:"azure_database_subscription_id,omitempty"`

	// Azure database resource type (mysql, maria, postgres)
	AzureDatabaseResourceType string `json:"azure_database_resource_type,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if the exporter operates in push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`
}

// Validate validates this agents get agent OK body azure database exporter
func (o *AgentsGetAgentOKBodyAzureDatabaseExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyAzureDatabaseExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyAzureDatabaseExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyAzureDatabaseExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyAzureDatabaseExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyAzureDatabaseExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyAzureDatabaseExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyAzureDatabaseExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyAzureDatabaseExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"azure_database_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyAzureDatabaseExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyAzureDatabaseExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyAzureDatabaseExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyExternalExporter ExternalExporter runs on any Node type, including Remote Node.
swagger:model AgentsGetAgentOKBodyExternalExporter
*/
type AgentsGetAgentOKBodyExternalExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// If disabled, metrics from this exporter will not be collected.
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// HTTP basic auth username for collecting metrics.
	Username string `json:"username,omitempty"`

	// Scheme to generate URI to exporter metrics endpoints.
	Scheme string `json:"scheme,omitempty"`

	// Path under which metrics are exposed, used to generate URI.
	MetricsPath string `json:"metrics_path,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`
}

// Validate validates this agents get agent OK body external exporter
func (o *AgentsGetAgentOKBodyExternalExporter) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyExternalExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyExternalExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyExternalExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyMongodbExporter MongoDBExporter runs on Generic or Container Node and exposes MongoDB Service metrics.
swagger:model AgentsGetAgentOKBodyMongodbExporter
*/
type AgentsGetAgentOKBodyMongodbExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// List of colletions to get stats from. Can use *
	StatsCollections []string `json:"stats_collections"`

	// Collections limit. Only get Databases and collection stats if the total number of collections in the server
	// is less than this value. 0: no limit
	CollectionsLimit int32 `json:"collections_limit,omitempty"`

	// Enable All collectors.
	EnableAllCollectors bool `json:"enable_all_collectors,omitempty"`
}

// Validate validates this agents get agent OK body mongodb exporter
func (o *AgentsGetAgentOKBodyMongodbExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyMongodbExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyMongodbExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyMongodbExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyMongodbExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyMongodbExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyMongodbExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyMongodbExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyMongodbExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyMongodbExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyMongodbExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyMongodbExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyMongodbExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyMongodbExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyMongodbExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyMongodbExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyMongodbExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyMongodbExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyMongodbExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyMongodbExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyMongodbExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"mongodb_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyMongodbExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyMongodbExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyMongodbExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyMysqldExporter MySQLdExporter runs on Generic or Container Node and exposes MySQL Service metrics.
swagger:model AgentsGetAgentOKBodyMysqldExporter
*/
type AgentsGetAgentOKBodyMysqldExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// Tablestats group collectors are disabled if there are more than that number of tables.
	// 0 means tablestats group collectors are always enabled (no limit).
	// Negative value means tablestats group collectors are always disabled.
	TablestatsGroupTableLimit int32 `json:"tablestats_group_table_limit,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// True if tablestats group collectors are currently disabled.
	TablestatsGroupDisabled bool `json:"tablestats_group_disabled,omitempty"`
}

// Validate validates this agents get agent OK body mysqld exporter
func (o *AgentsGetAgentOKBodyMysqldExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyMysqldExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyMysqldExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyMysqldExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyMysqldExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyMysqldExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyMysqldExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyMysqldExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyMysqldExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyMysqldExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyMysqldExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyMysqldExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyMysqldExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyMysqldExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyMysqldExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyMysqldExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyMysqldExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyMysqldExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyMysqldExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyMysqldExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyMysqldExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"mysqld_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyMysqldExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyMysqldExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyMysqldExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyNodeExporter NodeExporter runs on Generic or Container Node and exposes its metrics.
swagger:model AgentsGetAgentOKBodyNodeExporter
*/
type AgentsGetAgentOKBodyNodeExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this agents get agent OK body node exporter
func (o *AgentsGetAgentOKBodyNodeExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyNodeExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyNodeExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyNodeExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyNodeExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyNodeExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyNodeExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyNodeExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyNodeExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyNodeExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyNodeExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyNodeExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyNodeExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyNodeExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyNodeExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyNodeExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyNodeExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyNodeExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyNodeExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyNodeExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyNodeExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"node_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyNodeExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyNodeExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyNodeExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyPMMAgent PMMAgent runs on Generic or Container Node.
swagger:model AgentsGetAgentOKBodyPMMAgent
*/
type AgentsGetAgentOKBodyPMMAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	Connected bool `json:"connected,omitempty"`
}

// Validate validates this agents get agent OK body PMM agent
func (o *AgentsGetAgentOKBodyPMMAgent) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyPMMAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyPMMAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyPMMAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyPostgresExporter PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model AgentsGetAgentOKBodyPostgresExporter
*/
type AgentsGetAgentOKBodyPostgresExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation. Uses sslmode=required instead of verify-full.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this agents get agent OK body postgres exporter
func (o *AgentsGetAgentOKBodyPostgresExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyPostgresExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyPostgresExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyPostgresExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyPostgresExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyPostgresExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyPostgresExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyPostgresExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyPostgresExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyPostgresExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyPostgresExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyPostgresExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyPostgresExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyPostgresExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyPostgresExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyPostgresExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyPostgresExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyPostgresExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyPostgresExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyPostgresExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyPostgresExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"postgres_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyPostgresExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyPostgresExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyPostgresExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyProxysqlExporter ProxySQLExporter runs on Generic or Container Node and exposes ProxySQL Service metrics.
swagger:model AgentsGetAgentOKBodyProxysqlExporter
*/
type AgentsGetAgentOKBodyProxysqlExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// ProxySQL username for scraping metrics.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`

	// List of disabled collector names.
	DisabledCollectors []string `json:"disabled_collectors"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`
}

// Validate validates this agents get agent OK body proxysql exporter
func (o *AgentsGetAgentOKBodyProxysqlExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyProxysqlExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyProxysqlExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyProxysqlExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyProxysqlExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyProxysqlExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyProxysqlExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyProxysqlExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyProxysqlExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyProxysqlExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyProxysqlExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyProxysqlExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyProxysqlExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyProxysqlExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyProxysqlExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyProxysqlExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyProxysqlExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyProxysqlExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyProxysqlExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyProxysqlExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyProxysqlExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"proxysql_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyProxysqlExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyProxysqlExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyProxysqlExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyQANMongodbProfilerAgent QANMongoDBProfilerAgent runs within pmm-agent and sends MongoDB Query Analytics data to the PMM Server.
swagger:model AgentsGetAgentOKBodyQANMongodbProfilerAgent
*/
type AgentsGetAgentOKBodyQANMongodbProfilerAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MongoDB username for getting profiler data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body QAN mongodb profiler agent
func (o *AgentsGetAgentOKBodyQANMongodbProfilerAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyQanMongodbProfilerAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyQanMongodbProfilerAgentTypeStatusPropEnum = append(agentsGetAgentOkBodyQanMongodbProfilerAgentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyQANMongodbProfilerAgentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyQANMongodbProfilerAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyQanMongodbProfilerAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyQANMongodbProfilerAgent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"qan_mongodb_profiler_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMongodbProfilerAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMongodbProfilerAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyQANMongodbProfilerAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyQANMysqlPerfschemaAgent QANMySQLPerfSchemaAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AgentsGetAgentOKBodyQANMysqlPerfschemaAgent
*/
type AgentsGetAgentOKBodyQANMysqlPerfschemaAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body QAN mysql perfschema agent
func (o *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyQanMysqlPerfschemaAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyQanMysqlPerfschemaAgentTypeStatusPropEnum = append(agentsGetAgentOkBodyQanMysqlPerfschemaAgentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyQANMysqlPerfschemaAgentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyQanMysqlPerfschemaAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"qan_mysql_perfschema_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMysqlPerfschemaAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyQANMysqlPerfschemaAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyQANMysqlSlowlogAgent QANMySQLSlowlogAgent runs within pmm-agent and sends MySQL Query Analytics data to the PMM Server.
swagger:model AgentsGetAgentOKBodyQANMysqlSlowlogAgent
*/
type AgentsGetAgentOKBodyQANMysqlSlowlogAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// MySQL username for getting performance data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Certificate Authority certificate chain.
	TLSCa string `json:"tls_ca,omitempty"`

	// Client certificate.
	TLSCert string `json:"tls_cert,omitempty"`

	// Password for decrypting tls_cert.
	TLSKey string `json:"tls_key,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Slowlog file is rotated at this size if > 0.
	MaxSlowlogFileSize string `json:"max_slowlog_file_size,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body QAN mysql slowlog agent
func (o *AgentsGetAgentOKBodyQANMysqlSlowlogAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyQanMysqlSlowlogAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyQanMysqlSlowlogAgentTypeStatusPropEnum = append(agentsGetAgentOkBodyQanMysqlSlowlogAgentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyQANMysqlSlowlogAgentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyQANMysqlSlowlogAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyQanMysqlSlowlogAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyQANMysqlSlowlogAgent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"qan_mysql_slowlog_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMysqlSlowlogAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANMysqlSlowlogAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyQANMysqlSlowlogAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent QANPostgreSQLPgStatementsAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent
*/
type AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat statements data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body QAN postgresql pgstatements agent
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyQanPostgresqlPgstatementsAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyQanPostgresqlPgstatementsAgentTypeStatusPropEnum = append(agentsGetAgentOkBodyQanPostgresqlPgstatementsAgentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyQanPostgresqlPgstatementsAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"qan_postgresql_pgstatements_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyQANPostgresqlPgstatementsAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent QANPostgreSQLPgStatMonitorAgent runs within pmm-agent and sends PostgreSQL Query Analytics data to the PMM Server.
swagger:model AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent
*/
type AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// PostgreSQL username for getting pg stat monitor data.
	Username string `json:"username,omitempty"`

	// Use TLS for database connections.
	TLS bool `json:"tls,omitempty"`

	// Skip TLS certificate and hostname validation.
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// True if query examples are disabled.
	QueryExamplesDisabled bool `json:"query_examples_disabled,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body QAN postgresql pgstatmonitor agent
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum = append(agentsGetAgentOkBodyQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyQanPostgresqlPgstatmonitorAgentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"qan_postgresql_pgstatmonitor_agent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyQANPostgresqlPgstatmonitorAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyRDSExporter RDSExporter runs on Generic or Container Node and exposes RemoteRDS Node metrics.
swagger:model AgentsGetAgentOKBodyRDSExporter
*/
type AgentsGetAgentOKBodyRDSExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Node identifier.
	NodeID string `json:"node_id,omitempty"`

	// AWS Access Key.
	AWSAccessKey string `json:"aws_access_key,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`

	// Listen port for scraping metrics (the same for several configurations).
	ListenPort int64 `json:"listen_port,omitempty"`

	// Basic metrics are disabled.
	BasicMetricsDisabled bool `json:"basic_metrics_disabled,omitempty"`

	// Enhanced metrics are disabled.
	EnhancedMetricsDisabled bool `json:"enhanced_metrics_disabled,omitempty"`

	// True if exporter uses push metrics mode.
	PushMetricsEnabled bool `json:"push_metrics_enabled,omitempty"`
}

// Validate validates this agents get agent OK body RDS exporter
func (o *AgentsGetAgentOKBodyRDSExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyRdsExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyRdsExporterTypeStatusPropEnum = append(agentsGetAgentOkBodyRdsExporterTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyRDSExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyRDSExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyRDSExporterStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyRDSExporterStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyRDSExporterStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyRDSExporterStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyRDSExporterStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyRDSExporterStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyRDSExporterStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyRDSExporterStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyRDSExporterStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyRDSExporterStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyRDSExporterStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyRDSExporterStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyRDSExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyRdsExporterTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyRDSExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"rds_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyRDSExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyRDSExporter) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyRDSExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsGetAgentOKBodyVmagent VMAgent runs on Generic or Container Node alongside pmm-agent.
// It scrapes other exporter Agents that are configured with push_metrics_enabled
// and uses Prometheus remote write protocol to push metrics to PMM Server.
swagger:model AgentsGetAgentOKBodyVmagent
*/
type AgentsGetAgentOKBodyVmagent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// AgentStatus represents actual Agent status.
	//
	//  - STARTING: Agent is starting.
	//  - RUNNING: Agent is running.
	//  - WAITING: Agent encountered error and will be restarted automatically soon.
	//  - STOPPING: Agent is stopping.
	//  - DONE: Agent finished.
	//  - UNKNOWN: Agent is not connected, we don't know anything about it's state.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE UNKNOWN]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agents get agent OK body vmagent
func (o *AgentsGetAgentOKBodyVmagent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentsGetAgentOkBodyVmagentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentsGetAgentOkBodyVmagentTypeStatusPropEnum = append(agentsGetAgentOkBodyVmagentTypeStatusPropEnum, v)
	}
}

const (

	// AgentsGetAgentOKBodyVmagentStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AgentsGetAgentOKBodyVmagentStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AgentsGetAgentOKBodyVmagentStatusSTARTING captures enum value "STARTING"
	AgentsGetAgentOKBodyVmagentStatusSTARTING string = "STARTING"

	// AgentsGetAgentOKBodyVmagentStatusRUNNING captures enum value "RUNNING"
	AgentsGetAgentOKBodyVmagentStatusRUNNING string = "RUNNING"

	// AgentsGetAgentOKBodyVmagentStatusWAITING captures enum value "WAITING"
	AgentsGetAgentOKBodyVmagentStatusWAITING string = "WAITING"

	// AgentsGetAgentOKBodyVmagentStatusSTOPPING captures enum value "STOPPING"
	AgentsGetAgentOKBodyVmagentStatusSTOPPING string = "STOPPING"

	// AgentsGetAgentOKBodyVmagentStatusDONE captures enum value "DONE"
	AgentsGetAgentOKBodyVmagentStatusDONE string = "DONE"

	// AgentsGetAgentOKBodyVmagentStatusUNKNOWN captures enum value "UNKNOWN"
	AgentsGetAgentOKBodyVmagentStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (o *AgentsGetAgentOKBodyVmagent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentsGetAgentOkBodyVmagentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AgentsGetAgentOKBodyVmagent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("agentsGetAgentOk"+"."+"vmagent"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyVmagent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsGetAgentOKBodyVmagent) UnmarshalBinary(b []byte) error {
	var res AgentsGetAgentOKBodyVmagent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
