// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgentsAddPMMAgentReader is a Reader for the AgentsAddPMMAgent structure.
type AgentsAddPMMAgentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AgentsAddPMMAgentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAgentsAddPMMAgentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAgentsAddPMMAgentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAgentsAddPMMAgentOK creates a AgentsAddPMMAgentOK with default headers values
func NewAgentsAddPMMAgentOK() *AgentsAddPMMAgentOK {
	return &AgentsAddPMMAgentOK{}
}

/*AgentsAddPMMAgentOK handles this case with default header values.

A successful response.
*/
type AgentsAddPMMAgentOK struct {
	Payload *AgentsAddPMMAgentOKBody
}

func (o *AgentsAddPMMAgentOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/AddPMMAgent][%d] agentsAddPmmAgentOk  %+v", 200, o.Payload)
}

func (o *AgentsAddPMMAgentOK) GetPayload() *AgentsAddPMMAgentOKBody {
	return o.Payload
}

func (o *AgentsAddPMMAgentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AgentsAddPMMAgentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAgentsAddPMMAgentDefault creates a AgentsAddPMMAgentDefault with default headers values
func NewAgentsAddPMMAgentDefault(code int) *AgentsAddPMMAgentDefault {
	return &AgentsAddPMMAgentDefault{
		_statusCode: code,
	}
}

/*AgentsAddPMMAgentDefault handles this case with default header values.

An unexpected error response.
*/
type AgentsAddPMMAgentDefault struct {
	_statusCode int

	Payload *AgentsAddPMMAgentDefaultBody
}

// Code gets the status code for the agents add PMM agent default response
func (o *AgentsAddPMMAgentDefault) Code() int {
	return o._statusCode
}

func (o *AgentsAddPMMAgentDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Agents/AddPMMAgent][%d] Agents_AddPMMAgent default  %+v", o._statusCode, o.Payload)
}

func (o *AgentsAddPMMAgentDefault) GetPayload() *AgentsAddPMMAgentDefaultBody {
	return o.Payload
}

func (o *AgentsAddPMMAgentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AgentsAddPMMAgentDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AgentsAddPMMAgentBody agents add PMM agent body
swagger:model AgentsAddPMMAgentBody
*/
type AgentsAddPMMAgentBody struct {

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this agents add PMM agent body
func (o *AgentsAddPMMAgentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentsAddPMMAgentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsAddPMMAgentBody) UnmarshalBinary(b []byte) error {
	var res AgentsAddPMMAgentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsAddPMMAgentDefaultBody agents add PMM agent default body
swagger:model AgentsAddPMMAgentDefaultBody
*/
type AgentsAddPMMAgentDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this agents add PMM agent default body
func (o *AgentsAddPMMAgentDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentsAddPMMAgentDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Agents_AddPMMAgent default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsAddPMMAgentDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsAddPMMAgentDefaultBody) UnmarshalBinary(b []byte) error {
	var res AgentsAddPMMAgentDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsAddPMMAgentOKBody agents add PMM agent OK body
swagger:model AgentsAddPMMAgentOKBody
*/
type AgentsAddPMMAgentOKBody struct {

	// pmm agent
	PMMAgent *AgentsAddPMMAgentOKBodyPMMAgent `json:"pmm_agent,omitempty"`
}

// Validate validates this agents add PMM agent OK body
func (o *AgentsAddPMMAgentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePMMAgent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentsAddPMMAgentOKBody) validatePMMAgent(formats strfmt.Registry) error {

	if swag.IsZero(o.PMMAgent) { // not required
		return nil
	}

	if o.PMMAgent != nil {
		if err := o.PMMAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentsAddPmmAgentOk" + "." + "pmm_agent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentsAddPMMAgentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsAddPMMAgentOKBody) UnmarshalBinary(b []byte) error {
	var res AgentsAddPMMAgentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AgentsAddPMMAgentOKBodyPMMAgent PMMAgent runs on Generic or Container Node.
swagger:model AgentsAddPMMAgentOKBodyPMMAgent
*/
type AgentsAddPMMAgentOKBodyPMMAgent struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Node identifier where this instance runs.
	RunsOnNodeID string `json:"runs_on_node_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// True if Agent is running and connected to pmm-managed.
	Connected bool `json:"connected,omitempty"`
}

// Validate validates this agents add PMM agent OK body PMM agent
func (o *AgentsAddPMMAgentOKBodyPMMAgent) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentsAddPMMAgentOKBodyPMMAgent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentsAddPMMAgentOKBodyPMMAgent) UnmarshalBinary(b []byte) error {
	var res AgentsAddPMMAgentOKBodyPMMAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
