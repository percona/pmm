// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AgentsAddAzureDatabaseExporter(params *AgentsAddAzureDatabaseExporterParams) (*AgentsAddAzureDatabaseExporterOK, error)

	AgentsAddExternalExporter(params *AgentsAddExternalExporterParams) (*AgentsAddExternalExporterOK, error)

	AgentsAddMongoDBExporter(params *AgentsAddMongoDBExporterParams) (*AgentsAddMongoDBExporterOK, error)

	AgentsAddMySQLdExporter(params *AgentsAddMySQLdExporterParams) (*AgentsAddMySQLdExporterOK, error)

	AgentsAddNodeExporter(params *AgentsAddNodeExporterParams) (*AgentsAddNodeExporterOK, error)

	AgentsAddPMMAgent(params *AgentsAddPMMAgentParams) (*AgentsAddPMMAgentOK, error)

	AgentsAddPostgresExporter(params *AgentsAddPostgresExporterParams) (*AgentsAddPostgresExporterOK, error)

	AgentsAddProxySQLExporter(params *AgentsAddProxySQLExporterParams) (*AgentsAddProxySQLExporterOK, error)

	AgentsAddQANMongoDBProfilerAgent(params *AgentsAddQANMongoDBProfilerAgentParams) (*AgentsAddQANMongoDBProfilerAgentOK, error)

	AgentsAddQANMySQLPerfSchemaAgent(params *AgentsAddQANMySQLPerfSchemaAgentParams) (*AgentsAddQANMySQLPerfSchemaAgentOK, error)

	AgentsAddQANMySQLSlowlogAgent(params *AgentsAddQANMySQLSlowlogAgentParams) (*AgentsAddQANMySQLSlowlogAgentOK, error)

	AgentsAddQANPostgreSQLPgStatMonitorAgent(params *AgentsAddQANPostgreSQLPgStatMonitorAgentParams) (*AgentsAddQANPostgreSQLPgStatMonitorAgentOK, error)

	AgentsAddQANPostgreSQLPgStatementsAgent(params *AgentsAddQANPostgreSQLPgStatementsAgentParams) (*AgentsAddQANPostgreSQLPgStatementsAgentOK, error)

	AgentsAddRDSExporter(params *AgentsAddRDSExporterParams) (*AgentsAddRDSExporterOK, error)

	AgentsChangeAzureDatabaseExporter(params *AgentsChangeAzureDatabaseExporterParams) (*AgentsChangeAzureDatabaseExporterOK, error)

	AgentsChangeExternalExporter(params *AgentsChangeExternalExporterParams) (*AgentsChangeExternalExporterOK, error)

	AgentsChangeMongoDBExporter(params *AgentsChangeMongoDBExporterParams) (*AgentsChangeMongoDBExporterOK, error)

	AgentsChangeMySQLdExporter(params *AgentsChangeMySQLdExporterParams) (*AgentsChangeMySQLdExporterOK, error)

	AgentsChangeNodeExporter(params *AgentsChangeNodeExporterParams) (*AgentsChangeNodeExporterOK, error)

	AgentsChangePostgresExporter(params *AgentsChangePostgresExporterParams) (*AgentsChangePostgresExporterOK, error)

	AgentsChangeProxySQLExporter(params *AgentsChangeProxySQLExporterParams) (*AgentsChangeProxySQLExporterOK, error)

	AgentsChangeQANMongoDBProfilerAgent(params *AgentsChangeQANMongoDBProfilerAgentParams) (*AgentsChangeQANMongoDBProfilerAgentOK, error)

	AgentsChangeQANMySQLPerfSchemaAgent(params *AgentsChangeQANMySQLPerfSchemaAgentParams) (*AgentsChangeQANMySQLPerfSchemaAgentOK, error)

	AgentsChangeQANMySQLSlowlogAgent(params *AgentsChangeQANMySQLSlowlogAgentParams) (*AgentsChangeQANMySQLSlowlogAgentOK, error)

	AgentsChangeQANPostgreSQLPgStatMonitorAgent(params *AgentsChangeQANPostgreSQLPgStatMonitorAgentParams) (*AgentsChangeQANPostgreSQLPgStatMonitorAgentOK, error)

	AgentsChangeQANPostgreSQLPgStatementsAgent(params *AgentsChangeQANPostgreSQLPgStatementsAgentParams) (*AgentsChangeQANPostgreSQLPgStatementsAgentOK, error)

	AgentsChangeRDSExporter(params *AgentsChangeRDSExporterParams) (*AgentsChangeRDSExporterOK, error)

	AgentsGetAgent(params *AgentsGetAgentParams) (*AgentsGetAgentOK, error)

	AgentsListAgents(params *AgentsListAgentsParams) (*AgentsListAgentsOK, error)

	AgentsRemoveAgent(params *AgentsRemoveAgentParams) (*AgentsRemoveAgentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AgentsAddAzureDatabaseExporter adds azure database exporter

  Adds azure_database_exporter Agent.
*/
func (a *Client) AgentsAddAzureDatabaseExporter(params *AgentsAddAzureDatabaseExporterParams) (*AgentsAddAzureDatabaseExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddAzureDatabaseExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddAzureDatabaseExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddAzureDatabaseExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddAzureDatabaseExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddAzureDatabaseExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddAzureDatabaseExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddExternalExporter adds external exporter

  Adds external_exporter Agent.
*/
func (a *Client) AgentsAddExternalExporter(params *AgentsAddExternalExporterParams) (*AgentsAddExternalExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddExternalExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddExternalExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddExternalExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddExternalExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddExternalExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddExternalExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddMongoDBExporter adds mongo DB exporter

  Adds mongodb_exporter Agent.
*/
func (a *Client) AgentsAddMongoDBExporter(params *AgentsAddMongoDBExporterParams) (*AgentsAddMongoDBExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddMongoDBExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddMongoDBExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddMongoDBExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddMongoDBExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddMongoDBExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddMongoDBExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddMySQLdExporter adds mysqld exporter

  Adds mysqld_exporter Agent.
*/
func (a *Client) AgentsAddMySQLdExporter(params *AgentsAddMySQLdExporterParams) (*AgentsAddMySQLdExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddMySQLdExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddMySQLdExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddMySQLdExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddMySQLdExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddMySQLdExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddMySQLdExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddNodeExporter adds node exporter

  Adds node_exporter Agent.
*/
func (a *Client) AgentsAddNodeExporter(params *AgentsAddNodeExporterParams) (*AgentsAddNodeExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddNodeExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddNodeExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddNodeExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddNodeExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddNodeExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddNodeExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddPMMAgent adds PMM agent

  Adds PMM Agent.
*/
func (a *Client) AgentsAddPMMAgent(params *AgentsAddPMMAgentParams) (*AgentsAddPMMAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddPMMAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddPMMAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddPMMAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddPMMAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddPMMAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddPMMAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddPostgresExporter adds postgres exporter

  Adds postgres_exporter Agent.
*/
func (a *Client) AgentsAddPostgresExporter(params *AgentsAddPostgresExporterParams) (*AgentsAddPostgresExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddPostgresExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddPostgresExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddPostgresExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddPostgresExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddPostgresExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddPostgresExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddProxySQLExporter adds proxy SQL exporter

  Adds proxysql_exporter Agent.
*/
func (a *Client) AgentsAddProxySQLExporter(params *AgentsAddProxySQLExporterParams) (*AgentsAddProxySQLExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddProxySQLExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddProxySQLExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddProxySQLExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddProxySQLExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddProxySQLExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddProxySQLExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddQANMongoDBProfilerAgent adds QAN mongo DB profiler agent

  Adds 'Query Analytics MongoDB Profiler' Agent.
*/
func (a *Client) AgentsAddQANMongoDBProfilerAgent(params *AgentsAddQANMongoDBProfilerAgentParams) (*AgentsAddQANMongoDBProfilerAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddQANMongoDBProfilerAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddQANMongoDBProfilerAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddQANMongoDBProfilerAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddQANMongoDBProfilerAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddQANMongoDBProfilerAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddQANMongoDBProfilerAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddQANMySQLPerfSchemaAgent adds QAN my SQL perf schema agent

  Adds 'Query Analytics MySQL PerfSchema' Agent.
*/
func (a *Client) AgentsAddQANMySQLPerfSchemaAgent(params *AgentsAddQANMySQLPerfSchemaAgentParams) (*AgentsAddQANMySQLPerfSchemaAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddQANMySQLPerfSchemaAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddQANMySQLPerfSchemaAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddQANMySQLPerfSchemaAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddQANMySQLPerfSchemaAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddQANMySQLPerfSchemaAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddQANMySQLPerfSchemaAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddQANMySQLSlowlogAgent adds QAN my SQL slowlog agent

  Adds 'Query Analytics MySQL Slowlog' Agent.
*/
func (a *Client) AgentsAddQANMySQLSlowlogAgent(params *AgentsAddQANMySQLSlowlogAgentParams) (*AgentsAddQANMySQLSlowlogAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddQANMySQLSlowlogAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddQANMySQLSlowlogAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddQANMySQLSlowlogAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddQANMySQLSlowlogAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddQANMySQLSlowlogAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddQANMySQLSlowlogAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddQANPostgreSQLPgStatMonitorAgent adds QAN postgre SQL pg stat monitor agent

  Adds 'Query Analytics PostgreSQL pg_stat_monitor' Agent.
*/
func (a *Client) AgentsAddQANPostgreSQLPgStatMonitorAgent(params *AgentsAddQANPostgreSQLPgStatMonitorAgentParams) (*AgentsAddQANPostgreSQLPgStatMonitorAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddQANPostgreSQLPgStatMonitorAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddQANPostgreSQLPgStatMonitorAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddQANPostgreSQLPgStatMonitorAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddQANPostgreSQLPgStatMonitorAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddQANPostgreSQLPgStatMonitorAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddQANPostgreSQLPgStatMonitorAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddQANPostgreSQLPgStatementsAgent adds QAN postgre SQL pg stat statements agent

  Adds 'Query Analytics PostgreSQL pg_stat_statements' Agent.
*/
func (a *Client) AgentsAddQANPostgreSQLPgStatementsAgent(params *AgentsAddQANPostgreSQLPgStatementsAgentParams) (*AgentsAddQANPostgreSQLPgStatementsAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddQANPostgreSQLPgStatementsAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddQANPostgreSQLPgStatementsAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddQANPostgreSQLPgStatementsAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddQANPostgreSQLPgStatementsAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddQANPostgreSQLPgStatementsAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddQANPostgreSQLPgStatementsAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsAddRDSExporter adds RDS exporter

  Adds rds_exporter Agent.
*/
func (a *Client) AgentsAddRDSExporter(params *AgentsAddRDSExporterParams) (*AgentsAddRDSExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsAddRDSExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_AddRDSExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/AddRDSExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsAddRDSExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsAddRDSExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsAddRDSExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeAzureDatabaseExporter changes azure database exporter

  Changes azure_database_exporter Agent.
*/
func (a *Client) AgentsChangeAzureDatabaseExporter(params *AgentsChangeAzureDatabaseExporterParams) (*AgentsChangeAzureDatabaseExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeAzureDatabaseExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeAzureDatabaseExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeAzureDatabaseExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeAzureDatabaseExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeAzureDatabaseExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeAzureDatabaseExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeExternalExporter changes external exporter

  Changes external_exporter Agent.
*/
func (a *Client) AgentsChangeExternalExporter(params *AgentsChangeExternalExporterParams) (*AgentsChangeExternalExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeExternalExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeExternalExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeExternalExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeExternalExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeExternalExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeExternalExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeMongoDBExporter changes mongo DB exporter

  Changes mongodb_exporter Agent.
*/
func (a *Client) AgentsChangeMongoDBExporter(params *AgentsChangeMongoDBExporterParams) (*AgentsChangeMongoDBExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeMongoDBExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeMongoDBExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeMongoDBExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeMongoDBExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeMongoDBExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeMongoDBExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeMySQLdExporter changes mysqld exporter

  Changes mysqld_exporter Agent.
*/
func (a *Client) AgentsChangeMySQLdExporter(params *AgentsChangeMySQLdExporterParams) (*AgentsChangeMySQLdExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeMySQLdExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeMySQLdExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeMySQLdExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeMySQLdExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeMySQLdExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeMySQLdExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeNodeExporter changes node exporter

  Changes node_exporter Agent.
*/
func (a *Client) AgentsChangeNodeExporter(params *AgentsChangeNodeExporterParams) (*AgentsChangeNodeExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeNodeExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeNodeExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeNodeExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeNodeExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeNodeExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeNodeExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangePostgresExporter changes postgres exporter

  Changes postgres_exporter Agent.
*/
func (a *Client) AgentsChangePostgresExporter(params *AgentsChangePostgresExporterParams) (*AgentsChangePostgresExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangePostgresExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangePostgresExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangePostgresExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangePostgresExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangePostgresExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangePostgresExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeProxySQLExporter changes proxy SQL exporter

  Changes proxysql_exporter Agent.
*/
func (a *Client) AgentsChangeProxySQLExporter(params *AgentsChangeProxySQLExporterParams) (*AgentsChangeProxySQLExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeProxySQLExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeProxySQLExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeProxySQLExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeProxySQLExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeProxySQLExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeProxySQLExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeQANMongoDBProfilerAgent changes QAN mongo DB profiler agent

  Changes 'Query Analytics MongoDB Profiler' Agent.
*/
func (a *Client) AgentsChangeQANMongoDBProfilerAgent(params *AgentsChangeQANMongoDBProfilerAgentParams) (*AgentsChangeQANMongoDBProfilerAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeQANMongoDBProfilerAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeQANMongoDBProfilerAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeQANMongoDBProfilerAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeQANMongoDBProfilerAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeQANMongoDBProfilerAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeQANMongoDBProfilerAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeQANMySQLPerfSchemaAgent changes QAN my SQL perf schema agent

  Changes 'Query Analytics MySQL PerfSchema' Agent.
*/
func (a *Client) AgentsChangeQANMySQLPerfSchemaAgent(params *AgentsChangeQANMySQLPerfSchemaAgentParams) (*AgentsChangeQANMySQLPerfSchemaAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeQANMySQLPerfSchemaAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeQANMySQLPerfSchemaAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeQANMySQLPerfSchemaAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeQANMySQLPerfSchemaAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeQANMySQLPerfSchemaAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeQANMySQLPerfSchemaAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeQANMySQLSlowlogAgent changes QAN my SQL slowlog agent

  Changes 'Query Analytics MySQL Slowlog' Agent.
*/
func (a *Client) AgentsChangeQANMySQLSlowlogAgent(params *AgentsChangeQANMySQLSlowlogAgentParams) (*AgentsChangeQANMySQLSlowlogAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeQANMySQLSlowlogAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeQANMySQLSlowlogAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeQANMySQLSlowlogAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeQANMySQLSlowlogAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeQANMySQLSlowlogAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeQANMySQLSlowlogAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeQANPostgreSQLPgStatMonitorAgent changes QAN postgre SQL pg stat monitor agent

  Changes 'Query Analytics PostgreSQL pg_stat_monitor' Agent.
*/
func (a *Client) AgentsChangeQANPostgreSQLPgStatMonitorAgent(params *AgentsChangeQANPostgreSQLPgStatMonitorAgentParams) (*AgentsChangeQANPostgreSQLPgStatMonitorAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeQANPostgreSQLPgStatMonitorAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeQANPostgreSQLPgStatMonitorAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeQANPostgreSQLPgStatMonitorAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeQANPostgreSQLPgStatMonitorAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeQANPostgreSQLPgStatMonitorAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeQANPostgreSQLPgStatMonitorAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeQANPostgreSQLPgStatementsAgent changes QAN postgre SQL pg stat statements agent

  Changes 'Query Analytics PostgreSQL pg_stat_statements' Agent.
*/
func (a *Client) AgentsChangeQANPostgreSQLPgStatementsAgent(params *AgentsChangeQANPostgreSQLPgStatementsAgentParams) (*AgentsChangeQANPostgreSQLPgStatementsAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeQANPostgreSQLPgStatementsAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeQANPostgreSQLPgStatementsAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeQANPostgreSQLPgStatementsAgent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeQANPostgreSQLPgStatementsAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeQANPostgreSQLPgStatementsAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeQANPostgreSQLPgStatementsAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsChangeRDSExporter changes RDS exporter

  Changes rds_exporter Agent.
*/
func (a *Client) AgentsChangeRDSExporter(params *AgentsChangeRDSExporterParams) (*AgentsChangeRDSExporterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsChangeRDSExporterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ChangeRDSExporter",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/ChangeRDSExporter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsChangeRDSExporterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsChangeRDSExporterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsChangeRDSExporterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsGetAgent gets agent

  Returns a single Agent by ID.
*/
func (a *Client) AgentsGetAgent(params *AgentsGetAgentParams) (*AgentsGetAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsGetAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_GetAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsGetAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsGetAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsGetAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsListAgents lists agents

  Returns a list of all Agents.
*/
func (a *Client) AgentsListAgents(params *AgentsListAgentsParams) (*AgentsListAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsListAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_ListAgents",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsListAgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsListAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsListAgentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsRemoveAgent removes agent

  Removes Agent.
*/
func (a *Client) AgentsRemoveAgent(params *AgentsRemoveAgentParams) (*AgentsRemoveAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsRemoveAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Agents_RemoveAgent",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Agents/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsRemoveAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentsRemoveAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsRemoveAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
