// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddContainerNodeReader is a Reader for the AddContainerNode structure.
type AddContainerNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddContainerNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddContainerNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddContainerNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddContainerNodeOK creates a AddContainerNodeOK with default headers values
func NewAddContainerNodeOK() *AddContainerNodeOK {
	return &AddContainerNodeOK{}
}

/* AddContainerNodeOK describes a response with status code 200, with default header values.

A successful response.
*/
type AddContainerNodeOK struct {
	Payload *AddContainerNodeOKBody
}

func (o *AddContainerNodeOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddContainer][%d] addContainerNodeOk  %+v", 200, o.Payload)
}

func (o *AddContainerNodeOK) GetPayload() *AddContainerNodeOKBody {
	return o.Payload
}

func (o *AddContainerNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(AddContainerNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddContainerNodeDefault creates a AddContainerNodeDefault with default headers values
func NewAddContainerNodeDefault(code int) *AddContainerNodeDefault {
	return &AddContainerNodeDefault{
		_statusCode: code,
	}
}

/* AddContainerNodeDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AddContainerNodeDefault struct {
	_statusCode int

	Payload *AddContainerNodeDefaultBody
}

// Code gets the status code for the add container node default response
func (o *AddContainerNodeDefault) Code() int {
	return o._statusCode
}

func (o *AddContainerNodeDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddContainer][%d] AddContainerNode default  %+v", o._statusCode, o.Payload)
}

func (o *AddContainerNodeDefault) GetPayload() *AddContainerNodeDefaultBody {
	return o.Payload
}

func (o *AddContainerNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(AddContainerNodeDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddContainerNodeBody add container node body
swagger:model AddContainerNodeBody
*/
type AddContainerNodeBody struct {
	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Linux machine-id of the Generic Node where this Container Node runs.
	MachineID string `json:"machine_id,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add container node body
func (o *AddContainerNodeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add container node body based on context it is used
func (o *AddContainerNodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddContainerNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddContainerNodeBody) UnmarshalBinary(b []byte) error {
	var res AddContainerNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddContainerNodeDefaultBody add container node default body
swagger:model AddContainerNodeDefaultBody
*/
type AddContainerNodeDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*AddContainerNodeDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this add container node default body
func (o *AddContainerNodeDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddContainerNodeDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddContainerNode default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddContainerNode default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add container node default body based on the context it is used
func (o *AddContainerNodeDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddContainerNodeDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddContainerNode default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddContainerNode default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddContainerNodeDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddContainerNodeDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddContainerNodeDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddContainerNodeDefaultBodyDetailsItems0 add container node default body details items0
swagger:model AddContainerNodeDefaultBodyDetailsItems0
*/
type AddContainerNodeDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this add container node default body details items0
func (o *AddContainerNodeDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add container node default body details items0 based on context it is used
func (o *AddContainerNodeDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddContainerNodeDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddContainerNodeDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res AddContainerNodeDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddContainerNodeOKBody add container node OK body
swagger:model AddContainerNodeOKBody
*/
type AddContainerNodeOKBody struct {
	// container
	Container *AddContainerNodeOKBodyContainer `json:"container,omitempty"`
}

// Validate validates this add container node OK body
func (o *AddContainerNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddContainerNodeOKBody) validateContainer(formats strfmt.Registry) error {
	if swag.IsZero(o.Container) { // not required
		return nil
	}

	if o.Container != nil {
		if err := o.Container.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addContainerNodeOk" + "." + "container")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addContainerNodeOk" + "." + "container")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add container node OK body based on the context it is used
func (o *AddContainerNodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddContainerNodeOKBody) contextValidateContainer(ctx context.Context, formats strfmt.Registry) error {
	if o.Container != nil {
		if err := o.Container.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addContainerNodeOk" + "." + "container")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addContainerNodeOk" + "." + "container")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddContainerNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddContainerNodeOKBody) UnmarshalBinary(b []byte) error {
	var res AddContainerNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddContainerNodeOKBodyContainer ContainerNode represents a Docker container.
swagger:model AddContainerNodeOKBodyContainer
*/
type AddContainerNodeOKBodyContainer struct {
	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Linux machine-id of the Generic Node where this Container Node runs.
	MachineID string `json:"machine_id,omitempty"`

	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerID string `json:"container_id,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add container node OK body container
func (o *AddContainerNodeOKBodyContainer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add container node OK body container based on context it is used
func (o *AddContainerNodeOKBodyContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddContainerNodeOKBodyContainer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddContainerNodeOKBodyContainer) UnmarshalBinary(b []byte) error {
	var res AddContainerNodeOKBodyContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
