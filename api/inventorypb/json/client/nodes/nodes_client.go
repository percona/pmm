// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	NodesAddContainerNode(params *NodesAddContainerNodeParams) (*NodesAddContainerNodeOK, error)

	NodesAddGenericNode(params *NodesAddGenericNodeParams) (*NodesAddGenericNodeOK, error)

	NodesAddRemoteNode(params *NodesAddRemoteNodeParams) (*NodesAddRemoteNodeOK, error)

	NodesAddRemoteRDSNode(params *NodesAddRemoteRDSNodeParams) (*NodesAddRemoteRDSNodeOK, error)

	NodesGetNode(params *NodesGetNodeParams) (*NodesGetNodeOK, error)

	NodesListNodes(params *NodesListNodesParams) (*NodesListNodesOK, error)

	NodesRemoveNode(params *NodesRemoveNodeParams) (*NodesRemoveNodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NodesAddContainerNode adds container node adds container node
*/
func (a *Client) NodesAddContainerNode(params *NodesAddContainerNodeParams) (*NodesAddContainerNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddContainerNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_AddContainerNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/AddContainer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddContainerNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesAddContainerNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesAddContainerNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesAddGenericNode adds generic node adds generic node
*/
func (a *Client) NodesAddGenericNode(params *NodesAddGenericNodeParams) (*NodesAddGenericNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddGenericNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_AddGenericNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/AddGeneric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddGenericNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesAddGenericNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesAddGenericNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesAddRemoteNode adds remote node adds remote node
*/
func (a *Client) NodesAddRemoteNode(params *NodesAddRemoteNodeParams) (*NodesAddRemoteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddRemoteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_AddRemoteNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/AddRemote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddRemoteNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesAddRemoteNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesAddRemoteNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesAddRemoteRDSNode adds remote RDS node adds remote RDS node
*/
func (a *Client) NodesAddRemoteRDSNode(params *NodesAddRemoteRDSNodeParams) (*NodesAddRemoteRDSNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddRemoteRDSNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_AddRemoteRDSNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/AddRemoteRDS",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddRemoteRDSNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesAddRemoteRDSNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesAddRemoteRDSNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesGetNode gets node returns a single node by ID
*/
func (a *Client) NodesGetNode(params *NodesGetNodeParams) (*NodesGetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_GetNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesGetNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesGetNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesListNodes lists nodes returns a list of all nodes
*/
func (a *Client) NodesListNodes(params *NodesListNodesParams) (*NodesListNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesListNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_ListNodes",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesListNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesListNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesListNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NodesRemoveNode removes node removes node
*/
func (a *Client) NodesRemoveNode(params *NodesRemoveNodeParams) (*NodesRemoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesRemoveNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Nodes_RemoveNode",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Nodes/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesRemoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodesRemoveNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodesRemoveNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
