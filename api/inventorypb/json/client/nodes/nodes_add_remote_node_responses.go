// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodesAddRemoteNodeReader is a Reader for the NodesAddRemoteNode structure.
type NodesAddRemoteNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodesAddRemoteNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodesAddRemoteNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNodesAddRemoteNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNodesAddRemoteNodeOK creates a NodesAddRemoteNodeOK with default headers values
func NewNodesAddRemoteNodeOK() *NodesAddRemoteNodeOK {
	return &NodesAddRemoteNodeOK{}
}

/*NodesAddRemoteNodeOK handles this case with default header values.

A successful response.
*/
type NodesAddRemoteNodeOK struct {
	Payload *NodesAddRemoteNodeOKBody
}

func (o *NodesAddRemoteNodeOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddRemote][%d] nodesAddRemoteNodeOk  %+v", 200, o.Payload)
}

func (o *NodesAddRemoteNodeOK) GetPayload() *NodesAddRemoteNodeOKBody {
	return o.Payload
}

func (o *NodesAddRemoteNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NodesAddRemoteNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodesAddRemoteNodeDefault creates a NodesAddRemoteNodeDefault with default headers values
func NewNodesAddRemoteNodeDefault(code int) *NodesAddRemoteNodeDefault {
	return &NodesAddRemoteNodeDefault{
		_statusCode: code,
	}
}

/*NodesAddRemoteNodeDefault handles this case with default header values.

An unexpected error response.
*/
type NodesAddRemoteNodeDefault struct {
	_statusCode int

	Payload *NodesAddRemoteNodeDefaultBody
}

// Code gets the status code for the nodes add remote node default response
func (o *NodesAddRemoteNodeDefault) Code() int {
	return o._statusCode
}

func (o *NodesAddRemoteNodeDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddRemote][%d] Nodes_AddRemoteNode default  %+v", o._statusCode, o.Payload)
}

func (o *NodesAddRemoteNodeDefault) GetPayload() *NodesAddRemoteNodeDefaultBody {
	return o.Payload
}

func (o *NodesAddRemoteNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NodesAddRemoteNodeDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*NodesAddRemoteNodeBody nodes add remote node body
swagger:model NodesAddRemoteNodeBody
*/
type NodesAddRemoteNodeBody struct {

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this nodes add remote node body
func (o *NodesAddRemoteNodeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NodesAddRemoteNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NodesAddRemoteNodeBody) UnmarshalBinary(b []byte) error {
	var res NodesAddRemoteNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NodesAddRemoteNodeDefaultBody nodes add remote node default body
swagger:model NodesAddRemoteNodeDefaultBody
*/
type NodesAddRemoteNodeDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this nodes add remote node default body
func (o *NodesAddRemoteNodeDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NodesAddRemoteNodeDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Nodes_AddRemoteNode default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NodesAddRemoteNodeDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NodesAddRemoteNodeDefaultBody) UnmarshalBinary(b []byte) error {
	var res NodesAddRemoteNodeDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NodesAddRemoteNodeOKBody nodes add remote node OK body
swagger:model NodesAddRemoteNodeOKBody
*/
type NodesAddRemoteNodeOKBody struct {

	// remote
	Remote *NodesAddRemoteNodeOKBodyRemote `json:"remote,omitempty"`
}

// Validate validates this nodes add remote node OK body
func (o *NodesAddRemoteNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NodesAddRemoteNodeOKBody) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(o.Remote) { // not required
		return nil
	}

	if o.Remote != nil {
		if err := o.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodesAddRemoteNodeOk" + "." + "remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NodesAddRemoteNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NodesAddRemoteNodeOKBody) UnmarshalBinary(b []byte) error {
	var res NodesAddRemoteNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NodesAddRemoteNodeOKBodyRemote RemoteNode represents generic remote Node. It's a node where we don't run pmm-agents. Only external exporters can run on Remote Nodes.
swagger:model NodesAddRemoteNodeOKBodyRemote
*/
type NodesAddRemoteNodeOKBodyRemote struct {

	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this nodes add remote node OK body remote
func (o *NodesAddRemoteNodeOKBodyRemote) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NodesAddRemoteNodeOKBodyRemote) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NodesAddRemoteNodeOKBodyRemote) UnmarshalBinary(b []byte) error {
	var res NodesAddRemoteNodeOKBodyRemote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
