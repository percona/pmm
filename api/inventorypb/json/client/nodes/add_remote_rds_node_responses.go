// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// AddRemoteRDSNodeReader is a Reader for the AddRemoteRDSNode structure.
type AddRemoteRDSNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRemoteRDSNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRemoteRDSNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddRemoteRDSNodeOK creates a AddRemoteRDSNodeOK with default headers values
func NewAddRemoteRDSNodeOK() *AddRemoteRDSNodeOK {
	return &AddRemoteRDSNodeOK{}
}

/*AddRemoteRDSNodeOK handles this case with default header values.

A successful response.
*/
type AddRemoteRDSNodeOK struct {
	Payload *AddRemoteRDSNodeOKBody
}

func (o *AddRemoteRDSNodeOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddRemoteRDS][%d] addRemoteRdsNodeOk  %+v", 200, o.Payload)
}

func (o *AddRemoteRDSNodeOK) GetPayload() *AddRemoteRDSNodeOKBody {
	return o.Payload
}

func (o *AddRemoteRDSNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddRemoteRDSNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddRemoteRDSNodeBody add remote RDS node body
swagger:model AddRemoteRDSNodeBody
*/
type AddRemoteRDSNodeBody struct {

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// DB instance identifier.
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add remote RDS node body
func (o *AddRemoteRDSNodeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteRDSNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteRDSNodeBody) UnmarshalBinary(b []byte) error {
	var res AddRemoteRDSNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddRemoteRDSNodeOKBody add remote RDS node OK body
swagger:model AddRemoteRDSNodeOKBody
*/
type AddRemoteRDSNodeOKBody struct {

	// remote rds
	RemoteRDS *AddRemoteRDSNodeOKBodyRemoteRDS `json:"remote_rds,omitempty"`
}

// Validate validates this add remote RDS node OK body
func (o *AddRemoteRDSNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRemoteRDS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddRemoteRDSNodeOKBody) validateRemoteRDS(formats strfmt.Registry) error {

	if swag.IsZero(o.RemoteRDS) { // not required
		return nil
	}

	if o.RemoteRDS != nil {
		if err := o.RemoteRDS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addRemoteRdsNodeOk" + "." + "remote_rds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteRDSNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteRDSNodeOKBody) UnmarshalBinary(b []byte) error {
	var res AddRemoteRDSNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddRemoteRDSNodeOKBodyRemoteRDS RemoteRDSNode represents remote RDS Node. Agents can't run on Remote Nodes.
swagger:model AddRemoteRDSNodeOKBodyRemoteRDS
*/
type AddRemoteRDSNodeOKBodyRemoteRDS struct {

	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// DB instance identifier.
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add remote RDS node OK body remote RDS
func (o *AddRemoteRDSNodeOKBodyRemoteRDS) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteRDSNodeOKBodyRemoteRDS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteRDSNodeOKBodyRemoteRDS) UnmarshalBinary(b []byte) error {
	var res AddRemoteRDSNodeOKBodyRemoteRDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
