// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// AddRemoteAmazonRDSNodeReader is a Reader for the AddRemoteAmazonRDSNode structure.
type AddRemoteAmazonRDSNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRemoteAmazonRDSNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRemoteAmazonRDSNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddRemoteAmazonRDSNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddRemoteAmazonRDSNodeOK creates a AddRemoteAmazonRDSNodeOK with default headers values
func NewAddRemoteAmazonRDSNodeOK() *AddRemoteAmazonRDSNodeOK {
	return &AddRemoteAmazonRDSNodeOK{}
}

/*AddRemoteAmazonRDSNodeOK handles this case with default header values.

A successful response.
*/
type AddRemoteAmazonRDSNodeOK struct {
	Payload *AddRemoteAmazonRDSNodeOKBody
}

func (o *AddRemoteAmazonRDSNodeOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddRemoteAmazonRDS][%d] addRemoteAmazonRdsNodeOk  %+v", 200, o.Payload)
}

func (o *AddRemoteAmazonRDSNodeOK) GetPayload() *AddRemoteAmazonRDSNodeOKBody {
	return o.Payload
}

func (o *AddRemoteAmazonRDSNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddRemoteAmazonRDSNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRemoteAmazonRDSNodeDefault creates a AddRemoteAmazonRDSNodeDefault with default headers values
func NewAddRemoteAmazonRDSNodeDefault(code int) *AddRemoteAmazonRDSNodeDefault {
	return &AddRemoteAmazonRDSNodeDefault{
		_statusCode: code,
	}
}

/*AddRemoteAmazonRDSNodeDefault handles this case with default header values.

An error response.
*/
type AddRemoteAmazonRDSNodeDefault struct {
	_statusCode int

	Payload *AddRemoteAmazonRDSNodeDefaultBody
}

// Code gets the status code for the add remote amazon RDS node default response
func (o *AddRemoteAmazonRDSNodeDefault) Code() int {
	return o._statusCode
}

func (o *AddRemoteAmazonRDSNodeDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Nodes/AddRemoteAmazonRDS][%d] AddRemoteAmazonRDSNode default  %+v", o._statusCode, o.Payload)
}

func (o *AddRemoteAmazonRDSNodeDefault) GetPayload() *AddRemoteAmazonRDSNodeDefaultBody {
	return o.Payload
}

func (o *AddRemoteAmazonRDSNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddRemoteAmazonRDSNodeDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddRemoteAmazonRDSNodeBody add remote amazon RDS node body
swagger:model AddRemoteAmazonRDSNodeBody
*/
type AddRemoteAmazonRDSNodeBody struct {

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add remote amazon RDS node body
func (o *AddRemoteAmazonRDSNodeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeBody) UnmarshalBinary(b []byte) error {
	var res AddRemoteAmazonRDSNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddRemoteAmazonRDSNodeDefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model AddRemoteAmazonRDSNodeDefaultBody
*/
type AddRemoteAmazonRDSNodeDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add remote amazon RDS node default body
func (o *AddRemoteAmazonRDSNodeDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddRemoteAmazonRDSNodeDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddRemoteAmazonRDSNodeOKBody add remote amazon RDS node OK body
swagger:model AddRemoteAmazonRDSNodeOKBody
*/
type AddRemoteAmazonRDSNodeOKBody struct {

	// remote
	Remote *AddRemoteAmazonRDSNodeOKBodyRemote `json:"remote,omitempty"`
}

// Validate validates this add remote amazon RDS node OK body
func (o *AddRemoteAmazonRDSNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddRemoteAmazonRDSNodeOKBody) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(o.Remote) { // not required
		return nil
	}

	if o.Remote != nil {
		if err := o.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addRemoteAmazonRdsNodeOk" + "." + "remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeOKBody) UnmarshalBinary(b []byte) error {
	var res AddRemoteAmazonRDSNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddRemoteAmazonRDSNodeOKBodyRemote RemoteNode represents generic remote Node. Agents can't run on Remote Nodes.
swagger:model AddRemoteAmazonRDSNodeOKBodyRemote
*/
type AddRemoteAmazonRDSNodeOKBodyRemote struct {

	// Unique randomly generated instance identifier.
	NodeID string `json:"node_id,omitempty"`

	// Unique across all Nodes user-defined name.
	NodeName string `json:"node_name,omitempty"`

	// Node address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Node model.
	NodeModel string `json:"node_model,omitempty"`

	// Node region.
	Region string `json:"region,omitempty"`

	// Node availability zone.
	Az string `json:"az,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add remote amazon RDS node OK body remote
func (o *AddRemoteAmazonRDSNodeOKBodyRemote) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeOKBodyRemote) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRemoteAmazonRDSNodeOKBodyRemote) UnmarshalBinary(b []byte) error {
	var res AddRemoteAmazonRDSNodeOKBodyRemote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
