// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServicesGetServiceReader is a Reader for the ServicesGetService structure.
type ServicesGetServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServicesGetServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServicesGetServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServicesGetServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServicesGetServiceOK creates a ServicesGetServiceOK with default headers values
func NewServicesGetServiceOK() *ServicesGetServiceOK {
	return &ServicesGetServiceOK{}
}

/*ServicesGetServiceOK handles this case with default header values.

A successful response.
*/
type ServicesGetServiceOK struct {
	Payload *ServicesGetServiceOKBody
}

func (o *ServicesGetServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/Get][%d] servicesGetServiceOk  %+v", 200, o.Payload)
}

func (o *ServicesGetServiceOK) GetPayload() *ServicesGetServiceOKBody {
	return o.Payload
}

func (o *ServicesGetServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesGetServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServicesGetServiceDefault creates a ServicesGetServiceDefault with default headers values
func NewServicesGetServiceDefault(code int) *ServicesGetServiceDefault {
	return &ServicesGetServiceDefault{
		_statusCode: code,
	}
}

/*ServicesGetServiceDefault handles this case with default header values.

An unexpected error response.
*/
type ServicesGetServiceDefault struct {
	_statusCode int

	Payload *ServicesGetServiceDefaultBody
}

// Code gets the status code for the services get service default response
func (o *ServicesGetServiceDefault) Code() int {
	return o._statusCode
}

func (o *ServicesGetServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/Get][%d] Services_GetService default  %+v", o._statusCode, o.Payload)
}

func (o *ServicesGetServiceDefault) GetPayload() *ServicesGetServiceDefaultBody {
	return o.Payload
}

func (o *ServicesGetServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesGetServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ServicesGetServiceBody services get service body
swagger:model ServicesGetServiceBody
*/
type ServicesGetServiceBody struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this services get service body
func (o *ServicesGetServiceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceBody) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceDefaultBody services get service default body
swagger:model ServicesGetServiceDefaultBody
*/
type ServicesGetServiceDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this services get service default body
func (o *ServicesGetServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesGetServiceDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services_GetService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBody services get service OK body
swagger:model ServicesGetServiceOKBody
*/
type ServicesGetServiceOKBody struct {

	// external
	External *ServicesGetServiceOKBodyExternal `json:"external,omitempty"`

	// haproxy
	Haproxy *ServicesGetServiceOKBodyHaproxy `json:"haproxy,omitempty"`

	// mongodb
	Mongodb *ServicesGetServiceOKBodyMongodb `json:"mongodb,omitempty"`

	// mysql
	Mysql *ServicesGetServiceOKBodyMysql `json:"mysql,omitempty"`

	// postgresql
	Postgresql *ServicesGetServiceOKBodyPostgresql `json:"postgresql,omitempty"`

	// proxysql
	Proxysql *ServicesGetServiceOKBodyProxysql `json:"proxysql,omitempty"`
}

// Validate validates this services get service OK body
func (o *ServicesGetServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMongodb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostgresql(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesGetServiceOKBody) validateExternal(formats strfmt.Registry) error {

	if swag.IsZero(o.External) { // not required
		return nil
	}

	if o.External != nil {
		if err := o.External.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "external")
			}
			return err
		}
	}

	return nil
}

func (o *ServicesGetServiceOKBody) validateHaproxy(formats strfmt.Registry) error {

	if swag.IsZero(o.Haproxy) { // not required
		return nil
	}

	if o.Haproxy != nil {
		if err := o.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "haproxy")
			}
			return err
		}
	}

	return nil
}

func (o *ServicesGetServiceOKBody) validateMongodb(formats strfmt.Registry) error {

	if swag.IsZero(o.Mongodb) { // not required
		return nil
	}

	if o.Mongodb != nil {
		if err := o.Mongodb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

func (o *ServicesGetServiceOKBody) validateMysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

func (o *ServicesGetServiceOKBody) validatePostgresql(formats strfmt.Registry) error {

	if swag.IsZero(o.Postgresql) { // not required
		return nil
	}

	if o.Postgresql != nil {
		if err := o.Postgresql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "postgresql")
			}
			return err
		}
	}

	return nil
}

func (o *ServicesGetServiceOKBody) validateProxysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesGetServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBody) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyExternal ExternalService represents a generic External service instance.
swagger:model ServicesGetServiceOKBodyExternal
*/
type ServicesGetServiceOKBodyExternal struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Group name of external service.
	Group string `json:"group,omitempty"`
}

// Validate validates this services get service OK body external
func (o *ServicesGetServiceOKBodyExternal) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyExternal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyExternal) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyHaproxy HAProxyService represents a generic HAProxy service instance.
swagger:model ServicesGetServiceOKBodyHaproxy
*/
type ServicesGetServiceOKBodyHaproxy struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this service instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services get service OK body haproxy
func (o *ServicesGetServiceOKBodyHaproxy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyHaproxy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyHaproxy) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyMongodb MongoDBService represents a generic MongoDB instance.
swagger:model ServicesGetServiceOKBodyMongodb
*/
type ServicesGetServiceOKBodyMongodb struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services get service OK body mongodb
func (o *ServicesGetServiceOKBodyMongodb) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyMongodb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyMongodb) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyMongodb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyMysql MySQLService represents a generic MySQL instance.
swagger:model ServicesGetServiceOKBodyMysql
*/
type ServicesGetServiceOKBodyMysql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services get service OK body mysql
func (o *ServicesGetServiceOKBodyMysql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyMysql) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyPostgresql PostgreSQLService represents a generic PostgreSQL instance.
swagger:model ServicesGetServiceOKBodyPostgresql
*/
type ServicesGetServiceOKBodyPostgresql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Database name.
	DatabaseName string `json:"database_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services get service OK body postgresql
func (o *ServicesGetServiceOKBodyPostgresql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyPostgresql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyPostgresql) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyPostgresql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesGetServiceOKBodyProxysql ProxySQLService represents a generic ProxySQL instance.
swagger:model ServicesGetServiceOKBodyProxysql
*/
type ServicesGetServiceOKBodyProxysql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services get service OK body proxysql
func (o *ServicesGetServiceOKBodyProxysql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesGetServiceOKBodyProxysql) UnmarshalBinary(b []byte) error {
	var res ServicesGetServiceOKBodyProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
