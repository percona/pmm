// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServicesAddMongoDBServiceReader is a Reader for the ServicesAddMongoDBService structure.
type ServicesAddMongoDBServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServicesAddMongoDBServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServicesAddMongoDBServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServicesAddMongoDBServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServicesAddMongoDBServiceOK creates a ServicesAddMongoDBServiceOK with default headers values
func NewServicesAddMongoDBServiceOK() *ServicesAddMongoDBServiceOK {
	return &ServicesAddMongoDBServiceOK{}
}

/*ServicesAddMongoDBServiceOK handles this case with default header values.

A successful response.
*/
type ServicesAddMongoDBServiceOK struct {
	Payload *ServicesAddMongoDBServiceOKBody
}

func (o *ServicesAddMongoDBServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddMongoDB][%d] servicesAddMongoDbServiceOk  %+v", 200, o.Payload)
}

func (o *ServicesAddMongoDBServiceOK) GetPayload() *ServicesAddMongoDBServiceOKBody {
	return o.Payload
}

func (o *ServicesAddMongoDBServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesAddMongoDBServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServicesAddMongoDBServiceDefault creates a ServicesAddMongoDBServiceDefault with default headers values
func NewServicesAddMongoDBServiceDefault(code int) *ServicesAddMongoDBServiceDefault {
	return &ServicesAddMongoDBServiceDefault{
		_statusCode: code,
	}
}

/*ServicesAddMongoDBServiceDefault handles this case with default header values.

An unexpected error response.
*/
type ServicesAddMongoDBServiceDefault struct {
	_statusCode int

	Payload *ServicesAddMongoDBServiceDefaultBody
}

// Code gets the status code for the services add mongo DB service default response
func (o *ServicesAddMongoDBServiceDefault) Code() int {
	return o._statusCode
}

func (o *ServicesAddMongoDBServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddMongoDB][%d] Services_AddMongoDBService default  %+v", o._statusCode, o.Payload)
}

func (o *ServicesAddMongoDBServiceDefault) GetPayload() *ServicesAddMongoDBServiceDefaultBody {
	return o.Payload
}

func (o *ServicesAddMongoDBServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesAddMongoDBServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ServicesAddMongoDBServiceBody services add mongo DB service body
swagger:model ServicesAddMongoDBServiceBody
*/
type ServicesAddMongoDBServiceBody struct {

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs. Required.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services add mongo DB service body
func (o *ServicesAddMongoDBServiceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMongoDBServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMongoDBServiceDefaultBody services add mongo DB service default body
swagger:model ServicesAddMongoDBServiceDefaultBody
*/
type ServicesAddMongoDBServiceDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this services add mongo DB service default body
func (o *ServicesAddMongoDBServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesAddMongoDBServiceDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services_AddMongoDBService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMongoDBServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMongoDBServiceOKBody services add mongo DB service OK body
swagger:model ServicesAddMongoDBServiceOKBody
*/
type ServicesAddMongoDBServiceOKBody struct {

	// mongodb
	Mongodb *ServicesAddMongoDBServiceOKBodyMongodb `json:"mongodb,omitempty"`
}

// Validate validates this services add mongo DB service OK body
func (o *ServicesAddMongoDBServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMongodb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesAddMongoDBServiceOKBody) validateMongodb(formats strfmt.Registry) error {

	if swag.IsZero(o.Mongodb) { // not required
		return nil
	}

	if o.Mongodb != nil {
		if err := o.Mongodb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesAddMongoDbServiceOk" + "." + "mongodb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceOKBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMongoDBServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMongoDBServiceOKBodyMongodb MongoDBService represents a generic MongoDB instance.
swagger:model ServicesAddMongoDBServiceOKBodyMongodb
*/
type ServicesAddMongoDBServiceOKBodyMongodb struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services add mongo DB service OK body mongodb
func (o *ServicesAddMongoDBServiceOKBodyMongodb) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceOKBodyMongodb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMongoDBServiceOKBodyMongodb) UnmarshalBinary(b []byte) error {
	var res ServicesAddMongoDBServiceOKBodyMongodb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
