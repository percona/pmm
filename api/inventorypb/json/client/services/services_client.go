// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ServicesAddExternalService(params *ServicesAddExternalServiceParams) (*ServicesAddExternalServiceOK, error)

	ServicesAddMongoDBService(params *ServicesAddMongoDBServiceParams) (*ServicesAddMongoDBServiceOK, error)

	ServicesAddMySQLService(params *ServicesAddMySQLServiceParams) (*ServicesAddMySQLServiceOK, error)

	ServicesAddPostgreSQLService(params *ServicesAddPostgreSQLServiceParams) (*ServicesAddPostgreSQLServiceOK, error)

	ServicesAddProxySQLService(params *ServicesAddProxySQLServiceParams) (*ServicesAddProxySQLServiceOK, error)

	ServicesGetService(params *ServicesGetServiceParams) (*ServicesGetServiceOK, error)

	ServicesListServices(params *ServicesListServicesParams) (*ServicesListServicesOK, error)

	ServicesRemoveService(params *ServicesRemoveServiceParams) (*ServicesRemoveServiceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServicesAddExternalService adds external service adds external service
*/
func (a *Client) ServicesAddExternalService(params *ServicesAddExternalServiceParams) (*ServicesAddExternalServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesAddExternalServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_AddExternalService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/AddExternalService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesAddExternalServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesAddExternalServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesAddExternalServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesAddMongoDBService adds mongo DB service adds mongo DB service
*/
func (a *Client) ServicesAddMongoDBService(params *ServicesAddMongoDBServiceParams) (*ServicesAddMongoDBServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesAddMongoDBServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_AddMongoDBService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/AddMongoDB",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesAddMongoDBServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesAddMongoDBServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesAddMongoDBServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesAddMySQLService adds my SQL service adds my SQL service
*/
func (a *Client) ServicesAddMySQLService(params *ServicesAddMySQLServiceParams) (*ServicesAddMySQLServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesAddMySQLServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_AddMySQLService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/AddMySQL",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesAddMySQLServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesAddMySQLServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesAddMySQLServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesAddPostgreSQLService adds postgre SQL service adds postgre SQL service
*/
func (a *Client) ServicesAddPostgreSQLService(params *ServicesAddPostgreSQLServiceParams) (*ServicesAddPostgreSQLServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesAddPostgreSQLServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_AddPostgreSQLService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/AddPostgreSQL",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesAddPostgreSQLServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesAddPostgreSQLServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesAddPostgreSQLServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesAddProxySQLService adds proxy SQL service adds proxy SQL service
*/
func (a *Client) ServicesAddProxySQLService(params *ServicesAddProxySQLServiceParams) (*ServicesAddProxySQLServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesAddProxySQLServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_AddProxySQLService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/AddProxySQL",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesAddProxySQLServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesAddProxySQLServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesAddProxySQLServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesGetService gets service returns a single service by ID
*/
func (a *Client) ServicesGetService(params *ServicesGetServiceParams) (*ServicesGetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesGetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_GetService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/Get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesGetServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesGetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesGetServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesListServices lists services returns a list of all services
*/
func (a *Client) ServicesListServices(params *ServicesListServicesParams) (*ServicesListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesListServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_ListServices",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/List",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesListServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServicesRemoveService removes service removes service
*/
func (a *Client) ServicesRemoveService(params *ServicesRemoveServiceParams) (*ServicesRemoveServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesRemoveServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Services_RemoveService",
		Method:             "POST",
		PathPattern:        "/v1/inventory/Services/Remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesRemoveServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesRemoveServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesRemoveServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
