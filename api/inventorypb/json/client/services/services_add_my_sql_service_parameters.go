// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewServicesAddMySQLServiceParams creates a new ServicesAddMySQLServiceParams object
// with the default values initialized.
func NewServicesAddMySQLServiceParams() *ServicesAddMySQLServiceParams {
	var ()
	return &ServicesAddMySQLServiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewServicesAddMySQLServiceParamsWithTimeout creates a new ServicesAddMySQLServiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServicesAddMySQLServiceParamsWithTimeout(timeout time.Duration) *ServicesAddMySQLServiceParams {
	var ()
	return &ServicesAddMySQLServiceParams{

		timeout: timeout,
	}
}

// NewServicesAddMySQLServiceParamsWithContext creates a new ServicesAddMySQLServiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewServicesAddMySQLServiceParamsWithContext(ctx context.Context) *ServicesAddMySQLServiceParams {
	var ()
	return &ServicesAddMySQLServiceParams{

		Context: ctx,
	}
}

// NewServicesAddMySQLServiceParamsWithHTTPClient creates a new ServicesAddMySQLServiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServicesAddMySQLServiceParamsWithHTTPClient(client *http.Client) *ServicesAddMySQLServiceParams {
	var ()
	return &ServicesAddMySQLServiceParams{
		HTTPClient: client,
	}
}

/*ServicesAddMySQLServiceParams contains all the parameters to send to the API endpoint
for the services add my SQL service operation typically these are written to a http.Request
*/
type ServicesAddMySQLServiceParams struct {

	/*Body*/
	Body ServicesAddMySQLServiceBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) WithTimeout(timeout time.Duration) *ServicesAddMySQLServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) WithContext(ctx context.Context) *ServicesAddMySQLServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) WithHTTPClient(client *http.Client) *ServicesAddMySQLServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) WithBody(body ServicesAddMySQLServiceBody) *ServicesAddMySQLServiceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the services add my SQL service params
func (o *ServicesAddMySQLServiceParams) SetBody(body ServicesAddMySQLServiceBody) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *ServicesAddMySQLServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
