// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServicesAddMySQLServiceReader is a Reader for the ServicesAddMySQLService structure.
type ServicesAddMySQLServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServicesAddMySQLServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServicesAddMySQLServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServicesAddMySQLServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServicesAddMySQLServiceOK creates a ServicesAddMySQLServiceOK with default headers values
func NewServicesAddMySQLServiceOK() *ServicesAddMySQLServiceOK {
	return &ServicesAddMySQLServiceOK{}
}

/*ServicesAddMySQLServiceOK handles this case with default header values.

A successful response.
*/
type ServicesAddMySQLServiceOK struct {
	Payload *ServicesAddMySQLServiceOKBody
}

func (o *ServicesAddMySQLServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddMySQL][%d] servicesAddMySqlServiceOk  %+v", 200, o.Payload)
}

func (o *ServicesAddMySQLServiceOK) GetPayload() *ServicesAddMySQLServiceOKBody {
	return o.Payload
}

func (o *ServicesAddMySQLServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesAddMySQLServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServicesAddMySQLServiceDefault creates a ServicesAddMySQLServiceDefault with default headers values
func NewServicesAddMySQLServiceDefault(code int) *ServicesAddMySQLServiceDefault {
	return &ServicesAddMySQLServiceDefault{
		_statusCode: code,
	}
}

/*ServicesAddMySQLServiceDefault handles this case with default header values.

An unexpected error response.
*/
type ServicesAddMySQLServiceDefault struct {
	_statusCode int

	Payload *ServicesAddMySQLServiceDefaultBody
}

// Code gets the status code for the services add my SQL service default response
func (o *ServicesAddMySQLServiceDefault) Code() int {
	return o._statusCode
}

func (o *ServicesAddMySQLServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddMySQL][%d] Services_AddMySQLService default  %+v", o._statusCode, o.Payload)
}

func (o *ServicesAddMySQLServiceDefault) GetPayload() *ServicesAddMySQLServiceDefaultBody {
	return o.Payload
}

func (o *ServicesAddMySQLServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServicesAddMySQLServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ServicesAddMySQLServiceBody services add my SQL service body
swagger:model ServicesAddMySQLServiceBody
*/
type ServicesAddMySQLServiceBody struct {

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs. Required.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services add my SQL service body
func (o *ServicesAddMySQLServiceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMySQLServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMySQLServiceBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMySQLServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMySQLServiceDefaultBody services add my SQL service default body
swagger:model ServicesAddMySQLServiceDefaultBody
*/
type ServicesAddMySQLServiceDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this services add my SQL service default body
func (o *ServicesAddMySQLServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesAddMySQLServiceDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services_AddMySQLService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMySQLServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMySQLServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMySQLServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMySQLServiceOKBody services add my SQL service OK body
swagger:model ServicesAddMySQLServiceOKBody
*/
type ServicesAddMySQLServiceOKBody struct {

	// mysql
	Mysql *ServicesAddMySQLServiceOKBodyMysql `json:"mysql,omitempty"`
}

// Validate validates this services add my SQL service OK body
func (o *ServicesAddMySQLServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMysql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServicesAddMySQLServiceOKBody) validateMysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Mysql) { // not required
		return nil
	}

	if o.Mysql != nil {
		if err := o.Mysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesAddMySqlServiceOk" + "." + "mysql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMySQLServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMySQLServiceOKBody) UnmarshalBinary(b []byte) error {
	var res ServicesAddMySQLServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ServicesAddMySQLServiceOKBodyMysql MySQLService represents a generic MySQL instance.
swagger:model ServicesAddMySQLServiceOKBodyMysql
*/
type ServicesAddMySQLServiceOKBodyMysql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	// Address (and port) or socket is required.
	Address string `json:"address,omitempty"`

	// Access port.
	// Port is required when the address present.
	Port int64 `json:"port,omitempty"`

	// Access unix socket.
	// Address (and port) or socket is required.
	Socket string `json:"socket,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this services add my SQL service OK body mysql
func (o *ServicesAddMySQLServiceOKBodyMysql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServicesAddMySQLServiceOKBodyMysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServicesAddMySQLServiceOKBodyMysql) UnmarshalBinary(b []byte) error {
	var res ServicesAddMySQLServiceOKBodyMysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
