// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// AddProxySQLServiceReader is a Reader for the AddProxySQLService structure.
type AddProxySQLServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddProxySQLServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddProxySQLServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddProxySQLServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddProxySQLServiceOK creates a AddProxySQLServiceOK with default headers values
func NewAddProxySQLServiceOK() *AddProxySQLServiceOK {
	return &AddProxySQLServiceOK{}
}

/*AddProxySQLServiceOK handles this case with default header values.

A successful response.
*/
type AddProxySQLServiceOK struct {
	Payload *AddProxySQLServiceOKBody
}

func (o *AddProxySQLServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddProxySQL][%d] addProxySqlServiceOk  %+v", 200, o.Payload)
}

func (o *AddProxySQLServiceOK) GetPayload() *AddProxySQLServiceOKBody {
	return o.Payload
}

func (o *AddProxySQLServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddProxySQLServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddProxySQLServiceDefault creates a AddProxySQLServiceDefault with default headers values
func NewAddProxySQLServiceDefault(code int) *AddProxySQLServiceDefault {
	return &AddProxySQLServiceDefault{
		_statusCode: code,
	}
}

/*AddProxySQLServiceDefault handles this case with default header values.

An error response.
*/
type AddProxySQLServiceDefault struct {
	_statusCode int

	Payload *AddProxySQLServiceDefaultBody
}

// Code gets the status code for the add proxy SQL service default response
func (o *AddProxySQLServiceDefault) Code() int {
	return o._statusCode
}

func (o *AddProxySQLServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/AddProxySQL][%d] AddProxySQLService default  %+v", o._statusCode, o.Payload)
}

func (o *AddProxySQLServiceDefault) GetPayload() *AddProxySQLServiceDefaultBody {
	return o.Payload
}

func (o *AddProxySQLServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddProxySQLServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddProxySQLServiceBody add proxy SQL service body
swagger:model AddProxySQLServiceBody
*/
type AddProxySQLServiceBody struct {

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs. Required.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP). Required.
	Address string `json:"address,omitempty"`

	// Access port. Required.
	Port int64 `json:"port,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add proxy SQL service body
func (o *AddProxySQLServiceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddProxySQLServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddProxySQLServiceBody) UnmarshalBinary(b []byte) error {
	var res AddProxySQLServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddProxySQLServiceDefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model AddProxySQLServiceDefaultBody
*/
type AddProxySQLServiceDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add proxy SQL service default body
func (o *AddProxySQLServiceDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddProxySQLServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddProxySQLServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res AddProxySQLServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddProxySQLServiceOKBody add proxy SQL service OK body
swagger:model AddProxySQLServiceOKBody
*/
type AddProxySQLServiceOKBody struct {

	// proxysql
	Proxysql *AddProxySQLServiceOKBodyProxysql `json:"proxysql,omitempty"`
}

// Validate validates this add proxy SQL service OK body
func (o *AddProxySQLServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProxysql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddProxySQLServiceOKBody) validateProxysql(formats strfmt.Registry) error {

	if swag.IsZero(o.Proxysql) { // not required
		return nil
	}

	if o.Proxysql != nil {
		if err := o.Proxysql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addProxySqlServiceOk" + "." + "proxysql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddProxySQLServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddProxySQLServiceOKBody) UnmarshalBinary(b []byte) error {
	var res AddProxySQLServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddProxySQLServiceOKBodyProxysql ProxySQLService represents a generic ProxySQL instance.
swagger:model AddProxySQLServiceOKBodyProxysql
*/
type AddProxySQLServiceOKBodyProxysql struct {

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// Environment name.
	Environment string `json:"environment,omitempty"`

	// Cluster name.
	Cluster string `json:"cluster,omitempty"`

	// Replication set name.
	ReplicationSet string `json:"replication_set,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`
}

// Validate validates this add proxy SQL service OK body proxysql
func (o *AddProxySQLServiceOKBodyProxysql) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddProxySQLServiceOKBodyProxysql) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddProxySQLServiceOKBodyProxysql) UnmarshalBinary(b []byte) error {
	var res AddProxySQLServiceOKBodyProxysql
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
