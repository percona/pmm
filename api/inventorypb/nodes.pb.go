// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventorypb/nodes.proto

package inventorypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// NodeType describes supported Node types.
type NodeType int32

const (
	NodeType_NODE_TYPE_INVALID      NodeType = 0
	NodeType_GENERIC_NODE           NodeType = 1
	NodeType_CONTAINER_NODE         NodeType = 2
	NodeType_REMOTE_NODE            NodeType = 3
	NodeType_REMOTE_AMAZON_RDS_NODE NodeType = 4
)

var NodeType_name = map[int32]string{
	0: "NODE_TYPE_INVALID",
	1: "GENERIC_NODE",
	2: "CONTAINER_NODE",
	3: "REMOTE_NODE",
	4: "REMOTE_AMAZON_RDS_NODE",
}

var NodeType_value = map[string]int32{
	"NODE_TYPE_INVALID":      0,
	"GENERIC_NODE":           1,
	"CONTAINER_NODE":         2,
	"REMOTE_NODE":            3,
	"REMOTE_AMAZON_RDS_NODE": 4,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{0}
}

// GenericNode represents a bare metal server or virtual machine.
type GenericNode struct {
	// Unique randomly generated instance identifier. Can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id. Auto-detected and auto-updated.
	// Must be unique across all Generic Nodes if specified.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution name and version. Auto-detected and auto-updated.
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Node model. Auto-detected and auto-updated.
	NodeModel string `protobuf:"bytes,5,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,7,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels map[string]string `protobuf:"bytes,8,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericNode) Reset()         { *m = GenericNode{} }
func (m *GenericNode) String() string { return proto.CompactTextString(m) }
func (*GenericNode) ProtoMessage()    {}
func (*GenericNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{0}
}

func (m *GenericNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericNode.Unmarshal(m, b)
}
func (m *GenericNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericNode.Marshal(b, m, deterministic)
}
func (m *GenericNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericNode.Merge(m, src)
}
func (m *GenericNode) XXX_Size() int {
	return xxx_messageInfo_GenericNode.Size(m)
}
func (m *GenericNode) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericNode.DiscardUnknown(m)
}

var xxx_messageInfo_GenericNode proto.InternalMessageInfo

func (m *GenericNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *GenericNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *GenericNode) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *GenericNode) GetDistro() string {
	if m != nil {
		return m.Distro
	}
	return ""
}

func (m *GenericNode) GetNodeModel() string {
	if m != nil {
		return m.NodeModel
	}
	return ""
}

func (m *GenericNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GenericNode) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *GenericNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *GenericNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// ContainerNode represents a Docker container.
type ContainerNode struct {
	// Unique randomly generated instance identifier. Can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs. Auto-detected and auto-updated.
	// If defined, Generic Node with that machine_id must exist.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier. If specified, must be a unique Docker container identifier.
	// Auto-detected and auto-updated.
	ContainerId string `protobuf:"bytes,4,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name. Auto-detected and auto-updated.
	ContainerName string `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model. Auto-detected and auto-updated.
	NodeModel string `protobuf:"bytes,6,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,8,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerNode) Reset()         { *m = ContainerNode{} }
func (m *ContainerNode) String() string { return proto.CompactTextString(m) }
func (*ContainerNode) ProtoMessage()    {}
func (*ContainerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{1}
}

func (m *ContainerNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerNode.Unmarshal(m, b)
}
func (m *ContainerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerNode.Marshal(b, m, deterministic)
}
func (m *ContainerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNode.Merge(m, src)
}
func (m *ContainerNode) XXX_Size() int {
	return xxx_messageInfo_ContainerNode.Size(m)
}
func (m *ContainerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNode.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNode proto.InternalMessageInfo

func (m *ContainerNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ContainerNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ContainerNode) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *ContainerNode) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerNode) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ContainerNode) GetNodeModel() string {
	if m != nil {
		return m.NodeModel
	}
	return ""
}

func (m *ContainerNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ContainerNode) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *ContainerNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *ContainerNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RemoteNode represents generic remote Node. Agents can't run on Remote Nodes.
type RemoteNode struct {
	// Unique randomly generated instance identifier. Can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,4,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteNode) Reset()         { *m = RemoteNode{} }
func (m *RemoteNode) String() string { return proto.CompactTextString(m) }
func (*RemoteNode) ProtoMessage()    {}
func (*RemoteNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{2}
}

func (m *RemoteNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteNode.Unmarshal(m, b)
}
func (m *RemoteNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteNode.Marshal(b, m, deterministic)
}
func (m *RemoteNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteNode.Merge(m, src)
}
func (m *RemoteNode) XXX_Size() int {
	return xxx_messageInfo_RemoteNode.Size(m)
}
func (m *RemoteNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteNode proto.InternalMessageInfo

func (m *RemoteNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RemoteNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RemoteNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RemoteNode) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *RemoteNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *RemoteNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RemoteAmazonRDSNode represents a Remote Node for Amazon RDS. Agents can't run on Remote Nodes.
type RemoteAmazonRDSNode struct {
	// Unique randomly generated instance identifier. Can't be changed.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region. Can be changed.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Unique across all RemoteAmazonRDS Nodes in combination with instance. Can't be changed.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Custom user-assigned labels. Can be changed.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoteAmazonRDSNode) Reset()         { *m = RemoteAmazonRDSNode{} }
func (m *RemoteAmazonRDSNode) String() string { return proto.CompactTextString(m) }
func (*RemoteAmazonRDSNode) ProtoMessage()    {}
func (*RemoteAmazonRDSNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{3}
}

func (m *RemoteAmazonRDSNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteAmazonRDSNode.Unmarshal(m, b)
}
func (m *RemoteAmazonRDSNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteAmazonRDSNode.Marshal(b, m, deterministic)
}
func (m *RemoteAmazonRDSNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteAmazonRDSNode.Merge(m, src)
}
func (m *RemoteAmazonRDSNode) XXX_Size() int {
	return xxx_messageInfo_RemoteAmazonRDSNode.Size(m)
}
func (m *RemoteAmazonRDSNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteAmazonRDSNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteAmazonRDSNode proto.InternalMessageInfo

func (m *RemoteAmazonRDSNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RemoteAmazonRDSNode) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type ListNodesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNodesRequest) Reset()         { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()    {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{4}
}

func (m *ListNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodesRequest.Unmarshal(m, b)
}
func (m *ListNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodesRequest.Marshal(b, m, deterministic)
}
func (m *ListNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesRequest.Merge(m, src)
}
func (m *ListNodesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNodesRequest.Size(m)
}
func (m *ListNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesRequest proto.InternalMessageInfo

type ListNodesResponse struct {
	Generic              []*GenericNode         `protobuf:"bytes,1,rep,name=generic,proto3" json:"generic,omitempty"`
	Container            []*ContainerNode       `protobuf:"bytes,2,rep,name=container,proto3" json:"container,omitempty"`
	Remote               []*RemoteNode          `protobuf:"bytes,3,rep,name=remote,proto3" json:"remote,omitempty"`
	RemoteAmazonRds      []*RemoteAmazonRDSNode `protobuf:"bytes,4,rep,name=remote_amazon_rds,json=remoteAmazonRds,proto3" json:"remote_amazon_rds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListNodesResponse) Reset()         { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()    {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{5}
}

func (m *ListNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodesResponse.Unmarshal(m, b)
}
func (m *ListNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodesResponse.Marshal(b, m, deterministic)
}
func (m *ListNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesResponse.Merge(m, src)
}
func (m *ListNodesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNodesResponse.Size(m)
}
func (m *ListNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesResponse proto.InternalMessageInfo

func (m *ListNodesResponse) GetGeneric() []*GenericNode {
	if m != nil {
		return m.Generic
	}
	return nil
}

func (m *ListNodesResponse) GetContainer() []*ContainerNode {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ListNodesResponse) GetRemote() []*RemoteNode {
	if m != nil {
		return m.Remote
	}
	return nil
}

func (m *ListNodesResponse) GetRemoteAmazonRds() []*RemoteAmazonRDSNode {
	if m != nil {
		return m.RemoteAmazonRds
	}
	return nil
}

type GetNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeRequest) Reset()         { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()    {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{6}
}

func (m *GetNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeRequest.Unmarshal(m, b)
}
func (m *GetNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeRequest.Merge(m, src)
}
func (m *GetNodeRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeRequest.Size(m)
}
func (m *GetNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeRequest proto.InternalMessageInfo

func (m *GetNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type GetNodeResponse struct {
	// Types that are valid to be assigned to Node:
	//	*GetNodeResponse_Generic
	//	*GetNodeResponse_Container
	//	*GetNodeResponse_Remote
	//	*GetNodeResponse_RemoteAmazonRds
	Node                 isGetNodeResponse_Node `protobuf_oneof:"node"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNodeResponse) Reset()         { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()    {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{7}
}

func (m *GetNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeResponse.Unmarshal(m, b)
}
func (m *GetNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeResponse.Marshal(b, m, deterministic)
}
func (m *GetNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeResponse.Merge(m, src)
}
func (m *GetNodeResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeResponse.Size(m)
}
func (m *GetNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeResponse proto.InternalMessageInfo

type isGetNodeResponse_Node interface {
	isGetNodeResponse_Node()
}

type GetNodeResponse_Generic struct {
	Generic *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type GetNodeResponse_Container struct {
	Container *ContainerNode `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

type GetNodeResponse_Remote struct {
	Remote *RemoteNode `protobuf:"bytes,3,opt,name=remote,proto3,oneof"`
}

type GetNodeResponse_RemoteAmazonRds struct {
	RemoteAmazonRds *RemoteAmazonRDSNode `protobuf:"bytes,4,opt,name=remote_amazon_rds,json=remoteAmazonRds,proto3,oneof"`
}

func (*GetNodeResponse_Generic) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Container) isGetNodeResponse_Node() {}

func (*GetNodeResponse_Remote) isGetNodeResponse_Node() {}

func (*GetNodeResponse_RemoteAmazonRds) isGetNodeResponse_Node() {}

func (m *GetNodeResponse) GetNode() isGetNodeResponse_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GetNodeResponse) GetGeneric() *GenericNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *GetNodeResponse) GetContainer() *ContainerNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Container); ok {
		return x.Container
	}
	return nil
}

func (m *GetNodeResponse) GetRemote() *RemoteNode {
	if x, ok := m.GetNode().(*GetNodeResponse_Remote); ok {
		return x.Remote
	}
	return nil
}

func (m *GetNodeResponse) GetRemoteAmazonRds() *RemoteAmazonRDSNode {
	if x, ok := m.GetNode().(*GetNodeResponse_RemoteAmazonRds); ok {
		return x.RemoteAmazonRds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetNodeResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetNodeResponse_Generic)(nil),
		(*GetNodeResponse_Container)(nil),
		(*GetNodeResponse_Remote)(nil),
		(*GetNodeResponse_RemoteAmazonRds)(nil),
	}
}

type AddGenericNodeRequest struct {
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id. Auto-detected and auto-updated.
	// Must be unique across all Generic Nodes if specified.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Linux distribution name and version. Auto-detected and auto-updated.
	Distro string `protobuf:"bytes,4,opt,name=distro,proto3" json:"distro,omitempty"`
	// Node model. Auto-detected and auto-updated.
	NodeModel string `protobuf:"bytes,5,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,7,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,8,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddGenericNodeRequest) Reset()         { *m = AddGenericNodeRequest{} }
func (m *AddGenericNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddGenericNodeRequest) ProtoMessage()    {}
func (*AddGenericNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{8}
}

func (m *AddGenericNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddGenericNodeRequest.Unmarshal(m, b)
}
func (m *AddGenericNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddGenericNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddGenericNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGenericNodeRequest.Merge(m, src)
}
func (m *AddGenericNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddGenericNodeRequest.Size(m)
}
func (m *AddGenericNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGenericNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGenericNodeRequest proto.InternalMessageInfo

func (m *AddGenericNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddGenericNodeRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *AddGenericNodeRequest) GetDistro() string {
	if m != nil {
		return m.Distro
	}
	return ""
}

func (m *AddGenericNodeRequest) GetNodeModel() string {
	if m != nil {
		return m.NodeModel
	}
	return ""
}

func (m *AddGenericNodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddGenericNodeRequest) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *AddGenericNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddGenericNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddGenericNodeResponse struct {
	Generic              *GenericNode `protobuf:"bytes,1,opt,name=generic,proto3" json:"generic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddGenericNodeResponse) Reset()         { *m = AddGenericNodeResponse{} }
func (m *AddGenericNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddGenericNodeResponse) ProtoMessage()    {}
func (*AddGenericNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{9}
}

func (m *AddGenericNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddGenericNodeResponse.Unmarshal(m, b)
}
func (m *AddGenericNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddGenericNodeResponse.Marshal(b, m, deterministic)
}
func (m *AddGenericNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGenericNodeResponse.Merge(m, src)
}
func (m *AddGenericNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddGenericNodeResponse.Size(m)
}
func (m *AddGenericNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGenericNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGenericNodeResponse proto.InternalMessageInfo

func (m *AddGenericNodeResponse) GetGeneric() *GenericNode {
	if m != nil {
		return m.Generic
	}
	return nil
}

type AddContainerNodeRequest struct {
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Linux machine-id of the Generic Node where this Container Node runs. Auto-detected and auto-updated.
	// If defined, Generic Node with that machine_id must exist.
	MachineId string `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier. If specified, must be a unique Docker container identifier.
	ContainerId string `protobuf:"bytes,4,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name.
	ContainerName string `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model. Auto-detected and auto-updated.
	NodeModel string `protobuf:"bytes,6,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,8,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,9,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddContainerNodeRequest) Reset()         { *m = AddContainerNodeRequest{} }
func (m *AddContainerNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddContainerNodeRequest) ProtoMessage()    {}
func (*AddContainerNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{10}
}

func (m *AddContainerNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddContainerNodeRequest.Unmarshal(m, b)
}
func (m *AddContainerNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddContainerNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddContainerNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddContainerNodeRequest.Merge(m, src)
}
func (m *AddContainerNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddContainerNodeRequest.Size(m)
}
func (m *AddContainerNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddContainerNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddContainerNodeRequest proto.InternalMessageInfo

func (m *AddContainerNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddContainerNodeRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *AddContainerNodeRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *AddContainerNodeRequest) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *AddContainerNodeRequest) GetNodeModel() string {
	if m != nil {
		return m.NodeModel
	}
	return ""
}

func (m *AddContainerNodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddContainerNodeRequest) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *AddContainerNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddContainerNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddContainerNodeResponse struct {
	Container            *ContainerNode `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddContainerNodeResponse) Reset()         { *m = AddContainerNodeResponse{} }
func (m *AddContainerNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddContainerNodeResponse) ProtoMessage()    {}
func (*AddContainerNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{11}
}

func (m *AddContainerNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddContainerNodeResponse.Unmarshal(m, b)
}
func (m *AddContainerNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddContainerNodeResponse.Marshal(b, m, deterministic)
}
func (m *AddContainerNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddContainerNodeResponse.Merge(m, src)
}
func (m *AddContainerNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddContainerNodeResponse.Size(m)
}
func (m *AddContainerNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddContainerNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddContainerNodeResponse proto.InternalMessageInfo

func (m *AddContainerNodeResponse) GetContainer() *ContainerNode {
	if m != nil {
		return m.Container
	}
	return nil
}

type AddRemoteNodeRequest struct {
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node region. Auto-detected and auto-updated.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Node availability zone. Auto-detected and auto-updated.
	Az string `protobuf:"bytes,4,opt,name=az,proto3" json:"az,omitempty"`
	// Custom user-assigned labels.
	CustomLabels map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address FIXME https://jira.percona.com/browse/PMM-3786
	Address              string   `protobuf:"bytes,42,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRemoteNodeRequest) Reset()         { *m = AddRemoteNodeRequest{} }
func (m *AddRemoteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddRemoteNodeRequest) ProtoMessage()    {}
func (*AddRemoteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{12}
}

func (m *AddRemoteNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteNodeRequest.Unmarshal(m, b)
}
func (m *AddRemoteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddRemoteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteNodeRequest.Merge(m, src)
}
func (m *AddRemoteNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddRemoteNodeRequest.Size(m)
}
func (m *AddRemoteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteNodeRequest proto.InternalMessageInfo

func (m *AddRemoteNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddRemoteNodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddRemoteNodeRequest) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *AddRemoteNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *AddRemoteNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddRemoteNodeResponse struct {
	Remote               *RemoteNode `protobuf:"bytes,1,opt,name=remote,proto3" json:"remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddRemoteNodeResponse) Reset()         { *m = AddRemoteNodeResponse{} }
func (m *AddRemoteNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddRemoteNodeResponse) ProtoMessage()    {}
func (*AddRemoteNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{13}
}

func (m *AddRemoteNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteNodeResponse.Unmarshal(m, b)
}
func (m *AddRemoteNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteNodeResponse.Marshal(b, m, deterministic)
}
func (m *AddRemoteNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteNodeResponse.Merge(m, src)
}
func (m *AddRemoteNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddRemoteNodeResponse.Size(m)
}
func (m *AddRemoteNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteNodeResponse proto.InternalMessageInfo

func (m *AddRemoteNodeResponse) GetRemote() *RemoteNode {
	if m != nil {
		return m.Remote
	}
	return nil
}

type AddRemoteAmazonRDSNodeRequest struct {
	// Unique across all Nodes user-defined name. Can't be changed.
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// DB instance identifier. Unique across all RemoteAmazonRDS Nodes in combination with region.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Unique across all RemoteAmazonRDS Nodes in combination with instance.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Custom user-assigned labels.
	CustomLabels         map[string]string `protobuf:"bytes,10,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddRemoteAmazonRDSNodeRequest) Reset()         { *m = AddRemoteAmazonRDSNodeRequest{} }
func (m *AddRemoteAmazonRDSNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddRemoteAmazonRDSNodeRequest) ProtoMessage()    {}
func (*AddRemoteAmazonRDSNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{14}
}

func (m *AddRemoteAmazonRDSNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Unmarshal(m, b)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Merge(m, src)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.Size(m)
}
func (m *AddRemoteAmazonRDSNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteAmazonRDSNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteAmazonRDSNodeRequest proto.InternalMessageInfo

func (m *AddRemoteAmazonRDSNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddRemoteAmazonRDSNodeRequest) GetCustomLabels() map[string]string {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

type AddRemoteAmazonRDSNodeResponse struct {
	RemoteAmazonRds      *RemoteAmazonRDSNode `protobuf:"bytes,1,opt,name=remote_amazon_rds,json=remoteAmazonRds,proto3" json:"remote_amazon_rds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AddRemoteAmazonRDSNodeResponse) Reset()         { *m = AddRemoteAmazonRDSNodeResponse{} }
func (m *AddRemoteAmazonRDSNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddRemoteAmazonRDSNodeResponse) ProtoMessage()    {}
func (*AddRemoteAmazonRDSNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{15}
}

func (m *AddRemoteAmazonRDSNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Unmarshal(m, b)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Marshal(b, m, deterministic)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Merge(m, src)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.Size(m)
}
func (m *AddRemoteAmazonRDSNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRemoteAmazonRDSNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddRemoteAmazonRDSNodeResponse proto.InternalMessageInfo

func (m *AddRemoteAmazonRDSNodeResponse) GetRemoteAmazonRds() *RemoteAmazonRDSNode {
	if m != nil {
		return m.RemoteAmazonRds
	}
	return nil
}

type RemoveNodeRequest struct {
	// Unique randomly generated instance identifier.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Remove node with all dependencies.
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeRequest) Reset()         { *m = RemoveNodeRequest{} }
func (m *RemoveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeRequest) ProtoMessage()    {}
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{16}
}

func (m *RemoveNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeRequest.Unmarshal(m, b)
}
func (m *RemoveNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeRequest.Marshal(b, m, deterministic)
}
func (m *RemoveNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeRequest.Merge(m, src)
}
func (m *RemoveNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeRequest.Size(m)
}
func (m *RemoveNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeRequest proto.InternalMessageInfo

func (m *RemoveNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RemoveNodeRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type RemoveNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeResponse) Reset()         { *m = RemoveNodeResponse{} }
func (m *RemoveNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeResponse) ProtoMessage()    {}
func (*RemoveNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c30c43e719d1341, []int{17}
}

func (m *RemoveNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeResponse.Unmarshal(m, b)
}
func (m *RemoveNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeResponse.Marshal(b, m, deterministic)
}
func (m *RemoveNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeResponse.Merge(m, src)
}
func (m *RemoveNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeResponse.Size(m)
}
func (m *RemoveNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("inventory.NodeType", NodeType_name, NodeType_value)
	proto.RegisterType((*GenericNode)(nil), "inventory.GenericNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.GenericNode.CustomLabelsEntry")
	proto.RegisterType((*ContainerNode)(nil), "inventory.ContainerNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.ContainerNode.CustomLabelsEntry")
	proto.RegisterType((*RemoteNode)(nil), "inventory.RemoteNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.RemoteNode.CustomLabelsEntry")
	proto.RegisterType((*RemoteAmazonRDSNode)(nil), "inventory.RemoteAmazonRDSNode")
	proto.RegisterMapType((map[string]string)(nil), "inventory.RemoteAmazonRDSNode.CustomLabelsEntry")
	proto.RegisterType((*ListNodesRequest)(nil), "inventory.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "inventory.ListNodesResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "inventory.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "inventory.GetNodeResponse")
	proto.RegisterType((*AddGenericNodeRequest)(nil), "inventory.AddGenericNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddGenericNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddGenericNodeResponse)(nil), "inventory.AddGenericNodeResponse")
	proto.RegisterType((*AddContainerNodeRequest)(nil), "inventory.AddContainerNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddContainerNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddContainerNodeResponse)(nil), "inventory.AddContainerNodeResponse")
	proto.RegisterType((*AddRemoteNodeRequest)(nil), "inventory.AddRemoteNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddRemoteNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddRemoteNodeResponse)(nil), "inventory.AddRemoteNodeResponse")
	proto.RegisterType((*AddRemoteAmazonRDSNodeRequest)(nil), "inventory.AddRemoteAmazonRDSNodeRequest")
	proto.RegisterMapType((map[string]string)(nil), "inventory.AddRemoteAmazonRDSNodeRequest.CustomLabelsEntry")
	proto.RegisterType((*AddRemoteAmazonRDSNodeResponse)(nil), "inventory.AddRemoteAmazonRDSNodeResponse")
	proto.RegisterType((*RemoveNodeRequest)(nil), "inventory.RemoveNodeRequest")
	proto.RegisterType((*RemoveNodeResponse)(nil), "inventory.RemoveNodeResponse")
}

func init() { proto.RegisterFile("inventorypb/nodes.proto", fileDescriptor_0c30c43e719d1341) }

var fileDescriptor_0c30c43e719d1341 = []byte{
	// 1316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x98, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xc0, 0x4d, 0x4a, 0xd1, 0xc7, 0x38, 0x76, 0xe4, 0xfd, 0xfb, 0x83, 0x7f, 0xc6, 0x1f, 0x0a,
	0x0d, 0xa7, 0x8a, 0x52, 0x8b, 0xb1, 0x5b, 0x04, 0x81, 0x2f, 0xad, 0x6c, 0xab, 0xb6, 0x5c, 0x5b,
	0x2e, 0x18, 0x37, 0x6d, 0x02, 0x14, 0x02, 0x2d, 0xae, 0x15, 0xc2, 0x12, 0x57, 0x25, 0x69, 0x1b,
	0x36, 0x7a, 0x28, 0x7a, 0x28, 0x7a, 0x6e, 0x0e, 0xbd, 0xb6, 0x40, 0x1f, 0xa0, 0xe8, 0xab, 0xf4,
	0x01, 0x0a, 0x14, 0xbd, 0xf5, 0x05, 0x0a, 0xb4, 0x87, 0x62, 0x77, 0x29, 0x8a, 0x94, 0x28, 0xc9,
	0x86, 0x13, 0xc4, 0x27, 0x6b, 0x67, 0x67, 0x38, 0xc3, 0xdf, 0xec, 0xce, 0x8c, 0x09, 0x33, 0xa6,
	0x75, 0x8a, 0x2d, 0x97, 0xd8, 0xe7, 0xad, 0x43, 0xd5, 0x22, 0x06, 0x76, 0x0a, 0x2d, 0x9b, 0xb8,
	0x04, 0xa5, 0xfd, 0x0d, 0xf9, 0x71, 0xdd, 0x74, 0x5f, 0x9e, 0x1c, 0x16, 0x6a, 0xa4, 0xa9, 0x36,
	0xcf, 0x4c, 0xf7, 0x98, 0x9c, 0xa9, 0x75, 0xb2, 0xcc, 0xf4, 0x96, 0x4f, 0xf5, 0x86, 0x69, 0xe8,
	0x2e, 0xb1, 0x1d, 0xd5, 0xff, 0xc9, 0x1f, 0x21, 0xcf, 0xd6, 0x09, 0xa9, 0x37, 0xb0, 0xaa, 0xb7,
	0x4c, 0x55, 0xb7, 0x2c, 0xe2, 0xea, 0xae, 0x49, 0x2c, 0xcf, 0x81, 0xfc, 0x2e, 0xfb, 0x53, 0x5b,
	0xae, 0x63, 0x6b, 0xd9, 0x39, 0xd3, 0xeb, 0x75, 0x6c, 0xab, 0xa4, 0xc5, 0x34, 0x7a, 0xb5, 0x95,
	0xbf, 0x44, 0x18, 0xdd, 0xc2, 0x16, 0xb6, 0xcd, 0x5a, 0x85, 0x18, 0x18, 0xcd, 0x40, 0x92, 0x46,
	0x5b, 0x35, 0x0d, 0x49, 0xc8, 0x0a, 0xb9, 0xb4, 0x96, 0xa0, 0xcb, 0xb2, 0x81, 0xee, 0x42, 0x9a,
	0x6d, 0x58, 0x7a, 0x13, 0x4b, 0x22, 0xdb, 0x4a, 0x51, 0x41, 0x45, 0x6f, 0x62, 0x34, 0x07, 0xd0,
	0xd4, 0x6b, 0x2f, 0x4d, 0x8b, 0x19, 0xc6, 0xd8, 0x6e, 0xda, 0x93, 0x94, 0x0d, 0x34, 0x0d, 0x09,
	0xc3, 0x74, 0x5c, 0x9b, 0x48, 0x71, 0xfe, 0x4c, 0xbe, 0xa2, 0x66, 0xec, 0x99, 0x4d, 0x62, 0xe0,
	0x86, 0x74, 0x8b, 0x9b, 0x51, 0xc9, 0x1e, 0x15, 0x50, 0x33, 0x1b, 0xd7, 0x4d, 0x62, 0x49, 0x09,
	0x6e, 0xc6, 0x57, 0x68, 0x1c, 0x44, 0xfd, 0x42, 0x4a, 0x32, 0x99, 0xa8, 0x5f, 0xa0, 0x3d, 0x18,
	0xab, 0x9d, 0x38, 0x2e, 0x69, 0x56, 0x1b, 0xfa, 0x21, 0x6e, 0x38, 0x52, 0x2a, 0x1b, 0xcb, 0x8d,
	0xae, 0xe6, 0x0a, 0x3e, 0xea, 0x42, 0xe0, 0x15, 0x0b, 0x1b, 0x4c, 0x77, 0x97, 0xa9, 0x96, 0x2c,
	0xd7, 0x3e, 0xd7, 0x6e, 0xd7, 0x02, 0x22, 0x24, 0x41, 0x52, 0x37, 0x0c, 0x1b, 0x3b, 0x8e, 0x94,
	0x67, 0x3e, 0xda, 0x4b, 0xf9, 0x03, 0x98, 0xe8, 0x31, 0x46, 0x19, 0x88, 0x1d, 0xe3, 0x73, 0x8f,
	0x16, 0xfd, 0x89, 0x26, 0xe1, 0xd6, 0xa9, 0xde, 0x38, 0x69, 0x63, 0xe2, 0x8b, 0x35, 0xf1, 0x89,
	0xa0, 0xfc, 0x14, 0x83, 0xb1, 0x0d, 0x62, 0xb9, 0xba, 0x69, 0x61, 0xfb, 0xcd, 0xf1, 0xbe, 0x07,
	0xb7, 0x6b, 0x6d, 0x2f, 0x54, 0x81, 0x53, 0x1f, 0xf5, 0x65, 0x65, 0x03, 0x2d, 0xc1, 0x78, 0x47,
	0x85, 0xf9, 0xe0, 0xf8, 0xc7, 0x7c, 0x69, 0xdb, 0x51, 0x20, 0x43, 0x89, 0xfe, 0x19, 0x4a, 0x46,
	0x64, 0x28, 0xe5, 0x67, 0x68, 0xbf, 0x3b, 0x43, 0x69, 0x96, 0xa1, 0x7c, 0x20, 0x43, 0x21, 0x2c,
	0x6f, 0x33, 0x47, 0xaf, 0x44, 0x00, 0x0d, 0x37, 0x89, 0x8b, 0xaf, 0x91, 0xa0, 0x0e, 0x98, 0x58,
	0x04, 0x98, 0xb8, 0x0f, 0x66, 0xb7, 0x1b, 0x0c, 0x30, 0x30, 0xef, 0x04, 0xc0, 0x74, 0x62, 0x79,
	0x9b, 0x54, 0x7e, 0x10, 0xe1, 0x7f, 0x3c, 0x92, 0x62, 0x53, 0xbf, 0x20, 0x96, 0xb6, 0xf9, 0xf4,
	0x1a, 0x78, 0x64, 0x48, 0x99, 0x96, 0xe3, 0xea, 0x56, 0x0d, 0x7b, 0x80, 0xfc, 0x75, 0x00, 0x5d,
	0x3c, 0x84, 0xee, 0xd3, 0x68, 0x54, 0x8f, 0x7a, 0x50, 0x85, 0x02, 0x1c, 0xc6, 0xec, 0xfa, 0x64,
	0x10, 0x64, 0x76, 0x4d, 0xc7, 0xa5, 0xce, 0x1c, 0x0d, 0x7f, 0x79, 0x82, 0x1d, 0x57, 0xf9, 0x5b,
	0x80, 0x89, 0x80, 0xd0, 0x69, 0x11, 0xcb, 0xc1, 0xe8, 0x11, 0x24, 0xeb, 0xbc, 0x0e, 0x49, 0x02,
	0x8b, 0x7d, 0x3a, 0xba, 0x42, 0x69, 0x6d, 0x35, 0xf4, 0x18, 0xd2, 0xfe, 0x7d, 0x94, 0x44, 0x66,
	0x23, 0xf5, 0xbb, 0x33, 0x5a, 0x47, 0x15, 0x2d, 0x53, 0x86, 0x94, 0x85, 0x14, 0x63, 0x46, 0x53,
	0x91, 0xe7, 0x49, 0xf3, 0x94, 0xd0, 0x0e, 0x4c, 0xf0, 0x5f, 0x55, 0x9d, 0xb1, 0xab, 0xda, 0x86,
	0x23, 0xc5, 0x99, 0xe5, 0xfc, 0x60, 0xbc, 0xda, 0x1d, 0x3b, 0x28, 0x34, 0x1c, 0x65, 0x05, 0xc6,
	0xb7, 0x30, 0x7b, 0x71, 0x0f, 0x06, 0x5a, 0xe8, 0x3a, 0x22, 0xeb, 0x89, 0x3f, 0x7e, 0x5f, 0x10,
	0x3f, 0x17, 0xda, 0x47, 0x45, 0xf9, 0x56, 0x84, 0x3b, 0xbe, 0x8d, 0xc7, 0x6a, 0x35, 0xc8, 0x4a,
	0xe8, 0xcf, 0x6a, 0x7b, 0xa4, 0x43, 0xeb, 0x49, 0x98, 0x96, 0x30, 0x88, 0xd6, 0xf6, 0x48, 0x90,
	0x97, 0x1a, 0xe0, 0x25, 0xf4, 0xe5, 0xb5, 0x3d, 0xe2, 0x13, 0xdb, 0x8d, 0x26, 0x26, 0x0c, 0x27,
	0xb6, 0x3d, 0xd2, 0xc3, 0x6c, 0x3d, 0x01, 0x71, 0x8a, 0x42, 0xf9, 0x57, 0x84, 0xa9, 0xa2, 0x61,
	0x04, 0x8f, 0x82, 0xc7, 0x70, 0xb1, 0xe7, 0x36, 0xf9, 0x14, 0x6f, 0x4a, 0x17, 0xfe, 0x2c, 0xba,
	0x0b, 0xaf, 0x06, 0x70, 0x44, 0xbe, 0xdb, 0xd0, 0xaa, 0x96, 0xed, 0xaa, 0x6a, 0xfe, 0x9b, 0xbf,
	0xb6, 0xea, 0xb6, 0x13, 0x4f, 0x09, 0x19, 0x51, 0xd9, 0x81, 0xe9, 0xee, 0x08, 0xa3, 0x6e, 0xae,
	0x70, 0x89, 0x9b, 0xab, 0xfc, 0x1a, 0x83, 0x99, 0xa2, 0x61, 0x84, 0x6f, 0xe8, 0x6b, 0x4c, 0xe6,
	0x8d, 0x6b, 0xf1, 0xcf, 0xa3, 0x5b, 0xfc, 0xfb, 0xe1, 0xf4, 0x47, 0xf1, 0xb8, 0x39, 0x07, 0x40,
	0x03, 0xa9, 0x37, 0x46, 0xef, 0x08, 0x84, 0x4a, 0xb1, 0x30, 0xb8, 0xb8, 0x04, 0x4a, 0x8b, 0xf2,
	0xb3, 0x08, 0x93, 0x45, 0xc3, 0x08, 0x54, 0xdd, 0xab, 0x9c, 0x82, 0xcb, 0xce, 0x11, 0xcf, 0xa2,
	0x9b, 0xe3, 0x4a, 0x98, 0x7e, 0x4f, 0x10, 0x37, 0x07, 0xfd, 0x47, 0xac, 0xf2, 0x05, 0x03, 0xf4,
	0xb8, 0x77, 0x5a, 0x99, 0x30, 0xa0, 0x34, 0xb7, 0x0b, 0xb3, 0xf2, 0x8b, 0x08, 0x73, 0xfe, 0x83,
	0xc2, 0xad, 0xea, 0x2a, 0xdc, 0x95, 0xee, 0x01, 0xa5, 0xa3, 0xe3, 0x0f, 0x2a, 0xf3, 0xe1, 0x41,
	0xa5, 0xd3, 0xd6, 0xbc, 0x1c, 0x55, 0xa3, 0x73, 0xb2, 0x16, 0x95, 0x93, 0xa8, 0x48, 0xdf, 0xf8,
	0xe8, 0xe2, 0xa1, 0x6f, 0xc0, 0x7c, 0xbf, 0x38, 0xbc, 0x1c, 0x44, 0xce, 0x07, 0xc2, 0x65, 0xba,
	0x5d, 0xef, 0x7c, 0xb0, 0x03, 0x13, 0x54, 0xef, 0x14, 0x5f, 0x65, 0x44, 0xa0, 0xef, 0x70, 0x44,
	0xec, 0x1a, 0x7f, 0x87, 0x94, 0xc6, 0x17, 0xca, 0x24, 0xa0, 0xe0, 0xb3, 0x78, 0xb4, 0x79, 0x17,
	0x52, 0x74, 0x7d, 0x70, 0xde, 0xc2, 0x68, 0x0a, 0x26, 0x2a, 0xfb, 0x9b, 0xa5, 0xea, 0xc1, 0xf3,
	0x4f, 0x4a, 0xd5, 0x72, 0xe5, 0x59, 0x71, 0xb7, 0xbc, 0x99, 0x19, 0x41, 0x19, 0xb8, 0xbd, 0x55,
	0xaa, 0x94, 0xb4, 0xf2, 0x46, 0x95, 0x6e, 0x67, 0x04, 0x84, 0x60, 0x7c, 0x63, 0xbf, 0x72, 0x50,
	0x2c, 0x57, 0x4a, 0x1a, 0x97, 0x89, 0xe8, 0x0e, 0x8c, 0x6a, 0xa5, 0xbd, 0xfd, 0x83, 0x12, 0x17,
	0xc4, 0x90, 0x0c, 0xd3, 0x9e, 0xa0, 0xb8, 0x57, 0x7c, 0xb1, 0x5f, 0xa9, 0x6a, 0x9b, 0x4f, 0xf9,
	0x5e, 0x7c, 0xf5, 0x9f, 0x04, 0xdc, 0x62, 0xe3, 0x1e, 0x3a, 0x86, 0xb4, 0x3f, 0xfb, 0xa1, 0xbb,
	0x01, 0x3e, 0xdd, 0x63, 0xa2, 0x3c, 0x1b, 0xbd, 0xc9, 0xdf, 0x43, 0x59, 0xfc, 0xe6, 0xb7, 0x3f,
	0x5f, 0x89, 0x73, 0x8a, 0xa4, 0x9e, 0xae, 0xa8, 0xbe, 0xa2, 0xca, 0x94, 0x54, 0xaa, 0xbe, 0x26,
	0xe4, 0x91, 0x01, 0x49, 0x6f, 0x74, 0x42, 0xff, 0x0f, 0xf5, 0xa4, 0xe0, 0x08, 0x26, 0xcb, 0x51,
	0x5b, 0x9e, 0x1b, 0x85, 0xb9, 0x99, 0x55, 0x66, 0xa2, 0xdc, 0x6c, 0x61, 0xe6, 0xe5, 0x6b, 0x01,
	0xc6, 0xc3, 0xad, 0x11, 0x65, 0x87, 0xf5, 0x75, 0xf9, 0xde, 0x00, 0x0d, 0xcf, 0xf7, 0x03, 0xe6,
	0x7b, 0x51, 0x99, 0x8f, 0xf2, 0xdd, 0xb1, 0xa1, 0x21, 0x7c, 0x27, 0x40, 0xa6, 0xbb, 0x38, 0x23,
	0x65, 0x78, 0x77, 0x91, 0x17, 0x07, 0xea, 0x78, 0x81, 0x3c, 0x64, 0x81, 0x2c, 0x29, 0xd9, 0x3e,
	0x81, 0xf8, 0x56, 0x34, 0x94, 0xaf, 0x60, 0x2c, 0x54, 0xab, 0xd0, 0xc2, 0x90, 0x32, 0x2b, 0x67,
	0xfb, 0x2b, 0x78, 0x01, 0xe4, 0x58, 0x00, 0x8a, 0x32, 0xd7, 0x27, 0x00, 0x6e, 0x42, 0xbd, 0xff,
	0x28, 0xb0, 0x31, 0x25, 0xea, 0x9f, 0xb1, 0xdc, 0x65, 0x4b, 0x8b, 0xfc, 0xe0, 0x12, 0x9a, 0x5e,
	0x64, 0x2b, 0x2c, 0xb2, 0x87, 0xca, 0xfd, 0x81, 0x91, 0xf9, 0xb6, 0x34, 0xc4, 0x16, 0xff, 0x0f,
	0x9a, 0xdf, 0x4b, 0x34, 0xdb, 0x55, 0x22, 0x42, 0x57, 0x5f, 0x9e, 0xeb, 0xb3, 0xeb, 0x79, 0x5f,
	0x62, 0xde, 0x17, 0x14, 0x39, 0xca, 0x3b, 0xd7, 0x5f, 0x13, 0xf2, 0xeb, 0x5f, 0x7c, 0x5f, 0xdc,
	0xd3, 0x3e, 0x86, 0xa4, 0x81, 0x8f, 0xf4, 0x93, 0x86, 0x8b, 0x3e, 0x04, 0x54, 0xb4, 0xb2, 0xd8,
	0xb6, 0x89, 0x9d, 0xb5, 0xbd, 0x67, 0x15, 0x50, 0x1e, 0x72, 0xf2, 0xfd, 0x45, 0xd5, 0xc0, 0x47,
	0xa6, 0x65, 0xf2, 0x2f, 0x62, 0x81, 0xcf, 0x74, 0x25, 0xaa, 0xdd, 0x76, 0xfc, 0x62, 0x34, 0xb0,
	0x73, 0x98, 0x60, 0x1f, 0xcb, 0xde, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x67, 0xbf, 0x3d, 0x6e,
	0xd6, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesClient interface {
	// ListNodes returns a list of all Nodes.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// AddGenericNode adds generic Node.
	AddGenericNode(ctx context.Context, in *AddGenericNodeRequest, opts ...grpc.CallOption) (*AddGenericNodeResponse, error)
	// AddContainerNode adds Container Node.
	AddContainerNode(ctx context.Context, in *AddContainerNodeRequest, opts ...grpc.CallOption) (*AddContainerNodeResponse, error)
	// AddRemoteNode adds remote Node.
	AddRemoteNode(ctx context.Context, in *AddRemoteNodeRequest, opts ...grpc.CallOption) (*AddRemoteNodeResponse, error)
	// AddRemoteAmazonRDSNode adds Amazon (AWS) RDS remote Node.
	AddRemoteAmazonRDSNode(ctx context.Context, in *AddRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*AddRemoteAmazonRDSNodeResponse, error)
	// RemoveNode removes Node.
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error)
}

type nodesClient struct {
	cc *grpc.ClientConn
}

func NewNodesClient(cc *grpc.ClientConn) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddGenericNode(ctx context.Context, in *AddGenericNodeRequest, opts ...grpc.CallOption) (*AddGenericNodeResponse, error) {
	out := new(AddGenericNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddGenericNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddContainerNode(ctx context.Context, in *AddContainerNodeRequest, opts ...grpc.CallOption) (*AddContainerNodeResponse, error) {
	out := new(AddContainerNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddContainerNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddRemoteNode(ctx context.Context, in *AddRemoteNodeRequest, opts ...grpc.CallOption) (*AddRemoteNodeResponse, error) {
	out := new(AddRemoteNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddRemoteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddRemoteAmazonRDSNode(ctx context.Context, in *AddRemoteAmazonRDSNodeRequest, opts ...grpc.CallOption) (*AddRemoteAmazonRDSNodeResponse, error) {
	out := new(AddRemoteAmazonRDSNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/AddRemoteAmazonRDSNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error) {
	out := new(RemoveNodeResponse)
	err := c.cc.Invoke(ctx, "/inventory.Nodes/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServer is the server API for Nodes service.
type NodesServer interface {
	// ListNodes returns a list of all Nodes.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// GetNode returns a single Node by ID.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// AddGenericNode adds generic Node.
	AddGenericNode(context.Context, *AddGenericNodeRequest) (*AddGenericNodeResponse, error)
	// AddContainerNode adds Container Node.
	AddContainerNode(context.Context, *AddContainerNodeRequest) (*AddContainerNodeResponse, error)
	// AddRemoteNode adds remote Node.
	AddRemoteNode(context.Context, *AddRemoteNodeRequest) (*AddRemoteNodeResponse, error)
	// AddRemoteAmazonRDSNode adds Amazon (AWS) RDS remote Node.
	AddRemoteAmazonRDSNode(context.Context, *AddRemoteAmazonRDSNodeRequest) (*AddRemoteAmazonRDSNodeResponse, error)
	// RemoveNode removes Node.
	RemoveNode(context.Context, *RemoveNodeRequest) (*RemoveNodeResponse, error)
}

// UnimplementedNodesServer can be embedded to have forward compatible implementations.
type UnimplementedNodesServer struct {
}

func (*UnimplementedNodesServer) ListNodes(ctx context.Context, req *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedNodesServer) GetNode(ctx context.Context, req *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedNodesServer) AddGenericNode(ctx context.Context, req *AddGenericNodeRequest) (*AddGenericNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenericNode not implemented")
}
func (*UnimplementedNodesServer) AddContainerNode(ctx context.Context, req *AddContainerNodeRequest) (*AddContainerNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainerNode not implemented")
}
func (*UnimplementedNodesServer) AddRemoteNode(ctx context.Context, req *AddRemoteNodeRequest) (*AddRemoteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteNode not implemented")
}
func (*UnimplementedNodesServer) AddRemoteAmazonRDSNode(ctx context.Context, req *AddRemoteAmazonRDSNodeRequest) (*AddRemoteAmazonRDSNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteAmazonRDSNode not implemented")
}
func (*UnimplementedNodesServer) RemoveNode(ctx context.Context, req *RemoveNodeRequest) (*RemoveNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}

func RegisterNodesServer(s *grpc.Server, srv NodesServer) {
	s.RegisterService(&_Nodes_serviceDesc, srv)
}

func _Nodes_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddGenericNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddGenericNode(ctx, req.(*AddGenericNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddContainerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddContainerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddContainerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddContainerNode(ctx, req.(*AddContainerNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddRemoteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddRemoteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddRemoteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddRemoteNode(ctx, req.(*AddRemoteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddRemoteAmazonRDSNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteAmazonRDSNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddRemoteAmazonRDSNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/AddRemoteAmazonRDSNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddRemoteAmazonRDSNode(ctx, req.(*AddRemoteAmazonRDSNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Nodes/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _Nodes_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Nodes_GetNode_Handler,
		},
		{
			MethodName: "AddGenericNode",
			Handler:    _Nodes_AddGenericNode_Handler,
		},
		{
			MethodName: "AddContainerNode",
			Handler:    _Nodes_AddContainerNode_Handler,
		},
		{
			MethodName: "AddRemoteNode",
			Handler:    _Nodes_AddRemoteNode_Handler,
		},
		{
			MethodName: "AddRemoteAmazonRDSNode",
			Handler:    _Nodes_AddRemoteAmazonRDSNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Nodes_RemoveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventorypb/nodes.proto",
}
