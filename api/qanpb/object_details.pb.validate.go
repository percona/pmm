// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: qanpb/object_details.proto

package qanv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MetricsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricsRequestMultiError,
// or nil if none found.
func (m *MetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Totals

	if len(errors) > 0 {
		return MetricsRequestMultiError(errors)
	}

	return nil
}

// MetricsRequestMultiError is an error wrapping multiple validation errors
// returned by MetricsRequest.ValidateAll() if the designated constraints
// aren't met.
type MetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsRequestMultiError) AllErrors() []error { return m }

// MetricsRequestValidationError is the validation error returned by
// MetricsRequest.Validate if the designated constraints aren't met.
type MetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsRequestValidationError) ErrorName() string { return "MetricsRequestValidationError" }

// Error satisfies the builtin error interface
func (e MetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsRequestValidationError{}

// Validate checks the field values on MetricsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricsReplyMultiError, or
// nil if none found.
func (m *MetricsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMetrics()))
		i := 0
		for key := range m.GetMetrics() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetrics()[key]
			_ = val

			// no validation rules for Metrics[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MetricsReplyValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MetricsReplyValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MetricsReplyValidationError{
						field:  fmt.Sprintf("Metrics[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for TextMetrics

	for idx, item := range m.GetSparkline() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsReplyValidationError{
						field:  fmt.Sprintf("Sparkline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsReplyValidationError{
						field:  fmt.Sprintf("Sparkline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsReplyValidationError{
					field:  fmt.Sprintf("Sparkline[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetTotals()))
		i := 0
		for key := range m.GetTotals() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTotals()[key]
			_ = val

			// no validation rules for Totals[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MetricsReplyValidationError{
							field:  fmt.Sprintf("Totals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MetricsReplyValidationError{
							field:  fmt.Sprintf("Totals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MetricsReplyValidationError{
						field:  fmt.Sprintf("Totals[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Fingerprint

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsReplyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsReplyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsReplyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsReplyMultiError(errors)
	}

	return nil
}

// MetricsReplyMultiError is an error wrapping multiple validation errors
// returned by MetricsReply.ValidateAll() if the designated constraints aren't met.
type MetricsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsReplyMultiError) AllErrors() []error { return m }

// MetricsReplyValidationError is the validation error returned by
// MetricsReply.Validate if the designated constraints aren't met.
type MetricsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsReplyValidationError) ErrorName() string { return "MetricsReplyValidationError" }

// Error satisfies the builtin error interface
func (e MetricsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsReplyValidationError{}

// Validate checks the field values on MetricValues with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricValuesMultiError, or
// nil if none found.
func (m *MetricValues) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	// no validation rules for Cnt

	// no validation rules for Sum

	// no validation rules for Min

	// no validation rules for Max

	// no validation rules for Avg

	// no validation rules for P99

	// no validation rules for PercentOfTotal

	if len(errors) > 0 {
		return MetricValuesMultiError(errors)
	}

	return nil
}

// MetricValuesMultiError is an error wrapping multiple validation errors
// returned by MetricValues.ValidateAll() if the designated constraints aren't met.
type MetricValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricValuesMultiError) AllErrors() []error { return m }

// MetricValuesValidationError is the validation error returned by
// MetricValues.Validate if the designated constraints aren't met.
type MetricValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValuesValidationError) ErrorName() string { return "MetricValuesValidationError" }

// Error satisfies the builtin error interface
func (e MetricValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValuesValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}

	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on QueryExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExampleRequestMultiError, or nil if none found.
func (m *QueryExampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryExampleRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryExampleRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryExampleRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryExampleRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryExampleRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryExampleRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryExampleRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryExampleRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryExampleRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return QueryExampleRequestMultiError(errors)
	}

	return nil
}

// QueryExampleRequestMultiError is an error wrapping multiple validation
// errors returned by QueryExampleRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryExampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExampleRequestMultiError) AllErrors() []error { return m }

// QueryExampleRequestValidationError is the validation error returned by
// QueryExampleRequest.Validate if the designated constraints aren't met.
type QueryExampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExampleRequestValidationError) ErrorName() string {
	return "QueryExampleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExampleRequestValidationError{}

// Validate checks the field values on QueryExampleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryExampleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExampleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExampleReplyMultiError, or nil if none found.
func (m *QueryExampleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExampleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQueryExamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryExampleReplyValidationError{
						field:  fmt.Sprintf("QueryExamples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryExampleReplyValidationError{
						field:  fmt.Sprintf("QueryExamples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryExampleReplyValidationError{
					field:  fmt.Sprintf("QueryExamples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryExampleReplyMultiError(errors)
	}

	return nil
}

// QueryExampleReplyMultiError is an error wrapping multiple validation errors
// returned by QueryExampleReply.ValidateAll() if the designated constraints
// aren't met.
type QueryExampleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExampleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExampleReplyMultiError) AllErrors() []error { return m }

// QueryExampleReplyValidationError is the validation error returned by
// QueryExampleReply.Validate if the designated constraints aren't met.
type QueryExampleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExampleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExampleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExampleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExampleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExampleReplyValidationError) ErrorName() string {
	return "QueryExampleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExampleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExampleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExampleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExampleReplyValidationError{}

// Validate checks the field values on QueryExample with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExample) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExample with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExampleMultiError, or
// nil if none found.
func (m *QueryExample) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExample) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Example

	// no validation rules for ExampleFormat

	// no validation rules for ExampleType

	// no validation rules for IsTruncated

	// no validation rules for PlaceholdersCount

	// no validation rules for ExplainFingerprint

	// no validation rules for QueryId

	// no validation rules for ExampleMetrics

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for Schema

	if len(errors) > 0 {
		return QueryExampleMultiError(errors)
	}

	return nil
}

// QueryExampleMultiError is an error wrapping multiple validation errors
// returned by QueryExample.ValidateAll() if the designated constraints aren't met.
type QueryExampleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExampleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExampleMultiError) AllErrors() []error { return m }

// QueryExampleValidationError is the validation error returned by
// QueryExample.Validate if the designated constraints aren't met.
type QueryExampleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExampleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExampleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExampleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExampleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExampleValidationError) ErrorName() string { return "QueryExampleValidationError" }

// Error satisfies the builtin error interface
func (e QueryExampleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExampleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExampleValidationError{}

// Validate checks the field values on ObjectDetailsLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectDetailsLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectDetailsLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectDetailsLabelsRequestMultiError, or nil if none found.
func (m *ObjectDetailsLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectDetailsLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectDetailsLabelsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectDetailsLabelsRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectDetailsLabelsRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectDetailsLabelsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectDetailsLabelsRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectDetailsLabelsRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterBy

	// no validation rules for GroupBy

	if len(errors) > 0 {
		return ObjectDetailsLabelsRequestMultiError(errors)
	}

	return nil
}

// ObjectDetailsLabelsRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectDetailsLabelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ObjectDetailsLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectDetailsLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectDetailsLabelsRequestMultiError) AllErrors() []error { return m }

// ObjectDetailsLabelsRequestValidationError is the validation error returned
// by ObjectDetailsLabelsRequest.Validate if the designated constraints aren't met.
type ObjectDetailsLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectDetailsLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectDetailsLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectDetailsLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectDetailsLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectDetailsLabelsRequestValidationError) ErrorName() string {
	return "ObjectDetailsLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectDetailsLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectDetailsLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectDetailsLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectDetailsLabelsRequestValidationError{}

// Validate checks the field values on ObjectDetailsLabelsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectDetailsLabelsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectDetailsLabelsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectDetailsLabelsReplyMultiError, or nil if none found.
func (m *ObjectDetailsLabelsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectDetailsLabelsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			// no validation rules for Labels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ObjectDetailsLabelsReplyValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ObjectDetailsLabelsReplyValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ObjectDetailsLabelsReplyValidationError{
						field:  fmt.Sprintf("Labels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ObjectDetailsLabelsReplyMultiError(errors)
	}

	return nil
}

// ObjectDetailsLabelsReplyMultiError is an error wrapping multiple validation
// errors returned by ObjectDetailsLabelsReply.ValidateAll() if the designated
// constraints aren't met.
type ObjectDetailsLabelsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectDetailsLabelsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectDetailsLabelsReplyMultiError) AllErrors() []error { return m }

// ObjectDetailsLabelsReplyValidationError is the validation error returned by
// ObjectDetailsLabelsReply.Validate if the designated constraints aren't met.
type ObjectDetailsLabelsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectDetailsLabelsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectDetailsLabelsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectDetailsLabelsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectDetailsLabelsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectDetailsLabelsReplyValidationError) ErrorName() string {
	return "ObjectDetailsLabelsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectDetailsLabelsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectDetailsLabelsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectDetailsLabelsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectDetailsLabelsReplyValidationError{}

// Validate checks the field values on ListLabelValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLabelValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabelValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLabelValuesMultiError, or nil if none found.
func (m *ListLabelValues) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabelValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLabelValuesMultiError(errors)
	}

	return nil
}

// ListLabelValuesMultiError is an error wrapping multiple validation errors
// returned by ListLabelValues.ValidateAll() if the designated constraints
// aren't met.
type ListLabelValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabelValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabelValuesMultiError) AllErrors() []error { return m }

// ListLabelValuesValidationError is the validation error returned by
// ListLabelValues.Validate if the designated constraints aren't met.
type ListLabelValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabelValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabelValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabelValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabelValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabelValuesValidationError) ErrorName() string { return "ListLabelValuesValidationError" }

// Error satisfies the builtin error interface
func (e ListLabelValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabelValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabelValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabelValuesValidationError{}

// Validate checks the field values on QueryPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPlanRequestMultiError, or nil if none found.
func (m *QueryPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Queryid

	if len(errors) > 0 {
		return QueryPlanRequestMultiError(errors)
	}

	return nil
}

// QueryPlanRequestMultiError is an error wrapping multiple validation errors
// returned by QueryPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlanRequestMultiError) AllErrors() []error { return m }

// QueryPlanRequestValidationError is the validation error returned by
// QueryPlanRequest.Validate if the designated constraints aren't met.
type QueryPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlanRequestValidationError) ErrorName() string { return "QueryPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlanRequestValidationError{}

// Validate checks the field values on QueryPlanReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryPlanReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlanReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryPlanReplyMultiError,
// or nil if none found.
func (m *QueryPlanReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlanReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Planid

	// no validation rules for QueryPlan

	if len(errors) > 0 {
		return QueryPlanReplyMultiError(errors)
	}

	return nil
}

// QueryPlanReplyMultiError is an error wrapping multiple validation errors
// returned by QueryPlanReply.ValidateAll() if the designated constraints
// aren't met.
type QueryPlanReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlanReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlanReplyMultiError) AllErrors() []error { return m }

// QueryPlanReplyValidationError is the validation error returned by
// QueryPlanReply.Validate if the designated constraints aren't met.
type QueryPlanReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlanReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlanReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlanReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlanReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlanReplyValidationError) ErrorName() string { return "QueryPlanReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryPlanReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlanReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlanReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlanReplyValidationError{}

// Validate checks the field values on HistogramRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistogramRequestMultiError, or nil if none found.
func (m *HistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistogramRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistogramRequestValidationError{
					field:  "PeriodStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistogramRequestValidationError{
				field:  "PeriodStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodStartTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistogramRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistogramRequestValidationError{
					field:  "PeriodStartTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistogramRequestValidationError{
				field:  "PeriodStartTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistogramRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistogramRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistogramRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Queryid

	if len(errors) > 0 {
		return HistogramRequestMultiError(errors)
	}

	return nil
}

// HistogramRequestMultiError is an error wrapping multiple validation errors
// returned by HistogramRequest.ValidateAll() if the designated constraints
// aren't met.
type HistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistogramRequestMultiError) AllErrors() []error { return m }

// HistogramRequestValidationError is the validation error returned by
// HistogramRequest.Validate if the designated constraints aren't met.
type HistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistogramRequestValidationError) ErrorName() string { return "HistogramRequestValidationError" }

// Error satisfies the builtin error interface
func (e HistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistogramRequestValidationError{}

// Validate checks the field values on HistogramReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistogramReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistogramReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistogramReplyMultiError,
// or nil if none found.
func (m *HistogramReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HistogramReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistogramItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistogramReplyValidationError{
						field:  fmt.Sprintf("HistogramItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistogramReplyValidationError{
						field:  fmt.Sprintf("HistogramItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistogramReplyValidationError{
					field:  fmt.Sprintf("HistogramItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HistogramReplyMultiError(errors)
	}

	return nil
}

// HistogramReplyMultiError is an error wrapping multiple validation errors
// returned by HistogramReply.ValidateAll() if the designated constraints
// aren't met.
type HistogramReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistogramReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistogramReplyMultiError) AllErrors() []error { return m }

// HistogramReplyValidationError is the validation error returned by
// HistogramReply.Validate if the designated constraints aren't met.
type HistogramReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistogramReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistogramReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistogramReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistogramReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistogramReplyValidationError) ErrorName() string { return "HistogramReplyValidationError" }

// Error satisfies the builtin error interface
func (e HistogramReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistogramReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistogramReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistogramReplyValidationError{}

// Validate checks the field values on HistogramItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistogramItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistogramItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistogramItemMultiError, or
// nil if none found.
func (m *HistogramItem) ValidateAll() error {
	return m.validate(true)
}

func (m *HistogramItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Range

	// no validation rules for Frequency

	if len(errors) > 0 {
		return HistogramItemMultiError(errors)
	}

	return nil
}

// HistogramItemMultiError is an error wrapping multiple validation errors
// returned by HistogramItem.ValidateAll() if the designated constraints
// aren't met.
type HistogramItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistogramItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistogramItemMultiError) AllErrors() []error { return m }

// HistogramItemValidationError is the validation error returned by
// HistogramItem.Validate if the designated constraints aren't met.
type HistogramItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistogramItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistogramItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistogramItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistogramItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistogramItemValidationError) ErrorName() string { return "HistogramItemValidationError" }

// Error satisfies the builtin error interface
func (e HistogramItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistogramItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistogramItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistogramItemValidationError{}

// Validate checks the field values on QueryExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExistsRequestMultiError, or nil if none found.
func (m *QueryExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Serviceid

	// no validation rules for Query

	if len(errors) > 0 {
		return QueryExistsRequestMultiError(errors)
	}

	return nil
}

// QueryExistsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryExistsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExistsRequestMultiError) AllErrors() []error { return m }

// QueryExistsRequestValidationError is the validation error returned by
// QueryExistsRequest.Validate if the designated constraints aren't met.
type QueryExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExistsRequestValidationError) ErrorName() string {
	return "QueryExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExistsRequestValidationError{}

// Validate checks the field values on ExplainFingerprintByQueryIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExplainFingerprintByQueryIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainFingerprintByQueryIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExplainFingerprintByQueryIDRequestMultiError, or nil if none found.
func (m *ExplainFingerprintByQueryIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainFingerprintByQueryIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Serviceid

	// no validation rules for QueryId

	if len(errors) > 0 {
		return ExplainFingerprintByQueryIDRequestMultiError(errors)
	}

	return nil
}

// ExplainFingerprintByQueryIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExplainFingerprintByQueryIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainFingerprintByQueryIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainFingerprintByQueryIDRequestMultiError) AllErrors() []error { return m }

// ExplainFingerprintByQueryIDRequestValidationError is the validation error
// returned by ExplainFingerprintByQueryIDRequest.Validate if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainFingerprintByQueryIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainFingerprintByQueryIDRequestValidationError) ErrorName() string {
	return "ExplainFingerprintByQueryIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainFingerprintByQueryIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainFingerprintByQueryIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainFingerprintByQueryIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainFingerprintByQueryIDRequestValidationError{}

// Validate checks the field values on ExplainFingerprintByQueryIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExplainFingerprintByQueryIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExplainFingerprintByQueryIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExplainFingerprintByQueryIDReplyMultiError, or nil if none found.
func (m *ExplainFingerprintByQueryIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExplainFingerprintByQueryIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExplainFingerprint

	// no validation rules for PlaceholdersCount

	if len(errors) > 0 {
		return ExplainFingerprintByQueryIDReplyMultiError(errors)
	}

	return nil
}

// ExplainFingerprintByQueryIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// ExplainFingerprintByQueryIDReply.ValidateAll() if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExplainFingerprintByQueryIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExplainFingerprintByQueryIDReplyMultiError) AllErrors() []error { return m }

// ExplainFingerprintByQueryIDReplyValidationError is the validation error
// returned by ExplainFingerprintByQueryIDReply.Validate if the designated
// constraints aren't met.
type ExplainFingerprintByQueryIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExplainFingerprintByQueryIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExplainFingerprintByQueryIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExplainFingerprintByQueryIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExplainFingerprintByQueryIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExplainFingerprintByQueryIDReplyValidationError) ErrorName() string {
	return "ExplainFingerprintByQueryIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExplainFingerprintByQueryIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExplainFingerprintByQueryIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExplainFingerprintByQueryIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExplainFingerprintByQueryIDReplyValidationError{}

// Validate checks the field values on GetSelectedQueryMetadataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSelectedQueryMetadataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelectedQueryMetadataReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSelectedQueryMetadataReplyMultiError, or nil if none found.
func (m *GetSelectedQueryMetadataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelectedQueryMetadataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Database

	// no validation rules for Schema

	// no validation rules for Username

	// no validation rules for ReplicationSet

	// no validation rules for Cluster

	// no validation rules for ServiceType

	// no validation rules for ServiceId

	// no validation rules for Environment

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for NodeType

	if len(errors) > 0 {
		return GetSelectedQueryMetadataReplyMultiError(errors)
	}

	return nil
}

// GetSelectedQueryMetadataReplyMultiError is an error wrapping multiple
// validation errors returned by GetSelectedQueryMetadataReply.ValidateAll()
// if the designated constraints aren't met.
type GetSelectedQueryMetadataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelectedQueryMetadataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelectedQueryMetadataReplyMultiError) AllErrors() []error { return m }

// GetSelectedQueryMetadataReplyValidationError is the validation error
// returned by GetSelectedQueryMetadataReply.Validate if the designated
// constraints aren't met.
type GetSelectedQueryMetadataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelectedQueryMetadataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelectedQueryMetadataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelectedQueryMetadataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelectedQueryMetadataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelectedQueryMetadataReplyValidationError) ErrorName() string {
	return "GetSelectedQueryMetadataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelectedQueryMetadataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelectedQueryMetadataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelectedQueryMetadataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelectedQueryMetadataReplyValidationError{}
