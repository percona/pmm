// Code generated by go-swagger; DO NOT EDIT.

package object_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new object details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for object details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ObjectDetailsGetHistogram(params *ObjectDetailsGetHistogramParams) (*ObjectDetailsGetHistogramOK, error)

	ObjectDetailsGetLabels(params *ObjectDetailsGetLabelsParams) (*ObjectDetailsGetLabelsOK, error)

	ObjectDetailsGetMetrics(params *ObjectDetailsGetMetricsParams) (*ObjectDetailsGetMetricsOK, error)

	ObjectDetailsGetQueryExample(params *ObjectDetailsGetQueryExampleParams) (*ObjectDetailsGetQueryExampleOK, error)

	ObjectDetailsGetQueryPlan(params *ObjectDetailsGetQueryPlanParams) (*ObjectDetailsGetQueryPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ObjectDetailsGetHistogram gets histogram gets histogram items for specific filtering
*/
func (a *Client) ObjectDetailsGetHistogram(params *ObjectDetailsGetHistogramParams) (*ObjectDetailsGetHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectDetailsGetHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ObjectDetails_GetHistogram",
		Method:             "POST",
		PathPattern:        "/v0/qan/ObjectDetails/GetHistogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObjectDetailsGetHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectDetailsGetHistogramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectDetailsGetHistogramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ObjectDetailsGetLabels gets labels gets list of labels for object details
*/
func (a *Client) ObjectDetailsGetLabels(params *ObjectDetailsGetLabelsParams) (*ObjectDetailsGetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectDetailsGetLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ObjectDetails_GetLabels",
		Method:             "POST",
		PathPattern:        "/v0/qan/ObjectDetails/GetLabels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObjectDetailsGetLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectDetailsGetLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectDetailsGetLabelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ObjectDetailsGetMetrics gets metrics gets map of metrics for specific filtering
*/
func (a *Client) ObjectDetailsGetMetrics(params *ObjectDetailsGetMetricsParams) (*ObjectDetailsGetMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectDetailsGetMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ObjectDetails_GetMetrics",
		Method:             "POST",
		PathPattern:        "/v0/qan/ObjectDetails/GetMetrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObjectDetailsGetMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectDetailsGetMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectDetailsGetMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ObjectDetailsGetQueryExample gets query example gets list of query examples
*/
func (a *Client) ObjectDetailsGetQueryExample(params *ObjectDetailsGetQueryExampleParams) (*ObjectDetailsGetQueryExampleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectDetailsGetQueryExampleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ObjectDetails_GetQueryExample",
		Method:             "POST",
		PathPattern:        "/v0/qan/ObjectDetails/GetQueryExample",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObjectDetailsGetQueryExampleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectDetailsGetQueryExampleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectDetailsGetQueryExampleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ObjectDetailsGetQueryPlan gets query plan gets query plan and plan id for specific filtering
*/
func (a *Client) ObjectDetailsGetQueryPlan(params *ObjectDetailsGetQueryPlanParams) (*ObjectDetailsGetQueryPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectDetailsGetQueryPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ObjectDetails_GetQueryPlan",
		Method:             "POST",
		PathPattern:        "/v0/qan/ObjectDetails/GetQueryPlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObjectDetailsGetQueryPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectDetailsGetQueryPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectDetailsGetQueryPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
