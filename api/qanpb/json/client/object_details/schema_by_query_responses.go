// Code generated by go-swagger; DO NOT EDIT.

package object_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaByQueryReader is a Reader for the SchemaByQuery structure.
type SchemaByQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaByQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaByQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSchemaByQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSchemaByQueryOK creates a SchemaByQueryOK with default headers values
func NewSchemaByQueryOK() *SchemaByQueryOK {
	return &SchemaByQueryOK{}
}

/*
SchemaByQueryOK describes a response with status code 200, with default header values.

A successful response.
*/
type SchemaByQueryOK struct {
	Payload *SchemaByQueryOKBody
}

func (o *SchemaByQueryOK) Error() string {
	return fmt.Sprintf("[POST /v0/qan/ObjectDetails/SchemaByQuery][%d] schemaByQueryOk  %+v", 200, o.Payload)
}

func (o *SchemaByQueryOK) GetPayload() *SchemaByQueryOKBody {
	return o.Payload
}

func (o *SchemaByQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(SchemaByQueryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaByQueryDefault creates a SchemaByQueryDefault with default headers values
func NewSchemaByQueryDefault(code int) *SchemaByQueryDefault {
	return &SchemaByQueryDefault{
		_statusCode: code,
	}
}

/*
SchemaByQueryDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SchemaByQueryDefault struct {
	_statusCode int

	Payload *SchemaByQueryDefaultBody
}

// Code gets the status code for the schema by query default response
func (o *SchemaByQueryDefault) Code() int {
	return o._statusCode
}

func (o *SchemaByQueryDefault) Error() string {
	return fmt.Sprintf("[POST /v0/qan/ObjectDetails/SchemaByQuery][%d] SchemaByQuery default  %+v", o._statusCode, o.Payload)
}

func (o *SchemaByQueryDefault) GetPayload() *SchemaByQueryDefaultBody {
	return o.Payload
}

func (o *SchemaByQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(SchemaByQueryDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SchemaByQueryBody SchemaByQueryRequest returns schema for given query and service ID.
swagger:model SchemaByQueryBody
*/
type SchemaByQueryBody struct {
	// service id
	ServiceID string `json:"service_id,omitempty"`

	// query
	Query string `json:"query,omitempty"`
}

// Validate validates this schema by query body
func (o *SchemaByQueryBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this schema by query body based on context it is used
func (o *SchemaByQueryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SchemaByQueryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchemaByQueryBody) UnmarshalBinary(b []byte) error {
	var res SchemaByQueryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SchemaByQueryDefaultBody schema by query default body
swagger:model SchemaByQueryDefaultBody
*/
type SchemaByQueryDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*SchemaByQueryDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this schema by query default body
func (o *SchemaByQueryDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchemaByQueryDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SchemaByQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SchemaByQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schema by query default body based on the context it is used
func (o *SchemaByQueryDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchemaByQueryDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SchemaByQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SchemaByQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SchemaByQueryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchemaByQueryDefaultBody) UnmarshalBinary(b []byte) error {
	var res SchemaByQueryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SchemaByQueryDefaultBodyDetailsItems0 schema by query default body details items0
swagger:model SchemaByQueryDefaultBodyDetailsItems0
*/
type SchemaByQueryDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this schema by query default body details items0
func (o *SchemaByQueryDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this schema by query default body details items0 based on context it is used
func (o *SchemaByQueryDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SchemaByQueryDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchemaByQueryDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SchemaByQueryDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SchemaByQueryOKBody SchemaByQueryReply is schema for given query ID and service ID.
swagger:model SchemaByQueryOKBody
*/
type SchemaByQueryOKBody struct {
	// schema
	Schema string `json:"schema,omitempty"`
}

// Validate validates this schema by query OK body
func (o *SchemaByQueryOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this schema by query OK body based on context it is used
func (o *SchemaByQueryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SchemaByQueryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchemaByQueryOKBody) UnmarshalBinary(b []byte) error {
	var res SchemaByQueryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
