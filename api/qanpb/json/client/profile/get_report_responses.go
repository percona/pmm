// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// GetReportReader is a Reader for the GetReport structure.
type GetReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetReportOK creates a GetReportOK with default headers values
func NewGetReportOK() *GetReportOK {
	return &GetReportOK{}
}

/*GetReportOK handles this case with default header values.

A successful response.
*/
type GetReportOK struct {
	Payload *GetReportOKBody
}

func (o *GetReportOK) Error() string {
	return fmt.Sprintf("[POST /v1/qan/GetReport][%d] getReportOK  %+v", 200, o.Payload)
}

func (o *GetReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetReportOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetReportBody ReportRequest defines filtering of metrics report for db server or other dimentions.
swagger:model GetReportBody
*/
type GetReportBody struct {

	// columns
	Columns []string `json:"columns"`

	// first seen
	FirstSeen bool `json:"first_seen,omitempty"`

	// group by
	GroupBy string `json:"group_by,omitempty"`

	// include only fields
	IncludeOnlyFields []string `json:"include_only_fields"`

	// keyword
	Keyword string `json:"keyword,omitempty"`

	// labels
	Labels []*LabelsItems0 `json:"labels"`

	// limit
	Limit int64 `json:"limit,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// order by
	OrderBy string `json:"order_by,omitempty"`

	// period start from
	PeriodStartFrom string `json:"period_start_from,omitempty"`

	// period start to
	PeriodStartTo string `json:"period_start_to,omitempty"`
}

// Validate validates this get report body
func (o *GetReportBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReportBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReportBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReportBody) UnmarshalBinary(b []byte) error {
	var res GetReportBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetReportOKBody ReportReply is list of reports per quieryids, hosts etc.
swagger:model GetReportOKBody
*/
type GetReportOKBody struct {

	// limit
	Limit int64 `json:"limit,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// rows
	Rows []*RowsItems0 `json:"rows"`

	// total rows
	TotalRows int64 `json:"total_rows,omitempty"`
}

// Validate validates this get report o k body
func (o *GetReportOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReportOKBody) validateRows(formats strfmt.Registry) error {

	if swag.IsZero(o.Rows) { // not required
		return nil
	}

	for i := 0; i < len(o.Rows); i++ {
		if swag.IsZero(o.Rows[i]) { // not required
			continue
		}

		if o.Rows[i] != nil {
			if err := o.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getReportOK" + "." + "rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReportOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReportOKBody) UnmarshalBinary(b []byte) error {
	var res GetReportOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsItems0 ReportMapFieldEntry allows to pass labels/dimentions in form like {"d_server": ["db1", "db2"...]}.
swagger:model LabelsItems0
*/
type LabelsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value []string `json:"value"`
}

// Validate validates this labels items0
func (o *LabelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsItems0) UnmarshalBinary(b []byte) error {
	var res LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RowsItems0 Row define metrics for selected dimention.
swagger:model RowsItems0
*/
type RowsItems0 struct {

	// dimension
	Dimension string `json:"dimension,omitempty"`

	// metrics
	Metrics map[string]RowsItems0MetricsAnon `json:"metrics,omitempty"`

	// rank
	Rank int64 `json:"rank,omitempty"`

	// sparkline
	Sparkline []*RowsItems0SparklineItems0 `json:"sparkline"`
}

// Validate validates this rows items0
func (o *RowsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSparkline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RowsItems0) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(o.Metrics) { // not required
		return nil
	}

	for k := range o.Metrics {

		if swag.IsZero(o.Metrics[k]) { // not required
			continue
		}
		if val, ok := o.Metrics[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (o *RowsItems0) validateSparkline(formats strfmt.Registry) error {

	if swag.IsZero(o.Sparkline) { // not required
		return nil
	}

	for i := 0; i < len(o.Sparkline); i++ {
		if swag.IsZero(o.Sparkline[i]) { // not required
			continue
		}

		if o.Sparkline[i] != nil {
			if err := o.Sparkline[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sparkline" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RowsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RowsItems0) UnmarshalBinary(b []byte) error {
	var res RowsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RowsItems0MetricsAnon Metric cell.
swagger:model RowsItems0MetricsAnon
*/
type RowsItems0MetricsAnon struct {

	// stats
	Stats *RowsItems0MetricsAnonStats `json:"stats,omitempty"`
}

// Validate validates this rows items0 metrics anon
func (o *RowsItems0MetricsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RowsItems0MetricsAnon) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(o.Stats) { // not required
		return nil
	}

	if o.Stats != nil {
		if err := o.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RowsItems0MetricsAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RowsItems0MetricsAnon) UnmarshalBinary(b []byte) error {
	var res RowsItems0MetricsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RowsItems0MetricsAnonStats Stat is statistics of specific metric.
swagger:model RowsItems0MetricsAnonStats
*/
type RowsItems0MetricsAnonStats struct {

	// cnt
	Cnt float32 `json:"cnt,omitempty"`

	// max
	Max float32 `json:"max,omitempty"`

	// min
	Min float32 `json:"min,omitempty"`

	// p99
	P99 float32 `json:"p99,omitempty"`

	// rate
	Rate float32 `json:"rate,omitempty"`

	// sum
	Sum float32 `json:"sum,omitempty"`
}

// Validate validates this rows items0 metrics anon stats
func (o *RowsItems0MetricsAnonStats) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RowsItems0MetricsAnonStats) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RowsItems0MetricsAnonStats) UnmarshalBinary(b []byte) error {
	var res RowsItems0MetricsAnonStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RowsItems0SparklineItems0 Point contains values that represents abscissa (time) and ordinate (volume etc.)
// of every point in a coordinate system of Sparklines.
swagger:model RowsItems0SparklineItems0
*/
type RowsItems0SparklineItems0 struct {

	// values
	Values map[string]float32 `json:"values,omitempty"`
}

// Validate validates this rows items0 sparkline items0
func (o *RowsItems0SparklineItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RowsItems0SparklineItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RowsItems0SparklineItems0) UnmarshalBinary(b []byte) error {
	var res RowsItems0SparklineItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
