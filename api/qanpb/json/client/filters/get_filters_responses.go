// Code generated by go-swagger; DO NOT EDIT.

package filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetFiltersReader is a Reader for the GetFilters structure.
type GetFiltersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFiltersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFiltersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFiltersOK creates a GetFiltersOK with default headers values
func NewGetFiltersOK() *GetFiltersOK {
	return &GetFiltersOK{}
}

/*GetFiltersOK handles this case with default header values.

A successful response.
*/
type GetFiltersOK struct {
	Payload *GetFiltersOKBody
}

func (o *GetFiltersOK) Error() string {
	return fmt.Sprintf("[POST /v1/qan/GetFilters][%d] getFiltersOK  %+v", 200, o.Payload)
}

func (o *GetFiltersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFiltersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetFiltersBody FiltersRequest contains period for which we need filters.
swagger:model GetFiltersBody
*/
type GetFiltersBody struct {

	// from
	// Format: date-time
	From strfmt.DateTime `json:"from,omitempty"`

	// to
	// Format: date-time
	To strfmt.DateTime `json:"to,omitempty"`
}

// Validate validates this get filters body
func (o *GetFiltersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiltersBody) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(o.From) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"from", "body", "date-time", o.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetFiltersBody) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(o.To) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"to", "body", "date-time", o.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiltersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiltersBody) UnmarshalBinary(b []byte) error {
	var res GetFiltersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFiltersOKBody FiltersReply is map of labels for given period.
swagger:model GetFiltersOKBody
*/
type GetFiltersOKBody struct {

	// labels
	Labels map[string]LabelsAnon `json:"labels,omitempty"`
}

// Validate validates this get filters o k body
func (o *GetFiltersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiltersOKBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for k := range o.Labels {

		if swag.IsZero(o.Labels[k]) { // not required
			continue
		}
		if val, ok := o.Labels[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiltersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiltersOKBody) UnmarshalBinary(b []byte) error {
	var res GetFiltersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsAnon LabelsValues is label values and how many times this value occur.
swagger:model LabelsAnon
*/
type LabelsAnon struct {

	// count
	Count []string `json:"count"`

	// value
	Value []string `json:"value"`
}

// Validate validates this labels anon
func (o *LabelsAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsAnon) UnmarshalBinary(b []byte) error {
	var res LabelsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
