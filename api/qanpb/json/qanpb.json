{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "PMM QAN API",
    "version": "v0"
  },
  "paths": {
    "/v0/qan/Filters/Get": {
      "post": {
        "tags": [
          "Filters"
        ],
        "summary": "Get gets map of metrics names.",
        "operationId": "Get",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "FiltersRequest contains period for which we need filters.",
              "type": "object",
              "properties": {
                "labels": {
                  "type": "array",
                  "items": {
                    "description": "MapFieldEntry allows to pass labels/dimensions in form like {\"server\": [\"db1\", \"db2\"...]}.",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "main_metric_name": {
                  "type": "string",
                  "x-order": 2
                },
                "period_start_from": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 0
                },
                "period_start_to": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "FiltersReply is map of labels for given period by key.\nKey is label's name and value is label's value and how many times it occur.",
              "type": "object",
              "properties": {
                "labels": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "ListLabels is list of label's values: duplicates are impossible.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "array",
                        "items": {
                          "description": "Values is label values and main metric percent and per second.",
                          "type": "object",
                          "properties": {
                            "main_metric_per_sec": {
                              "type": "number",
                              "format": "float",
                              "x-order": 2
                            },
                            "main_metric_percent": {
                              "type": "number",
                              "format": "float",
                              "x-order": 1
                            },
                            "value": {
                              "type": "string",
                              "x-order": 0
                            }
                          }
                        },
                        "x-order": 0
                      }
                    }
                  },
                  "x-order": 0
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    },
    "/v0/qan/GetMetricsNames": {
      "post": {
        "tags": [
          "MetricsNames"
        ],
        "summary": "GetMetricsNames gets map of metrics names.",
        "operationId": "GetMetricsNames",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "MetricsNamesRequest is emty.",
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "MetricsNamesReply is map of stored metrics:\nkey is root of metric name in db (Ex:. [m_]query_time[_sum]);\nvalue - Human readable name of metrics.",
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-order": 0
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    },
    "/v0/qan/GetReport": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "GetReport returns list of metrics group by queryid or other dimentions.",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "ReportRequest defines filtering of metrics report for db server or other dimentions.",
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-order": 4
                },
                "group_by": {
                  "type": "string",
                  "x-order": 2
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "description": "ReportMapFieldEntry allows to pass labels/dimentions in form like {\"server\": [\"db1\", \"db2\"...]}.",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "limit": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 7
                },
                "main_metric": {
                  "type": "string",
                  "x-order": 8
                },
                "offset": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 6
                },
                "order_by": {
                  "type": "string",
                  "x-order": 5
                },
                "period_start_from": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 0
                },
                "period_start_to": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "ReportReply is list of reports per quieryids, hosts etc.",
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 2
                },
                "offset": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 1
                },
                "rows": {
                  "type": "array",
                  "items": {
                    "description": "Row define metrics for selected dimention.",
                    "type": "object",
                    "properties": {
                      "dimension": {
                        "type": "string",
                        "x-order": 1
                      },
                      "fingerprint": {
                        "type": "string",
                        "x-order": 4
                      },
                      "load": {
                        "type": "number",
                        "format": "float",
                        "x-order": 7
                      },
                      "metrics": {
                        "type": "object",
                        "additionalProperties": {
                          "description": "Metric cell.",
                          "type": "object",
                          "properties": {
                            "stats": {
                              "description": "Stat is statistics of specific metric.",
                              "type": "object",
                              "properties": {
                                "avg": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 6
                                },
                                "cnt": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 1
                                },
                                "max": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 4
                                },
                                "min": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 3
                                },
                                "p99": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 5
                                },
                                "rate": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 0
                                },
                                "sum": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 2
                                },
                                "sum_per_sec": {
                                  "type": "number",
                                  "format": "float",
                                  "x-order": 7
                                }
                              },
                              "x-order": 0
                            }
                          }
                        },
                        "x-order": 2
                      },
                      "num_queries": {
                        "type": "integer",
                        "format": "int64",
                        "x-order": 5
                      },
                      "qps": {
                        "type": "number",
                        "format": "float",
                        "x-order": 6
                      },
                      "rank": {
                        "type": "integer",
                        "format": "int64",
                        "x-order": 0
                      },
                      "sparkline": {
                        "type": "array",
                        "items": {
                          "description": "Point contains values that represents abscissa (time) and ordinate (volume etc.)\nof every point in a coordinate system of Sparklines.",
                          "type": "object",
                          "properties": {
                            "load": {
                              "description": "load is query_time / time_range.",
                              "type": "number",
                              "format": "float",
                              "x-order": 3
                            },
                            "m_blk_read_time_sum_per_sec": {
                              "description": "Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).",
                              "type": "number",
                              "format": "float",
                              "x-order": 53
                            },
                            "m_blk_write_time_sum_per_sec": {
                              "description": "Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).",
                              "type": "number",
                              "format": "float",
                              "x-order": 54
                            },
                            "m_bytes_sent_sum_per_sec": {
                              "description": "The number of bytes sent to all clients.",
                              "type": "number",
                              "format": "float",
                              "x-order": 21
                            },
                            "m_docs_returned_sum_per_sec": {
                              "description": "MongoDB metrics.\n\nThe number of returned documents.",
                              "type": "number",
                              "format": "float",
                              "x-order": 40
                            },
                            "m_docs_scanned_sum_per_sec": {
                              "description": "The number of scanned documents.",
                              "type": "number",
                              "format": "float",
                              "x-order": 42
                            },
                            "m_filesort_on_disk_sum_per_sec": {
                              "description": "The filesort was performed on disk.",
                              "type": "number",
                              "format": "float",
                              "x-order": 31
                            },
                            "m_filesort_sum_per_sec": {
                              "description": "The query used a filesort.",
                              "type": "number",
                              "format": "float",
                              "x-order": 30
                            },
                            "m_full_join_sum_per_sec": {
                              "description": "The query performed a full join (a join without indexes).",
                              "type": "number",
                              "format": "float",
                              "x-order": 27
                            },
                            "m_full_scan_sum_per_sec": {
                              "description": "The query performed a full table scan.",
                              "type": "number",
                              "format": "float",
                              "x-order": 26
                            },
                            "m_innodb_io_r_bytes_sum_per_sec": {
                              "description": "Similar to innodb_IO_r_ops, but the unit is bytes.",
                              "type": "number",
                              "format": "float",
                              "x-order": 15
                            },
                            "m_innodb_io_r_ops_sum_per_sec": {
                              "description": "Counts the number of page read operations scheduled.",
                              "type": "number",
                              "format": "float",
                              "x-order": 14
                            },
                            "m_innodb_io_r_wait_sum_per_sec": {
                              "description": "Shows how long (in seconds) it took InnoDB to actually read the data from storage.",
                              "type": "number",
                              "format": "float",
                              "x-order": 16
                            },
                            "m_innodb_pages_distinct_sum_per_sec": {
                              "description": "Counts approximately the number of unique pages the query accessed.",
                              "type": "number",
                              "format": "float",
                              "x-order": 19
                            },
                            "m_innodb_queue_wait_sum_per_sec": {
                              "description": "Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.",
                              "type": "number",
                              "format": "float",
                              "x-order": 18
                            },
                            "m_innodb_rec_lock_wait_sum_per_sec": {
                              "description": "Shows how long (in seconds) the query waited for row locks.",
                              "type": "number",
                              "format": "float",
                              "x-order": 17
                            },
                            "m_local_blks_dirtied_sum_per_sec": {
                              "description": "Total number of local blocks dirtied by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 49
                            },
                            "m_local_blks_hit_sum_per_sec": {
                              "description": "Total number of local block cache hits by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 47
                            },
                            "m_local_blks_read_sum_per_sec": {
                              "description": "Total number of local blocks read by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 48
                            },
                            "m_local_blks_written_sum_per_sec": {
                              "description": "Total number of local blocks written by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 50
                            },
                            "m_lock_time_sum_per_sec": {
                              "description": "The time to acquire locks in seconds.",
                              "type": "number",
                              "format": "float",
                              "x-order": 8
                            },
                            "m_merge_passes_sum_per_sec": {
                              "description": "The number of merge passes that the sort algorithm has had to do.",
                              "type": "number",
                              "format": "float",
                              "x-order": 13
                            },
                            "m_no_good_index_used_sum_per_sec": {
                              "description": "The number of queries without good index.",
                              "type": "number",
                              "format": "float",
                              "x-order": 39
                            },
                            "m_no_index_used_sum_per_sec": {
                              "description": "The number of queries without index.",
                              "type": "number",
                              "format": "float",
                              "x-order": 38
                            },
                            "m_qc_hit_sum_per_sec": {
                              "description": "Boolean metrics:\n- *_sum_per_sec - how many times this matric was true.\n\nQuery Cache hits.",
                              "type": "number",
                              "format": "float",
                              "x-order": 25
                            },
                            "m_query_length_sum_per_sec": {
                              "description": "Shows how long the query is.",
                              "type": "number",
                              "format": "float",
                              "x-order": 20
                            },
                            "m_query_time_sum_per_sec": {
                              "description": "The statement execution time in seconds.",
                              "type": "number",
                              "format": "float",
                              "x-order": 7
                            },
                            "m_response_length_sum_per_sec": {
                              "description": "The response length of the query result in bytes.",
                              "type": "number",
                              "format": "float",
                              "x-order": 41
                            },
                            "m_rows_affected_sum_per_sec": {
                              "description": "Number of rows changed - UPDATE, DELETE, INSERT.",
                              "type": "number",
                              "format": "float",
                              "x-order": 11
                            },
                            "m_rows_examined_sum_per_sec": {
                              "description": "Number of rows scanned - SELECT.",
                              "type": "number",
                              "format": "float",
                              "x-order": 10
                            },
                            "m_rows_read_sum_per_sec": {
                              "description": "The number of rows read from tables.",
                              "type": "number",
                              "format": "float",
                              "x-order": 12
                            },
                            "m_rows_sent_sum_per_sec": {
                              "description": "The number of rows sent to the client.",
                              "type": "number",
                              "format": "float",
                              "x-order": 9
                            },
                            "m_select_full_range_join_sum_per_sec": {
                              "description": "The number of joins that used a range search on a reference table.",
                              "type": "number",
                              "format": "float",
                              "x-order": 32
                            },
                            "m_select_range_check_sum_per_sec": {
                              "description": "The number of joins without keys that check for key usage after each row.",
                              "type": "number",
                              "format": "float",
                              "x-order": 34
                            },
                            "m_select_range_sum_per_sec": {
                              "description": "The number of joins that used ranges on the first table.",
                              "type": "number",
                              "format": "float",
                              "x-order": 33
                            },
                            "m_shared_blks_dirtied_sum_per_sec": {
                              "description": "Total number of shared blocks dirtied by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 45
                            },
                            "m_shared_blks_hit_sum_per_sec": {
                              "description": "PostgreSQL metrics.\n\nTotal number of shared block cache hits by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 43
                            },
                            "m_shared_blks_read_sum_per_sec": {
                              "description": "Total number of shared blocks read by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 44
                            },
                            "m_shared_blks_written_sum_per_sec": {
                              "description": "Total number of shared blocks written by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 46
                            },
                            "m_sort_range_sum_per_sec": {
                              "description": "The number of sorts that were done using ranges.",
                              "type": "number",
                              "format": "float",
                              "x-order": 35
                            },
                            "m_sort_rows_sum_per_sec": {
                              "description": "The number of sorted rows.",
                              "type": "number",
                              "format": "float",
                              "x-order": 36
                            },
                            "m_sort_scan_sum_per_sec": {
                              "description": "The number of sorts that were done by scanning the table.",
                              "type": "number",
                              "format": "float",
                              "x-order": 37
                            },
                            "m_temp_blks_read_sum_per_sec": {
                              "description": "Total number of temp blocks read by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 51
                            },
                            "m_temp_blks_written_sum_per_sec": {
                              "description": "Total number of temp blocks written by the statement.",
                              "type": "number",
                              "format": "float",
                              "x-order": 52
                            },
                            "m_tmp_disk_tables_sum_per_sec": {
                              "description": "Number of temporary tables created on disk for the query.",
                              "type": "number",
                              "format": "float",
                              "x-order": 23
                            },
                            "m_tmp_table_on_disk_sum_per_sec": {
                              "description": "The querys temporary table was stored on disk.",
                              "type": "number",
                              "format": "float",
                              "x-order": 29
                            },
                            "m_tmp_table_sizes_sum_per_sec": {
                              "description": "Total Size in bytes for all temporary tables used in the query.",
                              "type": "number",
                              "format": "float",
                              "x-order": 24
                            },
                            "m_tmp_table_sum_per_sec": {
                              "description": "The query created an implicit internal temporary table.",
                              "type": "number",
                              "format": "float",
                              "x-order": 28
                            },
                            "m_tmp_tables_sum_per_sec": {
                              "description": "Number of temporary tables created on memory for the query.",
                              "type": "number",
                              "format": "float",
                              "x-order": 22
                            },
                            "num_queries_per_sec": {
                              "description": "number of queries in bucket.",
                              "type": "number",
                              "format": "float",
                              "x-order": 4
                            },
                            "num_queries_with_errors_per_sec": {
                              "description": "number of queries with errors.",
                              "type": "number",
                              "format": "float",
                              "x-order": 5
                            },
                            "num_queries_with_warnings_per_sec": {
                              "description": "number of queries with warnings.",
                              "type": "number",
                              "format": "float",
                              "x-order": 6
                            },
                            "point": {
                              "description": "The serial number of the chart point from the largest time in the time interval to the lowest time in the time range.",
                              "type": "integer",
                              "format": "int64",
                              "x-order": 0
                            },
                            "time_frame": {
                              "description": "Duration beetween two points.",
                              "type": "integer",
                              "format": "int64",
                              "x-order": 1
                            },
                            "timestamp": {
                              "description": "Time of point in format RFC3339.",
                              "type": "string",
                              "x-order": 2
                            }
                          }
                        },
                        "x-order": 3
                      }
                    }
                  },
                  "x-order": 3
                },
                "total_rows": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 0
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    },
    "/v0/qan/ObjectDetails/GetLabels": {
      "post": {
        "tags": [
          "ObjectDetails"
        ],
        "summary": "GetLabels gets list of labels for object details.",
        "operationId": "GetLabels",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "ObjectDetailsLabelsRequest defines filtering of object detail's labels for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
              "type": "object",
              "properties": {
                "filter_by": {
                  "description": "dimension value: ex: queryid - 1D410B4BE5060972.",
                  "type": "string",
                  "x-order": 2
                },
                "group_by": {
                  "description": "one of dimension: queryid | host ...",
                  "type": "string",
                  "x-order": 3
                },
                "period_start_from": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 0
                },
                "period_start_to": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "ObjectDetailsLabelsReply is a map of labels names as keys and labels values as a list.",
              "type": "object",
              "properties": {
                "labels": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "ListLabelValues is list of label's values.",
                    "type": "object",
                    "properties": {
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 0
                      }
                    }
                  },
                  "x-order": 0
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    },
    "/v0/qan/ObjectDetails/GetMetrics": {
      "post": {
        "tags": [
          "ObjectDetails"
        ],
        "summary": "GetMetrics gets map of metrics for specific filtering.",
        "operationId": "GetMetrics",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "MetricsRequest defines filtering of metrics for specific value of dimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
              "type": "object",
              "properties": {
                "filter_by": {
                  "description": "dimension value: ex: queryid - 1D410B4BE5060972.",
                  "type": "string",
                  "x-order": 2
                },
                "group_by": {
                  "description": "one of dimension: queryid | host ...",
                  "type": "string",
                  "x-order": 3
                },
                "include_only_fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-order": 5
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "description": "MapFieldEntry allows to pass labels/dimensions in form like {\"server\": [\"db1\", \"db2\"...]}.",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 4
                },
                "period_start_from": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 0
                },
                "period_start_to": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 1
                },
                "totals": {
                  "type": "boolean",
                  "format": "boolean",
                  "title": "retrieve only values for totals, excluding N/A values",
                  "x-order": 6
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "MetricsReply defines metrics for specific value of dimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
              "type": "object",
              "properties": {
                "fingerprint": {
                  "type": "string",
                  "x-order": 3
                },
                "metrics": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "MetricValues is statistics of specific metric.",
                    "type": "object",
                    "properties": {
                      "avg": {
                        "type": "number",
                        "format": "float",
                        "x-order": 5
                      },
                      "cnt": {
                        "type": "number",
                        "format": "float",
                        "x-order": 1
                      },
                      "max": {
                        "type": "number",
                        "format": "float",
                        "x-order": 4
                      },
                      "min": {
                        "type": "number",
                        "format": "float",
                        "x-order": 3
                      },
                      "p99": {
                        "type": "number",
                        "format": "float",
                        "x-order": 6
                      },
                      "percent_of_total": {
                        "type": "number",
                        "format": "float",
                        "x-order": 7
                      },
                      "rate": {
                        "type": "number",
                        "format": "float",
                        "x-order": 0
                      },
                      "sum": {
                        "type": "number",
                        "format": "float",
                        "x-order": 2
                      }
                    }
                  },
                  "x-order": 0
                },
                "sparkline": {
                  "type": "array",
                  "items": {
                    "description": "Point contains values that represents abscissa (time) and ordinate (volume etc.)\nof every point in a coordinate system of Sparklines.",
                    "type": "object",
                    "properties": {
                      "load": {
                        "description": "load is query_time / time_range.",
                        "type": "number",
                        "format": "float",
                        "x-order": 3
                      },
                      "m_blk_read_time_sum_per_sec": {
                        "description": "Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).",
                        "type": "number",
                        "format": "float",
                        "x-order": 53
                      },
                      "m_blk_write_time_sum_per_sec": {
                        "description": "Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).",
                        "type": "number",
                        "format": "float",
                        "x-order": 54
                      },
                      "m_bytes_sent_sum_per_sec": {
                        "description": "The number of bytes sent to all clients.",
                        "type": "number",
                        "format": "float",
                        "x-order": 21
                      },
                      "m_docs_returned_sum_per_sec": {
                        "description": "MongoDB metrics.\n\nThe number of returned documents.",
                        "type": "number",
                        "format": "float",
                        "x-order": 40
                      },
                      "m_docs_scanned_sum_per_sec": {
                        "description": "The number of scanned documents.",
                        "type": "number",
                        "format": "float",
                        "x-order": 42
                      },
                      "m_filesort_on_disk_sum_per_sec": {
                        "description": "The filesort was performed on disk.",
                        "type": "number",
                        "format": "float",
                        "x-order": 31
                      },
                      "m_filesort_sum_per_sec": {
                        "description": "The query used a filesort.",
                        "type": "number",
                        "format": "float",
                        "x-order": 30
                      },
                      "m_full_join_sum_per_sec": {
                        "description": "The query performed a full join (a join without indexes).",
                        "type": "number",
                        "format": "float",
                        "x-order": 27
                      },
                      "m_full_scan_sum_per_sec": {
                        "description": "The query performed a full table scan.",
                        "type": "number",
                        "format": "float",
                        "x-order": 26
                      },
                      "m_innodb_io_r_bytes_sum_per_sec": {
                        "description": "Similar to innodb_IO_r_ops, but the unit is bytes.",
                        "type": "number",
                        "format": "float",
                        "x-order": 15
                      },
                      "m_innodb_io_r_ops_sum_per_sec": {
                        "description": "Counts the number of page read operations scheduled.",
                        "type": "number",
                        "format": "float",
                        "x-order": 14
                      },
                      "m_innodb_io_r_wait_sum_per_sec": {
                        "description": "Shows how long (in seconds) it took InnoDB to actually read the data from storage.",
                        "type": "number",
                        "format": "float",
                        "x-order": 16
                      },
                      "m_innodb_pages_distinct_sum_per_sec": {
                        "description": "Counts approximately the number of unique pages the query accessed.",
                        "type": "number",
                        "format": "float",
                        "x-order": 19
                      },
                      "m_innodb_queue_wait_sum_per_sec": {
                        "description": "Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.",
                        "type": "number",
                        "format": "float",
                        "x-order": 18
                      },
                      "m_innodb_rec_lock_wait_sum_per_sec": {
                        "description": "Shows how long (in seconds) the query waited for row locks.",
                        "type": "number",
                        "format": "float",
                        "x-order": 17
                      },
                      "m_local_blks_dirtied_sum_per_sec": {
                        "description": "Total number of local blocks dirtied by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 49
                      },
                      "m_local_blks_hit_sum_per_sec": {
                        "description": "Total number of local block cache hits by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 47
                      },
                      "m_local_blks_read_sum_per_sec": {
                        "description": "Total number of local blocks read by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 48
                      },
                      "m_local_blks_written_sum_per_sec": {
                        "description": "Total number of local blocks written by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 50
                      },
                      "m_lock_time_sum_per_sec": {
                        "description": "The time to acquire locks in seconds.",
                        "type": "number",
                        "format": "float",
                        "x-order": 8
                      },
                      "m_merge_passes_sum_per_sec": {
                        "description": "The number of merge passes that the sort algorithm has had to do.",
                        "type": "number",
                        "format": "float",
                        "x-order": 13
                      },
                      "m_no_good_index_used_sum_per_sec": {
                        "description": "The number of queries without good index.",
                        "type": "number",
                        "format": "float",
                        "x-order": 39
                      },
                      "m_no_index_used_sum_per_sec": {
                        "description": "The number of queries without index.",
                        "type": "number",
                        "format": "float",
                        "x-order": 38
                      },
                      "m_qc_hit_sum_per_sec": {
                        "description": "Boolean metrics:\n- *_sum_per_sec - how many times this matric was true.\n\nQuery Cache hits.",
                        "type": "number",
                        "format": "float",
                        "x-order": 25
                      },
                      "m_query_length_sum_per_sec": {
                        "description": "Shows how long the query is.",
                        "type": "number",
                        "format": "float",
                        "x-order": 20
                      },
                      "m_query_time_sum_per_sec": {
                        "description": "The statement execution time in seconds.",
                        "type": "number",
                        "format": "float",
                        "x-order": 7
                      },
                      "m_response_length_sum_per_sec": {
                        "description": "The response length of the query result in bytes.",
                        "type": "number",
                        "format": "float",
                        "x-order": 41
                      },
                      "m_rows_affected_sum_per_sec": {
                        "description": "Number of rows changed - UPDATE, DELETE, INSERT.",
                        "type": "number",
                        "format": "float",
                        "x-order": 11
                      },
                      "m_rows_examined_sum_per_sec": {
                        "description": "Number of rows scanned - SELECT.",
                        "type": "number",
                        "format": "float",
                        "x-order": 10
                      },
                      "m_rows_read_sum_per_sec": {
                        "description": "The number of rows read from tables.",
                        "type": "number",
                        "format": "float",
                        "x-order": 12
                      },
                      "m_rows_sent_sum_per_sec": {
                        "description": "The number of rows sent to the client.",
                        "type": "number",
                        "format": "float",
                        "x-order": 9
                      },
                      "m_select_full_range_join_sum_per_sec": {
                        "description": "The number of joins that used a range search on a reference table.",
                        "type": "number",
                        "format": "float",
                        "x-order": 32
                      },
                      "m_select_range_check_sum_per_sec": {
                        "description": "The number of joins without keys that check for key usage after each row.",
                        "type": "number",
                        "format": "float",
                        "x-order": 34
                      },
                      "m_select_range_sum_per_sec": {
                        "description": "The number of joins that used ranges on the first table.",
                        "type": "number",
                        "format": "float",
                        "x-order": 33
                      },
                      "m_shared_blks_dirtied_sum_per_sec": {
                        "description": "Total number of shared blocks dirtied by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 45
                      },
                      "m_shared_blks_hit_sum_per_sec": {
                        "description": "PostgreSQL metrics.\n\nTotal number of shared block cache hits by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 43
                      },
                      "m_shared_blks_read_sum_per_sec": {
                        "description": "Total number of shared blocks read by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 44
                      },
                      "m_shared_blks_written_sum_per_sec": {
                        "description": "Total number of shared blocks written by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 46
                      },
                      "m_sort_range_sum_per_sec": {
                        "description": "The number of sorts that were done using ranges.",
                        "type": "number",
                        "format": "float",
                        "x-order": 35
                      },
                      "m_sort_rows_sum_per_sec": {
                        "description": "The number of sorted rows.",
                        "type": "number",
                        "format": "float",
                        "x-order": 36
                      },
                      "m_sort_scan_sum_per_sec": {
                        "description": "The number of sorts that were done by scanning the table.",
                        "type": "number",
                        "format": "float",
                        "x-order": 37
                      },
                      "m_temp_blks_read_sum_per_sec": {
                        "description": "Total number of temp blocks read by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 51
                      },
                      "m_temp_blks_written_sum_per_sec": {
                        "description": "Total number of temp blocks written by the statement.",
                        "type": "number",
                        "format": "float",
                        "x-order": 52
                      },
                      "m_tmp_disk_tables_sum_per_sec": {
                        "description": "Number of temporary tables created on disk for the query.",
                        "type": "number",
                        "format": "float",
                        "x-order": 23
                      },
                      "m_tmp_table_on_disk_sum_per_sec": {
                        "description": "The querys temporary table was stored on disk.",
                        "type": "number",
                        "format": "float",
                        "x-order": 29
                      },
                      "m_tmp_table_sizes_sum_per_sec": {
                        "description": "Total Size in bytes for all temporary tables used in the query.",
                        "type": "number",
                        "format": "float",
                        "x-order": 24
                      },
                      "m_tmp_table_sum_per_sec": {
                        "description": "The query created an implicit internal temporary table.",
                        "type": "number",
                        "format": "float",
                        "x-order": 28
                      },
                      "m_tmp_tables_sum_per_sec": {
                        "description": "Number of temporary tables created on memory for the query.",
                        "type": "number",
                        "format": "float",
                        "x-order": 22
                      },
                      "num_queries_per_sec": {
                        "description": "number of queries in bucket.",
                        "type": "number",
                        "format": "float",
                        "x-order": 4
                      },
                      "num_queries_with_errors_per_sec": {
                        "description": "number of queries with errors.",
                        "type": "number",
                        "format": "float",
                        "x-order": 5
                      },
                      "num_queries_with_warnings_per_sec": {
                        "description": "number of queries with warnings.",
                        "type": "number",
                        "format": "float",
                        "x-order": 6
                      },
                      "point": {
                        "description": "The serial number of the chart point from the largest time in the time interval to the lowest time in the time range.",
                        "type": "integer",
                        "format": "int64",
                        "x-order": 0
                      },
                      "time_frame": {
                        "description": "Duration beetween two points.",
                        "type": "integer",
                        "format": "int64",
                        "x-order": 1
                      },
                      "timestamp": {
                        "description": "Time of point in format RFC3339.",
                        "type": "string",
                        "x-order": 2
                      }
                    }
                  },
                  "x-order": 1
                },
                "totals": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "MetricValues is statistics of specific metric.",
                    "type": "object",
                    "properties": {
                      "avg": {
                        "type": "number",
                        "format": "float",
                        "x-order": 5
                      },
                      "cnt": {
                        "type": "number",
                        "format": "float",
                        "x-order": 1
                      },
                      "max": {
                        "type": "number",
                        "format": "float",
                        "x-order": 4
                      },
                      "min": {
                        "type": "number",
                        "format": "float",
                        "x-order": 3
                      },
                      "p99": {
                        "type": "number",
                        "format": "float",
                        "x-order": 6
                      },
                      "percent_of_total": {
                        "type": "number",
                        "format": "float",
                        "x-order": 7
                      },
                      "rate": {
                        "type": "number",
                        "format": "float",
                        "x-order": 0
                      },
                      "sum": {
                        "type": "number",
                        "format": "float",
                        "x-order": 2
                      }
                    }
                  },
                  "x-order": 2
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    },
    "/v0/qan/ObjectDetails/GetQueryExample": {
      "post": {
        "tags": [
          "ObjectDetails"
        ],
        "summary": "GetQueryExample gets list of query examples.",
        "operationId": "GetQueryExample",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "QueryExampleRequest defines filtering of query examples for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
              "type": "object",
              "properties": {
                "filter_by": {
                  "description": "dimension value: ex: queryid - 1D410B4BE5060972.",
                  "type": "string",
                  "x-order": 2
                },
                "group_by": {
                  "description": "one of dimension: queryid | host ...",
                  "type": "string",
                  "x-order": 3
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "description": "MapFieldEntry allows to pass labels/dimensions in form like {\"server\": [\"db1\", \"db2\"...]}.",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 4
                },
                "limit": {
                  "type": "integer",
                  "format": "int64",
                  "x-order": 5
                },
                "period_start_from": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 0
                },
                "period_start_to": {
                  "type": "string",
                  "format": "date-time",
                  "x-order": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "description": "QueryExampleReply list of query examples.",
              "type": "object",
              "properties": {
                "query_examples": {
                  "type": "array",
                  "items": {
                    "description": "QueryExample shows query examples and their metrics.",
                    "type": "object",
                    "properties": {
                      "example": {
                        "type": "string",
                        "x-order": 0
                      },
                      "example_format": {
                        "description": "ExampleFormat is format of query example: real or query without values.\n\nDeprecated: is not used, should not be used, should be removed.",
                        "type": "string",
                        "default": "EXAMPLE_FORMAT_INVALID",
                        "enum": [
                          "EXAMPLE_FORMAT_INVALID",
                          "EXAMPLE",
                          "FINGERPRINT"
                        ],
                        "x-order": 1
                      },
                      "example_metrics": {
                        "type": "string",
                        "x-order": 4
                      },
                      "example_type": {
                        "description": "ExampleType is a type of query example selected for this query class in given period of time.",
                        "type": "string",
                        "default": "EXAMPLE_TYPE_INVALID",
                        "enum": [
                          "EXAMPLE_TYPE_INVALID",
                          "RANDOM",
                          "SLOWEST",
                          "FASTEST",
                          "WITH_ERROR"
                        ],
                        "x-order": 2
                      },
                      "is_truncated": {
                        "type": "integer",
                        "format": "int64",
                        "x-order": 3
                      },
                      "schema": {
                        "type": "string",
                        "x-order": 7
                      },
                      "service_id": {
                        "type": "string",
                        "x-order": 5
                      },
                      "service_type": {
                        "type": "string",
                        "x-order": 6
                      },
                      "tables": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-order": 8
                      }
                    }
                  },
                  "x-order": 0
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "x-order": 1
                },
                "details": {
                  "type": "array",
                  "items": {
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                        "type": "string",
                        "x-order": 0
                      },
                      "value": {
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "type": "string",
                        "format": "byte",
                        "x-order": 1
                      }
                    }
                  },
                  "x-order": 3
                },
                "error": {
                  "type": "string",
                  "x-order": 0
                },
                "message": {
                  "type": "string",
                  "x-order": 2
                }
              }
            }
          }
        }
      }
    }
  }
}