// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qanpb/object_details.proto

package qanv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectDetails_GetMetrics_FullMethodName                  = "/qan.v1beta1.ObjectDetails/GetMetrics"
	ObjectDetails_GetQueryExample_FullMethodName             = "/qan.v1beta1.ObjectDetails/GetQueryExample"
	ObjectDetails_GetLabels_FullMethodName                   = "/qan.v1beta1.ObjectDetails/GetLabels"
	ObjectDetails_GetQueryPlan_FullMethodName                = "/qan.v1beta1.ObjectDetails/GetQueryPlan"
	ObjectDetails_GetHistogram_FullMethodName                = "/qan.v1beta1.ObjectDetails/GetHistogram"
	ObjectDetails_QueryExists_FullMethodName                 = "/qan.v1beta1.ObjectDetails/QueryExists"
	ObjectDetails_ExplainFingerprintByQueryID_FullMethodName = "/qan.v1beta1.ObjectDetails/ExplainFingerprintByQueryID"
	ObjectDetails_SchemaByQueryID_FullMethodName             = "/qan.v1beta1.ObjectDetails/SchemaByQueryID"
)

// ObjectDetailsClient is the client API for ObjectDetails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectDetailsClient interface {
	// GetMetrics gets map of metrics for specific filtering.
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error)
	// GetQueryExample gets list of query examples.
	GetQueryExample(ctx context.Context, in *QueryExampleRequest, opts ...grpc.CallOption) (*QueryExampleReply, error)
	// GetLabels gets list of labels for object details.
	GetLabels(ctx context.Context, in *ObjectDetailsLabelsRequest, opts ...grpc.CallOption) (*ObjectDetailsLabelsReply, error)
	// GetQueryPlan gets query plan and plan id for specific filtering.
	GetQueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanReply, error)
	// GetHistogram gets histogram items for specific filtering.
	GetHistogram(ctx context.Context, in *HistogramRequest, opts ...grpc.CallOption) (*HistogramReply, error)
	// QueryExists check if query exists in clickhouse.
	QueryExists(ctx context.Context, in *QueryExistsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// ExplainFingerprintByQueryID get explain fingerprint for given query ID.
	ExplainFingerprintByQueryID(ctx context.Context, in *ExplainFingerprintByQueryIDRequest, opts ...grpc.CallOption) (*ExplainFingerprintByQueryIDReply, error)
	// SchemaByQueryID returns schema for given queryID and serviceID.
	SchemaByQueryID(ctx context.Context, in *SchemaByQueryIDRequest, opts ...grpc.CallOption) (*SchemaByQueryIDReply, error)
}

type objectDetailsClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectDetailsClient(cc grpc.ClientConnInterface) ObjectDetailsClient {
	return &objectDetailsClient{cc}
}

func (c *objectDetailsClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, ObjectDetails_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) GetQueryExample(ctx context.Context, in *QueryExampleRequest, opts ...grpc.CallOption) (*QueryExampleReply, error) {
	out := new(QueryExampleReply)
	err := c.cc.Invoke(ctx, ObjectDetails_GetQueryExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) GetLabels(ctx context.Context, in *ObjectDetailsLabelsRequest, opts ...grpc.CallOption) (*ObjectDetailsLabelsReply, error) {
	out := new(ObjectDetailsLabelsReply)
	err := c.cc.Invoke(ctx, ObjectDetails_GetLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) GetQueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanReply, error) {
	out := new(QueryPlanReply)
	err := c.cc.Invoke(ctx, ObjectDetails_GetQueryPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) GetHistogram(ctx context.Context, in *HistogramRequest, opts ...grpc.CallOption) (*HistogramReply, error) {
	out := new(HistogramReply)
	err := c.cc.Invoke(ctx, ObjectDetails_GetHistogram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) QueryExists(ctx context.Context, in *QueryExistsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ObjectDetails_QueryExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) ExplainFingerprintByQueryID(ctx context.Context, in *ExplainFingerprintByQueryIDRequest, opts ...grpc.CallOption) (*ExplainFingerprintByQueryIDReply, error) {
	out := new(ExplainFingerprintByQueryIDReply)
	err := c.cc.Invoke(ctx, ObjectDetails_ExplainFingerprintByQueryID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetailsClient) SchemaByQueryID(ctx context.Context, in *SchemaByQueryIDRequest, opts ...grpc.CallOption) (*SchemaByQueryIDReply, error) {
	out := new(SchemaByQueryIDReply)
	err := c.cc.Invoke(ctx, ObjectDetails_SchemaByQueryID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectDetailsServer is the server API for ObjectDetails service.
// All implementations must embed UnimplementedObjectDetailsServer
// for forward compatibility
type ObjectDetailsServer interface {
	// GetMetrics gets map of metrics for specific filtering.
	GetMetrics(context.Context, *MetricsRequest) (*MetricsReply, error)
	// GetQueryExample gets list of query examples.
	GetQueryExample(context.Context, *QueryExampleRequest) (*QueryExampleReply, error)
	// GetLabels gets list of labels for object details.
	GetLabels(context.Context, *ObjectDetailsLabelsRequest) (*ObjectDetailsLabelsReply, error)
	// GetQueryPlan gets query plan and plan id for specific filtering.
	GetQueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanReply, error)
	// GetHistogram gets histogram items for specific filtering.
	GetHistogram(context.Context, *HistogramRequest) (*HistogramReply, error)
	// QueryExists check if query exists in clickhouse.
	QueryExists(context.Context, *QueryExistsRequest) (*wrapperspb.BoolValue, error)
	// ExplainFingerprintByQueryID get explain fingerprint for given query ID.
	ExplainFingerprintByQueryID(context.Context, *ExplainFingerprintByQueryIDRequest) (*ExplainFingerprintByQueryIDReply, error)
	// SchemaByQueryID returns schema for given queryID and serviceID.
	SchemaByQueryID(context.Context, *SchemaByQueryIDRequest) (*SchemaByQueryIDReply, error)
	mustEmbedUnimplementedObjectDetailsServer()
}

// UnimplementedObjectDetailsServer must be embedded to have forward compatible implementations.
type UnimplementedObjectDetailsServer struct{}

func (UnimplementedObjectDetailsServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}

func (UnimplementedObjectDetailsServer) GetQueryExample(context.Context, *QueryExampleRequest) (*QueryExampleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryExample not implemented")
}

func (UnimplementedObjectDetailsServer) GetLabels(context.Context, *ObjectDetailsLabelsRequest) (*ObjectDetailsLabelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}

func (UnimplementedObjectDetailsServer) GetQueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryPlan not implemented")
}

func (UnimplementedObjectDetailsServer) GetHistogram(context.Context, *HistogramRequest) (*HistogramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistogram not implemented")
}

func (UnimplementedObjectDetailsServer) QueryExists(context.Context, *QueryExistsRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExists not implemented")
}

func (UnimplementedObjectDetailsServer) ExplainFingerprintByQueryID(context.Context, *ExplainFingerprintByQueryIDRequest) (*ExplainFingerprintByQueryIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplainFingerprintByQueryID not implemented")
}

func (UnimplementedObjectDetailsServer) SchemaByQueryID(context.Context, *SchemaByQueryIDRequest) (*SchemaByQueryIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaByQueryID not implemented")
}
func (UnimplementedObjectDetailsServer) mustEmbedUnimplementedObjectDetailsServer() {}

// UnsafeObjectDetailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectDetailsServer will
// result in compilation errors.
type UnsafeObjectDetailsServer interface {
	mustEmbedUnimplementedObjectDetailsServer()
}

func RegisterObjectDetailsServer(s grpc.ServiceRegistrar, srv ObjectDetailsServer) {
	s.RegisterService(&ObjectDetails_ServiceDesc, srv)
}

func _ObjectDetails_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_GetQueryExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).GetQueryExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_GetQueryExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).GetQueryExample(ctx, req.(*QueryExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDetailsLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_GetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).GetLabels(ctx, req.(*ObjectDetailsLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_GetQueryPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).GetQueryPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_GetQueryPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).GetQueryPlan(ctx, req.(*QueryPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_GetHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).GetHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_GetHistogram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).GetHistogram(ctx, req.(*HistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_QueryExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).QueryExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_QueryExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).QueryExists(ctx, req.(*QueryExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_ExplainFingerprintByQueryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainFingerprintByQueryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).ExplainFingerprintByQueryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_ExplainFingerprintByQueryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).ExplainFingerprintByQueryID(ctx, req.(*ExplainFingerprintByQueryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetails_SchemaByQueryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaByQueryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetailsServer).SchemaByQueryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectDetails_SchemaByQueryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetailsServer).SchemaByQueryID(ctx, req.(*SchemaByQueryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectDetails_ServiceDesc is the grpc.ServiceDesc for ObjectDetails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectDetails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qan.v1beta1.ObjectDetails",
	HandlerType: (*ObjectDetailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _ObjectDetails_GetMetrics_Handler,
		},
		{
			MethodName: "GetQueryExample",
			Handler:    _ObjectDetails_GetQueryExample_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _ObjectDetails_GetLabels_Handler,
		},
		{
			MethodName: "GetQueryPlan",
			Handler:    _ObjectDetails_GetQueryPlan_Handler,
		},
		{
			MethodName: "GetHistogram",
			Handler:    _ObjectDetails_GetHistogram_Handler,
		},
		{
			MethodName: "QueryExists",
			Handler:    _ObjectDetails_QueryExists_Handler,
		},
		{
			MethodName: "ExplainFingerprintByQueryID",
			Handler:    _ObjectDetails_ExplainFingerprintByQueryID_Handler,
		},
		{
			MethodName: "SchemaByQueryID",
			Handler:    _ObjectDetails_SchemaByQueryID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qanpb/object_details.proto",
}
