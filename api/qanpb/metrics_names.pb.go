// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qanpb/metrics_names.proto

package qanpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MetricsNamesRequest is emty.
type MetricsNamesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsNamesRequest) Reset()         { *m = MetricsNamesRequest{} }
func (m *MetricsNamesRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsNamesRequest) ProtoMessage()    {}
func (*MetricsNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_names_c8fccbf381e163d6, []int{0}
}
func (m *MetricsNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsNamesRequest.Unmarshal(m, b)
}
func (m *MetricsNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsNamesRequest.Marshal(b, m, deterministic)
}
func (dst *MetricsNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsNamesRequest.Merge(dst, src)
}
func (m *MetricsNamesRequest) XXX_Size() int {
	return xxx_messageInfo_MetricsNamesRequest.Size(m)
}
func (m *MetricsNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsNamesRequest proto.InternalMessageInfo

// MetricsNamesReply is map of stored metrics:
// key is root of metric name in db (Ex:. [m_]query_time[_sum]);
// value - Human readable name of metrics.
type MetricsNamesReply struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetricsNamesReply) Reset()         { *m = MetricsNamesReply{} }
func (m *MetricsNamesReply) String() string { return proto.CompactTextString(m) }
func (*MetricsNamesReply) ProtoMessage()    {}
func (*MetricsNamesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_names_c8fccbf381e163d6, []int{1}
}
func (m *MetricsNamesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsNamesReply.Unmarshal(m, b)
}
func (m *MetricsNamesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsNamesReply.Marshal(b, m, deterministic)
}
func (dst *MetricsNamesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsNamesReply.Merge(dst, src)
}
func (m *MetricsNamesReply) XXX_Size() int {
	return xxx_messageInfo_MetricsNamesReply.Size(m)
}
func (m *MetricsNamesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsNamesReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsNamesReply proto.InternalMessageInfo

func (m *MetricsNamesReply) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsNamesRequest)(nil), "qan.MetricsNamesRequest")
	proto.RegisterType((*MetricsNamesReply)(nil), "qan.MetricsNamesReply")
	proto.RegisterMapType((map[string]string)(nil), "qan.MetricsNamesReply.DataEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsNamesClient is the client API for MetricsNames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsNamesClient interface {
	// GetMetricsNames gets map of metrics names.
	GetMetricsNames(ctx context.Context, in *MetricsNamesRequest, opts ...grpc.CallOption) (*MetricsNamesReply, error)
}

type metricsNamesClient struct {
	cc *grpc.ClientConn
}

func NewMetricsNamesClient(cc *grpc.ClientConn) MetricsNamesClient {
	return &metricsNamesClient{cc}
}

func (c *metricsNamesClient) GetMetricsNames(ctx context.Context, in *MetricsNamesRequest, opts ...grpc.CallOption) (*MetricsNamesReply, error) {
	out := new(MetricsNamesReply)
	err := c.cc.Invoke(ctx, "/qan.MetricsNames/GetMetricsNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsNamesServer is the server API for MetricsNames service.
type MetricsNamesServer interface {
	// GetMetricsNames gets map of metrics names.
	GetMetricsNames(context.Context, *MetricsNamesRequest) (*MetricsNamesReply, error)
}

func RegisterMetricsNamesServer(s *grpc.Server, srv MetricsNamesServer) {
	s.RegisterService(&_MetricsNames_serviceDesc, srv)
}

func _MetricsNames_GetMetricsNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsNamesServer).GetMetricsNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.MetricsNames/GetMetricsNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsNamesServer).GetMetricsNames(ctx, req.(*MetricsNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsNames_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.MetricsNames",
	HandlerType: (*MetricsNamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsNames",
			Handler:    _MetricsNames_GetMetricsNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qanpb/metrics_names.proto",
}

func init() {
	proto.RegisterFile("qanpb/metrics_names.proto", fileDescriptor_metrics_names_c8fccbf381e163d6)
}

var fileDescriptor_metrics_names_c8fccbf381e163d6 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x4c, 0xcc, 0x2b,
	0x48, 0xd2, 0xcf, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x2e, 0x8e, 0xcf, 0x4b, 0xcc, 0x4d, 0x2d, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x4c, 0xcc, 0x93, 0x92, 0x49, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc,
	0xcf, 0x83, 0x2a, 0x51, 0x12, 0xe5, 0x12, 0xf6, 0x85, 0xe8, 0xf4, 0x03, 0x69, 0x0c, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x6a, 0x62, 0xe4, 0x12, 0x44, 0x15, 0x2f, 0xc8, 0xa9, 0x14, 0x32,
	0xe1, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0xd0, 0x2b,
	0x4c, 0xcc, 0xd3, 0xc3, 0x50, 0xa5, 0xe7, 0x92, 0x58, 0x92, 0xe8, 0x9a, 0x57, 0x52, 0x54, 0x19,
	0x04, 0x56, 0x2d, 0x65, 0xce, 0xc5, 0x09, 0x17, 0x12, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a,
	0x53, 0x25, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x15, 0x93, 0x05, 0xa3, 0x51, 0x39, 0x17, 0x0f, 0xb2,
	0xe9, 0x42, 0xe9, 0x5c, 0xfc, 0xee, 0xa9, 0x25, 0x28, 0x42, 0x12, 0x58, 0xdc, 0x00, 0xf6, 0x81,
	0x94, 0x18, 0x76, 0xd7, 0x29, 0x29, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x46, 0x49, 0x5c, 0xbf,
	0xcc, 0x50, 0xbf, 0x30, 0x31, 0x4f, 0x1f, 0xcd, 0x48, 0x2b, 0x46, 0x2d, 0x27, 0xf6, 0x28, 0x56,
	0x70, 0xa0, 0x26, 0xb1, 0x81, 0x03, 0xc9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x46, 0xbc, 0xde,
	0x4f, 0x64, 0x01, 0x00, 0x00,
}
