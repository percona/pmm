// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qanpb/qan.proto

package qanpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ExampleFormat is format of query example: real or query without values.
type ExampleFormat int32

const (
	ExampleFormat_EXAMPLE_FORMAT_INVALID ExampleFormat = 0
	ExampleFormat_EXAMPLE                ExampleFormat = 1
	ExampleFormat_FINGERPRINT            ExampleFormat = 2
)

var ExampleFormat_name = map[int32]string{
	0: "EXAMPLE_FORMAT_INVALID",
	1: "EXAMPLE",
	2: "FINGERPRINT",
}

var ExampleFormat_value = map[string]int32{
	"EXAMPLE_FORMAT_INVALID": 0,
	"EXAMPLE":                1,
	"FINGERPRINT":            2,
}

func (x ExampleFormat) String() string {
	return proto.EnumName(ExampleFormat_name, int32(x))
}

func (ExampleFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ea5e264b89be, []int{0}
}

// ExampleType is a type of query example selected for this query class in given period of time.
type ExampleType int32

const (
	ExampleType_EXAMPLE_TYPE_INVALID ExampleType = 0
	ExampleType_RANDOM               ExampleType = 1
	ExampleType_SLOWEST              ExampleType = 2
	ExampleType_FASTEST              ExampleType = 3
	ExampleType_WITH_ERROR           ExampleType = 4
)

var ExampleType_name = map[int32]string{
	0: "EXAMPLE_TYPE_INVALID",
	1: "RANDOM",
	2: "SLOWEST",
	3: "FASTEST",
	4: "WITH_ERROR",
}

var ExampleType_value = map[string]int32{
	"EXAMPLE_TYPE_INVALID": 0,
	"RANDOM":               1,
	"SLOWEST":              2,
	"FASTEST":              3,
	"WITH_ERROR":           4,
}

func (x ExampleType) String() string {
	return proto.EnumName(ExampleType_name, int32(x))
}

func (ExampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ea5e264b89be, []int{1}
}

// Point contains values that represents abscissa (time) and ordinate (volume etc.)
// of every point in a coordinate system of Sparklines.
type Point struct {
	Values1              map[string]*Point_NullFloat `protobuf:"bytes,1,rep,name=values1,proto3" json:"values1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values2              map[string]float32          `protobuf:"bytes,2,rep,name=values2,proto3" json:"values2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Values3              map[string]float32          `protobuf:"bytes,3,rep,name=values3,proto3" json:"values3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Nulls3               map[string]bool             `protobuf:"bytes,4,rep,name=nulls3,proto3" json:"nulls3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Point                float32                     `protobuf:"fixed32,5,opt,name=point,proto3" json:"point,omitempty"`
	TimeFrame            float32                     `protobuf:"fixed32,6,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Timestamp            float32                     `protobuf:"fixed32,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ea5e264b89be, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetValues1() map[string]*Point_NullFloat {
	if m != nil {
		return m.Values1
	}
	return nil
}

func (m *Point) GetValues2() map[string]float32 {
	if m != nil {
		return m.Values2
	}
	return nil
}

func (m *Point) GetValues3() map[string]float32 {
	if m != nil {
		return m.Values3
	}
	return nil
}

func (m *Point) GetNulls3() map[string]bool {
	if m != nil {
		return m.Nulls3
	}
	return nil
}

func (m *Point) GetPoint() float32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *Point) GetTimeFrame() float32 {
	if m != nil {
		return m.TimeFrame
	}
	return 0
}

func (m *Point) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// NullFloat represents a union of float value and null.
type Point_NullFloat struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Null                 bool     `protobuf:"varint,2,opt,name=null,proto3" json:"null,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point_NullFloat) Reset()         { *m = Point_NullFloat{} }
func (m *Point_NullFloat) String() string { return proto.CompactTextString(m) }
func (*Point_NullFloat) ProtoMessage()    {}
func (*Point_NullFloat) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ea5e264b89be, []int{0, 0}
}

func (m *Point_NullFloat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point_NullFloat.Unmarshal(m, b)
}
func (m *Point_NullFloat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point_NullFloat.Marshal(b, m, deterministic)
}
func (m *Point_NullFloat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point_NullFloat.Merge(m, src)
}
func (m *Point_NullFloat) XXX_Size() int {
	return xxx_messageInfo_Point_NullFloat.Size(m)
}
func (m *Point_NullFloat) XXX_DiscardUnknown() {
	xxx_messageInfo_Point_NullFloat.DiscardUnknown(m)
}

var xxx_messageInfo_Point_NullFloat proto.InternalMessageInfo

func (m *Point_NullFloat) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Point_NullFloat) GetNull() bool {
	if m != nil {
		return m.Null
	}
	return false
}

func init() {
	proto.RegisterEnum("qan.ExampleFormat", ExampleFormat_name, ExampleFormat_value)
	proto.RegisterEnum("qan.ExampleType", ExampleType_name, ExampleType_value)
	proto.RegisterType((*Point)(nil), "qan.Point")
	proto.RegisterMapType((map[string]bool)(nil), "qan.Point.Nulls3Entry")
	proto.RegisterMapType((map[string]*Point_NullFloat)(nil), "qan.Point.Values1Entry")
	proto.RegisterMapType((map[string]float32)(nil), "qan.Point.Values2Entry")
	proto.RegisterMapType((map[string]float32)(nil), "qan.Point.Values3Entry")
	proto.RegisterType((*Point_NullFloat)(nil), "qan.Point.NullFloat")
}

func init() { proto.RegisterFile("qanpb/qan.proto", fileDescriptor_6cc2ea5e264b89be) }

var fileDescriptor_6cc2ea5e264b89be = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x86, 0x4d, 0xd2, 0x8f, 0xed, 0x89, 0xba, 0x61, 0x28, 0xeb, 0x10, 0x56, 0x28, 0x5e, 0x95,
	0x5e, 0xb4, 0x6c, 0x82, 0xa0, 0x7b, 0x17, 0xd9, 0x89, 0x06, 0xda, 0x34, 0x4c, 0xc3, 0xae, 0x0a,
	0x52, 0xa6, 0x92, 0x5d, 0x16, 0xf3, 0xd5, 0x74, 0x22, 0xf6, 0xd7, 0xfa, 0x57, 0x64, 0x26, 0x09,
	0x4d, 0xc5, 0x22, 0x7b, 0x37, 0xe7, 0xbc, 0xe7, 0x79, 0x4e, 0x32, 0x30, 0x70, 0xbe, 0x65, 0x69,
	0xbe, 0x99, 0x6d, 0x59, 0x3a, 0xcd, 0x8b, 0x8c, 0x67, 0x48, 0xdb, 0xb2, 0xd4, 0xbc, 0x7c, 0xc8,
	0xb2, 0x87, 0x38, 0x9a, 0xc9, 0xd6, 0xa6, 0xbc, 0x9f, 0xed, 0x78, 0x51, 0x7e, 0xe7, 0xd5, 0xc8,
	0x9b, 0xdf, 0x1d, 0xe8, 0x06, 0xd9, 0x63, 0xca, 0xd1, 0x15, 0xf4, 0x7f, 0xb2, 0xb8, 0x8c, 0x76,
	0x57, 0x58, 0x19, 0x69, 0x63, 0xdd, 0x7a, 0x35, 0x15, 0x26, 0x19, 0x4e, 0x6f, 0xab, 0x84, 0xa4,
	0xbc, 0xd8, 0xd3, 0x66, 0xee, 0x80, 0x58, 0x58, 0x3d, 0x81, 0x58, 0x47, 0x88, 0x75, 0x40, 0x6c,
	0xac, 0x9d, 0x40, 0xec, 0x23, 0xc4, 0x46, 0x53, 0xe8, 0xa5, 0x65, 0x1c, 0xef, 0x6c, 0xdc, 0x91,
	0xc4, 0x45, 0x8b, 0xf0, 0x65, 0x50, 0x01, 0xf5, 0x14, 0x1a, 0x42, 0x37, 0x17, 0x21, 0xee, 0x8e,
	0x94, 0xb1, 0x4a, 0xab, 0x02, 0xbd, 0x06, 0xe0, 0x8f, 0x49, 0xb4, 0xbe, 0x2f, 0x58, 0x12, 0xe1,
	0x9e, 0x8c, 0x06, 0xa2, 0xe3, 0x8a, 0x06, 0xba, 0x04, 0x59, 0xec, 0x38, 0x4b, 0x72, 0xdc, 0x3f,
	0xa4, 0xb2, 0x61, 0xbe, 0x85, 0x81, 0xd8, 0xe4, 0xc6, 0x19, 0xe3, 0xc2, 0x2f, 0x3f, 0x0d, 0x2b,
	0x95, 0x5f, 0x16, 0x08, 0x41, 0x47, 0xec, 0xc7, 0xea, 0x48, 0x19, 0x9f, 0x51, 0x79, 0x36, 0x03,
	0x78, 0xde, 0xbe, 0x38, 0x64, 0x80, 0xf6, 0x23, 0xda, 0x4b, 0x6e, 0x40, 0xc5, 0x11, 0x4d, 0x1a,
	0x97, 0xc0, 0x74, 0x6b, 0xf8, 0xd7, 0xaf, 0xc9, 0x85, 0xf5, 0x86, 0x6b, 0xf5, 0x9d, 0x62, 0x5e,
	0x37, 0x46, 0xeb, 0x94, 0x71, 0xd8, 0x36, 0xaa, 0xff, 0x64, 0xed, 0xa7, 0xb3, 0xef, 0x41, 0x6f,
	0x5d, 0xf5, 0xff, 0xd0, 0xb3, 0x16, 0x3a, 0xf1, 0xe0, 0x05, 0xf9, 0xc5, 0x92, 0x3c, 0x8e, 0xdc,
	0xac, 0x48, 0x18, 0x47, 0x26, 0x5c, 0x90, 0xcf, 0xce, 0x22, 0x98, 0x93, 0xb5, 0xbb, 0xa4, 0x0b,
	0x27, 0x5c, 0x7b, 0xfe, 0xad, 0x33, 0xf7, 0x6e, 0x8c, 0x67, 0x48, 0x87, 0x7e, 0x9d, 0x19, 0x0a,
	0x3a, 0x07, 0xdd, 0xf5, 0xfc, 0x8f, 0x84, 0x06, 0xd4, 0xf3, 0x43, 0x43, 0x9d, 0x7c, 0x03, 0xbd,
	0x56, 0x85, 0xfb, 0x3c, 0x42, 0x18, 0x86, 0x8d, 0x28, 0xfc, 0x12, 0x90, 0x96, 0x06, 0xa0, 0x47,
	0x1d, 0xff, 0x66, 0xb9, 0x30, 0x14, 0xa1, 0x5c, 0xcd, 0x97, 0x77, 0x64, 0x15, 0x1a, 0xaa, 0x28,
	0x5c, 0x67, 0x15, 0x8a, 0x42, 0x43, 0x2f, 0x01, 0xee, 0xbc, 0xf0, 0xd3, 0x9a, 0x50, 0xba, 0xa4,
	0x46, 0xe7, 0x43, 0xff, 0x6b, 0x57, 0xbe, 0xa0, 0x4d, 0x4f, 0xbe, 0x0d, 0xfb, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x8a, 0x60, 0x7b, 0x51, 0x03, 0x00, 0x00,
}
