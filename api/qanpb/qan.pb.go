// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: qanpb/qan.proto

package qanv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExampleFormat is format of query example: real or query without values.
//
// Deprecated: is not used, should not be used, should be removed.
type ExampleFormat int32

const (
	// Deprecated: Do not use.
	ExampleFormat_EXAMPLE_FORMAT_INVALID ExampleFormat = 0
	// Deprecated: Do not use.
	ExampleFormat_EXAMPLE ExampleFormat = 1
	// Deprecated: Do not use.
	ExampleFormat_FINGERPRINT ExampleFormat = 2
)

// Enum value maps for ExampleFormat.
var (
	ExampleFormat_name = map[int32]string{
		0: "EXAMPLE_FORMAT_INVALID",
		1: "EXAMPLE",
		2: "FINGERPRINT",
	}
	ExampleFormat_value = map[string]int32{
		"EXAMPLE_FORMAT_INVALID": 0,
		"EXAMPLE":                1,
		"FINGERPRINT":            2,
	}
)

func (x ExampleFormat) Enum() *ExampleFormat {
	p := new(ExampleFormat)
	*p = x
	return p
}

func (x ExampleFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_qanpb_qan_proto_enumTypes[0].Descriptor()
}

func (ExampleFormat) Type() protoreflect.EnumType {
	return &file_qanpb_qan_proto_enumTypes[0]
}

func (x ExampleFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleFormat.Descriptor instead.
func (ExampleFormat) EnumDescriptor() ([]byte, []int) {
	return file_qanpb_qan_proto_rawDescGZIP(), []int{0}
}

// ExampleType is a type of query example selected for this query class in given period of time.
type ExampleType int32

const (
	ExampleType_EXAMPLE_TYPE_INVALID ExampleType = 0
	ExampleType_RANDOM               ExampleType = 1
	ExampleType_SLOWEST              ExampleType = 2
	ExampleType_FASTEST              ExampleType = 3
	ExampleType_WITH_ERROR           ExampleType = 4
)

// Enum value maps for ExampleType.
var (
	ExampleType_name = map[int32]string{
		0: "EXAMPLE_TYPE_INVALID",
		1: "RANDOM",
		2: "SLOWEST",
		3: "FASTEST",
		4: "WITH_ERROR",
	}
	ExampleType_value = map[string]int32{
		"EXAMPLE_TYPE_INVALID": 0,
		"RANDOM":               1,
		"SLOWEST":              2,
		"FASTEST":              3,
		"WITH_ERROR":           4,
	}
)

func (x ExampleType) Enum() *ExampleType {
	p := new(ExampleType)
	*p = x
	return p
}

func (x ExampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_qanpb_qan_proto_enumTypes[1].Descriptor()
}

func (ExampleType) Type() protoreflect.EnumType {
	return &file_qanpb_qan_proto_enumTypes[1]
}

func (x ExampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleType.Descriptor instead.
func (ExampleType) EnumDescriptor() ([]byte, []int) {
	return file_qanpb_qan_proto_rawDescGZIP(), []int{1}
}

// Point contains values that represents abscissa (time) and ordinate (volume etc.)
// of every point in a coordinate system of Sparklines.
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serial number of the chart point from the largest time in the time interval to the lowest time in the time range.
	Point uint32 `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	// Duration beetween two points.
	TimeFrame uint32 `protobuf:"varint,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	// Time of point in format RFC3339.
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// load is query_time / time_range.
	Load float32 `protobuf:"fixed32,53,opt,name=load,proto3" json:"load,omitempty"`
	// number of queries in bucket.
	NumQueriesPerSec float32 `protobuf:"fixed32,4,opt,name=num_queries_per_sec,json=numQueriesPerSec,proto3" json:"num_queries_per_sec,omitempty"`
	// number of queries with errors.
	NumQueriesWithErrorsPerSec float32 `protobuf:"fixed32,54,opt,name=num_queries_with_errors_per_sec,json=numQueriesWithErrorsPerSec,proto3" json:"num_queries_with_errors_per_sec,omitempty"`
	// number of queries with warnings.
	NumQueriesWithWarningsPerSec float32 `protobuf:"fixed32,55,opt,name=num_queries_with_warnings_per_sec,json=numQueriesWithWarningsPerSec,proto3" json:"num_queries_with_warnings_per_sec,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSumPerSec float32 `protobuf:"fixed32,5,opt,name=m_query_time_sum_per_sec,json=mQueryTimeSumPerSec,proto3" json:"m_query_time_sum_per_sec,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSumPerSec float32 `protobuf:"fixed32,6,opt,name=m_lock_time_sum_per_sec,json=mLockTimeSumPerSec,proto3" json:"m_lock_time_sum_per_sec,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSumPerSec float32 `protobuf:"fixed32,7,opt,name=m_rows_sent_sum_per_sec,json=mRowsSentSumPerSec,proto3" json:"m_rows_sent_sum_per_sec,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSumPerSec float32 `protobuf:"fixed32,8,opt,name=m_rows_examined_sum_per_sec,json=mRowsExaminedSumPerSec,proto3" json:"m_rows_examined_sum_per_sec,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSumPerSec float32 `protobuf:"fixed32,9,opt,name=m_rows_affected_sum_per_sec,json=mRowsAffectedSumPerSec,proto3" json:"m_rows_affected_sum_per_sec,omitempty"`
	// The number of rows read from tables.
	MRowsReadSumPerSec float32 `protobuf:"fixed32,10,opt,name=m_rows_read_sum_per_sec,json=mRowsReadSumPerSec,proto3" json:"m_rows_read_sum_per_sec,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSumPerSec float32 `protobuf:"fixed32,11,opt,name=m_merge_passes_sum_per_sec,json=mMergePassesSumPerSec,proto3" json:"m_merge_passes_sum_per_sec,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSumPerSec float32 `protobuf:"fixed32,12,opt,name=m_innodb_io_r_ops_sum_per_sec,json=mInnodbIoROpsSumPerSec,proto3" json:"m_innodb_io_r_ops_sum_per_sec,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSumPerSec float32 `protobuf:"fixed32,13,opt,name=m_innodb_io_r_bytes_sum_per_sec,json=mInnodbIoRBytesSumPerSec,proto3" json:"m_innodb_io_r_bytes_sum_per_sec,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSumPerSec float32 `protobuf:"fixed32,14,opt,name=m_innodb_io_r_wait_sum_per_sec,json=mInnodbIoRWaitSumPerSec,proto3" json:"m_innodb_io_r_wait_sum_per_sec,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSumPerSec float32 `protobuf:"fixed32,15,opt,name=m_innodb_rec_lock_wait_sum_per_sec,json=mInnodbRecLockWaitSumPerSec,proto3" json:"m_innodb_rec_lock_wait_sum_per_sec,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSumPerSec float32 `protobuf:"fixed32,16,opt,name=m_innodb_queue_wait_sum_per_sec,json=mInnodbQueueWaitSumPerSec,proto3" json:"m_innodb_queue_wait_sum_per_sec,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSumPerSec float32 `protobuf:"fixed32,17,opt,name=m_innodb_pages_distinct_sum_per_sec,json=mInnodbPagesDistinctSumPerSec,proto3" json:"m_innodb_pages_distinct_sum_per_sec,omitempty"`
	// Shows how long the query is.
	MQueryLengthSumPerSec float32 `protobuf:"fixed32,18,opt,name=m_query_length_sum_per_sec,json=mQueryLengthSumPerSec,proto3" json:"m_query_length_sum_per_sec,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSumPerSec float32 `protobuf:"fixed32,19,opt,name=m_bytes_sent_sum_per_sec,json=mBytesSentSumPerSec,proto3" json:"m_bytes_sent_sum_per_sec,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSumPerSec float32 `protobuf:"fixed32,20,opt,name=m_tmp_tables_sum_per_sec,json=mTmpTablesSumPerSec,proto3" json:"m_tmp_tables_sum_per_sec,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSumPerSec float32 `protobuf:"fixed32,21,opt,name=m_tmp_disk_tables_sum_per_sec,json=mTmpDiskTablesSumPerSec,proto3" json:"m_tmp_disk_tables_sum_per_sec,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSumPerSec float32 `protobuf:"fixed32,22,opt,name=m_tmp_table_sizes_sum_per_sec,json=mTmpTableSizesSumPerSec,proto3" json:"m_tmp_table_sizes_sum_per_sec,omitempty"`
	//
	// Boolean metrics:
	// - *_sum_per_sec - how many times this matric was true.
	//
	// Query Cache hits.
	MQcHitSumPerSec float32 `protobuf:"fixed32,23,opt,name=m_qc_hit_sum_per_sec,json=mQcHitSumPerSec,proto3" json:"m_qc_hit_sum_per_sec,omitempty"`
	// The query performed a full table scan.
	MFullScanSumPerSec float32 `protobuf:"fixed32,24,opt,name=m_full_scan_sum_per_sec,json=mFullScanSumPerSec,proto3" json:"m_full_scan_sum_per_sec,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSumPerSec float32 `protobuf:"fixed32,25,opt,name=m_full_join_sum_per_sec,json=mFullJoinSumPerSec,proto3" json:"m_full_join_sum_per_sec,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSumPerSec float32 `protobuf:"fixed32,26,opt,name=m_tmp_table_sum_per_sec,json=mTmpTableSumPerSec,proto3" json:"m_tmp_table_sum_per_sec,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSumPerSec float32 `protobuf:"fixed32,27,opt,name=m_tmp_table_on_disk_sum_per_sec,json=mTmpTableOnDiskSumPerSec,proto3" json:"m_tmp_table_on_disk_sum_per_sec,omitempty"`
	// The query used a filesort.
	MFilesortSumPerSec float32 `protobuf:"fixed32,28,opt,name=m_filesort_sum_per_sec,json=mFilesortSumPerSec,proto3" json:"m_filesort_sum_per_sec,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSumPerSec float32 `protobuf:"fixed32,29,opt,name=m_filesort_on_disk_sum_per_sec,json=mFilesortOnDiskSumPerSec,proto3" json:"m_filesort_on_disk_sum_per_sec,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSumPerSec float32 `protobuf:"fixed32,30,opt,name=m_select_full_range_join_sum_per_sec,json=mSelectFullRangeJoinSumPerSec,proto3" json:"m_select_full_range_join_sum_per_sec,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSumPerSec float32 `protobuf:"fixed32,31,opt,name=m_select_range_sum_per_sec,json=mSelectRangeSumPerSec,proto3" json:"m_select_range_sum_per_sec,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSumPerSec float32 `protobuf:"fixed32,32,opt,name=m_select_range_check_sum_per_sec,json=mSelectRangeCheckSumPerSec,proto3" json:"m_select_range_check_sum_per_sec,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSumPerSec float32 `protobuf:"fixed32,33,opt,name=m_sort_range_sum_per_sec,json=mSortRangeSumPerSec,proto3" json:"m_sort_range_sum_per_sec,omitempty"`
	// The number of sorted rows.
	MSortRowsSumPerSec float32 `protobuf:"fixed32,34,opt,name=m_sort_rows_sum_per_sec,json=mSortRowsSumPerSec,proto3" json:"m_sort_rows_sum_per_sec,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSumPerSec float32 `protobuf:"fixed32,35,opt,name=m_sort_scan_sum_per_sec,json=mSortScanSumPerSec,proto3" json:"m_sort_scan_sum_per_sec,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSumPerSec float32 `protobuf:"fixed32,36,opt,name=m_no_index_used_sum_per_sec,json=mNoIndexUsedSumPerSec,proto3" json:"m_no_index_used_sum_per_sec,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSumPerSec float32 `protobuf:"fixed32,37,opt,name=m_no_good_index_used_sum_per_sec,json=mNoGoodIndexUsedSumPerSec,proto3" json:"m_no_good_index_used_sum_per_sec,omitempty"`
	//
	// MongoDB metrics.
	//
	// The number of returned documents.
	MDocsReturnedSumPerSec float32 `protobuf:"fixed32,38,opt,name=m_docs_returned_sum_per_sec,json=mDocsReturnedSumPerSec,proto3" json:"m_docs_returned_sum_per_sec,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSumPerSec float32 `protobuf:"fixed32,39,opt,name=m_response_length_sum_per_sec,json=mResponseLengthSumPerSec,proto3" json:"m_response_length_sum_per_sec,omitempty"`
	// The number of scanned documents.
	MDocsScannedSumPerSec float32 `protobuf:"fixed32,40,opt,name=m_docs_scanned_sum_per_sec,json=mDocsScannedSumPerSec,proto3" json:"m_docs_scanned_sum_per_sec,omitempty"`
	//
	// PostgreSQL metrics.
	//
	// Total number of shared block cache hits by the statement.
	MSharedBlksHitSumPerSec float32 `protobuf:"fixed32,41,opt,name=m_shared_blks_hit_sum_per_sec,json=mSharedBlksHitSumPerSec,proto3" json:"m_shared_blks_hit_sum_per_sec,omitempty"`
	// Total number of shared blocks read by the statement.
	MSharedBlksReadSumPerSec float32 `protobuf:"fixed32,42,opt,name=m_shared_blks_read_sum_per_sec,json=mSharedBlksReadSumPerSec,proto3" json:"m_shared_blks_read_sum_per_sec,omitempty"`
	// Total number of shared blocks dirtied by the statement.
	MSharedBlksDirtiedSumPerSec float32 `protobuf:"fixed32,43,opt,name=m_shared_blks_dirtied_sum_per_sec,json=mSharedBlksDirtiedSumPerSec,proto3" json:"m_shared_blks_dirtied_sum_per_sec,omitempty"`
	// Total number of shared blocks written by the statement.
	MSharedBlksWrittenSumPerSec float32 `protobuf:"fixed32,44,opt,name=m_shared_blks_written_sum_per_sec,json=mSharedBlksWrittenSumPerSec,proto3" json:"m_shared_blks_written_sum_per_sec,omitempty"`
	// Total number of local block cache hits by the statement.
	MLocalBlksHitSumPerSec float32 `protobuf:"fixed32,45,opt,name=m_local_blks_hit_sum_per_sec,json=mLocalBlksHitSumPerSec,proto3" json:"m_local_blks_hit_sum_per_sec,omitempty"`
	// Total number of local blocks read by the statement.
	MLocalBlksReadSumPerSec float32 `protobuf:"fixed32,46,opt,name=m_local_blks_read_sum_per_sec,json=mLocalBlksReadSumPerSec,proto3" json:"m_local_blks_read_sum_per_sec,omitempty"`
	// Total number of local blocks dirtied by the statement.
	MLocalBlksDirtiedSumPerSec float32 `protobuf:"fixed32,47,opt,name=m_local_blks_dirtied_sum_per_sec,json=mLocalBlksDirtiedSumPerSec,proto3" json:"m_local_blks_dirtied_sum_per_sec,omitempty"`
	// Total number of local blocks written by the statement.
	MLocalBlksWrittenSumPerSec float32 `protobuf:"fixed32,48,opt,name=m_local_blks_written_sum_per_sec,json=mLocalBlksWrittenSumPerSec,proto3" json:"m_local_blks_written_sum_per_sec,omitempty"`
	// Total number of temp blocks read by the statement.
	MTempBlksReadSumPerSec float32 `protobuf:"fixed32,49,opt,name=m_temp_blks_read_sum_per_sec,json=mTempBlksReadSumPerSec,proto3" json:"m_temp_blks_read_sum_per_sec,omitempty"`
	// Total number of temp blocks written by the statement.
	MTempBlksWrittenSumPerSec float32 `protobuf:"fixed32,50,opt,name=m_temp_blks_written_sum_per_sec,json=mTempBlksWrittenSumPerSec,proto3" json:"m_temp_blks_written_sum_per_sec,omitempty"`
	// Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkReadTimeSumPerSec float32 `protobuf:"fixed32,51,opt,name=m_blk_read_time_sum_per_sec,json=mBlkReadTimeSumPerSec,proto3" json:"m_blk_read_time_sum_per_sec,omitempty"`
	// Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkWriteTimeSumPerSec float32 `protobuf:"fixed32,52,opt,name=m_blk_write_time_sum_per_sec,json=mBlkWriteTimeSumPerSec,proto3" json:"m_blk_write_time_sum_per_sec,omitempty"`
	// Total time user spent in query.
	MCpuUserTimeSumPerSec float32 `protobuf:"fixed32,56,opt,name=m_cpu_user_time_sum_per_sec,json=mCpuUserTimeSumPerSec,proto3" json:"m_cpu_user_time_sum_per_sec,omitempty"`
	// Total time system spent in query.
	MCpuSysTimeSumPerSec float32 `protobuf:"fixed32,57,opt,name=m_cpu_sys_time_sum_per_sec,json=mCpuSysTimeSumPerSec,proto3" json:"m_cpu_sys_time_sum_per_sec,omitempty"`
	//
	// pg_stat_monitor 0.9 metrics
	//
	// Total number of planned calls.
	MPlansCallsSumPerSec float32 `protobuf:"fixed32,58,opt,name=m_plans_calls_sum_per_sec,json=mPlansCallsSumPerSec,proto3" json:"m_plans_calls_sum_per_sec,omitempty"`
	// Total number of WAL (Write-ahead logging) records.
	MWalRecordsSumPerSec float32 `protobuf:"fixed32,59,opt,name=m_wal_records_sum_per_sec,json=mWalRecordsSumPerSec,proto3" json:"m_wal_records_sum_per_sec,omitempty"`
	// Total number of FPI (full page images) in WAL (Write-ahead logging) records.
	MWalFpiSumPerSec float32 `protobuf:"fixed32,60,opt,name=m_wal_fpi_sum_per_sec,json=mWalFpiSumPerSec,proto3" json:"m_wal_fpi_sum_per_sec,omitempty"`
	// Total bytes of WAL (Write-ahead logging) records.
	MWalBytesSumPerSec float32 `protobuf:"fixed32,61,opt,name=m_wal_bytes_sum_per_sec,json=mWalBytesSumPerSec,proto3" json:"m_wal_bytes_sum_per_sec,omitempty"`
	// Plan time in per seconds.
	MPlanTimeSumPerSec float32 `protobuf:"fixed32,62,opt,name=m_plan_time_sum_per_sec,json=mPlanTimeSumPerSec,proto3" json:"m_plan_time_sum_per_sec,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qanpb_qan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_qanpb_qan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_qanpb_qan_proto_rawDescGZIP(), []int{0}
}

func (x *Point) GetPoint() uint32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Point) GetTimeFrame() uint32 {
	if x != nil {
		return x.TimeFrame
	}
	return 0
}

func (x *Point) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Point) GetLoad() float32 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *Point) GetNumQueriesPerSec() float32 {
	if x != nil {
		return x.NumQueriesPerSec
	}
	return 0
}

func (x *Point) GetNumQueriesWithErrorsPerSec() float32 {
	if x != nil {
		return x.NumQueriesWithErrorsPerSec
	}
	return 0
}

func (x *Point) GetNumQueriesWithWarningsPerSec() float32 {
	if x != nil {
		return x.NumQueriesWithWarningsPerSec
	}
	return 0
}

func (x *Point) GetMQueryTimeSumPerSec() float32 {
	if x != nil {
		return x.MQueryTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMLockTimeSumPerSec() float32 {
	if x != nil {
		return x.MLockTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsSentSumPerSec() float32 {
	if x != nil {
		return x.MRowsSentSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsExaminedSumPerSec() float32 {
	if x != nil {
		return x.MRowsExaminedSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsAffectedSumPerSec() float32 {
	if x != nil {
		return x.MRowsAffectedSumPerSec
	}
	return 0
}

func (x *Point) GetMRowsReadSumPerSec() float32 {
	if x != nil {
		return x.MRowsReadSumPerSec
	}
	return 0
}

func (x *Point) GetMMergePassesSumPerSec() float32 {
	if x != nil {
		return x.MMergePassesSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoROpsSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoROpsSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoRBytesSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoRBytesSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbIoRWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbIoRWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbRecLockWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbQueueWaitSumPerSec() float32 {
	if x != nil {
		return x.MInnodbQueueWaitSumPerSec
	}
	return 0
}

func (x *Point) GetMInnodbPagesDistinctSumPerSec() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctSumPerSec
	}
	return 0
}

func (x *Point) GetMQueryLengthSumPerSec() float32 {
	if x != nil {
		return x.MQueryLengthSumPerSec
	}
	return 0
}

func (x *Point) GetMBytesSentSumPerSec() float32 {
	if x != nil {
		return x.MBytesSentSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTablesSumPerSec() float32 {
	if x != nil {
		return x.MTmpTablesSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpDiskTablesSumPerSec() float32 {
	if x != nil {
		return x.MTmpDiskTablesSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableSizesSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableSizesSumPerSec
	}
	return 0
}

func (x *Point) GetMQcHitSumPerSec() float32 {
	if x != nil {
		return x.MQcHitSumPerSec
	}
	return 0
}

func (x *Point) GetMFullScanSumPerSec() float32 {
	if x != nil {
		return x.MFullScanSumPerSec
	}
	return 0
}

func (x *Point) GetMFullJoinSumPerSec() float32 {
	if x != nil {
		return x.MFullJoinSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableSumPerSec
	}
	return 0
}

func (x *Point) GetMTmpTableOnDiskSumPerSec() float32 {
	if x != nil {
		return x.MTmpTableOnDiskSumPerSec
	}
	return 0
}

func (x *Point) GetMFilesortSumPerSec() float32 {
	if x != nil {
		return x.MFilesortSumPerSec
	}
	return 0
}

func (x *Point) GetMFilesortOnDiskSumPerSec() float32 {
	if x != nil {
		return x.MFilesortOnDiskSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectFullRangeJoinSumPerSec() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectRangeSumPerSec() float32 {
	if x != nil {
		return x.MSelectRangeSumPerSec
	}
	return 0
}

func (x *Point) GetMSelectRangeCheckSumPerSec() float32 {
	if x != nil {
		return x.MSelectRangeCheckSumPerSec
	}
	return 0
}

func (x *Point) GetMSortRangeSumPerSec() float32 {
	if x != nil {
		return x.MSortRangeSumPerSec
	}
	return 0
}

func (x *Point) GetMSortRowsSumPerSec() float32 {
	if x != nil {
		return x.MSortRowsSumPerSec
	}
	return 0
}

func (x *Point) GetMSortScanSumPerSec() float32 {
	if x != nil {
		return x.MSortScanSumPerSec
	}
	return 0
}

func (x *Point) GetMNoIndexUsedSumPerSec() float32 {
	if x != nil {
		return x.MNoIndexUsedSumPerSec
	}
	return 0
}

func (x *Point) GetMNoGoodIndexUsedSumPerSec() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedSumPerSec
	}
	return 0
}

func (x *Point) GetMDocsReturnedSumPerSec() float32 {
	if x != nil {
		return x.MDocsReturnedSumPerSec
	}
	return 0
}

func (x *Point) GetMResponseLengthSumPerSec() float32 {
	if x != nil {
		return x.MResponseLengthSumPerSec
	}
	return 0
}

func (x *Point) GetMDocsScannedSumPerSec() float32 {
	if x != nil {
		return x.MDocsScannedSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksHitSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksHitSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksDirtiedSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedSumPerSec
	}
	return 0
}

func (x *Point) GetMSharedBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MSharedBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksHitSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksHitSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksDirtiedSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedSumPerSec
	}
	return 0
}

func (x *Point) GetMLocalBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MLocalBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMTempBlksReadSumPerSec() float32 {
	if x != nil {
		return x.MTempBlksReadSumPerSec
	}
	return 0
}

func (x *Point) GetMTempBlksWrittenSumPerSec() float32 {
	if x != nil {
		return x.MTempBlksWrittenSumPerSec
	}
	return 0
}

func (x *Point) GetMBlkReadTimeSumPerSec() float32 {
	if x != nil {
		return x.MBlkReadTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMBlkWriteTimeSumPerSec() float32 {
	if x != nil {
		return x.MBlkWriteTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMCpuUserTimeSumPerSec() float32 {
	if x != nil {
		return x.MCpuUserTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMCpuSysTimeSumPerSec() float32 {
	if x != nil {
		return x.MCpuSysTimeSumPerSec
	}
	return 0
}

func (x *Point) GetMPlansCallsSumPerSec() float32 {
	if x != nil {
		return x.MPlansCallsSumPerSec
	}
	return 0
}

func (x *Point) GetMWalRecordsSumPerSec() float32 {
	if x != nil {
		return x.MWalRecordsSumPerSec
	}
	return 0
}

func (x *Point) GetMWalFpiSumPerSec() float32 {
	if x != nil {
		return x.MWalFpiSumPerSec
	}
	return 0
}

func (x *Point) GetMWalBytesSumPerSec() float32 {
	if x != nil {
		return x.MWalBytesSumPerSec
	}
	return 0
}

func (x *Point) GetMPlanTimeSumPerSec() float32 {
	if x != nil {
		return x.MPlanTimeSumPerSec
	}
	return 0
}

// MapFieldEntry allows to pass labels/dimensions in form like {"server": ["db1", "db2"...]}.
type MapFieldEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *MapFieldEntry) Reset() {
	*x = MapFieldEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qanpb_qan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFieldEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFieldEntry) ProtoMessage() {}

func (x *MapFieldEntry) ProtoReflect() protoreflect.Message {
	mi := &file_qanpb_qan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFieldEntry.ProtoReflect.Descriptor instead.
func (*MapFieldEntry) Descriptor() ([]byte, []int) {
	return file_qanpb_qan_proto_rawDescGZIP(), []int{1}
}

func (x *MapFieldEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapFieldEntry) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_qanpb_qan_proto protoreflect.FileDescriptor

var file_qanpb_qan_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x71, 0x61, 0x6e, 0x70, 0x62, 0x2f, 0x71, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0xc6,
	0x1c, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6e, 0x75,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x43,
	0x0a, 0x1f, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c,
	0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x18,
	0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a,
	0x1b, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x1b, 0x6d, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x16, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x1a,
	0x6d, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x15, 0x6d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x53, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x1d, 0x6d, 0x5f, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16,
	0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x53, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x1f, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x1e, 0x6d, 0x5f, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x22, 0x6d, 0x5f,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52,
	0x65, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x1f, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x6d, 0x49,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x23, 0x6d, 0x5f, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x35,
	0x0a, 0x18, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x18, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1d,
	0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x54, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1d,
	0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x14,
	0x6d, 0x5f, 0x71, 0x63, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x51, 0x63, 0x48,
	0x69, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x1f, 0x6d, 0x5f,
	0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a,
	0x16, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x40, 0x0a, 0x1e, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x24, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1d, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x20, 0x6d,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x35, 0x0a, 0x18, 0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x77, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a,
	0x17, 0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6d, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x12, 0x3a, 0x0a, 0x1b, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x4e, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x55, 0x73, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x43,
	0x0a, 0x20, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x6d, 0x4e, 0x6f, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x1b, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1d,
	0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73,
	0x48, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x1e,
	0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x46,
	0x0a, 0x21, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x21, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1b, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3c,
	0x0a, 0x1c, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68,
	0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73,
	0x48, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1d,
	0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x20,
	0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x74, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c,
	0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x12, 0x44, 0x0a, 0x20, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x53,
	0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x1c, 0x6d, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16,
	0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x1f, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x1b, 0x6d, 0x5f,
	0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x6d, 0x42, 0x6c, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x1c, 0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x42,
	0x6c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x1b, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x38, 0x0a, 0x1a, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x43, 0x70, 0x75, 0x53, 0x79, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x19, 0x6d, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x19, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x57, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x15,
	0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x70, 0x69, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x57, 0x61,
	0x6c, 0x46, 0x70, 0x69, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x33, 0x0a,
	0x17, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6d, 0x57, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2a, 0x55, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x16, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x0f, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x13, 0x0a, 0x0b, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x2a, 0x5d, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x53,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x95, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x71,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x08, 0x51, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x71, 0x61, 0x6e, 0x70, 0x62, 0x3b, 0x71, 0x61, 0x6e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x51, 0x61, 0x6e, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0b, 0x51, 0x61, 0x6e, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x17, 0x51, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0c, 0x51, 0x61, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qanpb_qan_proto_rawDescOnce sync.Once
	file_qanpb_qan_proto_rawDescData = file_qanpb_qan_proto_rawDesc
)

func file_qanpb_qan_proto_rawDescGZIP() []byte {
	file_qanpb_qan_proto_rawDescOnce.Do(func() {
		file_qanpb_qan_proto_rawDescData = protoimpl.X.CompressGZIP(file_qanpb_qan_proto_rawDescData)
	})
	return file_qanpb_qan_proto_rawDescData
}

var (
	file_qanpb_qan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_qanpb_qan_proto_msgTypes  = make([]protoimpl.MessageInfo, 2)
	file_qanpb_qan_proto_goTypes   = []interface{}{
		(ExampleFormat)(0),    // 0: qan.v1beta1.ExampleFormat
		(ExampleType)(0),      // 1: qan.v1beta1.ExampleType
		(*Point)(nil),         // 2: qan.v1beta1.Point
		(*MapFieldEntry)(nil), // 3: qan.v1beta1.MapFieldEntry
	}
)

var file_qanpb_qan_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_qanpb_qan_proto_init() }
func file_qanpb_qan_proto_init() {
	if File_qanpb_qan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_qanpb_qan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qanpb_qan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapFieldEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qanpb_qan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qanpb_qan_proto_goTypes,
		DependencyIndexes: file_qanpb_qan_proto_depIdxs,
		EnumInfos:         file_qanpb_qan_proto_enumTypes,
		MessageInfos:      file_qanpb_qan_proto_msgTypes,
	}.Build()
	File_qanpb_qan_proto = out.File
	file_qanpb_qan_proto_rawDesc = nil
	file_qanpb_qan_proto_goTypes = nil
	file_qanpb_qan_proto_depIdxs = nil
}
