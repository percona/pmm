// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: qanpb/collector.proto

package qanv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	inventorypb "github.com/percona/pmm/api/inventorypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsBucket []*MetricsBucket `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
}

func (x *CollectRequest) Reset() {
	*x = CollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qanpb_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequest) ProtoMessage() {}

func (x *CollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qanpb_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequest.ProtoReflect.Descriptor instead.
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return file_qanpb_collector_proto_rawDescGZIP(), []int{0}
}

func (x *CollectRequest) GetMetricsBucket() []*MetricsBucket {
	if x != nil {
		return x.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by pmm-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Service Name (can be several Services on one Node).
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// MongoDB or PostgreSQL database.
	// Several databases can't be combined in a single declarative query.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	// MySQL database or PostgreSQL schema.
	// Several schemas can be combined in a single declarative query.
	Schema string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	// Tables or Collections list.
	Tables []string `protobuf:"bytes,166,rep,name=tables,proto3" json:"tables,omitempty"`
	// client user name.
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// client IP or hostname.
	ClientHost string `protobuf:"bytes,7,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	// Node identifier
	NodeId string `protobuf:"bytes,224,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Node name
	NodeName string `protobuf:"bytes,225,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Node type
	NodeType string `protobuf:"bytes,226,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	// Machine identifier
	MachineId string `protobuf:"bytes,227,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Container identifier
	ContainerId string `protobuf:"bytes,228,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Container name
	ContainerName string `protobuf:"bytes,165,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// Node model
	NodeModel string `protobuf:"bytes,164,opt,name=node_model,json=nodeModel,proto3" json:"node_model,omitempty"`
	// Region name
	Region string `protobuf:"bytes,163,opt,name=region,proto3" json:"region,omitempty"`
	// Availability zone
	Az string `protobuf:"bytes,162,opt,name=az,proto3" json:"az,omitempty"`
	// Service identifier
	ServiceId string `protobuf:"bytes,229,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Type of service
	ServiceType string `protobuf:"bytes,160,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Environment name
	Environment string `protobuf:"bytes,161,opt,name=environment,proto3" json:"environment,omitempty"`
	// Cluster name
	Cluster string `protobuf:"bytes,159,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of replication set
	ReplicationSet string `protobuf:"bytes,158,opt,name=replication_set,json=replicationSet,proto3" json:"replication_set,omitempty"`
	// Identifier of agent that collect and send metrics.
	AgentId string `protobuf:"bytes,9,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Metrics source.
	AgentType inventorypb.AgentType `protobuf:"varint,12,opt,name=agent_type,json=agentType,proto3,enum=inventory.AgentType" json:"agent_type,omitempty"`
	// Custom labels names:values.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,10,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,11,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// One of query example from set found in bucket.
	Example string `protobuf:"bytes,13,opt,name=example,proto3" json:"example,omitempty"`
	// Deprecated: should not be used, should be removed.
	//
	// Deprecated: Do not use.
	ExampleFormat ExampleFormat `protobuf:"varint,14,opt,name=example_format,json=exampleFormat,proto3,enum=qan.v1beta1.ExampleFormat" json:"example_format,omitempty"`
	// Indicates if the query example is truncated.
	IsTruncated bool        `protobuf:"varint,15,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType ExampleType `protobuf:"varint,16,opt,name=example_type,json=exampleType,proto3,enum=qan.v1beta1.ExampleType" json:"example_type,omitempty"`
	// Metrics of query example in JSON format.
	ExampleMetrics string `protobuf:"bytes,17,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,18,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// List of warnings: {code: count}.
	Warnings map[uint64]uint64 `protobuf:"bytes,19,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,20,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,21,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Amount queries in this bucket.
	NumQueries float32 `protobuf:"fixed32,22,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	// How many times query_time was found.
	MQueryTimeCnt float32 `protobuf:"fixed32,23,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSum float32 `protobuf:"fixed32,24,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	// Smallest value of query_time in bucket.
	MQueryTimeMin float32 `protobuf:"fixed32,25,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	// Biggest value of query_time in bucket.
	MQueryTimeMax float32 `protobuf:"fixed32,26,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	// 99 percentile of value of query_time in bucket.
	MQueryTimeP99 float32 `protobuf:"fixed32,27,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MLockTimeCnt  float32 `protobuf:"fixed32,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSum float32 `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin float32 `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax float32 `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99 float32 `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt float32 `protobuf:"fixed32,33,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSum     float32 `protobuf:"fixed32,34,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin     float32 `protobuf:"fixed32,35,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax     float32 `protobuf:"fixed32,36,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99     float32 `protobuf:"fixed32,37,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt float32 `protobuf:"fixed32,38,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSum float32 `protobuf:"fixed32,39,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin float32 `protobuf:"fixed32,40,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax float32 `protobuf:"fixed32,41,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99 float32 `protobuf:"fixed32,42,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt float32 `protobuf:"fixed32,43,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSum float32 `protobuf:"fixed32,44,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin float32 `protobuf:"fixed32,45,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax float32 `protobuf:"fixed32,46,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99 float32 `protobuf:"fixed32,47,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt     float32 `protobuf:"fixed32,48,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	// The number of rows read from tables.
	MRowsReadSum    float32 `protobuf:"fixed32,49,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin    float32 `protobuf:"fixed32,50,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax    float32 `protobuf:"fixed32,51,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99    float32 `protobuf:"fixed32,52,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt float32 `protobuf:"fixed32,53,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSum  float32 `protobuf:"fixed32,54,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin  float32 `protobuf:"fixed32,55,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax  float32 `protobuf:"fixed32,56,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99  float32 `protobuf:"fixed32,57,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt float32 `protobuf:"fixed32,58,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSum   float32 `protobuf:"fixed32,59,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin   float32 `protobuf:"fixed32,60,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax   float32 `protobuf:"fixed32,61,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99   float32 `protobuf:"fixed32,62,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt float32 `protobuf:"fixed32,63,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSum float32 `protobuf:"fixed32,64,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin float32 `protobuf:"fixed32,65,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax float32 `protobuf:"fixed32,66,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99 float32 `protobuf:"fixed32,67,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt  float32 `protobuf:"fixed32,68,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSum     float32 `protobuf:"fixed32,69,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin     float32 `protobuf:"fixed32,70,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax     float32 `protobuf:"fixed32,71,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99     float32 `protobuf:"fixed32,72,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt float32 `protobuf:"fixed32,73,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSum float32 `protobuf:"fixed32,74,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin float32 `protobuf:"fixed32,75,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax float32 `protobuf:"fixed32,76,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99 float32 `protobuf:"fixed32,77,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt   float32 `protobuf:"fixed32,78,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSum     float32 `protobuf:"fixed32,79,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32 `protobuf:"fixed32,80,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32 `protobuf:"fixed32,81,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32 `protobuf:"fixed32,82,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32 `protobuf:"fixed32,83,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSum float32 `protobuf:"fixed32,84,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32 `protobuf:"fixed32,85,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32 `protobuf:"fixed32,86,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32 `protobuf:"fixed32,87,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32 `protobuf:"fixed32,88,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	// Shows how long the query is.
	MQueryLengthSum float32 `protobuf:"fixed32,89,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin float32 `protobuf:"fixed32,90,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax float32 `protobuf:"fixed32,91,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99 float32 `protobuf:"fixed32,92,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt   float32 `protobuf:"fixed32,93,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSum float32 `protobuf:"fixed32,94,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin float32 `protobuf:"fixed32,95,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax float32 `protobuf:"fixed32,96,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99 float32 `protobuf:"fixed32,97,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt float32 `protobuf:"fixed32,98,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSum     float32 `protobuf:"fixed32,99,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin     float32 `protobuf:"fixed32,100,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax     float32 `protobuf:"fixed32,101,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99     float32 `protobuf:"fixed32,102,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt float32 `protobuf:"fixed32,103,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSum float32 `protobuf:"fixed32,104,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin float32 `protobuf:"fixed32,105,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax float32 `protobuf:"fixed32,106,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99 float32 `protobuf:"fixed32,107,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt float32 `protobuf:"fixed32,108,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSum float32 `protobuf:"fixed32,109,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin float32 `protobuf:"fixed32,110,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax float32 `protobuf:"fixed32,111,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99 float32 `protobuf:"fixed32,112,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	//
	// Boolean metrics:
	// - *_cnt - how many times this matric was met.
	// - *_sum - how many times this matric was true.
	//
	MQcHitCnt float32 `protobuf:"fixed32,113,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	// Query Cache hits.
	MQcHitSum    float32 `protobuf:"fixed32,114,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt float32 `protobuf:"fixed32,115,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	// The query performed a full table scan.
	MFullScanSum float32 `protobuf:"fixed32,116,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt float32 `protobuf:"fixed32,117,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSum float32 `protobuf:"fixed32,118,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt float32 `protobuf:"fixed32,119,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSum       float32 `protobuf:"fixed32,120,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt float32 `protobuf:"fixed32,121,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSum float32 `protobuf:"fixed32,122,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt       float32 `protobuf:"fixed32,123,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	// The query used a filesort.
	MFilesortSum       float32 `protobuf:"fixed32,124,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt float32 `protobuf:"fixed32,125,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSum      float32 `protobuf:"fixed32,126,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32 `protobuf:"fixed32,127,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSum float32 `protobuf:"fixed32,128,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32 `protobuf:"fixed32,129,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSum      float32 `protobuf:"fixed32,130,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt float32 `protobuf:"fixed32,131,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSum float32 `protobuf:"fixed32,132,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt        float32 `protobuf:"fixed32,133,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSum float32 `protobuf:"fixed32,134,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt  float32 `protobuf:"fixed32,135,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	// The number of sorted rows.
	MSortRowsSum float32 `protobuf:"fixed32,136,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt float32 `protobuf:"fixed32,137,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSum    float32 `protobuf:"fixed32,138,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt float32 `protobuf:"fixed32,139,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSum     float32 `protobuf:"fixed32,140,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt float32 `protobuf:"fixed32,141,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSum float32 `protobuf:"fixed32,142,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	MDocsReturnedCnt    float32 `protobuf:"fixed32,143,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	// The number of returned documents.
	MDocsReturnedSum   float32 `protobuf:"fixed32,144,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin   float32 `protobuf:"fixed32,145,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax   float32 `protobuf:"fixed32,146,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99   float32 `protobuf:"fixed32,147,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt float32 `protobuf:"fixed32,148,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSum float32 `protobuf:"fixed32,149,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin float32 `protobuf:"fixed32,150,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax float32 `protobuf:"fixed32,151,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99 float32 `protobuf:"fixed32,152,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt    float32 `protobuf:"fixed32,153,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	// The number of scanned documents.
	MDocsScannedSum   float32 `protobuf:"fixed32,154,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin   float32 `protobuf:"fixed32,155,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax   float32 `protobuf:"fixed32,156,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99   float32 `protobuf:"fixed32,157,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	MSharedBlksHitCnt float32 `protobuf:"fixed32,200,opt,name=m_shared_blks_hit_cnt,json=mSharedBlksHitCnt,proto3" json:"m_shared_blks_hit_cnt,omitempty"`
	// Total number of shared block cache hits by the statement.
	MSharedBlksHitSum  float32 `protobuf:"fixed32,201,opt,name=m_shared_blks_hit_sum,json=mSharedBlksHitSum,proto3" json:"m_shared_blks_hit_sum,omitempty"`
	MSharedBlksReadCnt float32 `protobuf:"fixed32,202,opt,name=m_shared_blks_read_cnt,json=mSharedBlksReadCnt,proto3" json:"m_shared_blks_read_cnt,omitempty"`
	// Total number of shared blocks read by the statement.
	MSharedBlksReadSum    float32 `protobuf:"fixed32,203,opt,name=m_shared_blks_read_sum,json=mSharedBlksReadSum,proto3" json:"m_shared_blks_read_sum,omitempty"`
	MSharedBlksDirtiedCnt float32 `protobuf:"fixed32,204,opt,name=m_shared_blks_dirtied_cnt,json=mSharedBlksDirtiedCnt,proto3" json:"m_shared_blks_dirtied_cnt,omitempty"`
	// Total number of shared blocks dirtied by the statement.
	MSharedBlksDirtiedSum float32 `protobuf:"fixed32,205,opt,name=m_shared_blks_dirtied_sum,json=mSharedBlksDirtiedSum,proto3" json:"m_shared_blks_dirtied_sum,omitempty"`
	MSharedBlksWrittenCnt float32 `protobuf:"fixed32,206,opt,name=m_shared_blks_written_cnt,json=mSharedBlksWrittenCnt,proto3" json:"m_shared_blks_written_cnt,omitempty"`
	// Total number of shared blocks written by the statement.
	MSharedBlksWrittenSum float32 `protobuf:"fixed32,207,opt,name=m_shared_blks_written_sum,json=mSharedBlksWrittenSum,proto3" json:"m_shared_blks_written_sum,omitempty"`
	MLocalBlksHitCnt      float32 `protobuf:"fixed32,208,opt,name=m_local_blks_hit_cnt,json=mLocalBlksHitCnt,proto3" json:"m_local_blks_hit_cnt,omitempty"`
	// Total number of local block cache hits by the statement.
	MLocalBlksHitSum  float32 `protobuf:"fixed32,209,opt,name=m_local_blks_hit_sum,json=mLocalBlksHitSum,proto3" json:"m_local_blks_hit_sum,omitempty"`
	MLocalBlksReadCnt float32 `protobuf:"fixed32,210,opt,name=m_local_blks_read_cnt,json=mLocalBlksReadCnt,proto3" json:"m_local_blks_read_cnt,omitempty"`
	// Total number of local blocks read by the statement.
	MLocalBlksReadSum    float32 `protobuf:"fixed32,211,opt,name=m_local_blks_read_sum,json=mLocalBlksReadSum,proto3" json:"m_local_blks_read_sum,omitempty"`
	MLocalBlksDirtiedCnt float32 `protobuf:"fixed32,212,opt,name=m_local_blks_dirtied_cnt,json=mLocalBlksDirtiedCnt,proto3" json:"m_local_blks_dirtied_cnt,omitempty"`
	// Total number of local blocks dirtied by the statement.
	MLocalBlksDirtiedSum float32 `protobuf:"fixed32,213,opt,name=m_local_blks_dirtied_sum,json=mLocalBlksDirtiedSum,proto3" json:"m_local_blks_dirtied_sum,omitempty"`
	MLocalBlksWrittenCnt float32 `protobuf:"fixed32,214,opt,name=m_local_blks_written_cnt,json=mLocalBlksWrittenCnt,proto3" json:"m_local_blks_written_cnt,omitempty"`
	// Total number of local blocks written by the statement.
	MLocalBlksWrittenSum float32 `protobuf:"fixed32,215,opt,name=m_local_blks_written_sum,json=mLocalBlksWrittenSum,proto3" json:"m_local_blks_written_sum,omitempty"`
	MTempBlksReadCnt     float32 `protobuf:"fixed32,216,opt,name=m_temp_blks_read_cnt,json=mTempBlksReadCnt,proto3" json:"m_temp_blks_read_cnt,omitempty"`
	// Total number of temp blocks read by the statement.
	MTempBlksReadSum    float32 `protobuf:"fixed32,217,opt,name=m_temp_blks_read_sum,json=mTempBlksReadSum,proto3" json:"m_temp_blks_read_sum,omitempty"`
	MTempBlksWrittenCnt float32 `protobuf:"fixed32,218,opt,name=m_temp_blks_written_cnt,json=mTempBlksWrittenCnt,proto3" json:"m_temp_blks_written_cnt,omitempty"`
	// Total number of temp blocks written by the statement.
	MTempBlksWrittenSum float32 `protobuf:"fixed32,219,opt,name=m_temp_blks_written_sum,json=mTempBlksWrittenSum,proto3" json:"m_temp_blks_written_sum,omitempty"`
	MBlkReadTimeCnt     float32 `protobuf:"fixed32,220,opt,name=m_blk_read_time_cnt,json=mBlkReadTimeCnt,proto3" json:"m_blk_read_time_cnt,omitempty"`
	// Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkReadTimeSum  float32 `protobuf:"fixed32,221,opt,name=m_blk_read_time_sum,json=mBlkReadTimeSum,proto3" json:"m_blk_read_time_sum,omitempty"`
	MBlkWriteTimeCnt float32 `protobuf:"fixed32,222,opt,name=m_blk_write_time_cnt,json=mBlkWriteTimeCnt,proto3" json:"m_blk_write_time_cnt,omitempty"`
	// Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkWriteTimeSum float32 `protobuf:"fixed32,223,opt,name=m_blk_write_time_sum,json=mBlkWriteTimeSum,proto3" json:"m_blk_write_time_sum,omitempty"`
	MCpuUserTimeCnt  float32 `protobuf:"fixed32,230,opt,name=m_cpu_user_time_cnt,json=mCpuUserTimeCnt,proto3" json:"m_cpu_user_time_cnt,omitempty"`
	// Total time user spent in query.
	MCpuUserTimeSum float32 `protobuf:"fixed32,231,opt,name=m_cpu_user_time_sum,json=mCpuUserTimeSum,proto3" json:"m_cpu_user_time_sum,omitempty"`
	MCpuSysTimeCnt  float32 `protobuf:"fixed32,232,opt,name=m_cpu_sys_time_cnt,json=mCpuSysTimeCnt,proto3" json:"m_cpu_sys_time_cnt,omitempty"`
	// Total time system spent in query.
	MCpuSysTimeSum float32 `protobuf:"fixed32,233,opt,name=m_cpu_sys_time_sum,json=mCpuSysTimeSum,proto3" json:"m_cpu_sys_time_sum,omitempty"`
	// Type of SQL command.
	CmdType string `protobuf:"bytes,246,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	//
	// pg_stat_monitor 0.9 metrics
	//
	// Total number of planned calls.
	MPlansCallsSum float32 `protobuf:"fixed32,234,opt,name=m_plans_calls_sum,json=mPlansCallsSum,proto3" json:"m_plans_calls_sum,omitempty"`
	MPlansCallsCnt float32 `protobuf:"fixed32,235,opt,name=m_plans_calls_cnt,json=mPlansCallsCnt,proto3" json:"m_plans_calls_cnt,omitempty"`
	// Total number of WAL (Write-ahead logging) records.
	MWalRecordsSum float32 `protobuf:"fixed32,236,opt,name=m_wal_records_sum,json=mWalRecordsSum,proto3" json:"m_wal_records_sum,omitempty"`
	MWalRecordsCnt float32 `protobuf:"fixed32,237,opt,name=m_wal_records_cnt,json=mWalRecordsCnt,proto3" json:"m_wal_records_cnt,omitempty"`
	// Total number of FPI (full page images) in WAL (Write-ahead logging) records.
	MWalFpiSum float32 `protobuf:"fixed32,238,opt,name=m_wal_fpi_sum,json=mWalFpiSum,proto3" json:"m_wal_fpi_sum,omitempty"`
	MWalFpiCnt float32 `protobuf:"fixed32,239,opt,name=m_wal_fpi_cnt,json=mWalFpiCnt,proto3" json:"m_wal_fpi_cnt,omitempty"`
	// Total bytes of WAL (Write-ahead logging) records.
	MWalBytesSum float32 `protobuf:"fixed32,240,opt,name=m_wal_bytes_sum,json=mWalBytesSum,proto3" json:"m_wal_bytes_sum,omitempty"`
	MWalBytesCnt float32 `protobuf:"fixed32,241,opt,name=m_wal_bytes_cnt,json=mWalBytesCnt,proto3" json:"m_wal_bytes_cnt,omitempty"`
	// Sum, count, min, max of plan time.
	MPlanTimeSum float32 `protobuf:"fixed32,242,opt,name=m_plan_time_sum,json=mPlanTimeSum,proto3" json:"m_plan_time_sum,omitempty"`
	MPlanTimeCnt float32 `protobuf:"fixed32,243,opt,name=m_plan_time_cnt,json=mPlanTimeCnt,proto3" json:"m_plan_time_cnt,omitempty"`
	MPlanTimeMin float32 `protobuf:"fixed32,244,opt,name=m_plan_time_min,json=mPlanTimeMin,proto3" json:"m_plan_time_min,omitempty"`
	MPlanTimeMax float32 `protobuf:"fixed32,245,opt,name=m_plan_time_max,json=mPlanTimeMax,proto3" json:"m_plan_time_max,omitempty"`
	// Metrics skipped due to different bucket_time in pg_stat_monitor (1min in PMM, 5min in pg_stat_monitor):
	// min_time, max_time, mean_time
	// plan_mean_time
	// stddev_time
	// Other metrics skipped (empty values, codes):
	// cmd_type_text, elevel, sqlcode, message, state_code, state
	TopQueryid      string   `protobuf:"bytes,247,opt,name=top_queryid,json=topQueryid,proto3" json:"top_queryid,omitempty"`
	TopQuery        string   `protobuf:"bytes,250,opt,name=top_query,json=topQuery,proto3" json:"top_query,omitempty"`
	ApplicationName string   `protobuf:"bytes,248,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	Planid          string   `protobuf:"bytes,249,opt,name=planid,proto3" json:"planid,omitempty"`
	QueryPlan       string   `protobuf:"bytes,251,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	HistogramItems  []string `protobuf:"bytes,252,rep,name=histogram_items,json=histogramItems,proto3" json:"histogram_items,omitempty"`
}

func (x *MetricsBucket) Reset() {
	*x = MetricsBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qanpb_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsBucket) ProtoMessage() {}

func (x *MetricsBucket) ProtoReflect() protoreflect.Message {
	mi := &file_qanpb_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsBucket.ProtoReflect.Descriptor instead.
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return file_qanpb_collector_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsBucket) GetQueryid() string {
	if x != nil {
		return x.Queryid
	}
	return ""
}

func (x *MetricsBucket) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *MetricsBucket) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricsBucket) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MetricsBucket) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MetricsBucket) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *MetricsBucket) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MetricsBucket) GetClientHost() string {
	if x != nil {
		return x.ClientHost
	}
	return ""
}

func (x *MetricsBucket) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MetricsBucket) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MetricsBucket) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *MetricsBucket) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *MetricsBucket) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *MetricsBucket) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *MetricsBucket) GetNodeModel() string {
	if x != nil {
		return x.NodeModel
	}
	return ""
}

func (x *MetricsBucket) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MetricsBucket) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *MetricsBucket) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MetricsBucket) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *MetricsBucket) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MetricsBucket) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MetricsBucket) GetReplicationSet() string {
	if x != nil {
		return x.ReplicationSet
	}
	return ""
}

func (x *MetricsBucket) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MetricsBucket) GetAgentType() inventorypb.AgentType {
	if x != nil {
		return x.AgentType
	}
	return inventorypb.AgentType(0)
}

func (x *MetricsBucket) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricsBucket) GetPeriodStartUnixSecs() uint32 {
	if x != nil {
		return x.PeriodStartUnixSecs
	}
	return 0
}

func (x *MetricsBucket) GetPeriodLengthSecs() uint32 {
	if x != nil {
		return x.PeriodLengthSecs
	}
	return 0
}

func (x *MetricsBucket) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

// Deprecated: Do not use.
func (x *MetricsBucket) GetExampleFormat() ExampleFormat {
	if x != nil {
		return x.ExampleFormat
	}
	return ExampleFormat_EXAMPLE_FORMAT_INVALID
}

func (x *MetricsBucket) GetIsTruncated() bool {
	if x != nil {
		return x.IsTruncated
	}
	return false
}

func (x *MetricsBucket) GetExampleType() ExampleType {
	if x != nil {
		return x.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_INVALID
}

func (x *MetricsBucket) GetExampleMetrics() string {
	if x != nil {
		return x.ExampleMetrics
	}
	return ""
}

func (x *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if x != nil {
		return x.NumQueriesWithWarnings
	}
	return 0
}

func (x *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if x != nil {
		return x.NumQueriesWithErrors
	}
	return 0
}

func (x *MetricsBucket) GetErrors() map[uint64]uint64 {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *MetricsBucket) GetNumQueries() float32 {
	if x != nil {
		return x.NumQueries
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeCnt() float32 {
	if x != nil {
		return x.MQueryTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeSum() float32 {
	if x != nil {
		return x.MQueryTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMin() float32 {
	if x != nil {
		return x.MQueryTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeMax() float32 {
	if x != nil {
		return x.MQueryTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetMQueryTimeP99() float32 {
	if x != nil {
		return x.MQueryTimeP99
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeCnt() float32 {
	if x != nil {
		return x.MLockTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeSum() float32 {
	if x != nil {
		return x.MLockTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeMin() float32 {
	if x != nil {
		return x.MLockTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeMax() float32 {
	if x != nil {
		return x.MLockTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetMLockTimeP99() float32 {
	if x != nil {
		return x.MLockTimeP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentCnt() float32 {
	if x != nil {
		return x.MRowsSentCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentSum() float32 {
	if x != nil {
		return x.MRowsSentSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMin() float32 {
	if x != nil {
		return x.MRowsSentMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentMax() float32 {
	if x != nil {
		return x.MRowsSentMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsSentP99() float32 {
	if x != nil {
		return x.MRowsSentP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedCnt() float32 {
	if x != nil {
		return x.MRowsExaminedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedSum() float32 {
	if x != nil {
		return x.MRowsExaminedSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedMin() float32 {
	if x != nil {
		return x.MRowsExaminedMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedMax() float32 {
	if x != nil {
		return x.MRowsExaminedMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsExaminedP99() float32 {
	if x != nil {
		return x.MRowsExaminedP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedCnt() float32 {
	if x != nil {
		return x.MRowsAffectedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedSum() float32 {
	if x != nil {
		return x.MRowsAffectedSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedMin() float32 {
	if x != nil {
		return x.MRowsAffectedMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedMax() float32 {
	if x != nil {
		return x.MRowsAffectedMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsAffectedP99() float32 {
	if x != nil {
		return x.MRowsAffectedP99
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadCnt() float32 {
	if x != nil {
		return x.MRowsReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadSum() float32 {
	if x != nil {
		return x.MRowsReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadMin() float32 {
	if x != nil {
		return x.MRowsReadMin
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadMax() float32 {
	if x != nil {
		return x.MRowsReadMax
	}
	return 0
}

func (x *MetricsBucket) GetMRowsReadP99() float32 {
	if x != nil {
		return x.MRowsReadP99
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesCnt() float32 {
	if x != nil {
		return x.MMergePassesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesSum() float32 {
	if x != nil {
		return x.MMergePassesSum
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesMin() float32 {
	if x != nil {
		return x.MMergePassesMin
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesMax() float32 {
	if x != nil {
		return x.MMergePassesMax
	}
	return 0
}

func (x *MetricsBucket) GetMMergePassesP99() float32 {
	if x != nil {
		return x.MMergePassesP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsCnt() float32 {
	if x != nil {
		return x.MInnodbIoROpsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsSum() float32 {
	if x != nil {
		return x.MInnodbIoROpsSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsMin() float32 {
	if x != nil {
		return x.MInnodbIoROpsMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsMax() float32 {
	if x != nil {
		return x.MInnodbIoROpsMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoROpsP99() float32 {
	if x != nil {
		return x.MInnodbIoROpsP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesCnt() float32 {
	if x != nil {
		return x.MInnodbIoRBytesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesSum() float32 {
	if x != nil {
		return x.MInnodbIoRBytesSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesMin() float32 {
	if x != nil {
		return x.MInnodbIoRBytesMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesMax() float32 {
	if x != nil {
		return x.MInnodbIoRBytesMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRBytesP99() float32 {
	if x != nil {
		return x.MInnodbIoRBytesP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitCnt() float32 {
	if x != nil {
		return x.MInnodbIoRWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitSum() float32 {
	if x != nil {
		return x.MInnodbIoRWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitMin() float32 {
	if x != nil {
		return x.MInnodbIoRWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitMax() float32 {
	if x != nil {
		return x.MInnodbIoRWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbIoRWaitP99() float32 {
	if x != nil {
		return x.MInnodbIoRWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitCnt() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitSum() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitMin() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitMax() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbRecLockWaitP99() float32 {
	if x != nil {
		return x.MInnodbRecLockWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitCnt() float32 {
	if x != nil {
		return x.MInnodbQueueWaitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitSum() float32 {
	if x != nil {
		return x.MInnodbQueueWaitSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitMin() float32 {
	if x != nil {
		return x.MInnodbQueueWaitMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitMax() float32 {
	if x != nil {
		return x.MInnodbQueueWaitMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbQueueWaitP99() float32 {
	if x != nil {
		return x.MInnodbQueueWaitP99
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctCnt() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctCnt
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctSum() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctSum
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctMin() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctMin
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctMax() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctMax
	}
	return 0
}

func (x *MetricsBucket) GetMInnodbPagesDistinctP99() float32 {
	if x != nil {
		return x.MInnodbPagesDistinctP99
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthCnt() float32 {
	if x != nil {
		return x.MQueryLengthCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthSum() float32 {
	if x != nil {
		return x.MQueryLengthSum
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthMin() float32 {
	if x != nil {
		return x.MQueryLengthMin
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthMax() float32 {
	if x != nil {
		return x.MQueryLengthMax
	}
	return 0
}

func (x *MetricsBucket) GetMQueryLengthP99() float32 {
	if x != nil {
		return x.MQueryLengthP99
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentCnt() float32 {
	if x != nil {
		return x.MBytesSentCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentSum() float32 {
	if x != nil {
		return x.MBytesSentSum
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentMin() float32 {
	if x != nil {
		return x.MBytesSentMin
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentMax() float32 {
	if x != nil {
		return x.MBytesSentMax
	}
	return 0
}

func (x *MetricsBucket) GetMBytesSentP99() float32 {
	if x != nil {
		return x.MBytesSentP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesCnt() float32 {
	if x != nil {
		return x.MTmpTablesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesSum() float32 {
	if x != nil {
		return x.MTmpTablesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesMin() float32 {
	if x != nil {
		return x.MTmpTablesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesMax() float32 {
	if x != nil {
		return x.MTmpTablesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTablesP99() float32 {
	if x != nil {
		return x.MTmpTablesP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesCnt() float32 {
	if x != nil {
		return x.MTmpDiskTablesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesSum() float32 {
	if x != nil {
		return x.MTmpDiskTablesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesMin() float32 {
	if x != nil {
		return x.MTmpDiskTablesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesMax() float32 {
	if x != nil {
		return x.MTmpDiskTablesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpDiskTablesP99() float32 {
	if x != nil {
		return x.MTmpDiskTablesP99
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesCnt() float32 {
	if x != nil {
		return x.MTmpTableSizesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesSum() float32 {
	if x != nil {
		return x.MTmpTableSizesSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesMin() float32 {
	if x != nil {
		return x.MTmpTableSizesMin
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesMax() float32 {
	if x != nil {
		return x.MTmpTableSizesMax
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSizesP99() float32 {
	if x != nil {
		return x.MTmpTableSizesP99
	}
	return 0
}

func (x *MetricsBucket) GetMQcHitCnt() float32 {
	if x != nil {
		return x.MQcHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMQcHitSum() float32 {
	if x != nil {
		return x.MQcHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMFullScanCnt() float32 {
	if x != nil {
		return x.MFullScanCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFullScanSum() float32 {
	if x != nil {
		return x.MFullScanSum
	}
	return 0
}

func (x *MetricsBucket) GetMFullJoinCnt() float32 {
	if x != nil {
		return x.MFullJoinCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFullJoinSum() float32 {
	if x != nil {
		return x.MFullJoinSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableCnt() float32 {
	if x != nil {
		return x.MTmpTableCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableSum() float32 {
	if x != nil {
		return x.MTmpTableSum
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableOnDiskCnt() float32 {
	if x != nil {
		return x.MTmpTableOnDiskCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTmpTableOnDiskSum() float32 {
	if x != nil {
		return x.MTmpTableOnDiskSum
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortCnt() float32 {
	if x != nil {
		return x.MFilesortCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortSum() float32 {
	if x != nil {
		return x.MFilesortSum
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortOnDiskCnt() float32 {
	if x != nil {
		return x.MFilesortOnDiskCnt
	}
	return 0
}

func (x *MetricsBucket) GetMFilesortOnDiskSum() float32 {
	if x != nil {
		return x.MFilesortOnDiskSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectFullRangeJoinCnt() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectFullRangeJoinSum() float32 {
	if x != nil {
		return x.MSelectFullRangeJoinSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCnt() float32 {
	if x != nil {
		return x.MSelectRangeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeSum() float32 {
	if x != nil {
		return x.MSelectRangeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCheckCnt() float32 {
	if x != nil {
		return x.MSelectRangeCheckCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSelectRangeCheckSum() float32 {
	if x != nil {
		return x.MSelectRangeCheckSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortRangeCnt() float32 {
	if x != nil {
		return x.MSortRangeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortRangeSum() float32 {
	if x != nil {
		return x.MSortRangeSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortRowsCnt() float32 {
	if x != nil {
		return x.MSortRowsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortRowsSum() float32 {
	if x != nil {
		return x.MSortRowsSum
	}
	return 0
}

func (x *MetricsBucket) GetMSortScanCnt() float32 {
	if x != nil {
		return x.MSortScanCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSortScanSum() float32 {
	if x != nil {
		return x.MSortScanSum
	}
	return 0
}

func (x *MetricsBucket) GetMNoIndexUsedCnt() float32 {
	if x != nil {
		return x.MNoIndexUsedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMNoIndexUsedSum() float32 {
	if x != nil {
		return x.MNoIndexUsedSum
	}
	return 0
}

func (x *MetricsBucket) GetMNoGoodIndexUsedCnt() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMNoGoodIndexUsedSum() float32 {
	if x != nil {
		return x.MNoGoodIndexUsedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedCnt() float32 {
	if x != nil {
		return x.MDocsReturnedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedSum() float32 {
	if x != nil {
		return x.MDocsReturnedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedMin() float32 {
	if x != nil {
		return x.MDocsReturnedMin
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedMax() float32 {
	if x != nil {
		return x.MDocsReturnedMax
	}
	return 0
}

func (x *MetricsBucket) GetMDocsReturnedP99() float32 {
	if x != nil {
		return x.MDocsReturnedP99
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthCnt() float32 {
	if x != nil {
		return x.MResponseLengthCnt
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthSum() float32 {
	if x != nil {
		return x.MResponseLengthSum
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthMin() float32 {
	if x != nil {
		return x.MResponseLengthMin
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthMax() float32 {
	if x != nil {
		return x.MResponseLengthMax
	}
	return 0
}

func (x *MetricsBucket) GetMResponseLengthP99() float32 {
	if x != nil {
		return x.MResponseLengthP99
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedCnt() float32 {
	if x != nil {
		return x.MDocsScannedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedSum() float32 {
	if x != nil {
		return x.MDocsScannedSum
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedMin() float32 {
	if x != nil {
		return x.MDocsScannedMin
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedMax() float32 {
	if x != nil {
		return x.MDocsScannedMax
	}
	return 0
}

func (x *MetricsBucket) GetMDocsScannedP99() float32 {
	if x != nil {
		return x.MDocsScannedP99
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitCnt() float32 {
	if x != nil {
		return x.MSharedBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksHitSum() float32 {
	if x != nil {
		return x.MSharedBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadCnt() float32 {
	if x != nil {
		return x.MSharedBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksReadSum() float32 {
	if x != nil {
		return x.MSharedBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksDirtiedSum() float32 {
	if x != nil {
		return x.MSharedBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenCnt() float32 {
	if x != nil {
		return x.MSharedBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMSharedBlksWrittenSum() float32 {
	if x != nil {
		return x.MSharedBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitCnt() float32 {
	if x != nil {
		return x.MLocalBlksHitCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksHitSum() float32 {
	if x != nil {
		return x.MLocalBlksHitSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadCnt() float32 {
	if x != nil {
		return x.MLocalBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksReadSum() float32 {
	if x != nil {
		return x.MLocalBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedCnt() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksDirtiedSum() float32 {
	if x != nil {
		return x.MLocalBlksDirtiedSum
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenCnt() float32 {
	if x != nil {
		return x.MLocalBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMLocalBlksWrittenSum() float32 {
	if x != nil {
		return x.MLocalBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadCnt() float32 {
	if x != nil {
		return x.MTempBlksReadCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksReadSum() float32 {
	if x != nil {
		return x.MTempBlksReadSum
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenCnt() float32 {
	if x != nil {
		return x.MTempBlksWrittenCnt
	}
	return 0
}

func (x *MetricsBucket) GetMTempBlksWrittenSum() float32 {
	if x != nil {
		return x.MTempBlksWrittenSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeCnt() float32 {
	if x != nil {
		return x.MBlkReadTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkReadTimeSum() float32 {
	if x != nil {
		return x.MBlkReadTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeCnt() float32 {
	if x != nil {
		return x.MBlkWriteTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMBlkWriteTimeSum() float32 {
	if x != nil {
		return x.MBlkWriteTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeCnt() float32 {
	if x != nil {
		return x.MCpuUserTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuUserTimeSum() float32 {
	if x != nil {
		return x.MCpuUserTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeCnt() float32 {
	if x != nil {
		return x.MCpuSysTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMCpuSysTimeSum() float32 {
	if x != nil {
		return x.MCpuSysTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetCmdType() string {
	if x != nil {
		return x.CmdType
	}
	return ""
}

func (x *MetricsBucket) GetMPlansCallsSum() float32 {
	if x != nil {
		return x.MPlansCallsSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlansCallsCnt() float32 {
	if x != nil {
		return x.MPlansCallsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsSum() float32 {
	if x != nil {
		return x.MWalRecordsSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalRecordsCnt() float32 {
	if x != nil {
		return x.MWalRecordsCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiSum() float32 {
	if x != nil {
		return x.MWalFpiSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalFpiCnt() float32 {
	if x != nil {
		return x.MWalFpiCnt
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesSum() float32 {
	if x != nil {
		return x.MWalBytesSum
	}
	return 0
}

func (x *MetricsBucket) GetMWalBytesCnt() float32 {
	if x != nil {
		return x.MWalBytesCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeSum() float32 {
	if x != nil {
		return x.MPlanTimeSum
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeCnt() float32 {
	if x != nil {
		return x.MPlanTimeCnt
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMin() float32 {
	if x != nil {
		return x.MPlanTimeMin
	}
	return 0
}

func (x *MetricsBucket) GetMPlanTimeMax() float32 {
	if x != nil {
		return x.MPlanTimeMax
	}
	return 0
}

func (x *MetricsBucket) GetTopQueryid() string {
	if x != nil {
		return x.TopQueryid
	}
	return ""
}

func (x *MetricsBucket) GetTopQuery() string {
	if x != nil {
		return x.TopQuery
	}
	return ""
}

func (x *MetricsBucket) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *MetricsBucket) GetPlanid() string {
	if x != nil {
		return x.Planid
	}
	return ""
}

func (x *MetricsBucket) GetQueryPlan() string {
	if x != nil {
		return x.QueryPlan
	}
	return ""
}

func (x *MetricsBucket) GetHistogramItems() []string {
	if x != nil {
		return x.HistogramItems
	}
	return nil
}

type CollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollectResponse) Reset() {
	*x = CollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qanpb_collector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectResponse) ProtoMessage() {}

func (x *CollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qanpb_collector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectResponse.ProtoReflect.Descriptor instead.
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return file_qanpb_collector_proto_rawDescGZIP(), []int{2}
}

var File_qanpb_collector_proto protoreflect.FileDescriptor

var file_qanpb_collector_proto_rawDesc = []byte{
	0x0a, 0x15, 0x71, 0x61, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x70,
	0x62, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x71, 0x61, 0x6e, 0x70, 0x62, 0x2f, 0x71, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x53, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0xb3, 0x4f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa5, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0xa4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x02, 0x61, 0x7a,
	0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xa1,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x71,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12,
	0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x39, 0x39, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x39, 0x39, 0x12, 0x25, 0x0a,
	0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d,
	0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x39, 0x39,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d,
	0x52, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52,
	0x6f, 0x77, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x2d, 0x0a,
	0x13, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77,
	0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x70, 0x39, 0x39, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x39, 0x39, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x39, 0x39, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d,
	0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x50, 0x39, 0x39, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x6d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a,
	0x12, 0x6d, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x70, 0x39, 0x39, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x39, 0x39, 0x12, 0x2f, 0x0a, 0x15, 0x6d, 0x5f,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x6f, 0x70, 0x73, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x49, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x15, 0x6d,
	0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x6f, 0x70, 0x73,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x49, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x15,
	0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x6f, 0x70,
	0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x49, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x2f, 0x0a,
	0x15, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x6f,
	0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x49,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2f,
	0x0a, 0x15, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f,
	0x6f, 0x70, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d,
	0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x4f, 0x70, 0x73, 0x50, 0x39, 0x39, 0x12,
	0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f,
	0x52, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x49, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x33,
	0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x39, 0x39, 0x12, 0x31, 0x0a, 0x16, 0x6d, 0x5f, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64,
	0x62, 0x49, 0x6f, 0x52, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x16, 0x6d,
	0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x49, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x57, 0x61, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x31,
	0x0a, 0x16, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x16, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f,
	0x5f, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52, 0x57, 0x61, 0x69,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x16, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f, 0x52,
	0x57, 0x61, 0x69, 0x74, 0x50, 0x39, 0x39, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x49, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x52, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72,
	0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52,
	0x65, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x39, 0x0a,
	0x1a, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52, 0x65, 0x63, 0x4c, 0x6f, 0x63,
	0x6b, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x49,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74,
	0x4d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x1a, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x39,
	0x39, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x52, 0x65, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x50, 0x39, 0x39, 0x12, 0x34,
	0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x43, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x5f,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x49, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x69, 0x6e,
	0x12, 0x34, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57,
	0x61, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x39,
	0x39, 0x18, 0x52, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x50, 0x39, 0x39, 0x12, 0x3c, 0x0a, 0x1b,
	0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x5f,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x54, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x6d, 0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x5f, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6d,
	0x49, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x56, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x49, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f,
	0x70, 0x39, 0x39, 0x18, 0x57, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x49, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x50,
	0x39, 0x39, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12,
	0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x50, 0x39, 0x39, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x27,
	0x0a, 0x10, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x60, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x39, 0x39,
	0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x54, 0x6d, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x74,
	0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53,
	0x75, 0x6d, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x54,
	0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x6d,
	0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x39, 0x39, 0x12, 0x30, 0x0a,
	0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54,
	0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x68, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x6d, 0x54, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x75,
	0x6d, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x50, 0x39, 0x39, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74,
	0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x15, 0x6d,
	0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54, 0x6d, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a,
	0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x54,
	0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x12,
	0x30, 0x0a, 0x15, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x70, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x50, 0x39,
	0x39, 0x12, 0x1f, 0x0a, 0x0c, 0x6d, 0x5f, 0x71, 0x63, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x51, 0x63, 0x48, 0x69, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0c, 0x6d, 0x5f, 0x71, 0x63, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0x72, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x51, 0x63, 0x48, 0x69, 0x74,
	0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75,
	0x6d, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x46, 0x75, 0x6c,
	0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x12,
	0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x78, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x33, 0x0a,
	0x17, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x43,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x17, 0x6d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x54, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x7d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x6f,
	0x72, 0x74, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x1c, 0x6d,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4e, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x4e, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x5f,
	0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d,
	0x4e, 0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x64, 0x43,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x4e, 0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x39,
	0x39, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x50, 0x39, 0x39, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53,
	0x75, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x70, 0x39, 0x39, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x39, 0x39, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x44, 0x6f,
	0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x44, 0x6f, 0x63, 0x73,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x5f, 0x64, 0x6f,
	0x63, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x9c,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x73,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x39, 0x39, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b,
	0x73, 0x48, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xcd, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73,
	0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d,
	0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x43, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b,
	0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x53,
	0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd3,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x43, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd5, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73,
	0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0xd7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c,
	0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x54, 0x65,
	0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x54,
	0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c,
	0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x42, 0x6c, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x42, 0x6c, 0x6b, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x5f,
	0x62, 0x6c, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x42, 0x6c, 0x6b, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x5f, 0x62, 0x6c, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x42, 0x6c, 0x6b,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x43, 0x70, 0x75,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x43, 0x70, 0x75, 0x53, 0x79, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xe9, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x43, 0x70, 0x75, 0x53, 0x79, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xec, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x57, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x6d, 0x57, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x70, 0x69, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0xee, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x57, 0x61, 0x6c, 0x46, 0x70,
	0x69, 0x53, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x70,
	0x69, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x57,
	0x61, 0x6c, 0x46, 0x70, 0x69, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xf0, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x57, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x57, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0xf2, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xf4, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x64, 0x18, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf8, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0xf9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0xfb, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x51, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x9b, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x42, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2f, 0x70, 0x6d, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x71, 0x61, 0x6e, 0x70, 0x62, 0x3b, 0x71, 0x61, 0x6e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x51, 0x61, 0x6e, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0b, 0x51, 0x61, 0x6e, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x17, 0x51, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0c, 0x51, 0x61, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qanpb_collector_proto_rawDescOnce sync.Once
	file_qanpb_collector_proto_rawDescData = file_qanpb_collector_proto_rawDesc
)

func file_qanpb_collector_proto_rawDescGZIP() []byte {
	file_qanpb_collector_proto_rawDescOnce.Do(func() {
		file_qanpb_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_qanpb_collector_proto_rawDescData)
	})
	return file_qanpb_collector_proto_rawDescData
}

var (
	file_qanpb_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
	file_qanpb_collector_proto_goTypes  = []interface{}{
		(*CollectRequest)(nil),     // 0: qan.v1beta1.CollectRequest
		(*MetricsBucket)(nil),      // 1: qan.v1beta1.MetricsBucket
		(*CollectResponse)(nil),    // 2: qan.v1beta1.CollectResponse
		nil,                        // 3: qan.v1beta1.MetricsBucket.LabelsEntry
		nil,                        // 4: qan.v1beta1.MetricsBucket.WarningsEntry
		nil,                        // 5: qan.v1beta1.MetricsBucket.ErrorsEntry
		(inventorypb.AgentType)(0), // 6: inventory.AgentType
		(ExampleFormat)(0),         // 7: qan.v1beta1.ExampleFormat
		(ExampleType)(0),           // 8: qan.v1beta1.ExampleType
	}
)

var file_qanpb_collector_proto_depIdxs = []int32{
	1, // 0: qan.v1beta1.CollectRequest.metrics_bucket:type_name -> qan.v1beta1.MetricsBucket
	6, // 1: qan.v1beta1.MetricsBucket.agent_type:type_name -> inventory.AgentType
	3, // 2: qan.v1beta1.MetricsBucket.labels:type_name -> qan.v1beta1.MetricsBucket.LabelsEntry
	7, // 3: qan.v1beta1.MetricsBucket.example_format:type_name -> qan.v1beta1.ExampleFormat
	8, // 4: qan.v1beta1.MetricsBucket.example_type:type_name -> qan.v1beta1.ExampleType
	4, // 5: qan.v1beta1.MetricsBucket.warnings:type_name -> qan.v1beta1.MetricsBucket.WarningsEntry
	5, // 6: qan.v1beta1.MetricsBucket.errors:type_name -> qan.v1beta1.MetricsBucket.ErrorsEntry
	0, // 7: qan.v1beta1.Collector.Collect:input_type -> qan.v1beta1.CollectRequest
	2, // 8: qan.v1beta1.Collector.Collect:output_type -> qan.v1beta1.CollectResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_qanpb_collector_proto_init() }
func file_qanpb_collector_proto_init() {
	if File_qanpb_collector_proto != nil {
		return
	}
	file_qanpb_qan_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_qanpb_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qanpb_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qanpb_collector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qanpb_collector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qanpb_collector_proto_goTypes,
		DependencyIndexes: file_qanpb_collector_proto_depIdxs,
		MessageInfos:      file_qanpb_collector_proto_msgTypes,
	}.Build()
	File_qanpb_collector_proto = out.File
	file_qanpb_collector_proto_rawDesc = nil
	file_qanpb_collector_proto_goTypes = nil
	file_qanpb_collector_proto_depIdxs = nil
}
