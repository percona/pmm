{
  "swagger": "2.0",
  "info": {
    "title": "qanpb/object_details.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ObjectDetails"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v0/qan/ObjectDetails/ExplainFingerprintByQueryID": {
      "post": {
        "summary": "ExplainFingerprintByQueryID get explain fingerprint for given query ID.",
        "operationId": "ExplainFingerprintByQueryID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ExplainFingerprintByQueryIDReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "ExplainFingerprintByQueryIDRequest get explain fingerprint for given query ID.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ExplainFingerprintByQueryIDRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/GetHistogram": {
      "post": {
        "summary": "GetHistogram gets histogram items for specific filtering.",
        "operationId": "GetHistogram",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1HistogramReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "HistogramRequest defines filtering by time range, labels and queryid.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1HistogramRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/GetLabels": {
      "post": {
        "summary": "GetLabels gets list of labels for object details.",
        "operationId": "GetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1ObjectDetailsLabelsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "ObjectDetailsLabelsRequest defines filtering of object detail's labels for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1ObjectDetailsLabelsRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/GetMetrics": {
      "post": {
        "summary": "GetMetrics gets map of metrics for specific filtering.",
        "operationId": "GetMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1MetricsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "MetricsRequest defines filtering of metrics for specific value of dimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1MetricsRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/GetQueryExample": {
      "post": {
        "summary": "GetQueryExample gets list of query examples.",
        "operationId": "GetQueryExample",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryExampleReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "QueryExampleRequest defines filtering of query examples for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1QueryExampleRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/GetQueryPlan": {
      "post": {
        "summary": "GetQueryPlan gets query plan and plan id for specific filtering.",
        "operationId": "GetQueryPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryPlanReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "QueryPlanRequest defines filtering by queryid.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1QueryPlanRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/QueryExists": {
      "post": {
        "summary": "QueryExists check if query exists in clickhouse.",
        "operationId": "QueryExists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "boolean"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "QueryExistsRequest check if provided query exists or not.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1QueryExistsRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    },
    "/v0/qan/ObjectDetails/SchemaByQueryID": {
      "post": {
        "summary": "SchemaByQueryID returns schema for given queryID and serviceID.",
        "operationId": "SchemaByQueryID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1SchemaByQueryIDReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "SchemaByQueryIDRequest returns schema for given query ID and service ID.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1SchemaByQueryIDRequest"
            }
          }
        ],
        "tags": [
          "ObjectDetails"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1beta1ExampleFormat": {
      "type": "string",
      "enum": [
        "EXAMPLE_FORMAT_INVALID",
        "EXAMPLE",
        "FINGERPRINT"
      ],
      "default": "EXAMPLE_FORMAT_INVALID",
      "description": "ExampleFormat is format of query example: real or query without values.\n\nDeprecated: is not used, should not be used, should be removed."
    },
    "v1beta1ExampleType": {
      "type": "string",
      "enum": [
        "EXAMPLE_TYPE_INVALID",
        "RANDOM",
        "SLOWEST",
        "FASTEST",
        "WITH_ERROR"
      ],
      "default": "EXAMPLE_TYPE_INVALID",
      "description": "ExampleType is a type of query example selected for this query class in given period of time."
    },
    "v1beta1ExplainFingerprintByQueryIDReply": {
      "type": "object",
      "properties": {
        "explain_fingerprint": {
          "type": "string"
        },
        "placeholders_count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "ExplainFingerprintByQueryIDReply is explain fingerprint and placeholders count for given query ID."
    },
    "v1beta1ExplainFingerprintByQueryIDRequest": {
      "type": "object",
      "properties": {
        "serviceid": {
          "type": "string"
        },
        "query_id": {
          "type": "string"
        }
      },
      "description": "ExplainFingerprintByQueryIDRequest get explain fingerprint for given query ID."
    },
    "v1beta1GetSelectedQueryMetadataReply": {
      "type": "object",
      "properties": {
        "service_name": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "replication_set": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "service_type": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "node_name": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        }
      },
      "description": "GetSlecetedQueryMetadataReply consists selected query metadata to show in details for given query ID."
    },
    "v1beta1HistogramItem": {
      "type": "object",
      "properties": {
        "range": {
          "type": "string"
        },
        "frequency": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "HistogramItem represents one item in histogram."
    },
    "v1beta1HistogramReply": {
      "type": "object",
      "properties": {
        "histogram_items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1HistogramItem"
          }
        }
      },
      "description": "HistogramReply is histogram items as a list."
    },
    "v1beta1HistogramRequest": {
      "type": "object",
      "properties": {
        "period_start_from": {
          "type": "string",
          "format": "date-time"
        },
        "period_start_to": {
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1MapFieldEntry"
          }
        },
        "queryid": {
          "type": "string"
        }
      },
      "description": "HistogramRequest defines filtering by time range, labels and queryid."
    },
    "v1beta1ListLabelValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "ListLabelValues is list of label's values."
    },
    "v1beta1MapFieldEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "MapFieldEntry allows to pass labels/dimensions in form like {\"server\": [\"db1\", \"db2\"...]}."
    },
    "v1beta1MetricValues": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "number",
          "format": "float"
        },
        "cnt": {
          "type": "number",
          "format": "float"
        },
        "sum": {
          "type": "number",
          "format": "float"
        },
        "min": {
          "type": "number",
          "format": "float"
        },
        "max": {
          "type": "number",
          "format": "float"
        },
        "avg": {
          "type": "number",
          "format": "float"
        },
        "p99": {
          "type": "number",
          "format": "float"
        },
        "percent_of_total": {
          "type": "number",
          "format": "float"
        }
      },
      "description": "MetricValues is statistics of specific metric."
    },
    "v1beta1MetricsReply": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1beta1MetricValues"
          }
        },
        "text_metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sparkline": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Point"
          }
        },
        "totals": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1beta1MetricValues"
          }
        },
        "fingerprint": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1beta1GetSelectedQueryMetadataReply"
        }
      },
      "description": "MetricsReply defines metrics for specific value of dimension (ex.: host=hostname1 or queryid=1D410B4BE5060972."
    },
    "v1beta1MetricsRequest": {
      "type": "object",
      "properties": {
        "period_start_from": {
          "type": "string",
          "format": "date-time"
        },
        "period_start_to": {
          "type": "string",
          "format": "date-time"
        },
        "filter_by": {
          "type": "string",
          "description": "dimension value: ex: queryid - 1D410B4BE5060972."
        },
        "group_by": {
          "type": "string",
          "description": "one of dimension: queryid | host ..."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1MapFieldEntry"
          }
        },
        "include_only_fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "totals": {
          "type": "boolean",
          "title": "retrieve only values for totals, excluding N/A values"
        }
      },
      "description": "MetricsRequest defines filtering of metrics for specific value of dimension (ex.: host=hostname1 or queryid=1D410B4BE5060972."
    },
    "v1beta1ObjectDetailsLabelsReply": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1beta1ListLabelValues"
          }
        }
      },
      "description": "ObjectDetailsLabelsReply is a map of labels names as keys and labels values as a list."
    },
    "v1beta1ObjectDetailsLabelsRequest": {
      "type": "object",
      "properties": {
        "period_start_from": {
          "type": "string",
          "format": "date-time"
        },
        "period_start_to": {
          "type": "string",
          "format": "date-time"
        },
        "filter_by": {
          "type": "string",
          "description": "dimension value: ex: queryid - 1D410B4BE5060972."
        },
        "group_by": {
          "type": "string",
          "description": "one of dimension: queryid | host ..."
        }
      },
      "description": "ObjectDetailsLabelsRequest defines filtering of object detail's labels for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972."
    },
    "v1beta1Point": {
      "type": "object",
      "properties": {
        "point": {
          "type": "integer",
          "format": "int64",
          "description": "The serial number of the chart point from the largest time in the time interval to the lowest time in the time range."
        },
        "time_frame": {
          "type": "integer",
          "format": "int64",
          "description": "Duration beetween two points."
        },
        "timestamp": {
          "type": "string",
          "description": "Time of point in format RFC3339."
        },
        "load": {
          "type": "number",
          "format": "float",
          "description": "load is query_time / time_range."
        },
        "num_queries_per_sec": {
          "type": "number",
          "format": "float",
          "description": "number of queries in bucket."
        },
        "num_queries_with_errors_per_sec": {
          "type": "number",
          "format": "float",
          "description": "number of queries with errors."
        },
        "num_queries_with_warnings_per_sec": {
          "type": "number",
          "format": "float",
          "description": "number of queries with warnings."
        },
        "m_query_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The statement execution time in seconds."
        },
        "m_lock_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The time to acquire locks in seconds."
        },
        "m_rows_sent_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of rows sent to the client."
        },
        "m_rows_examined_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Number of rows scanned - SELECT."
        },
        "m_rows_affected_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Number of rows changed - UPDATE, DELETE, INSERT."
        },
        "m_rows_read_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of rows read from tables."
        },
        "m_merge_passes_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of merge passes that the sort algorithm has had to do."
        },
        "m_innodb_io_r_ops_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Counts the number of page read operations scheduled."
        },
        "m_innodb_io_r_bytes_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Similar to innodb_IO_r_ops, but the unit is bytes."
        },
        "m_innodb_io_r_wait_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Shows how long (in seconds) it took InnoDB to actually read the data from storage."
        },
        "m_innodb_rec_lock_wait_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Shows how long (in seconds) the query waited for row locks."
        },
        "m_innodb_queue_wait_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution."
        },
        "m_innodb_pages_distinct_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Counts approximately the number of unique pages the query accessed."
        },
        "m_query_length_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Shows how long the query is."
        },
        "m_bytes_sent_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of bytes sent to all clients."
        },
        "m_tmp_tables_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Number of temporary tables created on memory for the query."
        },
        "m_tmp_disk_tables_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Number of temporary tables created on disk for the query."
        },
        "m_tmp_table_sizes_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total Size in bytes for all temporary tables used in the query."
        },
        "m_qc_hit_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Boolean metrics:\n- *_sum_per_sec - how many times this matric was true.\n\nQuery Cache hits."
        },
        "m_full_scan_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The query performed a full table scan."
        },
        "m_full_join_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The query performed a full join (a join without indexes)."
        },
        "m_tmp_table_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The query created an implicit internal temporary table."
        },
        "m_tmp_table_on_disk_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The querys temporary table was stored on disk."
        },
        "m_filesort_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The query used a filesort."
        },
        "m_filesort_on_disk_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The filesort was performed on disk."
        },
        "m_select_full_range_join_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of joins that used a range search on a reference table."
        },
        "m_select_range_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of joins that used ranges on the first table."
        },
        "m_select_range_check_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of joins without keys that check for key usage after each row."
        },
        "m_sort_range_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of sorts that were done using ranges."
        },
        "m_sort_rows_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of sorted rows."
        },
        "m_sort_scan_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of sorts that were done by scanning the table."
        },
        "m_no_index_used_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of queries without index."
        },
        "m_no_good_index_used_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of queries without good index."
        },
        "m_docs_returned_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "MongoDB metrics.\n\nThe number of returned documents."
        },
        "m_response_length_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The response length of the query result in bytes."
        },
        "m_docs_scanned_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "The number of scanned documents."
        },
        "m_shared_blks_hit_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "PostgreSQL metrics.\n\nTotal number of shared block cache hits by the statement."
        },
        "m_shared_blks_read_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of shared blocks read by the statement."
        },
        "m_shared_blks_dirtied_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of shared blocks dirtied by the statement."
        },
        "m_shared_blks_written_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of shared blocks written by the statement."
        },
        "m_local_blks_hit_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of local block cache hits by the statement."
        },
        "m_local_blks_read_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of local blocks read by the statement."
        },
        "m_local_blks_dirtied_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of local blocks dirtied by the statement."
        },
        "m_local_blks_written_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of local blocks written by the statement."
        },
        "m_temp_blks_read_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of temp blocks read by the statement."
        },
        "m_temp_blks_written_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of temp blocks written by the statement."
        },
        "m_blk_read_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)."
        },
        "m_blk_write_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)."
        },
        "m_cpu_user_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total time user spent in query."
        },
        "m_cpu_sys_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total time system spent in query."
        },
        "m_plans_calls_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of planned calls.",
          "title": "pg_stat_monitor 0.9 metrics"
        },
        "m_wal_records_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of WAL (Write-ahead logging) records."
        },
        "m_wal_fpi_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total number of FPI (full page images) in WAL (Write-ahead logging) records."
        },
        "m_wal_bytes_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Total bytes of WAL (Write-ahead logging) records."
        },
        "m_plan_time_sum_per_sec": {
          "type": "number",
          "format": "float",
          "description": "Plan time in per seconds."
        }
      },
      "description": "Point contains values that represents abscissa (time) and ordinate (volume etc.)\nof every point in a coordinate system of Sparklines."
    },
    "v1beta1QueryExample": {
      "type": "object",
      "properties": {
        "example": {
          "type": "string"
        },
        "example_format": {
          "$ref": "#/definitions/v1beta1ExampleFormat",
          "description": "Deprecated: should not be used, should be removed."
        },
        "example_type": {
          "$ref": "#/definitions/v1beta1ExampleType"
        },
        "is_truncated": {
          "type": "integer",
          "format": "int64"
        },
        "placeholders_count": {
          "type": "integer",
          "format": "int64"
        },
        "explain_fingerprint": {
          "type": "string"
        },
        "query_id": {
          "type": "string"
        },
        "example_metrics": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "service_type": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "tables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "QueryExample shows query examples and their metrics."
    },
    "v1beta1QueryExampleReply": {
      "type": "object",
      "properties": {
        "query_examples": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1QueryExample"
          }
        }
      },
      "description": "QueryExampleReply list of query examples."
    },
    "v1beta1QueryExampleRequest": {
      "type": "object",
      "properties": {
        "period_start_from": {
          "type": "string",
          "format": "date-time"
        },
        "period_start_to": {
          "type": "string",
          "format": "date-time"
        },
        "filter_by": {
          "type": "string",
          "description": "dimension value: ex: queryid - 1D410B4BE5060972."
        },
        "group_by": {
          "type": "string",
          "description": "one of dimension: queryid | host ..."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1MapFieldEntry"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "QueryExampleRequest defines filtering of query examples for specific value of\ndimension (ex.: host=hostname1 or queryid=1D410B4BE5060972."
    },
    "v1beta1QueryExistsRequest": {
      "type": "object",
      "properties": {
        "serviceid": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      },
      "description": "QueryExistsRequest check if provided query exists or not."
    },
    "v1beta1QueryPlanReply": {
      "type": "object",
      "properties": {
        "planid": {
          "type": "string"
        },
        "query_plan": {
          "type": "string"
        }
      },
      "description": "QueryPlanReply contains planid and query_plan."
    },
    "v1beta1QueryPlanRequest": {
      "type": "object",
      "properties": {
        "queryid": {
          "type": "string"
        }
      },
      "description": "QueryPlanRequest defines filtering by queryid."
    },
    "v1beta1SchemaByQueryIDReply": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "string"
        }
      },
      "description": "SchemaByQueryIDReply is schema for given query ID and service ID."
    },
    "v1beta1SchemaByQueryIDRequest": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "string"
        },
        "query_id": {
          "type": "string"
        }
      },
      "description": "SchemaByQueryIDRequest returns schema for given query ID and service ID."
    }
  }
}
