// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qanpb/metrics.proto

package qanpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MetricsRequest defines filtering of metrics for specific value of dimention (ex.: host=hostname1 or queryid=1D410B4BE5060972.
type MetricsRequest struct {
	PeriodStartFrom      *timestamp.Timestamp `protobuf:"bytes,1,opt,name=period_start_from,json=periodStartFrom,proto3" json:"period_start_from,omitempty"`
	PeriodStartTo        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=period_start_to,json=periodStartTo,proto3" json:"period_start_to,omitempty"`
	FilterBy             string               `protobuf:"bytes,3,opt,name=filter_by,json=filterBy,proto3" json:"filter_by,omitempty"`
	GroupBy              string               `protobuf:"bytes,4,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Labels               []*MapFieldEntry     `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	IncludeOnlyFields    []string             `protobuf:"bytes,6,rep,name=include_only_fields,json=includeOnlyFields,proto3" json:"include_only_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MetricsRequest) Reset()         { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()    {}
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1582d9b086d4b7, []int{0}
}

func (m *MetricsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsRequest.Unmarshal(m, b)
}
func (m *MetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsRequest.Marshal(b, m, deterministic)
}
func (m *MetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsRequest.Merge(m, src)
}
func (m *MetricsRequest) XXX_Size() int {
	return xxx_messageInfo_MetricsRequest.Size(m)
}
func (m *MetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsRequest proto.InternalMessageInfo

func (m *MetricsRequest) GetPeriodStartFrom() *timestamp.Timestamp {
	if m != nil {
		return m.PeriodStartFrom
	}
	return nil
}

func (m *MetricsRequest) GetPeriodStartTo() *timestamp.Timestamp {
	if m != nil {
		return m.PeriodStartTo
	}
	return nil
}

func (m *MetricsRequest) GetFilterBy() string {
	if m != nil {
		return m.FilterBy
	}
	return ""
}

func (m *MetricsRequest) GetGroupBy() string {
	if m != nil {
		return m.GroupBy
	}
	return ""
}

func (m *MetricsRequest) GetLabels() []*MapFieldEntry {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsRequest) GetIncludeOnlyFields() []string {
	if m != nil {
		return m.IncludeOnlyFields
	}
	return nil
}

// MapFieldEntry allows to pass labels/dimentions in form like {"d_server": ["db1", "db2"...]}.
type MapFieldEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapFieldEntry) Reset()         { *m = MapFieldEntry{} }
func (m *MapFieldEntry) String() string { return proto.CompactTextString(m) }
func (*MapFieldEntry) ProtoMessage()    {}
func (*MapFieldEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1582d9b086d4b7, []int{1}
}

func (m *MapFieldEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapFieldEntry.Unmarshal(m, b)
}
func (m *MapFieldEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapFieldEntry.Marshal(b, m, deterministic)
}
func (m *MapFieldEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapFieldEntry.Merge(m, src)
}
func (m *MapFieldEntry) XXX_Size() int {
	return xxx_messageInfo_MapFieldEntry.Size(m)
}
func (m *MapFieldEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MapFieldEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MapFieldEntry proto.InternalMessageInfo

func (m *MapFieldEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MapFieldEntry) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// MetricsReply defines metrics for specific value of dimention (ex.: host=hostname1 or queryid=1D410B4BE5060972.
type MetricsReply struct {
	Metrics              map[string]*MetricValues `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MetricsReply) Reset()         { *m = MetricsReply{} }
func (m *MetricsReply) String() string { return proto.CompactTextString(m) }
func (*MetricsReply) ProtoMessage()    {}
func (*MetricsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1582d9b086d4b7, []int{2}
}

func (m *MetricsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsReply.Unmarshal(m, b)
}
func (m *MetricsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsReply.Marshal(b, m, deterministic)
}
func (m *MetricsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsReply.Merge(m, src)
}
func (m *MetricsReply) XXX_Size() int {
	return xxx_messageInfo_MetricsReply.Size(m)
}
func (m *MetricsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsReply proto.InternalMessageInfo

func (m *MetricsReply) GetMetrics() map[string]*MetricValues {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// MetricValues is statistics of specific metric.
type MetricValues struct {
	Rate                 float32  `protobuf:"fixed32,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Cnt                  float32  `protobuf:"fixed32,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Sum                  float32  `protobuf:"fixed32,3,opt,name=sum,proto3" json:"sum,omitempty"`
	Min                  float32  `protobuf:"fixed32,4,opt,name=min,proto3" json:"min,omitempty"`
	Max                  float32  `protobuf:"fixed32,5,opt,name=max,proto3" json:"max,omitempty"`
	Avg                  float32  `protobuf:"fixed32,6,opt,name=avg,proto3" json:"avg,omitempty"`
	P99                  float32  `protobuf:"fixed32,7,opt,name=p99,proto3" json:"p99,omitempty"`
	PTotal               float32  `protobuf:"fixed32,8,opt,name=p_total,json=pTotal,proto3" json:"p_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricValues) Reset()         { *m = MetricValues{} }
func (m *MetricValues) String() string { return proto.CompactTextString(m) }
func (*MetricValues) ProtoMessage()    {}
func (*MetricValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1582d9b086d4b7, []int{3}
}

func (m *MetricValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricValues.Unmarshal(m, b)
}
func (m *MetricValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricValues.Marshal(b, m, deterministic)
}
func (m *MetricValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricValues.Merge(m, src)
}
func (m *MetricValues) XXX_Size() int {
	return xxx_messageInfo_MetricValues.Size(m)
}
func (m *MetricValues) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricValues.DiscardUnknown(m)
}

var xxx_messageInfo_MetricValues proto.InternalMessageInfo

func (m *MetricValues) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *MetricValues) GetCnt() float32 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *MetricValues) GetSum() float32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *MetricValues) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *MetricValues) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MetricValues) GetAvg() float32 {
	if m != nil {
		return m.Avg
	}
	return 0
}

func (m *MetricValues) GetP99() float32 {
	if m != nil {
		return m.P99
	}
	return 0
}

func (m *MetricValues) GetPTotal() float32 {
	if m != nil {
		return m.PTotal
	}
	return 0
}

func init() {
	proto.RegisterType((*MetricsRequest)(nil), "qan.MetricsRequest")
	proto.RegisterType((*MapFieldEntry)(nil), "qan.MapFieldEntry")
	proto.RegisterType((*MetricsReply)(nil), "qan.MetricsReply")
	proto.RegisterMapType((map[string]*MetricValues)(nil), "qan.MetricsReply.MetricsEntry")
	proto.RegisterType((*MetricValues)(nil), "qan.MetricValues")
}

func init() { proto.RegisterFile("qanpb/metrics.proto", fileDescriptor_4d1582d9b086d4b7) }

var fileDescriptor_4d1582d9b086d4b7 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0x56, 0xd3, 0xb5, 0x59, 0xbd, 0x7f, 0xff, 0xa8, 0x8b, 0x84, 0x09, 0x68, 0x44, 0x01, 0x89,
	0x6a, 0x62, 0x89, 0x18, 0x17, 0xac, 0xbb, 0x5b, 0xa5, 0x6d, 0x57, 0x13, 0xc2, 0x54, 0x5c, 0x70,
	0x13, 0xb9, 0xad, 0x13, 0x45, 0x38, 0xb6, 0x6b, 0x3b, 0x65, 0xb9, 0xe5, 0x11, 0xe0, 0x82, 0x47,
	0xe0, 0x96, 0x77, 0xe1, 0x15, 0x78, 0x10, 0x64, 0x27, 0x1d, 0x9b, 0x26, 0xc4, 0x55, 0xce, 0xf9,
	0xce, 0xe7, 0xef, 0x7c, 0x39, 0xc7, 0x06, 0xa3, 0x15, 0xe1, 0x72, 0x9e, 0x94, 0xd4, 0xa8, 0x62,
	0xa1, 0x63, 0xa9, 0x84, 0x11, 0xb0, 0xbb, 0x22, 0x3c, 0x78, 0x9c, 0x0b, 0x91, 0x33, 0x9a, 0x10,
	0x59, 0x24, 0x84, 0x73, 0x61, 0x88, 0x29, 0x04, 0x6f, 0x29, 0xc1, 0x93, 0xb6, 0xea, 0xb2, 0x79,
	0x95, 0x25, 0xa6, 0x28, 0xa9, 0x36, 0xa4, 0x94, 0x2d, 0xe1, 0x85, 0xfb, 0x2c, 0x0e, 0x73, 0xca,
	0x0f, 0xf5, 0x27, 0x92, 0xe7, 0x54, 0x25, 0x42, 0x3a, 0x89, 0xbb, 0x72, 0xd1, 0x0f, 0x0f, 0xfc,
	0x7f, 0xd9, 0x78, 0xc0, 0x74, 0x55, 0x51, 0x6d, 0xe0, 0x39, 0x18, 0x4a, 0xaa, 0x0a, 0xb1, 0x4c,
	0xb5, 0x21, 0xca, 0xa4, 0x99, 0x12, 0x25, 0xea, 0x84, 0x9d, 0xf1, 0xce, 0x51, 0x10, 0x37, 0xdd,
	0xe3, 0x4d, 0xf7, 0x78, 0xb6, 0xe9, 0x8e, 0xf7, 0x9a, 0x43, 0xef, 0xec, 0x99, 0x73, 0x25, 0x4a,
	0x38, 0x05, 0x7b, 0xb7, 0x74, 0x8c, 0x40, 0xde, 0x3f, 0x55, 0x76, 0x6f, 0xa8, 0xcc, 0x04, 0x7c,
	0x04, 0x06, 0x59, 0xc1, 0x0c, 0x55, 0xe9, 0xbc, 0x46, 0xdd, 0xb0, 0x33, 0x1e, 0xe0, 0xed, 0x06,
	0x98, 0xd6, 0xf0, 0x21, 0xd8, 0xce, 0x95, 0xa8, 0xa4, 0xad, 0x6d, 0xb9, 0x9a, 0xef, 0xf2, 0x69,
	0x0d, 0x0f, 0x40, 0x9f, 0x91, 0x39, 0x65, 0x1a, 0xf5, 0xc2, 0xee, 0x78, 0xe7, 0x08, 0xc6, 0x2b,
	0xc2, 0xe3, 0x4b, 0x22, 0xcf, 0x0b, 0xca, 0x96, 0x67, 0xdc, 0xa8, 0x1a, 0xb7, 0x0c, 0x18, 0x83,
	0x51, 0xc1, 0x17, 0xac, 0x5a, 0xd2, 0x54, 0x70, 0x56, 0xa7, 0x99, 0xa5, 0x68, 0xd4, 0x0f, 0xbb,
	0xe3, 0x01, 0x1e, 0xb6, 0xa5, 0x37, 0x9c, 0xd5, 0xee, 0xac, 0x8e, 0x5e, 0x83, 0xdd, 0x5b, 0x42,
	0xf0, 0x1e, 0xe8, 0x7e, 0xa4, 0xb5, 0x1b, 0xd1, 0x00, 0xdb, 0x10, 0xde, 0x07, 0xbd, 0x35, 0x61,
	0x15, 0x45, 0x9e, 0x13, 0x69, 0x92, 0xe8, 0x5b, 0x07, 0xfc, 0x77, 0x3d, 0x6b, 0xc9, 0x6a, 0x78,
	0x0c, 0xfc, 0x76, 0xff, 0xa8, 0xeb, 0x6c, 0xee, 0x37, 0x36, 0x6f, 0x70, 0x36, 0x49, 0x63, 0x79,
	0x43, 0x0f, 0x2e, 0xaf, 0x95, 0xfe, 0x66, 0xe1, 0xf9, 0x1f, 0x0b, 0x76, 0xe6, 0xc3, 0x1b, 0xca,
	0xef, 0x2d, 0xae, 0x5b, 0x57, 0x27, 0xde, 0x71, 0x27, 0xfa, 0x7e, 0xed, 0xac, 0xa9, 0x41, 0x08,
	0xb6, 0x14, 0x31, 0xd4, 0x09, 0x7a, 0xd8, 0xc5, 0xb6, 0xc7, 0x82, 0x1b, 0xa7, 0xe7, 0x61, 0x1b,
	0x5a, 0x44, 0x57, 0xa5, 0xdb, 0x8b, 0x87, 0x6d, 0x68, 0x91, 0xb2, 0xe0, 0x6e, 0x1b, 0x1e, 0xb6,
	0xa1, 0x43, 0xc8, 0x15, 0xea, 0xb5, 0x08, 0xb9, 0xb2, 0x08, 0x59, 0xe7, 0xa8, 0xdf, 0x20, 0x64,
	0x9d, 0x5b, 0x44, 0x4e, 0x26, 0xc8, 0x6f, 0x10, 0x39, 0x99, 0xc0, 0x07, 0xc0, 0x97, 0xa9, 0x11,
	0x86, 0x30, 0xb4, 0xed, 0xd0, 0xbe, 0x9c, 0xd9, 0xec, 0x28, 0x05, 0x7e, 0xfb, 0xe3, 0x70, 0x06,
	0xc0, 0x05, 0x35, 0x9b, 0x6c, 0x74, 0x7b, 0x74, 0xee, 0x2a, 0x07, 0xc3, 0x3b, 0xf3, 0x8c, 0xf6,
	0x3f, 0xff, 0xfc, 0xf5, 0xd5, 0x43, 0xd1, 0x28, 0x59, 0xbf, 0x4c, 0x56, 0x84, 0x27, 0x6d, 0x35,
	0xb9, 0xa0, 0xe6, 0xa4, 0x73, 0x30, 0x7d, 0xfb, 0xe5, 0xf4, 0x02, 0x9f, 0x01, 0x7f, 0x49, 0x33,
	0x52, 0x31, 0x03, 0x4f, 0x00, 0x3c, 0xe5, 0x21, 0x55, 0x4a, 0xa8, 0x50, 0x51, 0x2d, 0x05, 0xd7,
	0x34, 0x86, 0xcf, 0x40, 0x14, 0x84, 0x4f, 0x93, 0x25, 0xcd, 0x0a, 0x5e, 0x34, 0x6f, 0xcb, 0xbd,
	0xe7, 0x33, 0xcb, 0xc3, 0x2d, 0xed, 0x43, 0xcf, 0x61, 0xf3, 0xbe, 0xbb, 0xe7, 0xaf, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x2e, 0xbf, 0xc5, 0x26, 0xf3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	// GetMetrics gets map of metrics for specific filtering.
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/qan.Metrics/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	// GetMetrics gets map of metrics for specific filtering.
	GetMetrics(context.Context, *MetricsRequest) (*MetricsReply, error)
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.Metrics/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _Metrics_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qanpb/metrics.proto",
}
