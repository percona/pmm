syntax = "proto3";

package qan;

// This option is used to set the default error response for all Swagger APIs generated from this file.
// See also header.json.
// It has to be copy&pasted into each file.
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default"
    value: {
      description: "An error response."
      schema: {
        json_schema: {
          ref: "#/definitions/qanpbErrorResponse"
        }
      }
    }
  }
};
option go_package = "qanpb";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Profile of metrics by QueryID, Host etc.
service Profile {
  // GetReport returns list of metrics group by queryid or other dimentions.
  rpc GetReport(ReportRequest) returns (ReportReply) {
    option (google.api.http) = {
      post: "/v1/qan/GetReport"
      body: "*"
    };
  }
}

// ReportRequest defines filtering of metrics report for db server or other dimentions.
message ReportRequest {
  string period_start_from = 1;
  string period_start_to = 2;
  string keyword = 3;
  bool first_seen = 4;
  string group_by = 5;
  repeated ReportMapFieldEntry labels = 6;
  repeated string include_only_fields = 7;
  string order_by = 8;
  uint32 offset = 9;
  uint32 limit = 10;
  repeated string columns = 11;
}

// ReportMapFieldEntry allows to pass labels/dimentions in form like {"d_server": ["db1", "db2"...]}.
message ReportMapFieldEntry {
  string key = 1;
  repeated string value = 2;
}

// ReportReply is list of reports per quieryids, hosts etc.
message ReportReply {
  uint32 total_rows = 1;
  uint32 offset = 2;
  uint32 limit = 3;
  repeated Row rows = 4;
}

// Row define metrics for selected dimention.
message Row {
  uint32 rank = 1;
  string dimension = 2;
  map<string, Metric> metrics = 3;
  repeated Point sparkline = 4;
}

// Metric cell.
message Metric {
  Stat stats = 1;
}

// Stat is statistics of specific metric.
message Stat {
  float rate = 1;
  float cnt = 2;
  float sum = 3;
  float min = 4;
  float max = 5;
  float p99 = 6;
}

// Point contains values that represents abscissa (time) and ordinate (volume etc.)
// of every point in a coordinate system of Sparklines.
message Point {
  map<string, float> values = 1;
}
