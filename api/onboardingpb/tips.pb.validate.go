// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: onboardingpb/tips.proto

package onboardingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetOnboardingStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnboardingStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnboardingStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnboardingStatusRequestMultiError, or nil if none found.
func (m *GetOnboardingStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnboardingStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOnboardingStatusRequestMultiError(errors)
	}

	return nil
}

// GetOnboardingStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetOnboardingStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOnboardingStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnboardingStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnboardingStatusRequestMultiError) AllErrors() []error { return m }

// GetOnboardingStatusRequestValidationError is the validation error returned
// by GetOnboardingStatusRequest.Validate if the designated constraints aren't met.
type GetOnboardingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnboardingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnboardingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnboardingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnboardingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnboardingStatusRequestValidationError) ErrorName() string {
	return "GetOnboardingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnboardingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnboardingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnboardingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnboardingStatusRequestValidationError{}

// Validate checks the field values on TipModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TipModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TipModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TipModelMultiError, or nil
// if none found.
func (m *TipModel) ValidateAll() error {
	return m.validate(true)
}

func (m *TipModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TipId

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return TipModelMultiError(errors)
	}

	return nil
}

// TipModelMultiError is an error wrapping multiple validation errors returned
// by TipModel.ValidateAll() if the designated constraints aren't met.
type TipModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TipModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TipModelMultiError) AllErrors() []error { return m }

// TipModelValidationError is the validation error returned by
// TipModel.Validate if the designated constraints aren't met.
type TipModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TipModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TipModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TipModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TipModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TipModelValidationError) ErrorName() string { return "TipModelValidationError" }

// Error satisfies the builtin error interface
func (e TipModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTipModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TipModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TipModelValidationError{}

// Validate checks the field values on GetOnboardingStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnboardingStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnboardingStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnboardingStatusResponseMultiError, or nil if none found.
func (m *GetOnboardingStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnboardingStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSystemTips() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOnboardingStatusResponseValidationError{
						field:  fmt.Sprintf("SystemTips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOnboardingStatusResponseValidationError{
						field:  fmt.Sprintf("SystemTips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOnboardingStatusResponseValidationError{
					field:  fmt.Sprintf("SystemTips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserTips() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOnboardingStatusResponseValidationError{
						field:  fmt.Sprintf("UserTips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOnboardingStatusResponseValidationError{
						field:  fmt.Sprintf("UserTips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOnboardingStatusResponseValidationError{
					field:  fmt.Sprintf("UserTips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOnboardingStatusResponseMultiError(errors)
	}

	return nil
}

// GetOnboardingStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetOnboardingStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOnboardingStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnboardingStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnboardingStatusResponseMultiError) AllErrors() []error { return m }

// GetOnboardingStatusResponseValidationError is the validation error returned
// by GetOnboardingStatusResponse.Validate if the designated constraints
// aren't met.
type GetOnboardingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnboardingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnboardingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnboardingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnboardingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnboardingStatusResponseValidationError) ErrorName() string {
	return "GetOnboardingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnboardingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnboardingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnboardingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnboardingStatusResponseValidationError{}

// Validate checks the field values on CompleteUserTipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteUserTipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteUserTipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteUserTipRequestMultiError, or nil if none found.
func (m *CompleteUserTipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteUserTipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TipId

	if len(errors) > 0 {
		return CompleteUserTipRequestMultiError(errors)
	}

	return nil
}

// CompleteUserTipRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteUserTipRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteUserTipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteUserTipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteUserTipRequestMultiError) AllErrors() []error { return m }

// CompleteUserTipRequestValidationError is the validation error returned by
// CompleteUserTipRequest.Validate if the designated constraints aren't met.
type CompleteUserTipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteUserTipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteUserTipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteUserTipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteUserTipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteUserTipRequestValidationError) ErrorName() string {
	return "CompleteUserTipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteUserTipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteUserTipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteUserTipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteUserTipRequestValidationError{}

// Validate checks the field values on CompleteUserTipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteUserTipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteUserTipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteUserTipResponseMultiError, or nil if none found.
func (m *CompleteUserTipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteUserTipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteUserTipResponseMultiError(errors)
	}

	return nil
}

// CompleteUserTipResponseMultiError is an error wrapping multiple validation
// errors returned by CompleteUserTipResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteUserTipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteUserTipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteUserTipResponseMultiError) AllErrors() []error { return m }

// CompleteUserTipResponseValidationError is the validation error returned by
// CompleteUserTipResponse.Validate if the designated constraints aren't met.
type CompleteUserTipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteUserTipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteUserTipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteUserTipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteUserTipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteUserTipResponseValidationError) ErrorName() string {
	return "CompleteUserTipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteUserTipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteUserTipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteUserTipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteUserTipResponseValidationError{}
