// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: onboardingpb/tips.proto

package onboardingpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TipService_GetOnboardingStatus_FullMethodName = "/onboardingpb.TipService/GetOnboardingStatus"
	TipService_CompleteUserTip_FullMethodName     = "/onboardingpb.TipService/CompleteUserTip"
)

// TipServiceClient is the client API for TipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TipServiceClient interface {
	// GetTipStatus returns info about tip status
	GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error)
	// CompleteUserTip completes user tip
	CompleteUserTip(ctx context.Context, in *CompleteUserTipRequest, opts ...grpc.CallOption) (*CompleteUserTipResponse, error)
}

type tipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTipServiceClient(cc grpc.ClientConnInterface) TipServiceClient {
	return &tipServiceClient{cc}
}

func (c *tipServiceClient) GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error) {
	out := new(GetOnboardingStatusResponse)
	err := c.cc.Invoke(ctx, TipService_GetOnboardingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tipServiceClient) CompleteUserTip(ctx context.Context, in *CompleteUserTipRequest, opts ...grpc.CallOption) (*CompleteUserTipResponse, error) {
	out := new(CompleteUserTipResponse)
	err := c.cc.Invoke(ctx, TipService_CompleteUserTip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TipServiceServer is the server API for TipService service.
// All implementations must embed UnimplementedTipServiceServer
// for forward compatibility
type TipServiceServer interface {
	// GetTipStatus returns info about tip status
	GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error)
	// CompleteUserTip completes user tip
	CompleteUserTip(context.Context, *CompleteUserTipRequest) (*CompleteUserTipResponse, error)
	mustEmbedUnimplementedTipServiceServer()
}

// UnimplementedTipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTipServiceServer struct{}

func (UnimplementedTipServiceServer) GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingStatus not implemented")
}

func (UnimplementedTipServiceServer) CompleteUserTip(context.Context, *CompleteUserTipRequest) (*CompleteUserTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUserTip not implemented")
}
func (UnimplementedTipServiceServer) mustEmbedUnimplementedTipServiceServer() {}

// UnsafeTipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TipServiceServer will
// result in compilation errors.
type UnsafeTipServiceServer interface {
	mustEmbedUnimplementedTipServiceServer()
}

func RegisterTipServiceServer(s grpc.ServiceRegistrar, srv TipServiceServer) {
	s.RegisterService(&TipService_ServiceDesc, srv)
}

func _TipService_GetOnboardingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).GetOnboardingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TipService_GetOnboardingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).GetOnboardingStatus(ctx, req.(*GetOnboardingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TipService_CompleteUserTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUserTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).CompleteUserTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TipService_CompleteUserTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).CompleteUserTip(ctx, req.(*CompleteUserTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TipService_ServiceDesc is the grpc.ServiceDesc for TipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onboardingpb.TipService",
	HandlerType: (*TipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnboardingStatus",
			Handler:    _TipService_GetOnboardingStatus_Handler,
		},
		{
			MethodName: "CompleteUserTip",
			Handler:    _TipService_CompleteUserTip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboardingpb/tips.proto",
}
