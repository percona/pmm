// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: realtime/v1/realtime.proto

package realtimev1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryState represents the current state of a query
type QueryState int32

const (
	QueryState_UNKNOWN  QueryState = 0
	QueryState_RUNNING  QueryState = 1
	QueryState_WAITING  QueryState = 2
	QueryState_FINISHED QueryState = 3
)

// Enum value maps for QueryState.
var (
	QueryState_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "WAITING",
		3: "FINISHED",
	}
	QueryState_value = map[string]int32{
		"UNKNOWN":  0,
		"RUNNING":  1,
		"WAITING":  2,
		"FINISHED": 3,
	}
)

func (x QueryState) Enum() *QueryState {
	p := new(QueryState)
	*p = x
	return p
}

func (x QueryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryState) Descriptor() protoreflect.EnumDescriptor {
	return file_realtime_v1_realtime_proto_enumTypes[0].Descriptor()
}

func (QueryState) Type() protoreflect.EnumType {
	return &file_realtime_v1_realtime_proto_enumTypes[0]
}

func (x QueryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryState.Descriptor instead.
func (QueryState) EnumDescriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{0}
}

// RealTimeQueryData represents a single query data point
type RealTimeQueryData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Common fields across all database types
	QueryId     string                 `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`          // Unique identifier (hash of normalized query)
	QueryText   string                 `protobuf:"bytes,2,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`    // Full query text (optional based on security settings)
	Fingerprint string                 `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`                 // Normalized query pattern
	Database    string                 `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`                       // Database name
	ClientHost  string                 `protobuf:"bytes,6,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"` // Client host/IP
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                     // When this data was collected
	// Execution details
	State                QueryState `protobuf:"varint,8,opt,name=state,proto3,enum=realtime.v1.QueryState" json:"state,omitempty"`                                  // Current state of the query
	CurrentExecutionTime float64    `protobuf:"fixed64,9,opt,name=current_execution_time,json=currentExecutionTime,proto3" json:"current_execution_time,omitempty"` // Elapsed time for running query (seconds)
	// Database-specific fields
	Mongodb *MongoDBFields `protobuf:"bytes,20,opt,name=mongodb,proto3" json:"mongodb,omitempty"`
	// Service metadata (populated for UI responses, not agent communication)
	ServiceId     string            `protobuf:"bytes,30,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName   string            `protobuf:"bytes,31,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	NodeId        string            `protobuf:"bytes,32,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeName      string            `protobuf:"bytes,33,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Labels        map[string]string `protobuf:"bytes,34,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeQueryData) Reset() {
	*x = RealTimeQueryData{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeQueryData) ProtoMessage() {}

func (x *RealTimeQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeQueryData.ProtoReflect.Descriptor instead.
func (*RealTimeQueryData) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{0}
}

func (x *RealTimeQueryData) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *RealTimeQueryData) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *RealTimeQueryData) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *RealTimeQueryData) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RealTimeQueryData) GetClientHost() string {
	if x != nil {
		return x.ClientHost
	}
	return ""
}

func (x *RealTimeQueryData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RealTimeQueryData) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_UNKNOWN
}

func (x *RealTimeQueryData) GetCurrentExecutionTime() float64 {
	if x != nil {
		return x.CurrentExecutionTime
	}
	return 0
}

func (x *RealTimeQueryData) GetMongodb() *MongoDBFields {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *RealTimeQueryData) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RealTimeQueryData) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RealTimeQueryData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RealTimeQueryData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *RealTimeQueryData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// MongoDB-specific fields
type MongoDBFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Opid          int64                  `protobuf:"varint,1,opt,name=opid,proto3" json:"opid,omitempty"`                                       // Operation ID
	SecsRunning   float64                `protobuf:"fixed64,2,opt,name=secs_running,json=secsRunning,proto3" json:"secs_running,omitempty"`     // Duration the operation has been running
	OperationType string                 `protobuf:"bytes,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // Type of operation (query, update, etc.)
	Namespace     string                 `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`                              // Collection namespace
	PlanSummary   string                 `protobuf:"bytes,5,opt,name=plan_summary,json=planSummary,proto3" json:"plan_summary,omitempty"`       // Query plan summary
	Blocking      bool                   `protobuf:"varint,6,opt,name=blocking,proto3" json:"blocking,omitempty"`                               // Whether operation is blocking others
	CurrentOpRaw  string                 `protobuf:"bytes,7,opt,name=current_op_raw,json=currentOpRaw,proto3" json:"current_op_raw,omitempty"`  // Complete raw currentOp document as JSON
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongoDBFields) Reset() {
	*x = MongoDBFields{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDBFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBFields) ProtoMessage() {}

func (x *MongoDBFields) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBFields.ProtoReflect.Descriptor instead.
func (*MongoDBFields) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{1}
}

func (x *MongoDBFields) GetOpid() int64 {
	if x != nil {
		return x.Opid
	}
	return 0
}

func (x *MongoDBFields) GetSecsRunning() float64 {
	if x != nil {
		return x.SecsRunning
	}
	return 0
}

func (x *MongoDBFields) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *MongoDBFields) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MongoDBFields) GetPlanSummary() string {
	if x != nil {
		return x.PlanSummary
	}
	return ""
}

func (x *MongoDBFields) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

func (x *MongoDBFields) GetCurrentOpRaw() string {
	if x != nil {
		return x.CurrentOpRaw
	}
	return ""
}

// RealTimeAnalyticsRequest is sent from agent to server
type RealTimeAnalyticsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Queries        []*RealTimeQueryData   `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	CollectionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RealTimeAnalyticsRequest) Reset() {
	*x = RealTimeAnalyticsRequest{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeAnalyticsRequest) ProtoMessage() {}

func (x *RealTimeAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*RealTimeAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{2}
}

func (x *RealTimeAnalyticsRequest) GetQueries() []*RealTimeQueryData {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *RealTimeAnalyticsRequest) GetCollectionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionTime
	}
	return nil
}

// RealTimeAnalyticsResponse acknowledges the data receipt
type RealTimeAnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeAnalyticsResponse) Reset() {
	*x = RealTimeAnalyticsResponse{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeAnalyticsResponse) ProtoMessage() {}

func (x *RealTimeAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*RealTimeAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{3}
}

// RealTimeDataRequest is sent from UI to get current data
type RealTimeDataRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServiceIds     []string               `protobuf:"bytes,1,rep,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`              // Filter by specific services (empty = all accessible)
	Limit          int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                         // Maximum number of queries to return (default: 100)
	IncludeHistory bool                   `protobuf:"varint,3,opt,name=include_history,json=includeHistory,proto3" json:"include_history,omitempty"` // Include buffered historical data
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RealTimeDataRequest) Reset() {
	*x = RealTimeDataRequest{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeDataRequest) ProtoMessage() {}

func (x *RealTimeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeDataRequest.ProtoReflect.Descriptor instead.
func (*RealTimeDataRequest) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{4}
}

func (x *RealTimeDataRequest) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

func (x *RealTimeDataRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RealTimeDataRequest) GetIncludeHistory() bool {
	if x != nil {
		return x.IncludeHistory
	}
	return false
}

// RealTimeDataResponse contains the current real-time data
type RealTimeDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*RealTimeQueryData   `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeDataResponse) Reset() {
	*x = RealTimeDataResponse{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeDataResponse) ProtoMessage() {}

func (x *RealTimeDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeDataResponse.ProtoReflect.Descriptor instead.
func (*RealTimeDataResponse) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{5}
}

func (x *RealTimeDataResponse) GetQueries() []*RealTimeQueryData {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *RealTimeDataResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RealTimeDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// EnableRealTimeAnalyticsRequest enables real-time analytics for a service
type EnableRealTimeAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceId     string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Config        *RealTimeConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableRealTimeAnalyticsRequest) Reset() {
	*x = EnableRealTimeAnalyticsRequest{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableRealTimeAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRealTimeAnalyticsRequest) ProtoMessage() {}

func (x *EnableRealTimeAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRealTimeAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*EnableRealTimeAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{6}
}

func (x *EnableRealTimeAnalyticsRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *EnableRealTimeAnalyticsRequest) GetConfig() *RealTimeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// DisableRealTimeAnalyticsRequest disables real-time analytics for a service
type DisableRealTimeAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceId     string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableRealTimeAnalyticsRequest) Reset() {
	*x = DisableRealTimeAnalyticsRequest{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableRealTimeAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRealTimeAnalyticsRequest) ProtoMessage() {}

func (x *DisableRealTimeAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRealTimeAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*DisableRealTimeAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{7}
}

func (x *DisableRealTimeAnalyticsRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// RealTimeConfig contains configuration for real-time analytics
type RealTimeConfig struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	CollectionIntervalSeconds int32                  `protobuf:"varint,1,opt,name=collection_interval_seconds,json=collectionIntervalSeconds,proto3" json:"collection_interval_seconds,omitempty"` // Collection interval (default: 1)
	DisableExamples           bool                   `protobuf:"varint,2,opt,name=disable_examples,json=disableExamples,proto3" json:"disable_examples,omitempty"`                                 // Disable query examples collection
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RealTimeConfig) Reset() {
	*x = RealTimeConfig{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeConfig) ProtoMessage() {}

func (x *RealTimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeConfig.ProtoReflect.Descriptor instead.
func (*RealTimeConfig) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{8}
}

func (x *RealTimeConfig) GetCollectionIntervalSeconds() int32 {
	if x != nil {
		return x.CollectionIntervalSeconds
	}
	return 0
}

func (x *RealTimeConfig) GetDisableExamples() bool {
	if x != nil {
		return x.DisableExamples
	}
	return false
}

// ConfigResponse acknowledges configuration changes
type ConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	mi := &file_realtime_v1_realtime_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_realtime_v1_realtime_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_realtime_v1_realtime_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_realtime_v1_realtime_proto protoreflect.FileDescriptor

const file_realtime_v1_realtime_proto_rawDesc = "" +
	"\n" +
	"\x1arealtime/v1/realtime.proto\x12\vrealtime.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf8\x04\n" +
	"\x11RealTimeQueryData\x12\x19\n" +
	"\bquery_id\x18\x01 \x01(\tR\aqueryId\x12\x1d\n" +
	"\n" +
	"query_text\x18\x02 \x01(\tR\tqueryText\x12 \n" +
	"\vfingerprint\x18\x03 \x01(\tR\vfingerprint\x12\x1a\n" +
	"\bdatabase\x18\x04 \x01(\tR\bdatabase\x12\x1f\n" +
	"\vclient_host\x18\x06 \x01(\tR\n" +
	"clientHost\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12-\n" +
	"\x05state\x18\b \x01(\x0e2\x17.realtime.v1.QueryStateR\x05state\x124\n" +
	"\x16current_execution_time\x18\t \x01(\x01R\x14currentExecutionTime\x124\n" +
	"\amongodb\x18\x14 \x01(\v2\x1a.realtime.v1.MongoDBFieldsR\amongodb\x12\x1d\n" +
	"\n" +
	"service_id\x18\x1e \x01(\tR\tserviceId\x12!\n" +
	"\fservice_name\x18\x1f \x01(\tR\vserviceName\x12\x17\n" +
	"\anode_id\x18  \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_name\x18! \x01(\tR\bnodeName\x12B\n" +
	"\x06labels\x18\" \x03(\v2*.realtime.v1.RealTimeQueryData.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\x01\n" +
	"\rMongoDBFields\x12\x12\n" +
	"\x04opid\x18\x01 \x01(\x03R\x04opid\x12!\n" +
	"\fsecs_running\x18\x02 \x01(\x01R\vsecsRunning\x12%\n" +
	"\x0eoperation_type\x18\x03 \x01(\tR\roperationType\x12\x1c\n" +
	"\tnamespace\x18\x04 \x01(\tR\tnamespace\x12!\n" +
	"\fplan_summary\x18\x05 \x01(\tR\vplanSummary\x12\x1a\n" +
	"\bblocking\x18\x06 \x01(\bR\bblocking\x12$\n" +
	"\x0ecurrent_op_raw\x18\a \x01(\tR\fcurrentOpRaw\"\x99\x01\n" +
	"\x18RealTimeAnalyticsRequest\x128\n" +
	"\aqueries\x18\x01 \x03(\v2\x1e.realtime.v1.RealTimeQueryDataR\aqueries\x12C\n" +
	"\x0fcollection_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0ecollectionTime\"\x1b\n" +
	"\x19RealTimeAnalyticsResponse\"u\n" +
	"\x13RealTimeDataRequest\x12\x1f\n" +
	"\vservice_ids\x18\x01 \x03(\tR\n" +
	"serviceIds\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12'\n" +
	"\x0finclude_history\x18\x03 \x01(\bR\x0eincludeHistory\"\x8c\x01\n" +
	"\x14RealTimeDataResponse\x128\n" +
	"\aqueries\x18\x01 \x03(\v2\x1e.realtime.v1.RealTimeQueryDataR\aqueries\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"t\n" +
	"\x1eEnableRealTimeAnalyticsRequest\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x123\n" +
	"\x06config\x18\x02 \x01(\v2\x1b.realtime.v1.RealTimeConfigR\x06config\"@\n" +
	"\x1fDisableRealTimeAnalyticsRequest\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\"{\n" +
	"\x0eRealTimeConfig\x12>\n" +
	"\x1bcollection_interval_seconds\x18\x01 \x01(\x05R\x19collectionIntervalSeconds\x12)\n" +
	"\x10disable_examples\x18\x02 \x01(\bR\x0fdisableExamples\"D\n" +
	"\x0eConfigResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*A\n" +
	"\n" +
	"QueryState\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\v\n" +
	"\aWAITING\x10\x02\x12\f\n" +
	"\bFINISHED\x10\x032\xff\x03\n" +
	"\x18RealTimeAnalyticsService\x12a\n" +
	"\x10SendRealTimeData\x12%.realtime.v1.RealTimeAnalyticsRequest\x1a&.realtime.v1.RealTimeAnalyticsResponse\x12q\n" +
	"\x0fGetRealTimeData\x12 .realtime.v1.RealTimeDataRequest\x1a!.realtime.v1.RealTimeDataResponse\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/v1/realtime/data\x12\x83\x01\n" +
	"\x17EnableRealTimeAnalytics\x12+.realtime.v1.EnableRealTimeAnalyticsRequest\x1a\x1b.realtime.v1.ConfigResponse\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/realtime/enable\x12\x86\x01\n" +
	"\x18DisableRealTimeAnalytics\x12,.realtime.v1.DisableRealTimeAnalyticsRequest\x1a\x1b.realtime.v1.ConfigResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/v1/realtime/disableB\xa0\x01\n" +
	"\x0fcom.realtime.v1B\rRealtimeProtoP\x01Z1github.com/percona/pmm/api/realtime/v1;realtimev1\xa2\x02\x03RXX\xaa\x02\vRealtime.V1\xca\x02\vRealtime\\V1\xe2\x02\x17Realtime\\V1\\GPBMetadata\xea\x02\fRealtime::V1b\x06proto3"

var (
	file_realtime_v1_realtime_proto_rawDescOnce sync.Once
	file_realtime_v1_realtime_proto_rawDescData []byte
)

func file_realtime_v1_realtime_proto_rawDescGZIP() []byte {
	file_realtime_v1_realtime_proto_rawDescOnce.Do(func() {
		file_realtime_v1_realtime_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_realtime_v1_realtime_proto_rawDesc), len(file_realtime_v1_realtime_proto_rawDesc)))
	})
	return file_realtime_v1_realtime_proto_rawDescData
}

var (
	file_realtime_v1_realtime_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_realtime_v1_realtime_proto_msgTypes  = make([]protoimpl.MessageInfo, 11)
	file_realtime_v1_realtime_proto_goTypes   = []any{
		(QueryState)(0),                         // 0: realtime.v1.QueryState
		(*RealTimeQueryData)(nil),               // 1: realtime.v1.RealTimeQueryData
		(*MongoDBFields)(nil),                   // 2: realtime.v1.MongoDBFields
		(*RealTimeAnalyticsRequest)(nil),        // 3: realtime.v1.RealTimeAnalyticsRequest
		(*RealTimeAnalyticsResponse)(nil),       // 4: realtime.v1.RealTimeAnalyticsResponse
		(*RealTimeDataRequest)(nil),             // 5: realtime.v1.RealTimeDataRequest
		(*RealTimeDataResponse)(nil),            // 6: realtime.v1.RealTimeDataResponse
		(*EnableRealTimeAnalyticsRequest)(nil),  // 7: realtime.v1.EnableRealTimeAnalyticsRequest
		(*DisableRealTimeAnalyticsRequest)(nil), // 8: realtime.v1.DisableRealTimeAnalyticsRequest
		(*RealTimeConfig)(nil),                  // 9: realtime.v1.RealTimeConfig
		(*ConfigResponse)(nil),                  // 10: realtime.v1.ConfigResponse
		nil,                                     // 11: realtime.v1.RealTimeQueryData.LabelsEntry
		(*timestamppb.Timestamp)(nil),           // 12: google.protobuf.Timestamp
	}
)

var file_realtime_v1_realtime_proto_depIdxs = []int32{
	12, // 0: realtime.v1.RealTimeQueryData.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: realtime.v1.RealTimeQueryData.state:type_name -> realtime.v1.QueryState
	2,  // 2: realtime.v1.RealTimeQueryData.mongodb:type_name -> realtime.v1.MongoDBFields
	11, // 3: realtime.v1.RealTimeQueryData.labels:type_name -> realtime.v1.RealTimeQueryData.LabelsEntry
	1,  // 4: realtime.v1.RealTimeAnalyticsRequest.queries:type_name -> realtime.v1.RealTimeQueryData
	12, // 5: realtime.v1.RealTimeAnalyticsRequest.collection_time:type_name -> google.protobuf.Timestamp
	1,  // 6: realtime.v1.RealTimeDataResponse.queries:type_name -> realtime.v1.RealTimeQueryData
	9,  // 7: realtime.v1.EnableRealTimeAnalyticsRequest.config:type_name -> realtime.v1.RealTimeConfig
	3,  // 8: realtime.v1.RealTimeAnalyticsService.SendRealTimeData:input_type -> realtime.v1.RealTimeAnalyticsRequest
	5,  // 9: realtime.v1.RealTimeAnalyticsService.GetRealTimeData:input_type -> realtime.v1.RealTimeDataRequest
	7,  // 10: realtime.v1.RealTimeAnalyticsService.EnableRealTimeAnalytics:input_type -> realtime.v1.EnableRealTimeAnalyticsRequest
	8,  // 11: realtime.v1.RealTimeAnalyticsService.DisableRealTimeAnalytics:input_type -> realtime.v1.DisableRealTimeAnalyticsRequest
	4,  // 12: realtime.v1.RealTimeAnalyticsService.SendRealTimeData:output_type -> realtime.v1.RealTimeAnalyticsResponse
	6,  // 13: realtime.v1.RealTimeAnalyticsService.GetRealTimeData:output_type -> realtime.v1.RealTimeDataResponse
	10, // 14: realtime.v1.RealTimeAnalyticsService.EnableRealTimeAnalytics:output_type -> realtime.v1.ConfigResponse
	10, // 15: realtime.v1.RealTimeAnalyticsService.DisableRealTimeAnalytics:output_type -> realtime.v1.ConfigResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_realtime_v1_realtime_proto_init() }
func file_realtime_v1_realtime_proto_init() {
	if File_realtime_v1_realtime_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_realtime_v1_realtime_proto_rawDesc), len(file_realtime_v1_realtime_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_realtime_v1_realtime_proto_goTypes,
		DependencyIndexes: file_realtime_v1_realtime_proto_depIdxs,
		EnumInfos:         file_realtime_v1_realtime_proto_enumTypes,
		MessageInfos:      file_realtime_v1_realtime_proto_msgTypes,
	}.Build()
	File_realtime_v1_realtime_proto = out.File
	file_realtime_v1_realtime_proto_goTypes = nil
	file_realtime_v1_realtime_proto_depIdxs = nil
}
