// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: realtime/v1/realtime.proto

package realtimev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RealTimeAnalyticsService_SendRealTimeData_FullMethodName         = "/realtime.v1.RealTimeAnalyticsService/SendRealTimeData"
	RealTimeAnalyticsService_GetRealTimeData_FullMethodName          = "/realtime.v1.RealTimeAnalyticsService/GetRealTimeData"
	RealTimeAnalyticsService_EnableRealTimeAnalytics_FullMethodName  = "/realtime.v1.RealTimeAnalyticsService/EnableRealTimeAnalytics"
	RealTimeAnalyticsService_DisableRealTimeAnalytics_FullMethodName = "/realtime.v1.RealTimeAnalyticsService/DisableRealTimeAnalytics"
)

// RealTimeAnalyticsServiceClient is the client API for RealTimeAnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RealTimeAnalyticsService defines the gRPC service
type RealTimeAnalyticsServiceClient interface {
	// Agent-to-Server communication
	SendRealTimeData(ctx context.Context, in *RealTimeAnalyticsRequest, opts ...grpc.CallOption) (*RealTimeAnalyticsResponse, error)
	// UI-to-Server communication (via HTTP gateway)
	GetRealTimeData(ctx context.Context, in *RealTimeDataRequest, opts ...grpc.CallOption) (*RealTimeDataResponse, error)
	// Configuration management
	EnableRealTimeAnalytics(ctx context.Context, in *EnableRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	DisableRealTimeAnalytics(ctx context.Context, in *DisableRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type realTimeAnalyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealTimeAnalyticsServiceClient(cc grpc.ClientConnInterface) RealTimeAnalyticsServiceClient {
	return &realTimeAnalyticsServiceClient{cc}
}

func (c *realTimeAnalyticsServiceClient) SendRealTimeData(ctx context.Context, in *RealTimeAnalyticsRequest, opts ...grpc.CallOption) (*RealTimeAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealTimeAnalyticsResponse)
	err := c.cc.Invoke(ctx, RealTimeAnalyticsService_SendRealTimeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeAnalyticsServiceClient) GetRealTimeData(ctx context.Context, in *RealTimeDataRequest, opts ...grpc.CallOption) (*RealTimeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealTimeDataResponse)
	err := c.cc.Invoke(ctx, RealTimeAnalyticsService_GetRealTimeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeAnalyticsServiceClient) EnableRealTimeAnalytics(ctx context.Context, in *EnableRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, RealTimeAnalyticsService_EnableRealTimeAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeAnalyticsServiceClient) DisableRealTimeAnalytics(ctx context.Context, in *DisableRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, RealTimeAnalyticsService_DisableRealTimeAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealTimeAnalyticsServiceServer is the server API for RealTimeAnalyticsService service.
// All implementations must embed UnimplementedRealTimeAnalyticsServiceServer
// for forward compatibility.
//
// RealTimeAnalyticsService defines the gRPC service
type RealTimeAnalyticsServiceServer interface {
	// Agent-to-Server communication
	SendRealTimeData(context.Context, *RealTimeAnalyticsRequest) (*RealTimeAnalyticsResponse, error)
	// UI-to-Server communication (via HTTP gateway)
	GetRealTimeData(context.Context, *RealTimeDataRequest) (*RealTimeDataResponse, error)
	// Configuration management
	EnableRealTimeAnalytics(context.Context, *EnableRealTimeAnalyticsRequest) (*ConfigResponse, error)
	DisableRealTimeAnalytics(context.Context, *DisableRealTimeAnalyticsRequest) (*ConfigResponse, error)
	mustEmbedUnimplementedRealTimeAnalyticsServiceServer()
}

// UnimplementedRealTimeAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRealTimeAnalyticsServiceServer struct{}

func (UnimplementedRealTimeAnalyticsServiceServer) SendRealTimeData(context.Context, *RealTimeAnalyticsRequest) (*RealTimeAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRealTimeData not implemented")
}

func (UnimplementedRealTimeAnalyticsServiceServer) GetRealTimeData(context.Context, *RealTimeDataRequest) (*RealTimeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeData not implemented")
}

func (UnimplementedRealTimeAnalyticsServiceServer) EnableRealTimeAnalytics(context.Context, *EnableRealTimeAnalyticsRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRealTimeAnalytics not implemented")
}

func (UnimplementedRealTimeAnalyticsServiceServer) DisableRealTimeAnalytics(context.Context, *DisableRealTimeAnalyticsRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRealTimeAnalytics not implemented")
}

func (UnimplementedRealTimeAnalyticsServiceServer) mustEmbedUnimplementedRealTimeAnalyticsServiceServer() {
}
func (UnimplementedRealTimeAnalyticsServiceServer) testEmbeddedByValue() {}

// UnsafeRealTimeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealTimeAnalyticsServiceServer will
// result in compilation errors.
type UnsafeRealTimeAnalyticsServiceServer interface {
	mustEmbedUnimplementedRealTimeAnalyticsServiceServer()
}

func RegisterRealTimeAnalyticsServiceServer(s grpc.ServiceRegistrar, srv RealTimeAnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRealTimeAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RealTimeAnalyticsService_ServiceDesc, srv)
}

func _RealTimeAnalyticsService_SendRealTimeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealTimeAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeAnalyticsServiceServer).SendRealTimeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeAnalyticsService_SendRealTimeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeAnalyticsServiceServer).SendRealTimeData(ctx, req.(*RealTimeAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeAnalyticsService_GetRealTimeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealTimeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeAnalyticsServiceServer).GetRealTimeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeAnalyticsService_GetRealTimeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeAnalyticsServiceServer).GetRealTimeData(ctx, req.(*RealTimeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeAnalyticsService_EnableRealTimeAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRealTimeAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeAnalyticsServiceServer).EnableRealTimeAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeAnalyticsService_EnableRealTimeAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeAnalyticsServiceServer).EnableRealTimeAnalytics(ctx, req.(*EnableRealTimeAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeAnalyticsService_DisableRealTimeAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRealTimeAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeAnalyticsServiceServer).DisableRealTimeAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeAnalyticsService_DisableRealTimeAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeAnalyticsServiceServer).DisableRealTimeAnalytics(ctx, req.(*DisableRealTimeAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealTimeAnalyticsService_ServiceDesc is the grpc.ServiceDesc for RealTimeAnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealTimeAnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtime.v1.RealTimeAnalyticsService",
	HandlerType: (*RealTimeAnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRealTimeData",
			Handler:    _RealTimeAnalyticsService_SendRealTimeData_Handler,
		},
		{
			MethodName: "GetRealTimeData",
			Handler:    _RealTimeAnalyticsService_GetRealTimeData_Handler,
		},
		{
			MethodName: "EnableRealTimeAnalytics",
			Handler:    _RealTimeAnalyticsService_EnableRealTimeAnalytics_Handler,
		},
		{
			MethodName: "DisableRealTimeAnalytics",
			Handler:    _RealTimeAnalyticsService_DisableRealTimeAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realtime/v1/realtime.proto",
}
