// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: backup/v1/restores.proto

package backupv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RestoreService_ListRestores_FullMethodName  = "/backup.v1.RestoreService/ListRestores"
	RestoreService_GetLogs_FullMethodName       = "/backup.v1.RestoreService/GetLogs"
	RestoreService_RestoreBackup_FullMethodName = "/backup.v1.RestoreService/RestoreBackup"
)

// RestoreServiceClient is the client API for RestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestoreServiceClient interface {
	// ListRestores returns a list of all backup restore history items.
	ListRestores(ctx context.Context, in *ListRestoresRequest, opts ...grpc.CallOption) (*ListRestoresResponse, error)
	// GetLogs returns logs from the underlying tools for a restore job.
	GetLogs(ctx context.Context, in *RestoreServiceGetLogsRequest, opts ...grpc.CallOption) (*RestoreServiceGetLogsResponse, error)
	// RestoreBackup requests the backup restore.
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error)
}

type restoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestoreServiceClient(cc grpc.ClientConnInterface) RestoreServiceClient {
	return &restoreServiceClient{cc}
}

func (c *restoreServiceClient) ListRestores(ctx context.Context, in *ListRestoresRequest, opts ...grpc.CallOption) (*ListRestoresResponse, error) {
	out := new(ListRestoresResponse)
	err := c.cc.Invoke(ctx, RestoreService_ListRestores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) GetLogs(ctx context.Context, in *RestoreServiceGetLogsRequest, opts ...grpc.CallOption) (*RestoreServiceGetLogsResponse, error) {
	out := new(RestoreServiceGetLogsResponse)
	err := c.cc.Invoke(ctx, RestoreService_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error) {
	out := new(RestoreBackupResponse)
	err := c.cc.Invoke(ctx, RestoreService_RestoreBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestoreServiceServer is the server API for RestoreService service.
// All implementations must embed UnimplementedRestoreServiceServer
// for forward compatibility
type RestoreServiceServer interface {
	// ListRestores returns a list of all backup restore history items.
	ListRestores(context.Context, *ListRestoresRequest) (*ListRestoresResponse, error)
	// GetLogs returns logs from the underlying tools for a restore job.
	GetLogs(context.Context, *RestoreServiceGetLogsRequest) (*RestoreServiceGetLogsResponse, error)
	// RestoreBackup requests the backup restore.
	RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error)
	mustEmbedUnimplementedRestoreServiceServer()
}

// UnimplementedRestoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestoreServiceServer struct{}

func (UnimplementedRestoreServiceServer) ListRestores(context.Context, *ListRestoresRequest) (*ListRestoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestores not implemented")
}

func (UnimplementedRestoreServiceServer) GetLogs(context.Context, *RestoreServiceGetLogsRequest) (*RestoreServiceGetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}

func (UnimplementedRestoreServiceServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedRestoreServiceServer) mustEmbedUnimplementedRestoreServiceServer() {}

// UnsafeRestoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestoreServiceServer will
// result in compilation errors.
type UnsafeRestoreServiceServer interface {
	mustEmbedUnimplementedRestoreServiceServer()
}

func RegisterRestoreServiceServer(s grpc.ServiceRegistrar, srv RestoreServiceServer) {
	s.RegisterService(&RestoreService_ServiceDesc, srv)
}

func _RestoreService_ListRestores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).ListRestores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_ListRestores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).ListRestores(ctx, req.(*ListRestoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreServiceGetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).GetLogs(ctx, req.(*RestoreServiceGetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_RestoreBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestoreService_ServiceDesc is the grpc.ServiceDesc for RestoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backup.v1.RestoreService",
	HandlerType: (*RestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRestores",
			Handler:    _RestoreService_ListRestores_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _RestoreService_GetLogs_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _RestoreService_RestoreBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup/v1/restores.proto",
}
