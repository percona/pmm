// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backup/v1/locations.proto

package backupv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FilesystemLocationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemLocationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemLocationConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemLocationConfigMultiError, or nil if none found.
func (m *FilesystemLocationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemLocationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := FilesystemLocationConfigValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FilesystemLocationConfigMultiError(errors)
	}

	return nil
}

// FilesystemLocationConfigMultiError is an error wrapping multiple validation
// errors returned by FilesystemLocationConfig.ValidateAll() if the designated
// constraints aren't met.
type FilesystemLocationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemLocationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemLocationConfigMultiError) AllErrors() []error { return m }

// FilesystemLocationConfigValidationError is the validation error returned by
// FilesystemLocationConfig.Validate if the designated constraints aren't met.
type FilesystemLocationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemLocationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemLocationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemLocationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemLocationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemLocationConfigValidationError) ErrorName() string {
	return "FilesystemLocationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemLocationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemLocationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemLocationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemLocationConfigValidationError{}

// Validate checks the field values on S3LocationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *S3LocationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3LocationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3LocationConfigMultiError, or nil if none found.
func (m *S3LocationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *S3LocationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := S3LocationConfigValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := S3LocationConfigValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := S3LocationConfigValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBucketName()) < 1 {
		err := S3LocationConfigValidationError{
			field:  "BucketName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return S3LocationConfigMultiError(errors)
	}

	return nil
}

// S3LocationConfigMultiError is an error wrapping multiple validation errors
// returned by S3LocationConfig.ValidateAll() if the designated constraints
// aren't met.
type S3LocationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3LocationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3LocationConfigMultiError) AllErrors() []error { return m }

// S3LocationConfigValidationError is the validation error returned by
// S3LocationConfig.Validate if the designated constraints aren't met.
type S3LocationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3LocationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3LocationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3LocationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3LocationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3LocationConfigValidationError) ErrorName() string { return "S3LocationConfigValidationError" }

// Error satisfies the builtin error interface
func (e S3LocationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3LocationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3LocationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3LocationConfigValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	// no validation rules for Name

	// no validation rules for Description

	switch v := m.Config.(type) {
	case *Location_FilesystemConfig:
		if v == nil {
			err := LocationValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFilesystemConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "FilesystemConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Location_S3Config:
		if v == nil {
			err := LocationValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationValidationError{
						field:  "S3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on ListLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationsRequestMultiError, or nil if none found.
func (m *ListLocationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLocationsRequestMultiError(errors)
	}

	return nil
}

// ListLocationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListLocationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLocationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationsRequestMultiError) AllErrors() []error { return m }

// ListLocationsRequestValidationError is the validation error returned by
// ListLocationsRequest.Validate if the designated constraints aren't met.
type ListLocationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationsRequestValidationError) ErrorName() string {
	return "ListLocationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationsRequestValidationError{}

// Validate checks the field values on ListLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationsResponseMultiError, or nil if none found.
func (m *ListLocationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocationsResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocationsResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocationsResponseValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLocationsResponseMultiError(errors)
	}

	return nil
}

// ListLocationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListLocationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLocationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationsResponseMultiError) AllErrors() []error { return m }

// ListLocationsResponseValidationError is the validation error returned by
// ListLocationsResponse.Validate if the designated constraints aren't met.
type ListLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationsResponseValidationError) ErrorName() string {
	return "ListLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationsResponseValidationError{}

// Validate checks the field values on AddLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLocationRequestMultiError, or nil if none found.
func (m *AddLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddLocationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetFilesystemConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddLocationRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddLocationRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLocationRequestValidationError{
				field:  "FilesystemConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetS3Config()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddLocationRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddLocationRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLocationRequestValidationError{
				field:  "S3Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddLocationRequestMultiError(errors)
	}

	return nil
}

// AddLocationRequestMultiError is an error wrapping multiple validation errors
// returned by AddLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type AddLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLocationRequestMultiError) AllErrors() []error { return m }

// AddLocationRequestValidationError is the validation error returned by
// AddLocationRequest.Validate if the designated constraints aren't met.
type AddLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLocationRequestValidationError) ErrorName() string {
	return "AddLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLocationRequestValidationError{}

// Validate checks the field values on AddLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLocationResponseMultiError, or nil if none found.
func (m *AddLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	if len(errors) > 0 {
		return AddLocationResponseMultiError(errors)
	}

	return nil
}

// AddLocationResponseMultiError is an error wrapping multiple validation
// errors returned by AddLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type AddLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLocationResponseMultiError) AllErrors() []error { return m }

// AddLocationResponseValidationError is the validation error returned by
// AddLocationResponse.Validate if the designated constraints aren't met.
type AddLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLocationResponseValidationError) ErrorName() string {
	return "AddLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLocationResponseValidationError{}

// Validate checks the field values on ChangeLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeLocationRequestMultiError, or nil if none found.
func (m *ChangeLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLocationId()) < 1 {
		err := ChangeLocationRequestValidationError{
			field:  "LocationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetFilesystemConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeLocationRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeLocationRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeLocationRequestValidationError{
				field:  "FilesystemConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetS3Config()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeLocationRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeLocationRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeLocationRequestValidationError{
				field:  "S3Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeLocationRequestMultiError(errors)
	}

	return nil
}

// ChangeLocationRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeLocationRequestMultiError) AllErrors() []error { return m }

// ChangeLocationRequestValidationError is the validation error returned by
// ChangeLocationRequest.Validate if the designated constraints aren't met.
type ChangeLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeLocationRequestValidationError) ErrorName() string {
	return "ChangeLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeLocationRequestValidationError{}

// Validate checks the field values on ChangeLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeLocationResponseMultiError, or nil if none found.
func (m *ChangeLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeLocationResponseMultiError(errors)
	}

	return nil
}

// ChangeLocationResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeLocationResponseMultiError) AllErrors() []error { return m }

// ChangeLocationResponseValidationError is the validation error returned by
// ChangeLocationResponse.Validate if the designated constraints aren't met.
type ChangeLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeLocationResponseValidationError) ErrorName() string {
	return "ChangeLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeLocationResponseValidationError{}

// Validate checks the field values on RemoveLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLocationRequestMultiError, or nil if none found.
func (m *RemoveLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	// no validation rules for Force

	if len(errors) > 0 {
		return RemoveLocationRequestMultiError(errors)
	}

	return nil
}

// RemoveLocationRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLocationRequestMultiError) AllErrors() []error { return m }

// RemoveLocationRequestValidationError is the validation error returned by
// RemoveLocationRequest.Validate if the designated constraints aren't met.
type RemoveLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLocationRequestValidationError) ErrorName() string {
	return "RemoveLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLocationRequestValidationError{}

// Validate checks the field values on RemoveLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLocationResponseMultiError, or nil if none found.
func (m *RemoveLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveLocationResponseMultiError(errors)
	}

	return nil
}

// RemoveLocationResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLocationResponseMultiError) AllErrors() []error { return m }

// RemoveLocationResponseValidationError is the validation error returned by
// RemoveLocationResponse.Validate if the designated constraints aren't met.
type RemoveLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLocationResponseValidationError) ErrorName() string {
	return "RemoveLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLocationResponseValidationError{}

// Validate checks the field values on TestLocationConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestLocationConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestLocationConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestLocationConfigRequestMultiError, or nil if none found.
func (m *TestLocationConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestLocationConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilesystemConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestLocationConfigRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestLocationConfigRequestValidationError{
					field:  "FilesystemConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilesystemConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestLocationConfigRequestValidationError{
				field:  "FilesystemConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetS3Config()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestLocationConfigRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestLocationConfigRequestValidationError{
					field:  "S3Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3Config()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestLocationConfigRequestValidationError{
				field:  "S3Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestLocationConfigRequestMultiError(errors)
	}

	return nil
}

// TestLocationConfigRequestMultiError is an error wrapping multiple validation
// errors returned by TestLocationConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type TestLocationConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestLocationConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestLocationConfigRequestMultiError) AllErrors() []error { return m }

// TestLocationConfigRequestValidationError is the validation error returned by
// TestLocationConfigRequest.Validate if the designated constraints aren't met.
type TestLocationConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestLocationConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestLocationConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestLocationConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestLocationConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestLocationConfigRequestValidationError) ErrorName() string {
	return "TestLocationConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestLocationConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestLocationConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestLocationConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestLocationConfigRequestValidationError{}

// Validate checks the field values on TestLocationConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestLocationConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestLocationConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestLocationConfigResponseMultiError, or nil if none found.
func (m *TestLocationConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestLocationConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestLocationConfigResponseMultiError(errors)
	}

	return nil
}

// TestLocationConfigResponseMultiError is an error wrapping multiple
// validation errors returned by TestLocationConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type TestLocationConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestLocationConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestLocationConfigResponseMultiError) AllErrors() []error { return m }

// TestLocationConfigResponseValidationError is the validation error returned
// by TestLocationConfigResponse.Validate if the designated constraints aren't met.
type TestLocationConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestLocationConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestLocationConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestLocationConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestLocationConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestLocationConfigResponseValidationError) ErrorName() string {
	return "TestLocationConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestLocationConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestLocationConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestLocationConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestLocationConfigResponseValidationError{}
