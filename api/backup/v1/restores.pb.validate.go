// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backup/v1/restores.proto

package backupv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RestoreHistoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreHistoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreHistoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreHistoryItemMultiError, or nil if none found.
func (m *RestoreHistoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreHistoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RestoreId

	// no validation rules for ArtifactId

	// no validation rules for Name

	// no validation rules for Vendor

	// no validation rules for LocationId

	// no validation rules for LocationName

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for DataModel

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreHistoryItemValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreHistoryItemValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPitrTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreHistoryItemValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPitrTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreHistoryItemValidationError{
				field:  "PitrTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreHistoryItemMultiError(errors)
	}

	return nil
}

// RestoreHistoryItemMultiError is an error wrapping multiple validation errors
// returned by RestoreHistoryItem.ValidateAll() if the designated constraints
// aren't met.
type RestoreHistoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreHistoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreHistoryItemMultiError) AllErrors() []error { return m }

// RestoreHistoryItemValidationError is the validation error returned by
// RestoreHistoryItem.Validate if the designated constraints aren't met.
type RestoreHistoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreHistoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreHistoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreHistoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreHistoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreHistoryItemValidationError) ErrorName() string {
	return "RestoreHistoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreHistoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreHistoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreHistoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreHistoryItemValidationError{}

// Validate checks the field values on ListRestoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRestoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRestoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRestoresRequestMultiError, or nil if none found.
func (m *ListRestoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRestoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRestoresRequestMultiError(errors)
	}

	return nil
}

// ListRestoresRequestMultiError is an error wrapping multiple validation
// errors returned by ListRestoresRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRestoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRestoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRestoresRequestMultiError) AllErrors() []error { return m }

// ListRestoresRequestValidationError is the validation error returned by
// ListRestoresRequest.Validate if the designated constraints aren't met.
type ListRestoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRestoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRestoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRestoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRestoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRestoresRequestValidationError) ErrorName() string {
	return "ListRestoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRestoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRestoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRestoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRestoresRequestValidationError{}

// Validate checks the field values on ListRestoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRestoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRestoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRestoresResponseMultiError, or nil if none found.
func (m *ListRestoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRestoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRestoresResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRestoresResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRestoresResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRestoresResponseMultiError(errors)
	}

	return nil
}

// ListRestoresResponseMultiError is an error wrapping multiple validation
// errors returned by ListRestoresResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRestoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRestoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRestoresResponseMultiError) AllErrors() []error { return m }

// ListRestoresResponseValidationError is the validation error returned by
// ListRestoresResponse.Validate if the designated constraints aren't met.
type ListRestoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRestoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRestoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRestoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRestoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRestoresResponseValidationError) ErrorName() string {
	return "ListRestoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRestoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRestoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRestoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRestoresResponseValidationError{}

// Validate checks the field values on RestoreBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreBackupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreBackupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreBackupRequestMultiError, or nil if none found.
func (m *RestoreBackupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreBackupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := RestoreBackupRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetArtifactId()) < 1 {
		err := RestoreBackupRequestValidationError{
			field:  "ArtifactId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPitrTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreBackupRequestValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreBackupRequestValidationError{
					field:  "PitrTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPitrTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreBackupRequestValidationError{
				field:  "PitrTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreBackupRequestMultiError(errors)
	}

	return nil
}

// RestoreBackupRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreBackupRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreBackupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreBackupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreBackupRequestMultiError) AllErrors() []error { return m }

// RestoreBackupRequestValidationError is the validation error returned by
// RestoreBackupRequest.Validate if the designated constraints aren't met.
type RestoreBackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreBackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreBackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreBackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreBackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreBackupRequestValidationError) ErrorName() string {
	return "RestoreBackupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreBackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreBackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreBackupRequestValidationError{}

// Validate checks the field values on RestoreBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreBackupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreBackupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreBackupResponseMultiError, or nil if none found.
func (m *RestoreBackupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreBackupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RestoreId

	if len(errors) > 0 {
		return RestoreBackupResponseMultiError(errors)
	}

	return nil
}

// RestoreBackupResponseMultiError is an error wrapping multiple validation
// errors returned by RestoreBackupResponse.ValidateAll() if the designated
// constraints aren't met.
type RestoreBackupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreBackupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreBackupResponseMultiError) AllErrors() []error { return m }

// RestoreBackupResponseValidationError is the validation error returned by
// RestoreBackupResponse.Validate if the designated constraints aren't met.
type RestoreBackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreBackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreBackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreBackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreBackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreBackupResponseValidationError) ErrorName() string {
	return "RestoreBackupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreBackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreBackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreBackupResponseValidationError{}
