// Code generated by go-swagger; DO NOT EDIT.

package locations_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestLocationConfigReader is a Reader for the TestLocationConfig structure.
type TestLocationConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestLocationConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestLocationConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTestLocationConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTestLocationConfigOK creates a TestLocationConfigOK with default headers values
func NewTestLocationConfigOK() *TestLocationConfigOK {
	return &TestLocationConfigOK{}
}

/*
TestLocationConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type TestLocationConfigOK struct {
	Payload interface{}
}

// IsSuccess returns true when this test location config Ok response has a 2xx status code
func (o *TestLocationConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test location config Ok response has a 3xx status code
func (o *TestLocationConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test location config Ok response has a 4xx status code
func (o *TestLocationConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test location config Ok response has a 5xx status code
func (o *TestLocationConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test location config Ok response a status code equal to that given
func (o *TestLocationConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test location config Ok response
func (o *TestLocationConfigOK) Code() int {
	return 200
}

func (o *TestLocationConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/backups/locations:testConfig][%d] testLocationConfigOk %s", 200, payload)
}

func (o *TestLocationConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/backups/locations:testConfig][%d] testLocationConfigOk %s", 200, payload)
}

func (o *TestLocationConfigOK) GetPayload() interface{} {
	return o.Payload
}

func (o *TestLocationConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestLocationConfigDefault creates a TestLocationConfigDefault with default headers values
func NewTestLocationConfigDefault(code int) *TestLocationConfigDefault {
	return &TestLocationConfigDefault{
		_statusCode: code,
	}
}

/*
TestLocationConfigDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TestLocationConfigDefault struct {
	_statusCode int

	Payload *TestLocationConfigDefaultBody
}

// IsSuccess returns true when this test location config default response has a 2xx status code
func (o *TestLocationConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this test location config default response has a 3xx status code
func (o *TestLocationConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this test location config default response has a 4xx status code
func (o *TestLocationConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this test location config default response has a 5xx status code
func (o *TestLocationConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this test location config default response a status code equal to that given
func (o *TestLocationConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the test location config default response
func (o *TestLocationConfigDefault) Code() int {
	return o._statusCode
}

func (o *TestLocationConfigDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/backups/locations:testConfig][%d] TestLocationConfig default %s", o._statusCode, payload)
}

func (o *TestLocationConfigDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/backups/locations:testConfig][%d] TestLocationConfig default %s", o._statusCode, payload)
}

func (o *TestLocationConfigDefault) GetPayload() *TestLocationConfigDefaultBody {
	return o.Payload
}

func (o *TestLocationConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(TestLocationConfigDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
TestLocationConfigBody test location config body
swagger:model TestLocationConfigBody
*/
type TestLocationConfigBody struct {
	// filesystem config
	FilesystemConfig *TestLocationConfigParamsBodyFilesystemConfig `json:"filesystem_config,omitempty"`

	// s3 config
	S3Config *TestLocationConfigParamsBodyS3Config `json:"s3_config,omitempty"`
}

// Validate validates this test location config body
func (o *TestLocationConfigBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFilesystemConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateS3Config(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TestLocationConfigBody) validateFilesystemConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.FilesystemConfig) { // not required
		return nil
	}

	if o.FilesystemConfig != nil {
		if err := o.FilesystemConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "filesystem_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "filesystem_config")
			}
			return err
		}
	}

	return nil
}

func (o *TestLocationConfigBody) validateS3Config(formats strfmt.Registry) error {
	if swag.IsZero(o.S3Config) { // not required
		return nil
	}

	if o.S3Config != nil {
		if err := o.S3Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "s3_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "s3_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this test location config body based on the context it is used
func (o *TestLocationConfigBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFilesystemConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateS3Config(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TestLocationConfigBody) contextValidateFilesystemConfig(ctx context.Context, formats strfmt.Registry) error {
	if o.FilesystemConfig != nil {

		if swag.IsZero(o.FilesystemConfig) { // not required
			return nil
		}

		if err := o.FilesystemConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "filesystem_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "filesystem_config")
			}
			return err
		}
	}

	return nil
}

func (o *TestLocationConfigBody) contextValidateS3Config(ctx context.Context, formats strfmt.Registry) error {
	if o.S3Config != nil {

		if swag.IsZero(o.S3Config) { // not required
			return nil
		}

		if err := o.S3Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "s3_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "s3_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TestLocationConfigBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestLocationConfigBody) UnmarshalBinary(b []byte) error {
	var res TestLocationConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TestLocationConfigDefaultBody test location config default body
swagger:model TestLocationConfigDefaultBody
*/
type TestLocationConfigDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*TestLocationConfigDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this test location config default body
func (o *TestLocationConfigDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TestLocationConfigDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TestLocationConfig default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TestLocationConfig default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this test location config default body based on the context it is used
func (o *TestLocationConfigDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TestLocationConfigDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TestLocationConfig default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TestLocationConfig default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TestLocationConfigDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestLocationConfigDefaultBody) UnmarshalBinary(b []byte) error {
	var res TestLocationConfigDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TestLocationConfigDefaultBodyDetailsItems0 test location config default body details items0
swagger:model TestLocationConfigDefaultBodyDetailsItems0
*/
type TestLocationConfigDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`

	// test location config default body details items0
	TestLocationConfigDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *TestLocationConfigDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv TestLocationConfigDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.TestLocationConfigDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o TestLocationConfigDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.TestLocationConfigDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.TestLocationConfigDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this test location config default body details items0
func (o *TestLocationConfigDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this test location config default body details items0 based on context it is used
func (o *TestLocationConfigDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TestLocationConfigDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestLocationConfigDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res TestLocationConfigDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TestLocationConfigParamsBodyFilesystemConfig FilesystemLocationConfig represents file system location config.
swagger:model TestLocationConfigParamsBodyFilesystemConfig
*/
type TestLocationConfigParamsBodyFilesystemConfig struct {
	// path
	Path string `json:"path,omitempty"`
}

// Validate validates this test location config params body filesystem config
func (o *TestLocationConfigParamsBodyFilesystemConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this test location config params body filesystem config based on context it is used
func (o *TestLocationConfigParamsBodyFilesystemConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TestLocationConfigParamsBodyFilesystemConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestLocationConfigParamsBodyFilesystemConfig) UnmarshalBinary(b []byte) error {
	var res TestLocationConfigParamsBodyFilesystemConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TestLocationConfigParamsBodyS3Config S3LocationConfig represents S3 bucket configuration.
swagger:model TestLocationConfigParamsBodyS3Config
*/
type TestLocationConfigParamsBodyS3Config struct {
	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// access key
	AccessKey string `json:"access_key,omitempty"`

	// secret key
	SecretKey string `json:"secret_key,omitempty"`

	// bucket name
	BucketName string `json:"bucket_name,omitempty"`
}

// Validate validates this test location config params body s3 config
func (o *TestLocationConfigParamsBodyS3Config) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this test location config params body s3 config based on context it is used
func (o *TestLocationConfigParamsBodyS3Config) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TestLocationConfigParamsBodyS3Config) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestLocationConfigParamsBodyS3Config) UnmarshalBinary(b []byte) error {
	var res TestLocationConfigParamsBodyS3Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
