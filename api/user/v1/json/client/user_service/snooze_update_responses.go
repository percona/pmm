// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnoozeUpdateReader is a Reader for the SnoozeUpdate structure.
type SnoozeUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SnoozeUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSnoozeUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSnoozeUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSnoozeUpdateOK creates a SnoozeUpdateOK with default headers values
func NewSnoozeUpdateOK() *SnoozeUpdateOK {
	return &SnoozeUpdateOK{}
}

/*
SnoozeUpdateOK describes a response with status code 200, with default header values.

A successful response.
*/
type SnoozeUpdateOK struct {
	Payload *SnoozeUpdateOKBody
}

// IsSuccess returns true when this snooze update Ok response has a 2xx status code
func (o *SnoozeUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this snooze update Ok response has a 3xx status code
func (o *SnoozeUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this snooze update Ok response has a 4xx status code
func (o *SnoozeUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this snooze update Ok response has a 5xx status code
func (o *SnoozeUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this snooze update Ok response a status code equal to that given
func (o *SnoozeUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the snooze update Ok response
func (o *SnoozeUpdateOK) Code() int {
	return 200
}

func (o *SnoozeUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/users/me:snoozeUpdate][%d] snoozeUpdateOk %s", 200, payload)
}

func (o *SnoozeUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/users/me:snoozeUpdate][%d] snoozeUpdateOk %s", 200, payload)
}

func (o *SnoozeUpdateOK) GetPayload() *SnoozeUpdateOKBody {
	return o.Payload
}

func (o *SnoozeUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(SnoozeUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeUpdateDefault creates a SnoozeUpdateDefault with default headers values
func NewSnoozeUpdateDefault(code int) *SnoozeUpdateDefault {
	return &SnoozeUpdateDefault{
		_statusCode: code,
	}
}

/*
SnoozeUpdateDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SnoozeUpdateDefault struct {
	_statusCode int

	Payload *SnoozeUpdateDefaultBody
}

// IsSuccess returns true when this snooze update default response has a 2xx status code
func (o *SnoozeUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this snooze update default response has a 3xx status code
func (o *SnoozeUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this snooze update default response has a 4xx status code
func (o *SnoozeUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this snooze update default response has a 5xx status code
func (o *SnoozeUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this snooze update default response a status code equal to that given
func (o *SnoozeUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the snooze update default response
func (o *SnoozeUpdateDefault) Code() int {
	return o._statusCode
}

func (o *SnoozeUpdateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/users/me:snoozeUpdate][%d] SnoozeUpdate default %s", o._statusCode, payload)
}

func (o *SnoozeUpdateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/users/me:snoozeUpdate][%d] SnoozeUpdate default %s", o._statusCode, payload)
}

func (o *SnoozeUpdateDefault) GetPayload() *SnoozeUpdateDefaultBody {
	return o.Payload
}

func (o *SnoozeUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(SnoozeUpdateDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SnoozeUpdateBody snooze update body
swagger:model SnoozeUpdateBody
*/
type SnoozeUpdateBody struct {
	// PMM version which should be snoozed
	SnoozedPMMVersion string `json:"snoozed_pmm_version,omitempty"`
}

// Validate validates this snooze update body
func (o *SnoozeUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this snooze update body based on context it is used
func (o *SnoozeUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SnoozeUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SnoozeUpdateBody) UnmarshalBinary(b []byte) error {
	var res SnoozeUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SnoozeUpdateDefaultBody snooze update default body
swagger:model SnoozeUpdateDefaultBody
*/
type SnoozeUpdateDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*SnoozeUpdateDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this snooze update default body
func (o *SnoozeUpdateDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SnoozeUpdateDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SnoozeUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SnoozeUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this snooze update default body based on the context it is used
func (o *SnoozeUpdateDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SnoozeUpdateDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SnoozeUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SnoozeUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SnoozeUpdateDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SnoozeUpdateDefaultBody) UnmarshalBinary(b []byte) error {
	var res SnoozeUpdateDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SnoozeUpdateDefaultBodyDetailsItems0 snooze update default body details items0
swagger:model SnoozeUpdateDefaultBodyDetailsItems0
*/
type SnoozeUpdateDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`

	// snooze update default body details items0
	SnoozeUpdateDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *SnoozeUpdateDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SnoozeUpdateDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.SnoozeUpdateDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o SnoozeUpdateDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.SnoozeUpdateDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.SnoozeUpdateDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this snooze update default body details items0
func (o *SnoozeUpdateDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this snooze update default body details items0 based on context it is used
func (o *SnoozeUpdateDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SnoozeUpdateDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SnoozeUpdateDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SnoozeUpdateDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SnoozeUpdateOKBody snooze update OK body
swagger:model SnoozeUpdateOKBody
*/
type SnoozeUpdateOKBody struct {
	// Snoozed PMM version
	SnoozedPMMVersion string `json:"snoozed_pmm_version,omitempty"`

	// Snoozed at timestamp
	// Format: date-time
	SnoozedAt strfmt.DateTime `json:"snoozed_at,omitempty"`

	// Number of times the update was snoozed
	SnoozeCount int64 `json:"snooze_count,omitempty"`
}

// Validate validates this snooze update OK body
func (o *SnoozeUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSnoozedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SnoozeUpdateOKBody) validateSnoozedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.SnoozedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("snoozeUpdateOk"+"."+"snoozed_at", "body", "date-time", o.SnoozedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snooze update OK body based on context it is used
func (o *SnoozeUpdateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SnoozeUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SnoozeUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res SnoozeUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
