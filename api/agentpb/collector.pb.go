// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agentpb/collector.proto

package agentpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	inventorypb "github.com/percona/pmm/api/inventorypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ExampleFormat is format of query example: real or query without values.
type ExampleFormat int32

const (
	ExampleFormat_EXAMPLE_FORMAT_INVALID ExampleFormat = 0
	ExampleFormat_EXAMPLE                ExampleFormat = 1
	ExampleFormat_FINGERPRINT            ExampleFormat = 2
)

var ExampleFormat_name = map[int32]string{
	0: "EXAMPLE_FORMAT_INVALID",
	1: "EXAMPLE",
	2: "FINGERPRINT",
}

var ExampleFormat_value = map[string]int32{
	"EXAMPLE_FORMAT_INVALID": 0,
	"EXAMPLE":                1,
	"FINGERPRINT":            2,
}

func (x ExampleFormat) String() string {
	return proto.EnumName(ExampleFormat_name, int32(x))
}

func (ExampleFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0}
}

// ExampleType is a type of query example selected for this query class in given period of time.
type ExampleType int32

const (
	ExampleType_EXAMPLE_TYPE_INVALID ExampleType = 0
	ExampleType_RANDOM               ExampleType = 1
	ExampleType_SLOWEST              ExampleType = 2
	ExampleType_FASTEST              ExampleType = 3
	ExampleType_WITH_ERROR           ExampleType = 4
)

var ExampleType_name = map[int32]string{
	0: "EXAMPLE_TYPE_INVALID",
	1: "RANDOM",
	2: "SLOWEST",
	3: "FASTEST",
	4: "WITH_ERROR",
}

var ExampleType_value = map[string]int32{
	"EXAMPLE_TYPE_INVALID": 0,
	"RANDOM":               1,
	"SLOWEST":              2,
	"FASTEST":              3,
	"WITH_ERROR":           4,
}

func (x ExampleType) String() string {
	return proto.EnumName(ExampleType_name, int32(x))
}

func (ExampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{1}
}

// MetricsBucket is aggregated message created by pmm-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	Common               *MetricsBucket_Common     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Mysql                *MetricsBucket_MySQL      `protobuf:"bytes,2,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Mongodb              *MetricsBucket_MongoDB    `protobuf:"bytes,3,opt,name=mongodb,proto3" json:"mongodb,omitempty"`
	Postgresql           *MetricsBucket_PostgreSQL `protobuf:"bytes,4,opt,name=postgresql,proto3" json:"postgresql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MetricsBucket) Reset()         { *m = MetricsBucket{} }
func (m *MetricsBucket) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket) ProtoMessage()    {}
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0}
}

func (m *MetricsBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket.Unmarshal(m, b)
}
func (m *MetricsBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket.Marshal(b, m, deterministic)
}
func (m *MetricsBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket.Merge(m, src)
}
func (m *MetricsBucket) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket.Size(m)
}
func (m *MetricsBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket proto.InternalMessageInfo

func (m *MetricsBucket) GetCommon() *MetricsBucket_Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *MetricsBucket) GetMysql() *MetricsBucket_MySQL {
	if m != nil {
		return m.Mysql
	}
	return nil
}

func (m *MetricsBucket) GetMongodb() *MetricsBucket_MongoDB {
	if m != nil {
		return m.Mongodb
	}
	return nil
}

func (m *MetricsBucket) GetPostgresql() *MetricsBucket_PostgreSQL {
	if m != nil {
		return m.Postgresql
	}
	return nil
}

// Common contains common fields for all DBs.
type MetricsBucket_Common struct {
	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	//
	// Dimension Group.
	//
	// MongoDB or PostgreSQL database.
	// Several databases can't be combined in a single declarative query.
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// MySQL database or PostgreSQL schema.
	// Several schemas can be combined in a single declarative query.
	Schema string `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	// Tables or Collections list.
	Tables []string `protobuf:"bytes,5,rep,name=tables,proto3" json:"tables,omitempty"`
	// client user name.
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// client IP or hostname.
	ClientHost string `protobuf:"bytes,7,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	// Identifier of agent that collect and send metrics.
	AgentId string `protobuf:"bytes,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Metrics source.
	AgentType inventorypb.AgentType `protobuf:"varint,9,opt,name=agent_type,json=agentType,proto3,enum=inventory.AgentType" json:"agent_type,omitempty"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,10,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,11,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// One of query example from set found in bucket.
	Example       string        `protobuf:"bytes,12,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat ExampleFormat `protobuf:"varint,13,opt,name=example_format,json=exampleFormat,proto3,enum=agent.ExampleFormat" json:"example_format,omitempty"`
	ExampleType   ExampleType   `protobuf:"varint,14,opt,name=example_type,json=exampleType,proto3,enum=agent.ExampleType" json:"example_type,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,15,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,16,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,17,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Amount queries in this bucket.
	NumQueries float32 `protobuf:"fixed32,18,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	// How many times query_time was found.
	MQueryTimeCnt float32 `protobuf:"fixed32,19,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSum float32 `protobuf:"fixed32,20,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	// Smallest value of query_time in bucket.
	MQueryTimeMin float32 `protobuf:"fixed32,21,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	// Biggest value of query_time in bucket.
	MQueryTimeMax float32 `protobuf:"fixed32,22,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	// 99 percentile of value of query_time in bucket.
	MQueryTimeP99        float32  `protobuf:"fixed32,23,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket_Common) Reset()         { *m = MetricsBucket_Common{} }
func (m *MetricsBucket_Common) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket_Common) ProtoMessage()    {}
func (*MetricsBucket_Common) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0, 0}
}

func (m *MetricsBucket_Common) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket_Common.Unmarshal(m, b)
}
func (m *MetricsBucket_Common) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket_Common.Marshal(b, m, deterministic)
}
func (m *MetricsBucket_Common) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket_Common.Merge(m, src)
}
func (m *MetricsBucket_Common) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket_Common.Size(m)
}
func (m *MetricsBucket_Common) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket_Common.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket_Common proto.InternalMessageInfo

func (m *MetricsBucket_Common) GetQueryid() string {
	if m != nil {
		return m.Queryid
	}
	return ""
}

func (m *MetricsBucket_Common) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *MetricsBucket_Common) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *MetricsBucket_Common) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *MetricsBucket_Common) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *MetricsBucket_Common) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MetricsBucket_Common) GetClientHost() string {
	if m != nil {
		return m.ClientHost
	}
	return ""
}

func (m *MetricsBucket_Common) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *MetricsBucket_Common) GetAgentType() inventorypb.AgentType {
	if m != nil {
		return m.AgentType
	}
	return inventorypb.AgentType_AGENT_TYPE_INVALID
}

func (m *MetricsBucket_Common) GetPeriodStartUnixSecs() uint32 {
	if m != nil {
		return m.PeriodStartUnixSecs
	}
	return 0
}

func (m *MetricsBucket_Common) GetPeriodLengthSecs() uint32 {
	if m != nil {
		return m.PeriodLengthSecs
	}
	return 0
}

func (m *MetricsBucket_Common) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *MetricsBucket_Common) GetExampleFormat() ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return ExampleFormat_EXAMPLE_FORMAT_INVALID
}

func (m *MetricsBucket_Common) GetExampleType() ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_INVALID
}

func (m *MetricsBucket_Common) GetNumQueriesWithWarnings() float32 {
	if m != nil {
		return m.NumQueriesWithWarnings
	}
	return 0
}

func (m *MetricsBucket_Common) GetNumQueriesWithErrors() float32 {
	if m != nil {
		return m.NumQueriesWithErrors
	}
	return 0
}

func (m *MetricsBucket_Common) GetErrors() map[uint64]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MetricsBucket_Common) GetNumQueries() float32 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *MetricsBucket_Common) GetMQueryTimeCnt() float32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *MetricsBucket_Common) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *MetricsBucket_Common) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *MetricsBucket_Common) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *MetricsBucket_Common) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

// MySQL contains metrics for MySQL.
type MetricsBucket_MySQL struct {
	MLockTimeCnt float32 `protobuf:"fixed32,1,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSum float32 `protobuf:"fixed32,2,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin float32 `protobuf:"fixed32,3,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax float32 `protobuf:"fixed32,4,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99 float32 `protobuf:"fixed32,5,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt float32 `protobuf:"fixed32,6,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSum     float32 `protobuf:"fixed32,7,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin     float32 `protobuf:"fixed32,8,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax     float32 `protobuf:"fixed32,9,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99     float32 `protobuf:"fixed32,10,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt float32 `protobuf:"fixed32,11,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSum float32 `protobuf:"fixed32,12,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin float32 `protobuf:"fixed32,13,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax float32 `protobuf:"fixed32,14,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99 float32 `protobuf:"fixed32,15,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt float32 `protobuf:"fixed32,16,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSum float32 `protobuf:"fixed32,17,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin float32 `protobuf:"fixed32,18,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax float32 `protobuf:"fixed32,19,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99 float32 `protobuf:"fixed32,20,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt     float32 `protobuf:"fixed32,21,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	// The number of rows read from tables.
	MRowsReadSum    float32 `protobuf:"fixed32,22,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin    float32 `protobuf:"fixed32,23,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax    float32 `protobuf:"fixed32,24,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99    float32 `protobuf:"fixed32,25,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt float32 `protobuf:"fixed32,26,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSum  float32 `protobuf:"fixed32,27,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin  float32 `protobuf:"fixed32,28,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax  float32 `protobuf:"fixed32,29,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99  float32 `protobuf:"fixed32,30,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt float32 `protobuf:"fixed32,31,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSum   float32 `protobuf:"fixed32,32,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin   float32 `protobuf:"fixed32,33,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax   float32 `protobuf:"fixed32,34,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99   float32 `protobuf:"fixed32,35,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt float32 `protobuf:"fixed32,36,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSum float32 `protobuf:"fixed32,37,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin float32 `protobuf:"fixed32,38,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax float32 `protobuf:"fixed32,39,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99 float32 `protobuf:"fixed32,40,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt  float32 `protobuf:"fixed32,41,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSum     float32 `protobuf:"fixed32,42,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin     float32 `protobuf:"fixed32,43,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax     float32 `protobuf:"fixed32,44,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99     float32 `protobuf:"fixed32,45,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt float32 `protobuf:"fixed32,46,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSum float32 `protobuf:"fixed32,47,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin float32 `protobuf:"fixed32,48,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax float32 `protobuf:"fixed32,49,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99 float32 `protobuf:"fixed32,50,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt   float32 `protobuf:"fixed32,51,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSum     float32 `protobuf:"fixed32,52,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32 `protobuf:"fixed32,53,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32 `protobuf:"fixed32,54,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32 `protobuf:"fixed32,55,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32 `protobuf:"fixed32,56,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSum float32 `protobuf:"fixed32,57,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32 `protobuf:"fixed32,58,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32 `protobuf:"fixed32,59,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32 `protobuf:"fixed32,60,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32 `protobuf:"fixed32,61,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	// Shows how long the query is.
	MQueryLengthSum float32 `protobuf:"fixed32,62,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin float32 `protobuf:"fixed32,63,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax float32 `protobuf:"fixed32,64,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99 float32 `protobuf:"fixed32,65,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt   float32 `protobuf:"fixed32,66,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSum float32 `protobuf:"fixed32,67,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin float32 `protobuf:"fixed32,68,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax float32 `protobuf:"fixed32,69,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99 float32 `protobuf:"fixed32,70,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt float32 `protobuf:"fixed32,71,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSum     float32 `protobuf:"fixed32,72,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin     float32 `protobuf:"fixed32,73,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax     float32 `protobuf:"fixed32,74,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99     float32 `protobuf:"fixed32,75,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt float32 `protobuf:"fixed32,76,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSum float32 `protobuf:"fixed32,77,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin float32 `protobuf:"fixed32,78,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax float32 `protobuf:"fixed32,79,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99 float32 `protobuf:"fixed32,80,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt float32 `protobuf:"fixed32,81,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSum float32 `protobuf:"fixed32,82,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin float32 `protobuf:"fixed32,83,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax float32 `protobuf:"fixed32,84,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99 float32 `protobuf:"fixed32,85,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	//
	// Boolean metrics:
	// - *_cnt - how many times this metric was met.
	// - *_sum - how many times this metric was true.
	//
	MQcHitCnt float32 `protobuf:"fixed32,86,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	// Query Cache hits.
	MQcHitSum    float32 `protobuf:"fixed32,87,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt float32 `protobuf:"fixed32,88,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	// The query performed a full table scan.
	MFullScanSum float32 `protobuf:"fixed32,89,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt float32 `protobuf:"fixed32,90,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSum float32 `protobuf:"fixed32,91,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt float32 `protobuf:"fixed32,92,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSum       float32 `protobuf:"fixed32,93,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt float32 `protobuf:"fixed32,94,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSum float32 `protobuf:"fixed32,95,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt       float32 `protobuf:"fixed32,96,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	// The query used a filesort.
	MFilesortSum       float32 `protobuf:"fixed32,97,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt float32 `protobuf:"fixed32,98,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSum      float32 `protobuf:"fixed32,99,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32 `protobuf:"fixed32,100,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSum float32 `protobuf:"fixed32,101,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32 `protobuf:"fixed32,102,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSum      float32 `protobuf:"fixed32,103,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt float32 `protobuf:"fixed32,104,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSum float32 `protobuf:"fixed32,105,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt        float32 `protobuf:"fixed32,106,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSum float32 `protobuf:"fixed32,107,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt  float32 `protobuf:"fixed32,108,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	// The number of sorted rows.
	MSortRowsSum float32 `protobuf:"fixed32,109,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt float32 `protobuf:"fixed32,110,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSum    float32 `protobuf:"fixed32,111,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt float32 `protobuf:"fixed32,112,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSum     float32 `protobuf:"fixed32,113,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt float32 `protobuf:"fixed32,114,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSum  float32  `protobuf:"fixed32,115,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket_MySQL) Reset()         { *m = MetricsBucket_MySQL{} }
func (m *MetricsBucket_MySQL) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket_MySQL) ProtoMessage()    {}
func (*MetricsBucket_MySQL) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0, 1}
}

func (m *MetricsBucket_MySQL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket_MySQL.Unmarshal(m, b)
}
func (m *MetricsBucket_MySQL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket_MySQL.Marshal(b, m, deterministic)
}
func (m *MetricsBucket_MySQL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket_MySQL.Merge(m, src)
}
func (m *MetricsBucket_MySQL) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket_MySQL.Size(m)
}
func (m *MetricsBucket_MySQL) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket_MySQL.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket_MySQL proto.InternalMessageInfo

func (m *MetricsBucket_MySQL) GetMLockTimeCnt() float32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsSentCnt() float32 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsSentSum() float32 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsSentMin() float32 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsSentMax() float32 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsSentP99() float32 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsExaminedCnt() float32 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsExaminedSum() float32 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsExaminedMin() float32 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsExaminedMax() float32 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsExaminedP99() float32 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsAffectedCnt() float32 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsAffectedSum() float32 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsAffectedMin() float32 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsAffectedMax() float32 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsAffectedP99() float32 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsReadCnt() float32 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsReadSum() float32 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsReadMin() float32 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsReadMax() float32 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMRowsReadP99() float32 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMMergePassesCnt() float32 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMMergePassesSum() float32 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMMergePassesMin() float32 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMMergePassesMax() float32 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMMergePassesP99() float32 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoROpsCnt() float32 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoROpsSum() float32 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoROpsMin() float32 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoROpsMax() float32 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoROpsP99() float32 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRBytesCnt() float32 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRBytesSum() float32 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRBytesMin() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRBytesMax() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRBytesP99() float32 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbPagesDistinctCnt() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbPagesDistinctSum() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbPagesDistinctMin() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbPagesDistinctMax() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMInnodbPagesDistinctP99() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQueryLengthCnt() float32 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQueryLengthSum() float32 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQueryLengthMin() float32 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQueryLengthMax() float32 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQueryLengthP99() float32 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMBytesSentCnt() float32 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMBytesSentSum() float32 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMBytesSentMin() float32 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMBytesSentMax() float32 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMBytesSentP99() float32 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTablesCnt() float32 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTablesSum() float32 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTablesMin() float32 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTablesMax() float32 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTablesP99() float32 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpDiskTablesCnt() float32 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpDiskTablesSum() float32 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpDiskTablesMin() float32 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpDiskTablesMax() float32 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpDiskTablesP99() float32 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSizesCnt() float32 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSizesSum() float32 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSizesMin() float32 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSizesMax() float32 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSizesP99() float32 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQcHitCnt() float32 {
	if m != nil {
		return m.MQcHitCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMQcHitSum() float32 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFullScanCnt() float32 {
	if m != nil {
		return m.MFullScanCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFullScanSum() float32 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFullJoinCnt() float32 {
	if m != nil {
		return m.MFullJoinCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFullJoinSum() float32 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableCnt() float32 {
	if m != nil {
		return m.MTmpTableCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableSum() float32 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableOnDiskCnt() float32 {
	if m != nil {
		return m.MTmpTableOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMTmpTableOnDiskSum() float32 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFilesortCnt() float32 {
	if m != nil {
		return m.MFilesortCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFilesortSum() float32 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFilesortOnDiskCnt() float32 {
	if m != nil {
		return m.MFilesortOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMFilesortOnDiskSum() float32 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectFullRangeJoinCnt() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectFullRangeJoinSum() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectRangeCnt() float32 {
	if m != nil {
		return m.MSelectRangeCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectRangeSum() float32 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectRangeCheckCnt() float32 {
	if m != nil {
		return m.MSelectRangeCheckCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSelectRangeCheckSum() float32 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortRangeCnt() float32 {
	if m != nil {
		return m.MSortRangeCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortRangeSum() float32 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortRowsCnt() float32 {
	if m != nil {
		return m.MSortRowsCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortRowsSum() float32 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortScanCnt() float32 {
	if m != nil {
		return m.MSortScanCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMSortScanSum() float32 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMNoIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMNoIndexUsedSum() float32 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMNoGoodIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket_MySQL) GetMNoGoodIndexUsedSum() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

// MongoDB contains metrics for Mongo DB.
type MetricsBucket_MongoDB struct {
	MDocsReturnedCnt float32 `protobuf:"fixed32,1,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	// The number of returned documents.
	MDocsReturnedSum   float32 `protobuf:"fixed32,2,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin   float32 `protobuf:"fixed32,3,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax   float32 `protobuf:"fixed32,4,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99   float32 `protobuf:"fixed32,5,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt float32 `protobuf:"fixed32,6,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSum float32 `protobuf:"fixed32,7,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin float32 `protobuf:"fixed32,8,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax float32 `protobuf:"fixed32,9,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99 float32 `protobuf:"fixed32,10,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt    float32 `protobuf:"fixed32,11,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	// The number of scanned documents.
	MDocsScannedSum      float32  `protobuf:"fixed32,12,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin      float32  `protobuf:"fixed32,13,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax      float32  `protobuf:"fixed32,14,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99      float32  `protobuf:"fixed32,15,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket_MongoDB) Reset()         { *m = MetricsBucket_MongoDB{} }
func (m *MetricsBucket_MongoDB) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket_MongoDB) ProtoMessage()    {}
func (*MetricsBucket_MongoDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0, 2}
}

func (m *MetricsBucket_MongoDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket_MongoDB.Unmarshal(m, b)
}
func (m *MetricsBucket_MongoDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket_MongoDB.Marshal(b, m, deterministic)
}
func (m *MetricsBucket_MongoDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket_MongoDB.Merge(m, src)
}
func (m *MetricsBucket_MongoDB) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket_MongoDB.Size(m)
}
func (m *MetricsBucket_MongoDB) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket_MongoDB.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket_MongoDB proto.InternalMessageInfo

func (m *MetricsBucket_MongoDB) GetMDocsReturnedCnt() float32 {
	if m != nil {
		return m.MDocsReturnedCnt
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsReturnedSum() float32 {
	if m != nil {
		return m.MDocsReturnedSum
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsReturnedMin() float32 {
	if m != nil {
		return m.MDocsReturnedMin
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsReturnedMax() float32 {
	if m != nil {
		return m.MDocsReturnedMax
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsReturnedP99() float32 {
	if m != nil {
		return m.MDocsReturnedP99
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMResponseLengthCnt() float32 {
	if m != nil {
		return m.MResponseLengthCnt
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMResponseLengthSum() float32 {
	if m != nil {
		return m.MResponseLengthSum
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMResponseLengthMin() float32 {
	if m != nil {
		return m.MResponseLengthMin
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMResponseLengthMax() float32 {
	if m != nil {
		return m.MResponseLengthMax
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMResponseLengthP99() float32 {
	if m != nil {
		return m.MResponseLengthP99
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsScannedCnt() float32 {
	if m != nil {
		return m.MDocsScannedCnt
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsScannedSum() float32 {
	if m != nil {
		return m.MDocsScannedSum
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsScannedMin() float32 {
	if m != nil {
		return m.MDocsScannedMin
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsScannedMax() float32 {
	if m != nil {
		return m.MDocsScannedMax
	}
	return 0
}

func (m *MetricsBucket_MongoDB) GetMDocsScannedP99() float32 {
	if m != nil {
		return m.MDocsScannedP99
	}
	return 0
}

// PostgreSQL contains metrics for PostgreSQL.
type MetricsBucket_PostgreSQL struct {
	MRowsCnt float32 `protobuf:"fixed32,1,opt,name=m_rows_cnt,json=mRowsCnt,proto3" json:"m_rows_cnt,omitempty"`
	// The number of rows sent to the client.
	MRowsSum          float32 `protobuf:"fixed32,2,opt,name=m_rows_sum,json=mRowsSum,proto3" json:"m_rows_sum,omitempty"`
	MSharedBlksHitCnt float32 `protobuf:"fixed32,3,opt,name=m_shared_blks_hit_cnt,json=mSharedBlksHitCnt,proto3" json:"m_shared_blks_hit_cnt,omitempty"`
	// Total number of shared block cache hits by the statement.
	MSharedBlksHitSum  float32 `protobuf:"fixed32,4,opt,name=m_shared_blks_hit_sum,json=mSharedBlksHitSum,proto3" json:"m_shared_blks_hit_sum,omitempty"`
	MSharedBlksReadCnt float32 `protobuf:"fixed32,5,opt,name=m_shared_blks_read_cnt,json=mSharedBlksReadCnt,proto3" json:"m_shared_blks_read_cnt,omitempty"`
	// Total number of shared blocks read by the statement.
	MSharedBlksReadSum    float32 `protobuf:"fixed32,6,opt,name=m_shared_blks_read_sum,json=mSharedBlksReadSum,proto3" json:"m_shared_blks_read_sum,omitempty"`
	MSharedBlksDirtiedCnt float32 `protobuf:"fixed32,7,opt,name=m_shared_blks_dirtied_cnt,json=mSharedBlksDirtiedCnt,proto3" json:"m_shared_blks_dirtied_cnt,omitempty"`
	// Total number of shared blocks dirtied by the statement.
	MSharedBlksDirtiedSum float32 `protobuf:"fixed32,8,opt,name=m_shared_blks_dirtied_sum,json=mSharedBlksDirtiedSum,proto3" json:"m_shared_blks_dirtied_sum,omitempty"`
	MSharedBlksWrittenCnt float32 `protobuf:"fixed32,9,opt,name=m_shared_blks_written_cnt,json=mSharedBlksWrittenCnt,proto3" json:"m_shared_blks_written_cnt,omitempty"`
	// Total number of shared blocks written by the statement.
	MSharedBlksWrittenSum float32 `protobuf:"fixed32,10,opt,name=m_shared_blks_written_sum,json=mSharedBlksWrittenSum,proto3" json:"m_shared_blks_written_sum,omitempty"`
	MLocalBlksHitCnt      float32 `protobuf:"fixed32,11,opt,name=m_local_blks_hit_cnt,json=mLocalBlksHitCnt,proto3" json:"m_local_blks_hit_cnt,omitempty"`
	// Total number of local block cache hits by the statement.
	MLocalBlksHitSum  float32 `protobuf:"fixed32,12,opt,name=m_local_blks_hit_sum,json=mLocalBlksHitSum,proto3" json:"m_local_blks_hit_sum,omitempty"`
	MLocalBlksReadCnt float32 `protobuf:"fixed32,13,opt,name=m_local_blks_read_cnt,json=mLocalBlksReadCnt,proto3" json:"m_local_blks_read_cnt,omitempty"`
	// Total number of local blocks read by the statement.
	MLocalBlksReadSum    float32 `protobuf:"fixed32,14,opt,name=m_local_blks_read_sum,json=mLocalBlksReadSum,proto3" json:"m_local_blks_read_sum,omitempty"`
	MLocalBlksDirtiedCnt float32 `protobuf:"fixed32,15,opt,name=m_local_blks_dirtied_cnt,json=mLocalBlksDirtiedCnt,proto3" json:"m_local_blks_dirtied_cnt,omitempty"`
	// Total number of local blocks dirtied by the statement.
	MLocalBlksDirtiedSum float32 `protobuf:"fixed32,16,opt,name=m_local_blks_dirtied_sum,json=mLocalBlksDirtiedSum,proto3" json:"m_local_blks_dirtied_sum,omitempty"`
	MLocalBlksWrittenCnt float32 `protobuf:"fixed32,17,opt,name=m_local_blks_written_cnt,json=mLocalBlksWrittenCnt,proto3" json:"m_local_blks_written_cnt,omitempty"`
	// Total number of local blocks written by the statement.
	MLocalBlksWrittenSum float32 `protobuf:"fixed32,18,opt,name=m_local_blks_written_sum,json=mLocalBlksWrittenSum,proto3" json:"m_local_blks_written_sum,omitempty"`
	MTempBlksReadCnt     float32 `protobuf:"fixed32,19,opt,name=m_temp_blks_read_cnt,json=mTempBlksReadCnt,proto3" json:"m_temp_blks_read_cnt,omitempty"`
	// Total number of temp blocks read by the statement.
	MTempBlksReadSum    float32 `protobuf:"fixed32,20,opt,name=m_temp_blks_read_sum,json=mTempBlksReadSum,proto3" json:"m_temp_blks_read_sum,omitempty"`
	MTempBlksWrittenCnt float32 `protobuf:"fixed32,21,opt,name=m_temp_blks_written_cnt,json=mTempBlksWrittenCnt,proto3" json:"m_temp_blks_written_cnt,omitempty"`
	// Total number of temp blocks written by the statement.
	MTempBlksWrittenSum float32 `protobuf:"fixed32,22,opt,name=m_temp_blks_written_sum,json=mTempBlksWrittenSum,proto3" json:"m_temp_blks_written_sum,omitempty"`
	MBlkReadTimeCnt     float32 `protobuf:"fixed32,23,opt,name=m_blk_read_time_cnt,json=mBlkReadTimeCnt,proto3" json:"m_blk_read_time_cnt,omitempty"`
	// Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkReadTimeSum  float32 `protobuf:"fixed32,24,opt,name=m_blk_read_time_sum,json=mBlkReadTimeSum,proto3" json:"m_blk_read_time_sum,omitempty"`
	MBlkWriteTimeCnt float32 `protobuf:"fixed32,25,opt,name=m_blk_write_time_cnt,json=mBlkWriteTimeCnt,proto3" json:"m_blk_write_time_cnt,omitempty"`
	// Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
	MBlkWriteTimeSum     float32  `protobuf:"fixed32,26,opt,name=m_blk_write_time_sum,json=mBlkWriteTimeSum,proto3" json:"m_blk_write_time_sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket_PostgreSQL) Reset()         { *m = MetricsBucket_PostgreSQL{} }
func (m *MetricsBucket_PostgreSQL) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket_PostgreSQL) ProtoMessage()    {}
func (*MetricsBucket_PostgreSQL) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c5f4e596d7786d, []int{0, 3}
}

func (m *MetricsBucket_PostgreSQL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket_PostgreSQL.Unmarshal(m, b)
}
func (m *MetricsBucket_PostgreSQL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket_PostgreSQL.Marshal(b, m, deterministic)
}
func (m *MetricsBucket_PostgreSQL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket_PostgreSQL.Merge(m, src)
}
func (m *MetricsBucket_PostgreSQL) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket_PostgreSQL.Size(m)
}
func (m *MetricsBucket_PostgreSQL) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket_PostgreSQL.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket_PostgreSQL proto.InternalMessageInfo

func (m *MetricsBucket_PostgreSQL) GetMRowsCnt() float32 {
	if m != nil {
		return m.MRowsCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMRowsSum() float32 {
	if m != nil {
		return m.MRowsSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksHitCnt() float32 {
	if m != nil {
		return m.MSharedBlksHitCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksHitSum() float32 {
	if m != nil {
		return m.MSharedBlksHitSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksReadCnt() float32 {
	if m != nil {
		return m.MSharedBlksReadCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksReadSum() float32 {
	if m != nil {
		return m.MSharedBlksReadSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksDirtiedCnt() float32 {
	if m != nil {
		return m.MSharedBlksDirtiedCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksDirtiedSum() float32 {
	if m != nil {
		return m.MSharedBlksDirtiedSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksWrittenCnt() float32 {
	if m != nil {
		return m.MSharedBlksWrittenCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMSharedBlksWrittenSum() float32 {
	if m != nil {
		return m.MSharedBlksWrittenSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksHitCnt() float32 {
	if m != nil {
		return m.MLocalBlksHitCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksHitSum() float32 {
	if m != nil {
		return m.MLocalBlksHitSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksReadCnt() float32 {
	if m != nil {
		return m.MLocalBlksReadCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksReadSum() float32 {
	if m != nil {
		return m.MLocalBlksReadSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksDirtiedCnt() float32 {
	if m != nil {
		return m.MLocalBlksDirtiedCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksDirtiedSum() float32 {
	if m != nil {
		return m.MLocalBlksDirtiedSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksWrittenCnt() float32 {
	if m != nil {
		return m.MLocalBlksWrittenCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMLocalBlksWrittenSum() float32 {
	if m != nil {
		return m.MLocalBlksWrittenSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMTempBlksReadCnt() float32 {
	if m != nil {
		return m.MTempBlksReadCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMTempBlksReadSum() float32 {
	if m != nil {
		return m.MTempBlksReadSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMTempBlksWrittenCnt() float32 {
	if m != nil {
		return m.MTempBlksWrittenCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMTempBlksWrittenSum() float32 {
	if m != nil {
		return m.MTempBlksWrittenSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMBlkReadTimeCnt() float32 {
	if m != nil {
		return m.MBlkReadTimeCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMBlkReadTimeSum() float32 {
	if m != nil {
		return m.MBlkReadTimeSum
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMBlkWriteTimeCnt() float32 {
	if m != nil {
		return m.MBlkWriteTimeCnt
	}
	return 0
}

func (m *MetricsBucket_PostgreSQL) GetMBlkWriteTimeSum() float32 {
	if m != nil {
		return m.MBlkWriteTimeSum
	}
	return 0
}

func init() {
	proto.RegisterEnum("agent.ExampleFormat", ExampleFormat_name, ExampleFormat_value)
	proto.RegisterEnum("agent.ExampleType", ExampleType_name, ExampleType_value)
	proto.RegisterType((*MetricsBucket)(nil), "agent.MetricsBucket")
	proto.RegisterType((*MetricsBucket_Common)(nil), "agent.MetricsBucket.Common")
	proto.RegisterMapType((map[uint64]uint64)(nil), "agent.MetricsBucket.Common.ErrorsEntry")
	proto.RegisterType((*MetricsBucket_MySQL)(nil), "agent.MetricsBucket.MySQL")
	proto.RegisterType((*MetricsBucket_MongoDB)(nil), "agent.MetricsBucket.MongoDB")
	proto.RegisterType((*MetricsBucket_PostgreSQL)(nil), "agent.MetricsBucket.PostgreSQL")
}

func init() { proto.RegisterFile("agentpb/collector.proto", fileDescriptor_43c5f4e596d7786d) }

var fileDescriptor_43c5f4e596d7786d = []byte{
	// 2571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x9a, 0xeb, 0x7e, 0xdb, 0xb6,
	0x19, 0x87, 0x67, 0x3b, 0x3e, 0xc1, 0xb1, 0xad, 0x30, 0x3e, 0x30, 0x6a, 0xb6, 0x78, 0x5d, 0xbb,
	0x7a, 0x69, 0xea, 0xa4, 0x71, 0x93, 0x45, 0x3d, 0x2c, 0xb3, 0x63, 0x3b, 0x51, 0xe7, 0x53, 0x28,
	0xa5, 0x6e, 0xbb, 0x75, 0x1c, 0x44, 0xc1, 0x32, 0x2b, 0x1e, 0x14, 0x92, 0xaa, 0xa9, 0xdd, 0xc1,
	0xee, 0xa4, 0x17, 0xb4, 0xab, 0xd8, 0x55, 0xec, 0xf7, 0x02, 0x20, 0x08, 0x80, 0xa0, 0xbf, 0x99,
	0xc2, 0xf3, 0x00, 0xfa, 0xbf, 0xa0, 0x08, 0x12, 0x34, 0xda, 0xc4, 0x03, 0x12, 0x65, 0xa3, 0xde,
	0x63, 0x2f, 0x0e, 0x02, 0xe2, 0x65, 0x71, 0xb2, 0x33, 0x4a, 0xe2, 0x2c, 0xb6, 0x66, 0x69, 0x43,
	0xd3, 0xf6, 0xa3, 0x5f, 0x48, 0x94, 0xc5, 0xc9, 0x64, 0xd4, 0x7b, 0x4c, 0x3f, 0x4a, 0x19, 0xf0,
	0xe1, 0x7f, 0x0e, 0xd0, 0xf2, 0x09, 0xc9, 0x12, 0xdf, 0x4b, 0xf7, 0xc7, 0xde, 0x90, 0x64, 0xd6,
	0x2e, 0x9a, 0xf3, 0xe2, 0x30, 0x8c, 0x23, 0x7b, 0x6a, 0x6b, 0x6a, 0x7b, 0xe9, 0xe9, 0x07, 0x3b,
	0x54, 0xd8, 0x51, 0xa8, 0x9d, 0x57, 0x14, 0x71, 0x38, 0x6a, 0x3d, 0x41, 0xb3, 0xe1, 0x24, 0x7d,
	0x1f, 0xd8, 0xd3, 0xd4, 0x69, 0x1a, 0x9d, 0x93, 0x49, 0xe7, 0xed, 0xb1, 0xc3, 0x40, 0xeb, 0x39,
	0x9a, 0x0f, 0xe3, 0x68, 0x10, 0xf7, 0x7b, 0xf6, 0x0c, 0x75, 0xee, 0x9b, 0x1d, 0x60, 0x0e, 0xf6,
	0x9d, 0x02, 0xb6, 0x5e, 0x22, 0x34, 0x8a, 0xd3, 0x6c, 0x90, 0x10, 0x18, 0xee, 0x16, 0x55, 0x1f,
	0x18, 0xd5, 0x73, 0x86, 0xc1, 0x98, 0x92, 0xd2, 0xfc, 0xdf, 0x3c, 0x9a, 0x63, 0xdf, 0xde, 0xb2,
	0xd1, 0xfc, 0xfb, 0x31, 0x49, 0x26, 0x7e, 0x9f, 0x66, 0x5d, 0x74, 0x8a, 0x43, 0x6b, 0x0b, 0x2d,
	0x5d, 0xfa, 0xd1, 0x80, 0x24, 0xa3, 0xc4, 0x8f, 0x32, 0x9a, 0x6a, 0xd1, 0x91, 0x3f, 0xb2, 0x9a,
	0x68, 0xa1, 0x8f, 0x33, 0xdc, 0xc3, 0x29, 0xa1, 0x01, 0x16, 0x1d, 0x71, 0x6c, 0x6d, 0xa0, 0xb9,
	0xd4, 0xbb, 0x22, 0x21, 0xa6, 0xdf, 0x6f, 0xd1, 0xe1, 0x47, 0xf0, 0x79, 0x86, 0x7b, 0x01, 0x49,
	0xed, 0xd9, 0xad, 0x19, 0xf8, 0x9c, 0x1d, 0x41, 0x5f, 0xe3, 0x94, 0x24, 0x11, 0x0e, 0x89, 0x3d,
	0xc7, 0xfa, 0x2a, 0x8e, 0xad, 0x07, 0x68, 0xc9, 0x0b, 0x7c, 0x12, 0x65, 0xee, 0x55, 0x9c, 0x66,
	0xf6, 0x3c, 0x6d, 0x46, 0xec, 0xa3, 0x37, 0x71, 0x9a, 0x59, 0xf7, 0xd0, 0x02, 0x4d, 0xef, 0xfa,
	0x7d, 0x7b, 0x81, 0xa5, 0xa0, 0xc7, 0xed, 0xbe, 0xb5, 0x8b, 0x10, 0x6b, 0xca, 0x26, 0x23, 0x62,
	0x2f, 0x6e, 0x4d, 0x6d, 0xaf, 0x3c, 0x5d, 0xdb, 0x11, 0xe7, 0xc2, 0xce, 0x1e, 0x34, 0x76, 0x27,
	0x23, 0xe2, 0x2c, 0xe2, 0xe2, 0x4f, 0x6b, 0x17, 0x6d, 0x8c, 0x48, 0xe2, 0xc7, 0x7d, 0x37, 0xcd,
	0x70, 0x92, 0xb9, 0xe3, 0xc8, 0xcf, 0xdd, 0x94, 0x78, 0xa9, 0x8d, 0xb6, 0xa6, 0xb6, 0x97, 0x9d,
	0xbb, 0xac, 0xb5, 0x03, 0x8d, 0xef, 0x22, 0x3f, 0xef, 0x10, 0x2f, 0xb5, 0x1e, 0x21, 0x8b, 0x4b,
	0x01, 0x89, 0x06, 0xd9, 0x15, 0x13, 0x96, 0xa8, 0xd0, 0x60, 0x2d, 0xc7, 0xb4, 0x81, 0xd2, 0x36,
	0x9a, 0x27, 0x39, 0x0e, 0x47, 0x01, 0xb1, 0x6f, 0xb3, 0x6f, 0xcc, 0x0f, 0xad, 0xaf, 0xd0, 0x0a,
	0xff, 0xd3, 0xbd, 0x8c, 0x93, 0x10, 0x67, 0xf6, 0x32, 0xff, 0xd6, 0x6c, 0x86, 0x0f, 0x59, 0xe3,
	0x11, 0x6d, 0x73, 0x96, 0x89, 0x7c, 0x68, 0x3d, 0x43, 0xb7, 0x0b, 0x99, 0x06, 0x5e, 0xa1, 0xaa,
	0xa5, 0xaa, 0x34, 0xee, 0x12, 0x29, 0x0f, 0xac, 0x16, 0xba, 0x17, 0x8d, 0x43, 0x17, 0xa6, 0xde,
	0x27, 0xa9, 0x7b, 0xed, 0x67, 0x57, 0xee, 0x35, 0x4e, 0x22, 0x3f, 0x1a, 0xa4, 0xf6, 0xea, 0xd6,
	0xd4, 0xf6, 0xb4, 0xb3, 0x11, 0x8d, 0xc3, 0xb7, 0xac, 0xfd, 0xc2, 0xcf, 0xae, 0x2e, 0x78, 0xab,
	0xf5, 0x0c, 0x6d, 0x56, 0x54, 0x92, 0x24, 0x71, 0x92, 0xda, 0x0d, 0x2a, 0xae, 0xa9, 0xe2, 0x21,
	0x6d, 0xb3, 0x5e, 0xa2, 0x39, 0x4e, 0xdd, 0xd9, 0x9a, 0xd9, 0x5e, 0x7a, 0xfa, 0xc9, 0x0d, 0x3f,
	0xb1, 0x1d, 0xe6, 0x1c, 0x46, 0x59, 0x32, 0x71, 0xb8, 0x06, 0x27, 0x85, 0x34, 0xae, 0x6d, 0xd1,
	0xb1, 0x50, 0x39, 0x96, 0xf5, 0x09, 0x6a, 0xb0, 0xe6, 0x89, 0x9b, 0xf9, 0x21, 0x71, 0xbd, 0x28,
	0xb3, 0xef, 0x52, 0x6a, 0x99, 0x32, 0x93, 0xae, 0x1f, 0x92, 0x57, 0x51, 0x56, 0x01, 0xd3, 0x71,
	0x68, 0xaf, 0xe9, 0x60, 0x67, 0x1c, 0x56, 0xc0, 0xd0, 0x8f, 0xec, 0x75, 0x1d, 0x3c, 0xf1, 0xa3,
	0x2a, 0x88, 0x73, 0x7b, 0xa3, 0x02, 0xe2, 0xbc, 0x02, 0x8e, 0x5a, 0x2d, 0x7b, 0x53, 0x07, 0xcf,
	0x5b, 0xad, 0x66, 0x0b, 0x2d, 0x49, 0x45, 0xb0, 0x1a, 0x68, 0x66, 0x48, 0x26, 0xf4, 0x17, 0x7b,
	0xcb, 0x81, 0x3f, 0xad, 0x35, 0x34, 0xfb, 0x0b, 0x0e, 0xc6, 0x84, 0xfe, 0x4e, 0x6f, 0x39, 0xec,
	0xe0, 0xcb, 0xe9, 0x17, 0x53, 0xcd, 0x5f, 0x1f, 0xa2, 0x59, 0x7a, 0xd9, 0xb1, 0x3e, 0x46, 0xab,
	0xa1, 0x1b, 0xc4, 0xde, 0xb0, 0x2c, 0xc8, 0x14, 0x1d, 0xec, 0x76, 0x78, 0x1c, 0x7b, 0xc3, 0xa2,
	0x1e, 0x1a, 0x06, 0xe5, 0x98, 0xd6, 0x30, 0xa8, 0x86, 0x86, 0x41, 0x31, 0x66, 0x34, 0x0c, 0x6a,
	0xa1, 0x63, 0x38, 0xa7, 0x57, 0x04, 0x05, 0xc3, 0xb9, 0x8e, 0x41, 0x21, 0x66, 0x35, 0xec, 0xbc,
	0xd5, 0x62, 0x58, 0x12, 0x5f, 0xa7, 0x6e, 0x0a, 0x3f, 0x6a, 0x88, 0x30, 0xc7, 0x31, 0x27, 0xbe,
	0x4e, 0x3b, 0x24, 0xca, 0x44, 0x84, 0x12, 0x83, 0x08, 0xf3, 0x1a, 0x26, 0x22, 0x94, 0x18, 0x44,
	0x58, 0xd0, 0x30, 0x11, 0x41, 0xc2, 0x70, 0x4e, 0x2f, 0x24, 0x0a, 0x56, 0x44, 0x28, 0x31, 0x88,
	0x80, 0x34, 0x0c, 0x22, 0x7c, 0x86, 0xee, 0x72, 0x0c, 0x7e, 0x81, 0x7e, 0x44, 0xfa, 0x34, 0xc6,
	0x12, 0x45, 0x1b, 0x14, 0x3d, 0xe4, 0x0d, 0x10, 0xc5, 0x80, 0x43, 0x9c, 0xdb, 0x06, 0x1c, 0x22,
	0x19, 0x70, 0x88, 0xb5, 0x6c, 0xc0, 0x21, 0x9a, 0x09, 0xc7, 0x39, 0xbd, 0x6c, 0x54, 0x70, 0x9c,
	0x9b, 0x70, 0x88, 0xb9, 0x6a, 0xc0, 0xd5, 0xa8, 0xf8, 0xf2, 0x92, 0x78, 0x19, 0x8f, 0xda, 0x90,
	0xf0, 0x3d, 0xde, 0xa0, 0x46, 0x15, 0x38, 0x44, 0xbd, 0x63, 0xc0, 0xd5, 0xa8, 0x02, 0x87, 0xa8,
	0x96, 0x01, 0x57, 0xa3, 0x96, 0x38, 0xce, 0xf9, 0x25, 0x41, 0xc3, 0x95, 0xa8, 0x02, 0x87, 0xa8,
	0x6b, 0x06, 0x5c, 0x3d, 0x31, 0x13, 0x82, 0x59, 0xcc, 0x75, 0x69, 0xf2, 0x1d, 0x82, 0xfb, 0xea,
	0x89, 0x49, 0x31, 0x88, 0xb7, 0xa1, 0x61, 0xea, 0x89, 0x49, 0x31, 0x88, 0xb5, 0xa9, 0x61, 0xea,
	0x89, 0xc9, 0x30, 0x9c, 0xdb, 0xb6, 0x8e, 0x29, 0x27, 0x26, 0xc5, 0x20, 0xc6, 0x3d, 0x0d, 0x83,
	0x08, 0x9f, 0x22, 0x2b, 0x74, 0x43, 0x92, 0x0c, 0x88, 0x3b, 0xc2, 0x69, 0x4a, 0x52, 0x9a, 0xa2,
	0x49, 0xc9, 0xd5, 0xf0, 0x04, 0x1a, 0xce, 0xe9, 0xe7, 0x10, 0xa4, 0x0a, 0x43, 0x96, 0x0f, 0xaa,
	0x30, 0xc4, 0xa9, 0xc2, 0x90, 0xe8, 0x7e, 0x15, 0x86, 0x50, 0x06, 0x18, 0xe7, 0xf6, 0x6f, 0x0d,
	0x30, 0xce, 0x0d, 0x30, 0xa4, 0xfb, 0x5d, 0x15, 0x86, 0x80, 0x8f, 0xd1, 0x7a, 0xe8, 0xfa, 0x51,
	0x14, 0xf7, 0x7b, 0xae, 0x1f, 0xbb, 0x89, 0x1b, 0x8f, 0x58, 0xc6, 0x07, 0x7c, 0x52, 0xdb, 0xb4,
	0xad, 0x1d, 0x3b, 0x67, 0x23, 0x1a, 0xd2, 0x28, 0x40, 0xce, 0x2d, 0x83, 0x00, 0x41, 0x8d, 0x02,
	0x64, 0xfd, 0xbd, 0x41, 0x80, 0xb0, 0x66, 0x01, 0xe7, 0xf6, 0x87, 0x26, 0x01, 0xe7, 0x66, 0x01,
	0x32, 0xff, 0xc1, 0x20, 0x40, 0xe8, 0x5d, 0xb4, 0xa9, 0x0a, 0xbd, 0x49, 0xc6, 0xa7, 0xf6, 0x23,
	0xaa, 0x58, 0xa5, 0xb2, 0x0f, 0x4d, 0x10, 0xbc, 0x46, 0x82, 0xe8, 0x1f, 0x1b, 0x25, 0x08, 0x5f,
	0x23, 0x41, 0xfc, 0x3f, 0x1a, 0x25, 0x28, 0x40, 0x9d, 0x84, 0x73, 0xfb, 0x13, 0xb3, 0x84, 0xf3,
	0x3a, 0x09, 0xca, 0xb0, 0x6d, 0x94, 0xa0, 0x10, 0x9f, 0xa3, 0x0d, 0x55, 0xba, 0xc6, 0x3e, 0x5b,
	0x41, 0xfe, 0x44, 0x9d, 0x3b, 0xa5, 0x73, 0x81, 0x7d, 0xba, 0x8c, 0x98, 0x15, 0xa8, 0xc2, 0x43,
	0x93, 0x02, 0x45, 0x30, 0x2b, 0x50, 0x83, 0x4f, 0x4d, 0x0a, 0x94, 0xa0, 0x46, 0xc1, 0xb9, 0xfd,
	0xc8, 0xa8, 0xe0, 0xbc, 0x46, 0x81, 0xfc, 0x9f, 0x99, 0x14, 0x88, 0xdf, 0x42, 0x4d, 0xa1, 0x24,
	0xc4, 0x63, 0x6b, 0xad, 0x28, 0xc1, 0x0e, 0xd5, 0xd6, 0xb9, 0xe6, 0x10, 0x0f, 0x16, 0xdd, 0xa2,
	0x0c, 0xf5, 0x2a, 0x94, 0xe2, 0x71, 0x9d, 0x0a, 0xe5, 0xa8, 0x57, 0xa1, 0x24, 0x4f, 0xea, 0x54,
	0x28, 0xcb, 0x0d, 0x2a, 0xce, 0xed, 0xcf, 0x6b, 0x55, 0x9c, 0xdf, 0xa0, 0x42, 0x89, 0x9e, 0xd6,
	0xa9, 0x50, 0xa6, 0x2f, 0xa4, 0x53, 0xeb, 0xfd, 0x98, 0x8c, 0x49, 0x59, 0xa3, 0x5d, 0xea, 0xdd,
	0xe5, 0xde, 0x5b, 0x68, 0x2c, 0x2a, 0x54, 0x63, 0x41, 0x79, 0xbe, 0x30, 0x5b, 0x50, 0x9c, 0x1a,
	0x0b, 0x2a, 0xf3, 0xcc, 0x6c, 0x41, 0x5d, 0xea, 0x2c, 0x9c, 0xdb, 0xcf, 0x6b, 0x2c, 0x9c, 0xd7,
	0x59, 0x50, 0x8f, 0x3f, 0x9b, 0x2d, 0xa8, 0xc6, 0xd7, 0xe8, 0x03, 0x61, 0x8d, 0xf0, 0x80, 0xa4,
	0x6e, 0xdf, 0x4f, 0x33, 0x3f, 0xf2, 0x58, 0x45, 0x5e, 0x50, 0x73, 0x93, 0x9b, 0xe7, 0x00, 0x1c,
	0xf0, 0x76, 0xa8, 0xca, 0x0d, 0x36, 0x54, 0xa6, 0x55, 0x6f, 0x43, 0x75, 0x6e, 0xb0, 0xa1, 0x42,
	0x5f, 0xd6, 0xdb, 0x50, 0xa5, 0x9b, 0x6c, 0x9c, 0xdb, 0x5f, 0xdd, 0x60, 0xe3, 0xfc, 0x26, 0x1b,
	0x2a, 0xf6, 0x75, 0xbd, 0x2d, 0x16, 0x52, 0x76, 0x57, 0xcf, 0x1f, 0x05, 0xa1, 0x58, 0xdf, 0xf0,
	0x45, 0x89, 0xde, 0xd7, 0xb3, 0x27, 0x41, 0xb1, 0x90, 0x2a, 0x30, 0xd4, 0xe6, 0x2f, 0x55, 0x58,
	0x2c, 0xa4, 0x0a, 0x0c, 0xa5, 0x78, 0x59, 0x85, 0xc5, 0x42, 0xaa, 0xc2, 0x38, 0xb7, 0xff, 0x6a,
	0x80, 0x8b, 0x85, 0x54, 0x81, 0x21, 0xe8, 0x5e, 0x15, 0x86, 0x80, 0xf4, 0xb1, 0x85, 0x2f, 0x09,
	0xc5, 0x6d, 0xf8, 0x3e, 0x7f, 0x6c, 0x61, 0xcb, 0x01, 0xbf, 0x0f, 0xd7, 0x41, 0x88, 0xf6, 0x4a,
	0x07, 0xc5, 0xa3, 0x95, 0x04, 0x42, 0xac, 0x03, 0x1d, 0x14, 0x8f, 0x56, 0x32, 0x88, 0x73, 0xfb,
	0xb0, 0x02, 0x16, 0x8f, 0x56, 0x12, 0x08, 0x71, 0x8e, 0x74, 0x50, 0x84, 0xc9, 0xc2, 0x91, 0xcb,
	0x76, 0x22, 0x68, 0x98, 0xd7, 0x1c, 0xec, 0x86, 0xa3, 0x2e, 0xfd, 0x54, 0x84, 0x91, 0x40, 0x08,
	0xf3, 0x46, 0x07, 0x45, 0x18, 0x09, 0x84, 0x30, 0x6d, 0x1d, 0x14, 0x61, 0x64, 0x10, 0xe7, 0xf6,
	0xb7, 0x15, 0xb0, 0x08, 0x23, 0x81, 0x10, 0xe6, 0x6f, 0x3a, 0x08, 0x61, 0x9e, 0xc0, 0xed, 0x01,
	0x80, 0x7d, 0x3f, 0x1d, 0xca, 0x89, 0x8e, 0xf9, 0xba, 0xd0, 0x0d, 0x47, 0x07, 0x7e, 0x3a, 0x2c,
	0x53, 0x19, 0x0d, 0x88, 0x76, 0x62, 0x32, 0x20, 0x9e, 0xd1, 0x80, 0x8c, 0xa7, 0x26, 0x03, 0x72,
	0x9a, 0x0d, 0x9c, 0xdb, 0x67, 0x46, 0x03, 0xe7, 0x66, 0x03, 0x52, 0x9f, 0x9b, 0x0c, 0x25, 0x39,
	0x85, 0xdd, 0xd4, 0xff, 0x37, 0x4f, 0xfe, 0xb6, 0x34, 0x28, 0xdd, 0x81, 0x16, 0x25, 0xb9, 0x6c,
	0x40, 0x72, 0xc7, 0x64, 0x28, 0xc9, 0x65, 0x03, 0x92, 0x77, 0x4c, 0x86, 0x92, 0x5c, 0x31, 0x70,
	0x6e, 0x77, 0x8d, 0x86, 0x9c, 0x5c, 0x36, 0x20, 0xf9, 0x3b, 0x93, 0x01, 0xc9, 0x1f, 0xa0, 0xdb,
	0xa1, 0xfb, 0xde, 0x73, 0xaf, 0xf8, 0x3a, 0xf5, 0x1d, 0x05, 0x17, 0xc3, 0xb7, 0xde, 0x1b, 0xb6,
	0x3a, 0xc9, 0x00, 0xe4, 0xbb, 0x90, 0x01, 0xf1, 0xb8, 0x71, 0x39, 0x0e, 0x02, 0x37, 0xf5, 0x70,
	0x44, 0x3b, 0xf9, 0x9e, 0x3f, 0x20, 0x1c, 0x8d, 0x83, 0xa0, 0xe3, 0xe1, 0x48, 0x3c, 0xbc, 0x94,
	0x18, 0x74, 0xf5, 0x83, 0x86, 0xa9, 0xbd, 0xfd, 0x1c, 0xfb, 0xac, 0xb7, 0x1f, 0x25, 0xec, 0xdb,
	0xd8, 0xd7, 0x7a, 0xa3, 0x18, 0xf4, 0xf6, 0x77, 0x0d, 0x13, 0xbd, 0x95, 0xf5, 0x80, 0xde, 0xfe,
	0xc1, 0xb1, 0xa2, 0x12, 0xa2, 0x37, 0xa9, 0x6c, 0xe3, 0xd0, 0xfe, 0x49, 0xc3, 0xc4, 0x3d, 0x6a,
	0x89, 0xc5, 0x11, 0x3b, 0xc1, 0xa0, 0xd7, 0x7f, 0xf2, 0x3b, 0xc7, 0x02, 0x3f, 0x8b, 0xe0, 0x04,
	0x13, 0x77, 0xc3, 0x55, 0x09, 0xc6, 0x70, 0x8d, 0x12, 0x8c, 0xf4, 0x11, 0x5a, 0x09, 0xdd, 0x4b,
	0x3f, 0x20, 0x69, 0x9c, 0xb0, 0x79, 0xf9, 0x57, 0x91, 0x8e, 0x7f, 0x08, 0x5d, 0xab, 0x14, 0xf4,
	0x88, 0x35, 0x0a, 0xfa, 0x7a, 0x0a, 0xb7, 0x7b, 0x82, 0x92, 0xbf, 0x74, 0x8f, 0x8f, 0x5f, 0xd0,
	0xe5, 0x97, 0x36, 0x3b, 0x30, 0x82, 0x67, 0x74, 0x60, 0x9c, 0x6f, 0xd0, 0xfd, 0xd0, 0x4d, 0x49,
	0x40, 0xbc, 0x8c, 0xcd, 0x4c, 0x82, 0xa3, 0x01, 0x29, 0xa7, 0xb1, 0xcf, 0xd7, 0xbd, 0x0e, 0x45,
	0x60, 0x96, 0x1c, 0x00, 0x8a, 0x19, 0xbd, 0x49, 0x87, 0x81, 0x49, 0xbd, 0x2e, 0x16, 0x37, 0xae,
	0x33, 0x13, 0xc6, 0xbc, 0xe4, 0x4b, 0x10, 0x93, 0xa8, 0x20, 0x96, 0x4d, 0x05, 0x86, 0x11, 0x06,
	0x55, 0x18, 0x7a, 0x7e, 0x8e, 0x6c, 0xbd, 0xe7, 0x2b, 0xe2, 0xb1, 0x0a, 0x5e, 0xb1, 0x4d, 0x4a,
	0xa5, 0x7f, 0x68, 0x84, 0x41, 0xea, 0x3c, 0x18, 0xca, 0xaf, 0xf1, 0xc4, 0x02, 0x40, 0xeb, 0x5e,
	0xe6, 0xf8, 0x99, 0x5f, 0xae, 0x3b, 0x71, 0x52, 0xa6, 0xd0, 0x41, 0xe8, 0x78, 0xa8, 0x83, 0xe2,
	0x57, 0xc0, 0x40, 0x78, 0x8e, 0x87, 0x0e, 0x03, 0x7e, 0xa2, 0x50, 0x2e, 0xbe, 0x4e, 0xc5, 0xaf,
	0xa0, 0xc4, 0xa0, 0xbb, 0x50, 0xc3, 0xd4, 0xde, 0xc4, 0xef, 0x3d, 0x92, 0x30, 0xe5, 0xf7, 0x5e,
	0x62, 0xd0, 0x5b, 0xac, 0x61, 0xd0, 0xdb, 0x23, 0x74, 0x37, 0x74, 0xa3, 0xd8, 0xf5, 0xa3, 0x3e,
	0xc9, 0xdd, 0x71, 0xca, 0x77, 0x79, 0x46, 0x7c, 0x2e, 0x4e, 0xe3, 0x36, 0x34, 0xbc, 0x4b, 0xd9,
	0x26, 0x8f, 0x81, 0x86, 0x8e, 0xdf, 0x57, 0x69, 0xe8, 0xfb, 0x19, 0xcc, 0x40, 0x14, 0xbb, 0x83,
	0x38, 0xee, 0xeb, 0x03, 0x24, 0xfc, 0xbe, 0xf5, 0x34, 0x7e, 0x1d, 0xc7, 0x7d, 0x65, 0x90, 0x3a,
	0x0d, 0x46, 0x4a, 0xcd, 0x5a, 0x67, 0x1c, 0x36, 0xff, 0x3b, 0x8b, 0xe6, 0xf9, 0xdb, 0x16, 0xb6,
	0xff, 0xd3, 0x8f, 0xbd, 0xd4, 0x4d, 0x48, 0x36, 0x4e, 0x8a, 0x6d, 0xba, 0x29, 0xfe, 0x98, 0x7d,
	0x10, 0x7b, 0xa9, 0xc3, 0x1b, 0xc4, 0xde, 0x95, 0x8a, 0x97, 0x1b, 0xa7, 0x2a, 0x2e, 0xf6, 0xae,
	0x54, 0xbc, 0xdc, 0x40, 0x55, 0x71, 0xb1, 0x77, 0xa5, 0xe1, 0x62, 0x23, 0x55, 0xc3, 0x8b, 0xbd,
	0x2b, 0x15, 0x2f, 0x37, 0x54, 0x55, 0x9c, 0x3d, 0x19, 0xaf, 0x87, 0x6e, 0x42, 0xd2, 0x51, 0x1c,
	0xa5, 0x44, 0xbe, 0x65, 0x9d, 0xe3, 0x57, 0x0a, 0x87, 0xb7, 0x95, 0x77, 0xad, 0x46, 0xa5, 0xdc,
	0x66, 0xd5, 0x15, 0xf6, 0x64, 0x6c, 0x50, 0xca, 0x2d, 0x57, 0x5d, 0x61, 0x4f, 0xc6, 0x26, 0x45,
	0x6c, 0xbf, 0x56, 0x14, 0xfa, 0x64, 0x6c, 0x50, 0xca, 0xad, 0x58, 0x5d, 0x11, 0xb7, 0xeb, 0xb4,
	0x5a, 0x70, 0x9a, 0xab, 0xfb, 0xb1, 0xab, 0xb4, 0x58, 0x1d, 0xf6, 0xb9, 0xb8, 0xee, 0x28, 0x70,
	0xb9, 0x1b, 0xab, 0xc0, 0xe2, 0x8a, 0xa6, 0xc0, 0xe5, 0x5e, 0xac, 0x02, 0x8b, 0xdb, 0x75, 0x15,
	0x16, 0x3b, 0xb1, 0x2a, 0x5c, 0xdc, 0xae, 0x2b, 0x70, 0xb9, 0x0f, 0xab, 0xc0, 0xe7, 0xad, 0x56,
	0xf3, 0x57, 0x84, 0x50, 0xf9, 0x26, 0xd0, 0xba, 0x8f, 0x50, 0x58, 0x5e, 0x46, 0xd8, 0x09, 0xbd,
	0x10, 0x16, 0x97, 0x90, 0xb2, 0xb5, 0x3c, 0x7f, 0x59, 0xab, 0xb8, 0x03, 0x4a, 0xaf, 0x70, 0x42,
	0xfa, 0x6e, 0x2f, 0x18, 0xa6, 0xe2, 0xa6, 0x63, 0x86, 0xdf, 0x9d, 0x74, 0x68, 0xdb, 0x7e, 0x30,
	0x4c, 0xf9, 0xcd, 0x87, 0xd1, 0x80, 0xae, 0x6f, 0x99, 0x0c, 0xb1, 0xda, 0xc9, 0x86, 0xd8, 0x51,
	0x9d, 0xe5, 0x73, 0x58, 0x2a, 0xc5, 0xbe, 0xaa, 0xd9, 0x81, 0x61, 0xe6, 0x8c, 0x0e, 0x8c, 0xf3,
	0x02, 0xdd, 0x53, 0x9d, 0xbe, 0x9f, 0x64, 0x3e, 0x9f, 0xfe, 0x79, 0xbe, 0x49, 0x50, 0x6a, 0x07,
	0xac, 0x15, 0x46, 0xab, 0x35, 0x61, 0xc0, 0x85, 0x3a, 0xd3, 0x38, 0xe6, 0x75, 0xe2, 0x67, 0x19,
	0x61, 0xd7, 0xe0, 0xc5, 0x8a, 0x79, 0xc1, 0x5a, 0x8d, 0x63, 0x16, 0x26, 0x8c, 0x89, 0xea, 0x4c,
	0x18, 0x73, 0x07, 0xad, 0xd1, 0x57, 0x2b, 0x38, 0x50, 0xa7, 0xac, 0x78, 0xe3, 0x70, 0x0c, 0x4d,
	0xd2, 0x8c, 0x99, 0x78, 0xf9, 0x95, 0x83, 0xcc, 0x8b, 0x73, 0x42, 0xe2, 0xc5, 0x74, 0x2d, 0xf3,
	0x19, 0x16, 0x42, 0x31, 0x5b, 0x46, 0x03, 0x86, 0x58, 0x31, 0x19, 0x62, 0x05, 0x97, 0x0c, 0x79,
	0xaa, 0x56, 0xf9, 0x4a, 0x2c, 0x24, 0x69, 0xa6, 0xea, 0x3c, 0x18, 0xac, 0x51, 0xe3, 0x99, 0xc6,
	0x93, 0xa7, 0xe9, 0x8e, 0xee, 0x49, 0xb3, 0x54, 0xe7, 0xc1, 0x78, 0x56, 0x8d, 0x27, 0xe6, 0x28,
	0x23, 0xe1, 0x48, 0x2b, 0x61, 0xf1, 0x76, 0xa2, 0x4b, 0xc2, 0x91, 0x5c, 0x41, 0x13, 0x5f, 0xbe,
	0xb7, 0x54, 0x79, 0xb1, 0xd5, 0x54, 0xf2, 0x72, 0x9c, 0x75, 0xbe, 0x1e, 0x16, 0x8a, 0x94, 0xa6,
	0xc6, 0x2a, 0xdf, 0x5a, 0x54, 0x2c, 0x71, 0x3f, 0xd0, 0x0b, 0x86, 0xec, 0x5b, 0x89, 0x57, 0x8d,
	0x9b, 0xfc, 0xe2, 0xb4, 0x1f, 0x0c, 0xe1, 0x5b, 0x15, 0x6f, 0x1b, 0x0d, 0x34, 0xf4, 0x6f, 0x57,
	0x69, 0x51, 0x27, 0xa0, 0xe1, 0xbb, 0x90, 0xb2, 0xf3, 0x7b, 0x3c, 0xf7, 0x7e, 0x30, 0x84, 0x6f,
	0x42, 0x8a, 0xde, 0x4d, 0x3c, 0x74, 0xdf, 0x34, 0xf0, 0x9d, 0x71, 0xf8, 0xb0, 0x8d, 0x96, 0x95,
	0xf7, 0xeb, 0x56, 0x13, 0x6d, 0x1c, 0x7e, 0xbf, 0x77, 0x72, 0x7e, 0x7c, 0xe8, 0x1e, 0x9d, 0x39,
	0x27, 0x7b, 0x5d, 0xb7, 0x7d, 0xfa, 0xdd, 0xde, 0x71, 0xfb, 0xa0, 0xf1, 0x1b, 0x6b, 0x09, 0xcd,
	0xf3, 0xb6, 0xc6, 0x94, 0xb5, 0x8a, 0x96, 0x8e, 0xda, 0xa7, 0xaf, 0x0f, 0x9d, 0x73, 0xa7, 0x7d,
	0xda, 0x6d, 0x4c, 0x3f, 0xfc, 0x09, 0x2d, 0x49, 0xef, 0xdb, 0x2d, 0x1b, 0xad, 0x15, 0x1d, 0x75,
	0x7f, 0x38, 0x3f, 0x94, 0xba, 0x41, 0x68, 0xce, 0xd9, 0x3b, 0x3d, 0x38, 0x3b, 0x69, 0x4c, 0x41,
	0x97, 0x9d, 0xe3, 0xb3, 0x8b, 0xc3, 0x4e, 0xb7, 0x31, 0x0d, 0x07, 0x47, 0x7b, 0x9d, 0x2e, 0x1c,
	0xcc, 0x58, 0x2b, 0x08, 0x5d, 0xb4, 0xbb, 0x6f, 0xdc, 0x43, 0xc7, 0x39, 0x73, 0x1a, 0xb7, 0xf6,
	0x17, 0x7f, 0x9c, 0xe7, 0xff, 0xf1, 0xd2, 0x9b, 0xa3, 0xff, 0xc7, 0xb2, 0xfb, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xde, 0xca, 0x88, 0x83, 0x03, 0x23, 0x00, 0x00,
}
