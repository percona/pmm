syntax = "proto3";

package agent;

option go_package = "agentpb";

import "google/protobuf/timestamp.proto";
import "inventorypb/agent_status.proto";
import "inventorypb/services.proto";
import "managementpb/actions.proto";
import "qanpb/collector.proto";

// Type represents Agent type.
// TODO Replace with inventory.AgentType. https://jira.percona.com/browse/PMM-3786
enum Type {
  TYPE_INVALID = 0;
  PMM_AGENT = 1;
  NODE_EXPORTER = 2;
  MYSQLD_EXPORTER = 3;
  MONGODB_EXPORTER = 4;
  POSTGRES_EXPORTER = 5;
  QAN_MYSQL_PERFSCHEMA_AGENT = 6;
  QAN_MYSQL_SLOWLOG_AGENT = 7;
  QAN_MONGODB_PROFILER_AGENT = 8;
  RDS_EXPORTER = 9;
}

// Ping is a AgentMessage/ServerMessage for checking connectivity, latency and clock drift.
message Ping {}

// Pong is an AgentMessage/ServerMessage with current time for measuring clock drift.
message Pong {
  google.protobuf.Timestamp current_time = 1;
}

// QANCollectRequest is an AgentMessage for sending QAN data for qan-api.
message QANCollectRequest {
  qan.CollectRequest message = 1;
}

// QANCollectResponse is a ServerMessage for QAN data acceptance.
message QANCollectResponse {}

// StateChangedRequest is an AgentMessage describing actual agent status.
message StateChangedRequest {
  string agent_id = 1;
  inventory.AgentStatus status = 2;
  uint32 listen_port = 3;
}

// StateChangedResponse is a ServerMessage for StateChangedRequest acceptance.
message StateChangedResponse {}

// SetStateRequest is a ServerMessage asking pmm-agent to run agents according to desired state.
message SetStateRequest {
  // AgentProcess describes desired configuration of a single agent process started by pmm-agent.
  message AgentProcess {
    Type type = 1;
    string template_left_delim = 2;
    string template_right_delim = 3;
    repeated string args = 4;
    repeated string env = 5;
    map<string, string> text_files = 6;
  }
  map<string, AgentProcess> agent_processes = 1;
  // BuiltinAgent describes desired configuration of a single built-in agent for pmm-agent.
  message BuiltinAgent {
    Type type = 1;
    string dsn = 2;
  }
  map<string, BuiltinAgent> builtin_agents = 2;
}

// SetStateResponse is an AgentMessage for SetStateRequest acceptance.
message SetStateResponse {
  // TODO https://jira.percona.com/browse/PMM-3786
  // Fatal errors:
  //   - invalid template
  //   - pmm-agent is shuting down
  // Temporary errors:
  //   - no free ports
  // Send them there or via StateChangedRequest?

}

// MysqlExplainOutputFormat output formats supported by MySQL Explain action.
enum MysqlExplainOutputFormat {
  MYSQL_EXPLAIN_OUTPUT_FORMAT_INVALID = 0;
  MYSQL_EXPLAIN_OUTPUT_FORMAT_DEFAULT = 1;
  MYSQL_EXPLAIN_OUTPUT_FORMAT_JSON = 2;
}

// StartActionRequest is a ServerMessage asking pmm-agent to start action.
message StartActionRequest {
  // ProcessParams describes parameters for all process actions.
  message ProcessParams {
    repeated string args = 1;
  }
  // MySQLExplainParams describes MySQL Explain action parameters.
  message MySQLExplainParams {
    string dsn = 1;
    string query = 2;
    MysqlExplainOutputFormat output_format = 3;
  }
  string action_id = 1;
  management.ActionType type = 2;
  oneof params {
    ProcessParams process_params = 3;
    MySQLExplainParams mysql_explain_params = 4;
  }
}

// StartActionResponse is an AgentMessage for StartActionRequest acceptance.
message StartActionResponse {}

// StopActionRequest is a ServerMessage asking pmm-agent to stop action.
message StopActionRequest {
  string action_id = 1;
}

// StopActionResponse is an AgentMessage for StopActionRequest acceptance.
message StopActionResponse {}

// ActionResultRequest is an AgentMessage containing action run status and new chunk of output.
message ActionResultRequest {
  // Unique action ID.
  string action_id = 1;
  // New chunk of action output.
  bytes output = 3;
  // True if action is finished.
  bool done = 4;
  // Error message if action failed.
  string error = 5;
}

// ActionResultResponse is an ServerMessage for ActionResultRequest acceptance.
message ActionResultResponse {}

// CheckConnectionRequest is a ServerMessage asking pmm-agent to check connection with service.
message CheckConnectionRequest {
  // Service type.
  inventory.ServiceType type = 1;
  // DSN for the service.
  string dsn = 2;
}

// CheckConnectionResponse is an AgentMessage containing a result of check request.
message CheckConnectionResponse {
  // Error message if connection is failed.
  string error = 1;
}

message AgentMessage {
  // TODO https://jira.percona.com/browse/PMM-3449

  uint32 id = 1;
  oneof payload {
    // requests from agent
    Ping ping = 2;
    StateChangedRequest state_changed = 3;
    QANCollectRequest qan_collect = 4;
    ActionResultRequest action_result = 5;
    // responses from agent
    Pong pong = 8;
    SetStateResponse set_state = 9;
    StartActionResponse start_action = 10;
    StopActionResponse stop_action = 11;
    CheckConnectionResponse check_connection = 12;
  }
}

message ServerMessage {
  // TODO https://jira.percona.com/browse/PMM-3449

  uint32 id = 1;
  oneof payload {
    // responses from server
    Pong pong = 2;
    StateChangedResponse state_changed = 3;
    QANCollectResponse qan_collect = 4;
    ActionResultResponse action_result = 5;
    // requests from server
    Ping ping = 8;
    SetStateRequest set_state = 9;
    StartActionRequest start_action = 10;
    StopActionRequest stop_action = 11;
    CheckConnectionRequest check_connection = 12;
  }
}

// Agent service provides private methods for pmm-agent <-> pmm-managed interactions.
service Agent {
  // Connect establishes two-way communication channel between pmm-agent and pmm-managed.
  rpc Connect(stream AgentMessage) returns (stream ServerMessage);
}
