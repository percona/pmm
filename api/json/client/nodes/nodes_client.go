// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddNode adds node adds bare metal virtual machine or container node node
*/
func (a *Client) AddNode(params *AddNodeParams) (*AddNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddNodeOK), nil

}

/*
AddRDSNode adds RDS node adds a w s RDS node
*/
func (a *Client) AddRDSNode(params *AddRDSNodeParams) (*AddRDSNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRDSNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddRDSNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddRDSNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRDSNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRDSNodeOK), nil

}

/*
AddRemoveNode adds remove node adds remote node
*/
func (a *Client) AddRemoveNode(params *AddRemoveNodeParams) (*AddRemoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRemoveNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddRemoveNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddRemoveNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRemoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRemoveNodeOK), nil

}

/*
GetNode gets node returns a single node by ID
*/
func (a *Client) GetNode(params *GetNodeParams) (*GetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/GetNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeOK), nil

}

/*
ListNodes lists nodes returns a list of all nodes
*/
func (a *Client) ListNodes(params *ListNodesParams) (*ListNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNodes",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ListNodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNodesOK), nil

}

/*
RemoveNode removes node removes node without any agents and services
*/
func (a *Client) RemoveNode(params *RemoveNodeParams) (*RemoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/RemoveNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveNodeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
