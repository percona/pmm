// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/percona/pmm/api/json/models"
)

// NewAddMySQLServiceParams creates a new AddMySQLServiceParams object
// with the default values initialized.
func NewAddMySQLServiceParams() *AddMySQLServiceParams {
	var ()
	return &AddMySQLServiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddMySQLServiceParamsWithTimeout creates a new AddMySQLServiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddMySQLServiceParamsWithTimeout(timeout time.Duration) *AddMySQLServiceParams {
	var ()
	return &AddMySQLServiceParams{

		timeout: timeout,
	}
}

// NewAddMySQLServiceParamsWithContext creates a new AddMySQLServiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddMySQLServiceParamsWithContext(ctx context.Context) *AddMySQLServiceParams {
	var ()
	return &AddMySQLServiceParams{

		Context: ctx,
	}
}

// NewAddMySQLServiceParamsWithHTTPClient creates a new AddMySQLServiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddMySQLServiceParamsWithHTTPClient(client *http.Client) *AddMySQLServiceParams {
	var ()
	return &AddMySQLServiceParams{
		HTTPClient: client,
	}
}

/*AddMySQLServiceParams contains all the parameters to send to the API endpoint
for the add my SQL service operation typically these are written to a http.Request
*/
type AddMySQLServiceParams struct {

	/*Body*/
	Body models.InventoryAddMySQLServiceRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add my SQL service params
func (o *AddMySQLServiceParams) WithTimeout(timeout time.Duration) *AddMySQLServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add my SQL service params
func (o *AddMySQLServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add my SQL service params
func (o *AddMySQLServiceParams) WithContext(ctx context.Context) *AddMySQLServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add my SQL service params
func (o *AddMySQLServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add my SQL service params
func (o *AddMySQLServiceParams) WithHTTPClient(client *http.Client) *AddMySQLServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add my SQL service params
func (o *AddMySQLServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add my SQL service params
func (o *AddMySQLServiceParams) WithBody(body models.InventoryAddMySQLServiceRequest) *AddMySQLServiceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add my SQL service params
func (o *AddMySQLServiceParams) SetBody(body models.InventoryAddMySQLServiceRequest) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *AddMySQLServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
