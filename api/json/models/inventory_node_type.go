// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InventoryNodeType NodeType represents Node type.
// swagger:model inventoryNodeType
type InventoryNodeType string

const (

	// InventoryNodeTypeNODETYPEINVALID captures enum value "NODE_TYPE_INVALID"
	InventoryNodeTypeNODETYPEINVALID InventoryNodeType = "NODE_TYPE_INVALID"

	// InventoryNodeTypeBAREMETAL captures enum value "BARE_METAL"
	InventoryNodeTypeBAREMETAL InventoryNodeType = "BARE_METAL"

	// InventoryNodeTypeVIRTUALMACHINE captures enum value "VIRTUAL_MACHINE"
	InventoryNodeTypeVIRTUALMACHINE InventoryNodeType = "VIRTUAL_MACHINE"

	// InventoryNodeTypeCONTAINER captures enum value "CONTAINER"
	InventoryNodeTypeCONTAINER InventoryNodeType = "CONTAINER"

	// InventoryNodeTypeREMOTE captures enum value "REMOTE"
	InventoryNodeTypeREMOTE InventoryNodeType = "REMOTE"

	// InventoryNodeTypeRDS captures enum value "RDS"
	InventoryNodeTypeRDS InventoryNodeType = "RDS"
)

// for schema
var inventoryNodeTypeEnum []interface{}

func init() {
	var res []InventoryNodeType
	if err := json.Unmarshal([]byte(`["NODE_TYPE_INVALID","BARE_METAL","VIRTUAL_MACHINE","CONTAINER","REMOTE","RDS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryNodeTypeEnum = append(inventoryNodeTypeEnum, v)
	}
}

func (m InventoryNodeType) validateInventoryNodeTypeEnum(path, location string, value InventoryNodeType) error {
	if err := validate.Enum(path, location, value, inventoryNodeTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this inventory node type
func (m InventoryNodeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInventoryNodeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
