// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InventoryListNodesResponse inventory list nodes response
// swagger:model inventoryListNodesResponse
type InventoryListNodesResponse struct {

	// bare metal
	BareMetal []*InventoryBareMetalNode `json:"bare_metal"`

	// container
	Container []*InventoryContainerNode `json:"container"`

	// rds
	RDS []*InventoryRDSNode `json:"rds"`

	// remote
	Remote []*InventoryRemoteNode `json:"remote"`

	// virtual machine
	VirtualMachine []*InventoryVirtualMachineNode `json:"virtual_machine"`
}

// Validate validates this inventory list nodes response
func (m *InventoryListNodesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBareMetal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRDS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachine(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryListNodesResponse) validateBareMetal(formats strfmt.Registry) error {

	if swag.IsZero(m.BareMetal) { // not required
		return nil
	}

	for i := 0; i < len(m.BareMetal); i++ {
		if swag.IsZero(m.BareMetal[i]) { // not required
			continue
		}

		if m.BareMetal[i] != nil {
			if err := m.BareMetal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bare_metal" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Container) { // not required
		return nil
	}

	for i := 0; i < len(m.Container); i++ {
		if swag.IsZero(m.Container[i]) { // not required
			continue
		}

		if m.Container[i] != nil {
			if err := m.Container[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("container" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateRDS(formats strfmt.Registry) error {

	if swag.IsZero(m.RDS) { // not required
		return nil
	}

	for i := 0; i < len(m.RDS); i++ {
		if swag.IsZero(m.RDS[i]) { // not required
			continue
		}

		if m.RDS[i] != nil {
			if err := m.RDS[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	for i := 0; i < len(m.Remote); i++ {
		if swag.IsZero(m.Remote[i]) { // not required
			continue
		}

		if m.Remote[i] != nil {
			if err := m.Remote[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateVirtualMachine(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachine) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachine); i++ {
		if swag.IsZero(m.VirtualMachine[i]) { // not required
			continue
		}

		if m.VirtualMachine[i] != nil {
			if err := m.VirtualMachine[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtual_machine" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryListNodesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryListNodesResponse) UnmarshalBinary(b []byte) error {
	var res InventoryListNodesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
