// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agentlocal/v1/agentlocal.proto

package agentlocalv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentLocalService_Status_FullMethodName = "/agentlocal.v1.AgentLocalService/Status"
	AgentLocalService_Reload_FullMethodName = "/agentlocal.v1.AgentLocalService/Reload"
)

// AgentLocalServiceClient is the client API for AgentLocalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentLocalServiceClient interface {
	// Status returns current pmm-agent status.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Reload reloads pmm-agent configuration.
	Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error)
}

type agentLocalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentLocalServiceClient(cc grpc.ClientConnInterface) AgentLocalServiceClient {
	return &agentLocalServiceClient{cc}
}

func (c *agentLocalServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentLocalService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentLocalServiceClient) Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error) {
	out := new(ReloadResponse)
	err := c.cc.Invoke(ctx, AgentLocalService_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentLocalServiceServer is the server API for AgentLocalService service.
// All implementations must embed UnimplementedAgentLocalServiceServer
// for forward compatibility
type AgentLocalServiceServer interface {
	// Status returns current pmm-agent status.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Reload reloads pmm-agent configuration.
	Reload(context.Context, *ReloadRequest) (*ReloadResponse, error)
	mustEmbedUnimplementedAgentLocalServiceServer()
}

// UnimplementedAgentLocalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentLocalServiceServer struct{}

func (UnimplementedAgentLocalServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func (UnimplementedAgentLocalServiceServer) Reload(context.Context, *ReloadRequest) (*ReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedAgentLocalServiceServer) mustEmbedUnimplementedAgentLocalServiceServer() {}

// UnsafeAgentLocalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentLocalServiceServer will
// result in compilation errors.
type UnsafeAgentLocalServiceServer interface {
	mustEmbedUnimplementedAgentLocalServiceServer()
}

func RegisterAgentLocalServiceServer(s grpc.ServiceRegistrar, srv AgentLocalServiceServer) {
	s.RegisterService(&AgentLocalService_ServiceDesc, srv)
}

func _AgentLocalService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentLocalServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentLocalService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentLocalServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentLocalService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentLocalServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentLocalService_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentLocalServiceServer).Reload(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentLocalService_ServiceDesc is the grpc.ServiceDesc for AgentLocalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentLocalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentlocal.v1.AgentLocalService",
	HandlerType: (*AgentLocalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AgentLocalService_Status_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _AgentLocalService_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agentlocal/v1/agentlocal.proto",
}
