// Code generated by go-swagger; DO NOT EDIT.

package dumps_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDumpLogsReader is a Reader for the GetDumpLogs structure.
type GetDumpLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDumpLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDumpLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDumpLogsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDumpLogsOK creates a GetDumpLogsOK with default headers values
func NewGetDumpLogsOK() *GetDumpLogsOK {
	return &GetDumpLogsOK{}
}

/*
GetDumpLogsOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetDumpLogsOK struct {
	Payload *GetDumpLogsOKBody
}

func (o *GetDumpLogsOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/dump/Dumps/GetLogs][%d] getDumpLogsOk  %+v", 200, o.Payload)
}

func (o *GetDumpLogsOK) GetPayload() *GetDumpLogsOKBody {
	return o.Payload
}

func (o *GetDumpLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetDumpLogsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDumpLogsDefault creates a GetDumpLogsDefault with default headers values
func NewGetDumpLogsDefault(code int) *GetDumpLogsDefault {
	return &GetDumpLogsDefault{
		_statusCode: code,
	}
}

/*
GetDumpLogsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetDumpLogsDefault struct {
	_statusCode int

	Payload *GetDumpLogsDefaultBody
}

// Code gets the status code for the get dump logs default response
func (o *GetDumpLogsDefault) Code() int {
	return o._statusCode
}

func (o *GetDumpLogsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/dump/Dumps/GetLogs][%d] GetDumpLogs default  %+v", o._statusCode, o.Payload)
}

func (o *GetDumpLogsDefault) GetPayload() *GetDumpLogsDefaultBody {
	return o.Payload
}

func (o *GetDumpLogsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(GetDumpLogsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDumpLogsBody get dump logs body
swagger:model GetDumpLogsBody
*/
type GetDumpLogsBody struct {
	// dump id
	DumpID string `json:"dump_id,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// limit
	Limit int64 `json:"limit,omitempty"`
}

// Validate validates this get dump logs body
func (o *GetDumpLogsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get dump logs body based on context it is used
func (o *GetDumpLogsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDumpLogsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDumpLogsBody) UnmarshalBinary(b []byte) error {
	var res GetDumpLogsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDumpLogsDefaultBody get dump logs default body
swagger:model GetDumpLogsDefaultBody
*/
type GetDumpLogsDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*GetDumpLogsDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this get dump logs default body
func (o *GetDumpLogsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDumpLogsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetDumpLogs default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetDumpLogs default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get dump logs default body based on the context it is used
func (o *GetDumpLogsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDumpLogsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetDumpLogs default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetDumpLogs default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDumpLogsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDumpLogsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetDumpLogsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDumpLogsDefaultBodyDetailsItems0 get dump logs default body details items0
swagger:model GetDumpLogsDefaultBodyDetailsItems0
*/
type GetDumpLogsDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this get dump logs default body details items0
func (o *GetDumpLogsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get dump logs default body details items0 based on context it is used
func (o *GetDumpLogsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDumpLogsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDumpLogsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetDumpLogsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDumpLogsOKBody get dump logs OK body
swagger:model GetDumpLogsOKBody
*/
type GetDumpLogsOKBody struct {
	// logs
	Logs []*GetDumpLogsOKBodyLogsItems0 `json:"logs"`

	// end
	End bool `json:"end,omitempty"`
}

// Validate validates this get dump logs OK body
func (o *GetDumpLogsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDumpLogsOKBody) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(o.Logs) { // not required
		return nil
	}

	for i := 0; i < len(o.Logs); i++ {
		if swag.IsZero(o.Logs[i]) { // not required
			continue
		}

		if o.Logs[i] != nil {
			if err := o.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDumpLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDumpLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get dump logs OK body based on the context it is used
func (o *GetDumpLogsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDumpLogsOKBody) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Logs); i++ {
		if o.Logs[i] != nil {
			if err := o.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDumpLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDumpLogsOk" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDumpLogsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDumpLogsOKBody) UnmarshalBinary(b []byte) error {
	var res GetDumpLogsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDumpLogsOKBodyLogsItems0 LogChunk represent one chunk of logs.
swagger:model GetDumpLogsOKBodyLogsItems0
*/
type GetDumpLogsOKBodyLogsItems0 struct {
	// chunk id
	ChunkID int64 `json:"chunk_id,omitempty"`

	// data
	Data string `json:"data,omitempty"`
}

// Validate validates this get dump logs OK body logs items0
func (o *GetDumpLogsOKBodyLogsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get dump logs OK body logs items0 based on context it is used
func (o *GetDumpLogsOKBodyLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDumpLogsOKBodyLogsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDumpLogsOKBodyLogsItems0) UnmarshalBinary(b []byte) error {
	var res GetDumpLogsOKBodyLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
