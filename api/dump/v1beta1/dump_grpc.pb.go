// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dump/v1beta1/dump.proto

package dumpv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DumpService_StartDump_FullMethodName   = "/dump.v1beta1.DumpService/StartDump"
	DumpService_ListDumps_FullMethodName   = "/dump.v1beta1.DumpService/ListDumps"
	DumpService_DeleteDump_FullMethodName  = "/dump.v1beta1.DumpService/DeleteDump"
	DumpService_GetDumpLogs_FullMethodName = "/dump.v1beta1.DumpService/GetDumpLogs"
	DumpService_UploadDump_FullMethodName  = "/dump.v1beta1.DumpService/UploadDump"
)

// DumpServiceClient is the client API for DumpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DumpServiceClient interface {
	// StartDump request creates pmm dump.
	StartDump(ctx context.Context, in *StartDumpRequest, opts ...grpc.CallOption) (*StartDumpResponse, error)
	// ListDumps returns a list of all pmm dumps.
	ListDumps(ctx context.Context, in *ListDumpsRequest, opts ...grpc.CallOption) (*ListDumpsResponse, error)
	// DeleteDump deletes specified pmm dump.
	DeleteDump(ctx context.Context, in *DeleteDumpRequest, opts ...grpc.CallOption) (*DeleteDumpResponse, error)
	// GetLogs returns logs from pmm-dump tool.
	GetDumpLogs(ctx context.Context, in *GetDumpLogsRequest, opts ...grpc.CallOption) (*GetDumpLogsResponse, error)
	// UploadDump uploads selected dumps to a remote server.
	UploadDump(ctx context.Context, in *UploadDumpRequest, opts ...grpc.CallOption) (*UploadDumpResponse, error)
}

type dumpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDumpServiceClient(cc grpc.ClientConnInterface) DumpServiceClient {
	return &dumpServiceClient{cc}
}

func (c *dumpServiceClient) StartDump(ctx context.Context, in *StartDumpRequest, opts ...grpc.CallOption) (*StartDumpResponse, error) {
	out := new(StartDumpResponse)
	err := c.cc.Invoke(ctx, DumpService_StartDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpServiceClient) ListDumps(ctx context.Context, in *ListDumpsRequest, opts ...grpc.CallOption) (*ListDumpsResponse, error) {
	out := new(ListDumpsResponse)
	err := c.cc.Invoke(ctx, DumpService_ListDumps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpServiceClient) DeleteDump(ctx context.Context, in *DeleteDumpRequest, opts ...grpc.CallOption) (*DeleteDumpResponse, error) {
	out := new(DeleteDumpResponse)
	err := c.cc.Invoke(ctx, DumpService_DeleteDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpServiceClient) GetDumpLogs(ctx context.Context, in *GetDumpLogsRequest, opts ...grpc.CallOption) (*GetDumpLogsResponse, error) {
	out := new(GetDumpLogsResponse)
	err := c.cc.Invoke(ctx, DumpService_GetDumpLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpServiceClient) UploadDump(ctx context.Context, in *UploadDumpRequest, opts ...grpc.CallOption) (*UploadDumpResponse, error) {
	out := new(UploadDumpResponse)
	err := c.cc.Invoke(ctx, DumpService_UploadDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DumpServiceServer is the server API for DumpService service.
// All implementations must embed UnimplementedDumpServiceServer
// for forward compatibility
type DumpServiceServer interface {
	// StartDump request creates pmm dump.
	StartDump(context.Context, *StartDumpRequest) (*StartDumpResponse, error)
	// ListDumps returns a list of all pmm dumps.
	ListDumps(context.Context, *ListDumpsRequest) (*ListDumpsResponse, error)
	// DeleteDump deletes specified pmm dump.
	DeleteDump(context.Context, *DeleteDumpRequest) (*DeleteDumpResponse, error)
	// GetLogs returns logs from pmm-dump tool.
	GetDumpLogs(context.Context, *GetDumpLogsRequest) (*GetDumpLogsResponse, error)
	// UploadDump uploads selected dumps to a remote server.
	UploadDump(context.Context, *UploadDumpRequest) (*UploadDumpResponse, error)
	mustEmbedUnimplementedDumpServiceServer()
}

// UnimplementedDumpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDumpServiceServer struct{}

func (UnimplementedDumpServiceServer) StartDump(context.Context, *StartDumpRequest) (*StartDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDump not implemented")
}

func (UnimplementedDumpServiceServer) ListDumps(context.Context, *ListDumpsRequest) (*ListDumpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDumps not implemented")
}

func (UnimplementedDumpServiceServer) DeleteDump(context.Context, *DeleteDumpRequest) (*DeleteDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDump not implemented")
}

func (UnimplementedDumpServiceServer) GetDumpLogs(context.Context, *GetDumpLogsRequest) (*GetDumpLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpLogs not implemented")
}

func (UnimplementedDumpServiceServer) UploadDump(context.Context, *UploadDumpRequest) (*UploadDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDump not implemented")
}
func (UnimplementedDumpServiceServer) mustEmbedUnimplementedDumpServiceServer() {}

// UnsafeDumpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DumpServiceServer will
// result in compilation errors.
type UnsafeDumpServiceServer interface {
	mustEmbedUnimplementedDumpServiceServer()
}

func RegisterDumpServiceServer(s grpc.ServiceRegistrar, srv DumpServiceServer) {
	s.RegisterService(&DumpService_ServiceDesc, srv)
}

func _DumpService_StartDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServiceServer).StartDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpService_StartDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServiceServer).StartDump(ctx, req.(*StartDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DumpService_ListDumps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDumpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServiceServer).ListDumps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpService_ListDumps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServiceServer).ListDumps(ctx, req.(*ListDumpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DumpService_DeleteDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServiceServer).DeleteDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpService_DeleteDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServiceServer).DeleteDump(ctx, req.(*DeleteDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DumpService_GetDumpLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDumpLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServiceServer).GetDumpLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpService_GetDumpLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServiceServer).GetDumpLogs(ctx, req.(*GetDumpLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DumpService_UploadDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServiceServer).UploadDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpService_UploadDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServiceServer).UploadDump(ctx, req.(*UploadDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DumpService_ServiceDesc is the grpc.ServiceDesc for DumpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DumpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dump.v1beta1.DumpService",
	HandlerType: (*DumpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDump",
			Handler:    _DumpService_StartDump_Handler,
		},
		{
			MethodName: "ListDumps",
			Handler:    _DumpService_ListDumps_Handler,
		},
		{
			MethodName: "DeleteDump",
			Handler:    _DumpService_DeleteDump_Handler,
		},
		{
			MethodName: "GetDumpLogs",
			Handler:    _DumpService_GetDumpLogs_Handler,
		},
		{
			MethodName: "UploadDump",
			Handler:    _DumpService_UploadDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dump/v1beta1/dump.proto",
}
