// Code generated by go-swagger; DO NOT EDIT.

package advisor_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunCheckFileReader is a Reader for the RunCheckFile structure.
type RunCheckFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunCheckFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRunCheckFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRunCheckFileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunCheckFileOK creates a RunCheckFileOK with default headers values
func NewRunCheckFileOK() *RunCheckFileOK {
	return &RunCheckFileOK{}
}

/*
RunCheckFileOK describes a response with status code 200, with default header values.

A successful response.
*/
type RunCheckFileOK struct {
	Payload *RunCheckFileOKBody
}

// IsSuccess returns true when this run check file Ok response has a 2xx status code
func (o *RunCheckFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run check file Ok response has a 3xx status code
func (o *RunCheckFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run check file Ok response has a 4xx status code
func (o *RunCheckFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run check file Ok response has a 5xx status code
func (o *RunCheckFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run check file Ok response a status code equal to that given
func (o *RunCheckFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run check file Ok response
func (o *RunCheckFileOK) Code() int {
	return 200
}

func (o *RunCheckFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/advisors/checks:runFile][%d] runCheckFileOk %s", 200, payload)
}

func (o *RunCheckFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/advisors/checks:runFile][%d] runCheckFileOk %s", 200, payload)
}

func (o *RunCheckFileOK) GetPayload() *RunCheckFileOKBody {
	return o.Payload
}

func (o *RunCheckFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(RunCheckFileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRunCheckFileDefault creates a RunCheckFileDefault with default headers values
func NewRunCheckFileDefault(code int) *RunCheckFileDefault {
	return &RunCheckFileDefault{
		_statusCode: code,
	}
}

/*
RunCheckFileDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type RunCheckFileDefault struct {
	_statusCode int

	Payload *RunCheckFileDefaultBody
}

// IsSuccess returns true when this run check file default response has a 2xx status code
func (o *RunCheckFileDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this run check file default response has a 3xx status code
func (o *RunCheckFileDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this run check file default response has a 4xx status code
func (o *RunCheckFileDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this run check file default response has a 5xx status code
func (o *RunCheckFileDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this run check file default response a status code equal to that given
func (o *RunCheckFileDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the run check file default response
func (o *RunCheckFileDefault) Code() int {
	return o._statusCode
}

func (o *RunCheckFileDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/advisors/checks:runFile][%d] RunCheckFile default %s", o._statusCode, payload)
}

func (o *RunCheckFileDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/advisors/checks:runFile][%d] RunCheckFile default %s", o._statusCode, payload)
}

func (o *RunCheckFileDefault) GetPayload() *RunCheckFileDefaultBody {
	return o.Payload
}

func (o *RunCheckFileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(RunCheckFileDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
RunCheckFileBody run check file body
swagger:model RunCheckFileBody
*/
type RunCheckFileBody struct {
	// YAML template file content.
	Yaml string `json:"yaml,omitempty"`
}

// Validate validates this run check file body
func (o *RunCheckFileBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this run check file body based on context it is used
func (o *RunCheckFileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RunCheckFileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunCheckFileBody) UnmarshalBinary(b []byte) error {
	var res RunCheckFileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RunCheckFileDefaultBody run check file default body
swagger:model RunCheckFileDefaultBody
*/
type RunCheckFileDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*RunCheckFileDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this run check file default body
func (o *RunCheckFileDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunCheckFileDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("RunCheckFile default" + "." + "details" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("RunCheckFile default" + "." + "details" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this run check file default body based on the context it is used
func (o *RunCheckFileDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunCheckFileDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("RunCheckFile default" + "." + "details" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("RunCheckFile default" + "." + "details" + "." + strconv.Itoa(i))
				}

				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunCheckFileDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunCheckFileDefaultBody) UnmarshalBinary(b []byte) error {
	var res RunCheckFileDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RunCheckFileDefaultBodyDetailsItems0 run check file default body details items0
swagger:model RunCheckFileDefaultBodyDetailsItems0
*/
type RunCheckFileDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`

	// run check file default body details items0
	RunCheckFileDefaultBodyDetailsItems0 map[string]any `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *RunCheckFileDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv RunCheckFileDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]any)
		for k, v := range stage2 {
			var toadd any
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.RunCheckFileDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o RunCheckFileDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.RunCheckFileDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.RunCheckFileDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this run check file default body details items0
func (o *RunCheckFileDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this run check file default body details items0 based on context it is used
func (o *RunCheckFileDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RunCheckFileDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunCheckFileDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res RunCheckFileDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RunCheckFileOKBody run check file OK body
swagger:model RunCheckFileOKBody
*/
type RunCheckFileOKBody struct {
	// Check results
	Results []*RunCheckFileOKBodyResultsItems0 `json:"results"`
}

// Validate validates this run check file OK body
func (o *RunCheckFileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunCheckFileOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("runCheckFileOk" + "." + "results" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("runCheckFileOk" + "." + "results" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this run check file OK body based on the context it is used
func (o *RunCheckFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunCheckFileOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Results); i++ {
		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("runCheckFileOk" + "." + "results" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("runCheckFileOk" + "." + "results" + "." + strconv.Itoa(i))
				}

				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunCheckFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunCheckFileOKBody) UnmarshalBinary(b []byte) error {
	var res RunCheckFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RunCheckFileOKBodyResultsItems0 CheckResult represents the check results for a given service.
swagger:model RunCheckFileOKBodyResultsItems0
*/
type RunCheckFileOKBodyResultsItems0 struct {
	// summary
	Summary string `json:"summary,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: ["SEVERITY_UNSPECIFIED","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]
	Severity *string `json:"severity,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// URL containing information on how to resolve an issue detected by an Advisor check.
	ReadMoreURL string `json:"read_more_url,omitempty"`

	// Name of the monitored service on which the check ran.
	ServiceName string `json:"service_name,omitempty"`

	// ID of the monitored service on which the check ran.
	ServiceID string `json:"service_id,omitempty"`

	// Name of the check that failed
	CheckName string `json:"check_name,omitempty"`

	// Silence status of the check result
	Silenced bool `json:"silenced,omitempty"`
}

// Validate validates this run check file OK body results items0
func (o *RunCheckFileOKBodyResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runCheckFileOkBodyResultsItems0TypeSeverityPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_UNSPECIFIED","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runCheckFileOkBodyResultsItems0TypeSeverityPropEnum = append(runCheckFileOkBodyResultsItems0TypeSeverityPropEnum, v)
	}
}

const (

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYUNSPECIFIED captures enum value "SEVERITY_UNSPECIFIED"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYUNSPECIFIED string = "SEVERITY_UNSPECIFIED"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYINFO string = "SEVERITY_INFO"

	// RunCheckFileOKBodyResultsItems0SeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	RunCheckFileOKBodyResultsItems0SeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *RunCheckFileOKBodyResultsItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runCheckFileOkBodyResultsItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RunCheckFileOKBodyResultsItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this run check file OK body results items0 based on context it is used
func (o *RunCheckFileOKBodyResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RunCheckFileOKBodyResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunCheckFileOKBodyResultsItems0) UnmarshalBinary(b []byte) error {
	var res RunCheckFileOKBodyResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
