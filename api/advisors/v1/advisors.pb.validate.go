// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: advisors/v1/advisors.proto

package advisorsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	managementv1 "github.com/percona/pmm/api/management/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = managementv1.Severity(0)
)

// Validate checks the field values on AdvisorCheckResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvisorCheckResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvisorCheckResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvisorCheckResultMultiError, or nil if none found.
func (m *AdvisorCheckResult) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvisorCheckResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	// no validation rules for Description

	// no validation rules for Severity

	// no validation rules for Labels

	// no validation rules for ReadMoreUrl

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return AdvisorCheckResultMultiError(errors)
	}

	return nil
}

// AdvisorCheckResultMultiError is an error wrapping multiple validation errors
// returned by AdvisorCheckResult.ValidateAll() if the designated constraints
// aren't met.
type AdvisorCheckResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvisorCheckResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvisorCheckResultMultiError) AllErrors() []error { return m }

// AdvisorCheckResultValidationError is the validation error returned by
// AdvisorCheckResult.Validate if the designated constraints aren't met.
type AdvisorCheckResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvisorCheckResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvisorCheckResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvisorCheckResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvisorCheckResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvisorCheckResultValidationError) ErrorName() string {
	return "AdvisorCheckResultValidationError"
}

// Error satisfies the builtin error interface
func (e AdvisorCheckResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvisorCheckResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvisorCheckResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvisorCheckResultValidationError{}

// Validate checks the field values on CheckResultSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResultSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResultSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResultSummaryMultiError, or nil if none found.
func (m *CheckResultSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResultSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for ServiceId

	// no validation rules for EmergencyCount

	// no validation rules for AlertCount

	// no validation rules for CriticalCount

	// no validation rules for ErrorCount

	// no validation rules for WarningCount

	// no validation rules for NoticeCount

	// no validation rules for InfoCount

	// no validation rules for DebugCount

	if len(errors) > 0 {
		return CheckResultSummaryMultiError(errors)
	}

	return nil
}

// CheckResultSummaryMultiError is an error wrapping multiple validation errors
// returned by CheckResultSummary.ValidateAll() if the designated constraints
// aren't met.
type CheckResultSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResultSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResultSummaryMultiError) AllErrors() []error { return m }

// CheckResultSummaryValidationError is the validation error returned by
// CheckResultSummary.Validate if the designated constraints aren't met.
type CheckResultSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResultSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResultSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResultSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResultSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResultSummaryValidationError) ErrorName() string {
	return "CheckResultSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResultSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResultSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResultSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResultSummaryValidationError{}

// Validate checks the field values on CheckResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResultMultiError, or
// nil if none found.
func (m *CheckResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	// no validation rules for Description

	// no validation rules for Severity

	// no validation rules for Labels

	// no validation rules for ReadMoreUrl

	// no validation rules for ServiceName

	// no validation rules for ServiceId

	// no validation rules for CheckName

	// no validation rules for Silenced

	if len(errors) > 0 {
		return CheckResultMultiError(errors)
	}

	return nil
}

// CheckResultMultiError is an error wrapping multiple validation errors
// returned by CheckResult.ValidateAll() if the designated constraints aren't met.
type CheckResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResultMultiError) AllErrors() []error { return m }

// CheckResultValidationError is the validation error returned by
// CheckResult.Validate if the designated constraints aren't met.
type CheckResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResultValidationError) ErrorName() string { return "CheckResultValidationError" }

// Error satisfies the builtin error interface
func (e CheckResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResultValidationError{}

// Validate checks the field values on AdvisorCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdvisorCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvisorCheck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdvisorCheckMultiError, or
// nil if none found.
func (m *AdvisorCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvisorCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for Description

	// no validation rules for Summary

	// no validation rules for Interval

	// no validation rules for Family

	if len(errors) > 0 {
		return AdvisorCheckMultiError(errors)
	}

	return nil
}

// AdvisorCheckMultiError is an error wrapping multiple validation errors
// returned by AdvisorCheck.ValidateAll() if the designated constraints aren't met.
type AdvisorCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvisorCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvisorCheckMultiError) AllErrors() []error { return m }

// AdvisorCheckValidationError is the validation error returned by
// AdvisorCheck.Validate if the designated constraints aren't met.
type AdvisorCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvisorCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvisorCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvisorCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvisorCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvisorCheckValidationError) ErrorName() string { return "AdvisorCheckValidationError" }

// Error satisfies the builtin error interface
func (e AdvisorCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvisorCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvisorCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvisorCheckValidationError{}

// Validate checks the field values on Advisor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Advisor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Advisor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AdvisorMultiError, or nil if none found.
func (m *Advisor) ValidateAll() error {
	return m.validate(true)
}

func (m *Advisor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Summary

	// no validation rules for Comment

	// no validation rules for Category

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdvisorValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdvisorValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdvisorValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdvisorMultiError(errors)
	}

	return nil
}

// AdvisorMultiError is an error wrapping multiple validation errors returned
// by Advisor.ValidateAll() if the designated constraints aren't met.
type AdvisorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvisorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvisorMultiError) AllErrors() []error { return m }

// AdvisorValidationError is the validation error returned by Advisor.Validate
// if the designated constraints aren't met.
type AdvisorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvisorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvisorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvisorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvisorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvisorValidationError) ErrorName() string { return "AdvisorValidationError" }

// Error satisfies the builtin error interface
func (e AdvisorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvisor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvisorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvisorValidationError{}

// Validate checks the field values on ChangeAdvisorCheckParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdvisorCheckParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdvisorCheckParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdvisorCheckParamsMultiError, or nil if none found.
func (m *ChangeAdvisorCheckParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdvisorCheckParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Interval

	if m.Enable != nil {
		// no validation rules for Enable
	}

	if len(errors) > 0 {
		return ChangeAdvisorCheckParamsMultiError(errors)
	}

	return nil
}

// ChangeAdvisorCheckParamsMultiError is an error wrapping multiple validation
// errors returned by ChangeAdvisorCheckParams.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdvisorCheckParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdvisorCheckParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdvisorCheckParamsMultiError) AllErrors() []error { return m }

// ChangeAdvisorCheckParamsValidationError is the validation error returned by
// ChangeAdvisorCheckParams.Validate if the designated constraints aren't met.
type ChangeAdvisorCheckParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdvisorCheckParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdvisorCheckParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdvisorCheckParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdvisorCheckParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdvisorCheckParamsValidationError) ErrorName() string {
	return "ChangeAdvisorCheckParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdvisorCheckParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdvisorCheckParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdvisorCheckParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdvisorCheckParamsValidationError{}

// Validate checks the field values on StartAdvisorChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartAdvisorChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartAdvisorChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartAdvisorChecksRequestMultiError, or nil if none found.
func (m *StartAdvisorChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartAdvisorChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartAdvisorChecksRequestMultiError(errors)
	}

	return nil
}

// StartAdvisorChecksRequestMultiError is an error wrapping multiple validation
// errors returned by StartAdvisorChecksRequest.ValidateAll() if the
// designated constraints aren't met.
type StartAdvisorChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartAdvisorChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartAdvisorChecksRequestMultiError) AllErrors() []error { return m }

// StartAdvisorChecksRequestValidationError is the validation error returned by
// StartAdvisorChecksRequest.Validate if the designated constraints aren't met.
type StartAdvisorChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartAdvisorChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartAdvisorChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartAdvisorChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartAdvisorChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartAdvisorChecksRequestValidationError) ErrorName() string {
	return "StartAdvisorChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartAdvisorChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartAdvisorChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartAdvisorChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartAdvisorChecksRequestValidationError{}

// Validate checks the field values on StartAdvisorChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartAdvisorChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartAdvisorChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartAdvisorChecksResponseMultiError, or nil if none found.
func (m *StartAdvisorChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartAdvisorChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartAdvisorChecksResponseMultiError(errors)
	}

	return nil
}

// StartAdvisorChecksResponseMultiError is an error wrapping multiple
// validation errors returned by StartAdvisorChecksResponse.ValidateAll() if
// the designated constraints aren't met.
type StartAdvisorChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartAdvisorChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartAdvisorChecksResponseMultiError) AllErrors() []error { return m }

// StartAdvisorChecksResponseValidationError is the validation error returned
// by StartAdvisorChecksResponse.Validate if the designated constraints aren't met.
type StartAdvisorChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartAdvisorChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartAdvisorChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartAdvisorChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartAdvisorChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartAdvisorChecksResponseValidationError) ErrorName() string {
	return "StartAdvisorChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartAdvisorChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartAdvisorChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartAdvisorChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartAdvisorChecksResponseValidationError{}

// Validate checks the field values on ListAdvisorChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorChecksRequestMultiError, or nil if none found.
func (m *ListAdvisorChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAdvisorChecksRequestMultiError(errors)
	}

	return nil
}

// ListAdvisorChecksRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorChecksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdvisorChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorChecksRequestMultiError) AllErrors() []error { return m }

// ListAdvisorChecksRequestValidationError is the validation error returned by
// ListAdvisorChecksRequest.Validate if the designated constraints aren't met.
type ListAdvisorChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorChecksRequestValidationError) ErrorName() string {
	return "ListAdvisorChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorChecksRequestValidationError{}

// Validate checks the field values on ListAdvisorChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorChecksResponseMultiError, or nil if none found.
func (m *ListAdvisorChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdvisorChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdvisorChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdvisorChecksResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdvisorChecksResponseMultiError(errors)
	}

	return nil
}

// ListAdvisorChecksResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorChecksResponse.ValidateAll() if the
// designated constraints aren't met.
type ListAdvisorChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorChecksResponseMultiError) AllErrors() []error { return m }

// ListAdvisorChecksResponseValidationError is the validation error returned by
// ListAdvisorChecksResponse.Validate if the designated constraints aren't met.
type ListAdvisorChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorChecksResponseValidationError) ErrorName() string {
	return "ListAdvisorChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorChecksResponseValidationError{}

// Validate checks the field values on ListAdvisorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorsRequestMultiError, or nil if none found.
func (m *ListAdvisorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAdvisorsRequestMultiError(errors)
	}

	return nil
}

// ListAdvisorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdvisorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorsRequestMultiError) AllErrors() []error { return m }

// ListAdvisorsRequestValidationError is the validation error returned by
// ListAdvisorsRequest.Validate if the designated constraints aren't met.
type ListAdvisorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorsRequestValidationError) ErrorName() string {
	return "ListAdvisorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorsRequestValidationError{}

// Validate checks the field values on ListAdvisorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdvisorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdvisorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdvisorsResponseMultiError, or nil if none found.
func (m *ListAdvisorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdvisorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdvisors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdvisorsResponseValidationError{
						field:  fmt.Sprintf("Advisors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdvisorsResponseValidationError{
						field:  fmt.Sprintf("Advisors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdvisorsResponseValidationError{
					field:  fmt.Sprintf("Advisors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdvisorsResponseMultiError(errors)
	}

	return nil
}

// ListAdvisorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdvisorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAdvisorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdvisorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdvisorsResponseMultiError) AllErrors() []error { return m }

// ListAdvisorsResponseValidationError is the validation error returned by
// ListAdvisorsResponse.Validate if the designated constraints aren't met.
type ListAdvisorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdvisorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdvisorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdvisorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdvisorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdvisorsResponseValidationError) ErrorName() string {
	return "ListAdvisorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdvisorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdvisorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdvisorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdvisorsResponseValidationError{}

// Validate checks the field values on ChangeAdvisorChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdvisorChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdvisorChecksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdvisorChecksRequestMultiError, or nil if none found.
func (m *ChangeAdvisorChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdvisorChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeAdvisorChecksRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeAdvisorChecksRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeAdvisorChecksRequestValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangeAdvisorChecksRequestMultiError(errors)
	}

	return nil
}

// ChangeAdvisorChecksRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeAdvisorChecksRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeAdvisorChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdvisorChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdvisorChecksRequestMultiError) AllErrors() []error { return m }

// ChangeAdvisorChecksRequestValidationError is the validation error returned
// by ChangeAdvisorChecksRequest.Validate if the designated constraints aren't met.
type ChangeAdvisorChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdvisorChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdvisorChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdvisorChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdvisorChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdvisorChecksRequestValidationError) ErrorName() string {
	return "ChangeAdvisorChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdvisorChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdvisorChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdvisorChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdvisorChecksRequestValidationError{}

// Validate checks the field values on ChangeAdvisorChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdvisorChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdvisorChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdvisorChecksResponseMultiError, or nil if none found.
func (m *ChangeAdvisorChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdvisorChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAdvisorChecksResponseMultiError(errors)
	}

	return nil
}

// ChangeAdvisorChecksResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeAdvisorChecksResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeAdvisorChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdvisorChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdvisorChecksResponseMultiError) AllErrors() []error { return m }

// ChangeAdvisorChecksResponseValidationError is the validation error returned
// by ChangeAdvisorChecksResponse.Validate if the designated constraints
// aren't met.
type ChangeAdvisorChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdvisorChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdvisorChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdvisorChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdvisorChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdvisorChecksResponseValidationError) ErrorName() string {
	return "ChangeAdvisorChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdvisorChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdvisorChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdvisorChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdvisorChecksResponseValidationError{}

// Validate checks the field values on ListFailedServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFailedServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFailedServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFailedServicesRequestMultiError, or nil if none found.
func (m *ListFailedServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFailedServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFailedServicesRequestMultiError(errors)
	}

	return nil
}

// ListFailedServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListFailedServicesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListFailedServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFailedServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFailedServicesRequestMultiError) AllErrors() []error { return m }

// ListFailedServicesRequestValidationError is the validation error returned by
// ListFailedServicesRequest.Validate if the designated constraints aren't met.
type ListFailedServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedServicesRequestValidationError) ErrorName() string {
	return "ListFailedServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedServicesRequestValidationError{}

// Validate checks the field values on ListFailedServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFailedServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFailedServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFailedServicesResponseMultiError, or nil if none found.
func (m *ListFailedServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFailedServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFailedServicesResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFailedServicesResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFailedServicesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFailedServicesResponseMultiError(errors)
	}

	return nil
}

// ListFailedServicesResponseMultiError is an error wrapping multiple
// validation errors returned by ListFailedServicesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListFailedServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFailedServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFailedServicesResponseMultiError) AllErrors() []error { return m }

// ListFailedServicesResponseValidationError is the validation error returned
// by ListFailedServicesResponse.Validate if the designated constraints aren't met.
type ListFailedServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedServicesResponseValidationError) ErrorName() string {
	return "ListFailedServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedServicesResponseValidationError{}

// Validate checks the field values on GetFailedChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFailedChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFailedChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFailedChecksRequestMultiError, or nil if none found.
func (m *GetFailedChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFailedChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetPageParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFailedChecksRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFailedChecksRequestValidationError{
					field:  "PageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFailedChecksRequestValidationError{
				field:  "PageParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFailedChecksRequestMultiError(errors)
	}

	return nil
}

// GetFailedChecksRequestMultiError is an error wrapping multiple validation
// errors returned by GetFailedChecksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFailedChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFailedChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFailedChecksRequestMultiError) AllErrors() []error { return m }

// GetFailedChecksRequestValidationError is the validation error returned by
// GetFailedChecksRequest.Validate if the designated constraints aren't met.
type GetFailedChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFailedChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFailedChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFailedChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFailedChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFailedChecksRequestValidationError) ErrorName() string {
	return "GetFailedChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFailedChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFailedChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFailedChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFailedChecksRequestValidationError{}

// Validate checks the field values on GetFailedChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFailedChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFailedChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFailedChecksResponseMultiError, or nil if none found.
func (m *GetFailedChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFailedChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFailedChecksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFailedChecksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFailedChecksResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageTotals()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFailedChecksResponseValidationError{
					field:  "PageTotals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFailedChecksResponseValidationError{
					field:  "PageTotals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageTotals()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFailedChecksResponseValidationError{
				field:  "PageTotals",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFailedChecksResponseMultiError(errors)
	}

	return nil
}

// GetFailedChecksResponseMultiError is an error wrapping multiple validation
// errors returned by GetFailedChecksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFailedChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFailedChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFailedChecksResponseMultiError) AllErrors() []error { return m }

// GetFailedChecksResponseValidationError is the validation error returned by
// GetFailedChecksResponse.Validate if the designated constraints aren't met.
type GetFailedChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFailedChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFailedChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFailedChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFailedChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFailedChecksResponseValidationError) ErrorName() string {
	return "GetFailedChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFailedChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFailedChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFailedChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFailedChecksResponseValidationError{}
