// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: advisors/v1/advisors.proto

package advisorsv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdvisorService_ListFailedServices_FullMethodName  = "/advisors.v1.AdvisorService/ListFailedServices"
	AdvisorService_GetFailedChecks_FullMethodName     = "/advisors.v1.AdvisorService/GetFailedChecks"
	AdvisorService_StartAdvisorChecks_FullMethodName  = "/advisors.v1.AdvisorService/StartAdvisorChecks"
	AdvisorService_ListAdvisorChecks_FullMethodName   = "/advisors.v1.AdvisorService/ListAdvisorChecks"
	AdvisorService_ListAdvisors_FullMethodName        = "/advisors.v1.AdvisorService/ListAdvisors"
	AdvisorService_ChangeAdvisorChecks_FullMethodName = "/advisors.v1.AdvisorService/ChangeAdvisorChecks"
)

// AdvisorServiceClient is the client API for AdvisorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvisorServiceClient interface {
	// ListFailedServices returns a list of services with failed checks.
	ListFailedServices(ctx context.Context, in *ListFailedServicesRequest, opts ...grpc.CallOption) (*ListFailedServicesResponse, error)
	// GetFailedChecks returns the checks result for a given service.
	GetFailedChecks(ctx context.Context, in *GetFailedChecksRequest, opts ...grpc.CallOption) (*GetFailedChecksResponse, error)
	// StartAdvisorChecks executes Advisor checks and returns when all checks are executed.
	StartAdvisorChecks(ctx context.Context, in *StartAdvisorChecksRequest, opts ...grpc.CallOption) (*StartAdvisorChecksResponse, error)
	// ListAdvisorChecks returns a list of advisor checks available to the user..
	ListAdvisorChecks(ctx context.Context, in *ListAdvisorChecksRequest, opts ...grpc.CallOption) (*ListAdvisorChecksResponse, error)
	// ListAdvisors returns a list of advisors available for the user.
	ListAdvisors(ctx context.Context, in *ListAdvisorsRequest, opts ...grpc.CallOption) (*ListAdvisorsResponse, error)
	// ChangeAdvisorChecks enables/disables Advisor checks or changes their exec interval.
	ChangeAdvisorChecks(ctx context.Context, in *ChangeAdvisorChecksRequest, opts ...grpc.CallOption) (*ChangeAdvisorChecksResponse, error)
}

type advisorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvisorServiceClient(cc grpc.ClientConnInterface) AdvisorServiceClient {
	return &advisorServiceClient{cc}
}

func (c *advisorServiceClient) ListFailedServices(ctx context.Context, in *ListFailedServicesRequest, opts ...grpc.CallOption) (*ListFailedServicesResponse, error) {
	out := new(ListFailedServicesResponse)
	err := c.cc.Invoke(ctx, AdvisorService_ListFailedServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) GetFailedChecks(ctx context.Context, in *GetFailedChecksRequest, opts ...grpc.CallOption) (*GetFailedChecksResponse, error) {
	out := new(GetFailedChecksResponse)
	err := c.cc.Invoke(ctx, AdvisorService_GetFailedChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) StartAdvisorChecks(ctx context.Context, in *StartAdvisorChecksRequest, opts ...grpc.CallOption) (*StartAdvisorChecksResponse, error) {
	out := new(StartAdvisorChecksResponse)
	err := c.cc.Invoke(ctx, AdvisorService_StartAdvisorChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) ListAdvisorChecks(ctx context.Context, in *ListAdvisorChecksRequest, opts ...grpc.CallOption) (*ListAdvisorChecksResponse, error) {
	out := new(ListAdvisorChecksResponse)
	err := c.cc.Invoke(ctx, AdvisorService_ListAdvisorChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) ListAdvisors(ctx context.Context, in *ListAdvisorsRequest, opts ...grpc.CallOption) (*ListAdvisorsResponse, error) {
	out := new(ListAdvisorsResponse)
	err := c.cc.Invoke(ctx, AdvisorService_ListAdvisors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) ChangeAdvisorChecks(ctx context.Context, in *ChangeAdvisorChecksRequest, opts ...grpc.CallOption) (*ChangeAdvisorChecksResponse, error) {
	out := new(ChangeAdvisorChecksResponse)
	err := c.cc.Invoke(ctx, AdvisorService_ChangeAdvisorChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvisorServiceServer is the server API for AdvisorService service.
// All implementations must embed UnimplementedAdvisorServiceServer
// for forward compatibility
type AdvisorServiceServer interface {
	// ListFailedServices returns a list of services with failed checks.
	ListFailedServices(context.Context, *ListFailedServicesRequest) (*ListFailedServicesResponse, error)
	// GetFailedChecks returns the checks result for a given service.
	GetFailedChecks(context.Context, *GetFailedChecksRequest) (*GetFailedChecksResponse, error)
	// StartAdvisorChecks executes Advisor checks and returns when all checks are executed.
	StartAdvisorChecks(context.Context, *StartAdvisorChecksRequest) (*StartAdvisorChecksResponse, error)
	// ListAdvisorChecks returns a list of advisor checks available to the user..
	ListAdvisorChecks(context.Context, *ListAdvisorChecksRequest) (*ListAdvisorChecksResponse, error)
	// ListAdvisors returns a list of advisors available for the user.
	ListAdvisors(context.Context, *ListAdvisorsRequest) (*ListAdvisorsResponse, error)
	// ChangeAdvisorChecks enables/disables Advisor checks or changes their exec interval.
	ChangeAdvisorChecks(context.Context, *ChangeAdvisorChecksRequest) (*ChangeAdvisorChecksResponse, error)
	mustEmbedUnimplementedAdvisorServiceServer()
}

// UnimplementedAdvisorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdvisorServiceServer struct{}

func (UnimplementedAdvisorServiceServer) ListFailedServices(context.Context, *ListFailedServicesRequest) (*ListFailedServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedServices not implemented")
}

func (UnimplementedAdvisorServiceServer) GetFailedChecks(context.Context, *GetFailedChecksRequest) (*GetFailedChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedChecks not implemented")
}

func (UnimplementedAdvisorServiceServer) StartAdvisorChecks(context.Context, *StartAdvisorChecksRequest) (*StartAdvisorChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAdvisorChecks not implemented")
}

func (UnimplementedAdvisorServiceServer) ListAdvisorChecks(context.Context, *ListAdvisorChecksRequest) (*ListAdvisorChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdvisorChecks not implemented")
}

func (UnimplementedAdvisorServiceServer) ListAdvisors(context.Context, *ListAdvisorsRequest) (*ListAdvisorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdvisors not implemented")
}

func (UnimplementedAdvisorServiceServer) ChangeAdvisorChecks(context.Context, *ChangeAdvisorChecksRequest) (*ChangeAdvisorChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdvisorChecks not implemented")
}
func (UnimplementedAdvisorServiceServer) mustEmbedUnimplementedAdvisorServiceServer() {}

// UnsafeAdvisorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvisorServiceServer will
// result in compilation errors.
type UnsafeAdvisorServiceServer interface {
	mustEmbedUnimplementedAdvisorServiceServer()
}

func RegisterAdvisorServiceServer(s grpc.ServiceRegistrar, srv AdvisorServiceServer) {
	s.RegisterService(&AdvisorService_ServiceDesc, srv)
}

func _AdvisorService_ListFailedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).ListFailedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_ListFailedServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).ListFailedServices(ctx, req.(*ListFailedServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_GetFailedChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailedChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).GetFailedChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_GetFailedChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).GetFailedChecks(ctx, req.(*GetFailedChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_StartAdvisorChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAdvisorChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).StartAdvisorChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_StartAdvisorChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).StartAdvisorChecks(ctx, req.(*StartAdvisorChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_ListAdvisorChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdvisorChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).ListAdvisorChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_ListAdvisorChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).ListAdvisorChecks(ctx, req.(*ListAdvisorChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_ListAdvisors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdvisorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).ListAdvisors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_ListAdvisors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).ListAdvisors(ctx, req.(*ListAdvisorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_ChangeAdvisorChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdvisorChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).ChangeAdvisorChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_ChangeAdvisorChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).ChangeAdvisorChecks(ctx, req.(*ChangeAdvisorChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvisorService_ServiceDesc is the grpc.ServiceDesc for AdvisorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvisorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "advisors.v1.AdvisorService",
	HandlerType: (*AdvisorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFailedServices",
			Handler:    _AdvisorService_ListFailedServices_Handler,
		},
		{
			MethodName: "GetFailedChecks",
			Handler:    _AdvisorService_GetFailedChecks_Handler,
		},
		{
			MethodName: "StartAdvisorChecks",
			Handler:    _AdvisorService_StartAdvisorChecks_Handler,
		},
		{
			MethodName: "ListAdvisorChecks",
			Handler:    _AdvisorService_ListAdvisorChecks_Handler,
		},
		{
			MethodName: "ListAdvisors",
			Handler:    _AdvisorService_ListAdvisors_Handler,
		},
		{
			MethodName: "ChangeAdvisorChecks",
			Handler:    _AdvisorService_ChangeAdvisorChecks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advisors/v1/advisors.proto",
}
