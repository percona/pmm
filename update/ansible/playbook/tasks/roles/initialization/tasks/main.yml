---
# This role contains tasks executed during initialization of PMM Server
- name: Determine type of upgrade
  set_fact:
    ui_upgrade: False
  when: ui_upgrade is undefined


# PMM-10858 - In certain environments, including AWS EC2, some of the
# EPEL repository mirrors do not respond within the time limit defined
# by pmm-update which is currently set to 30 seconds. This was causing
# supervisord to kill pmm-update-checker
- name: Update repository settings
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"
  command: yum-config-manager --setopt=epel.timeout=1 --save
  changed_when: True

- name: Get current version
  slurp:
    src: /srv/grafana/PERCONA_DASHBOARDS_VERSION
  register: current_version_file
  ignore_errors: True

- name: Get image version
  slurp:
    src: /usr/share/percona-dashboards/VERSION
  register: image_version_file

- name: Set current version if VERSION doesn't exist
  set_fact:
    pmm_current_version: "0.0"
  when: current_version_file['failed'] == true

- name: Setting current PMM version
  set_fact:
    pmm_current_version: "{{ current_version_file['content'] | b64decode | trim }}"
  when: current_version_file['failed'] != true

- name: Setting current PMM image version
  set_fact:
    pmm_image_version: "{{ image_version_file['content'] | b64decode | trim }}"

- name: Print current PMM and image versions
  debug:
    msg: "Current version: {{ pmm_current_version }} Image Version: {{ pmm_image_version }}"

- name: Check if we need an update or not
  include_role:
    name: dashboards_upgrade
  when: not pmm_current_version is version(pmm_image_version, '>=')

- name: Create backup directory
  file:
    path: /srv/backup
    state: directory

- name: Check if Postgres 11 exists
  stat:
    path: /srv/postgres
  register: is_postgres_11

- name: Upgrade Postgres database
  include_role:
    name: postgres
  when: is_postgres_11.stat.exists

- name: Create grafana database in postgres
  postgresql_db:
    name: grafana
    state: present

- name: Create grafana user in postgres
  postgresql_user:
    db: grafana
    name: grafana
    password: grafana
    priv: 'ALL'
    expires: infinity
    state: present
  when: not ansible_check_mode

- name: Run SQLite -> Postgres only for docker upgrade
  block:
    - name: Check that the SQLite grafana database exists
      stat:
        path: /srv/grafana/grafana.db
      register: is_database_sqlite

    - name: Migrate Grafana database from SQLite to Postgresql
      include_role:
        name: sqlite-to-postgres
      when: is_database_sqlite.stat.exists
      tags:
        - skip_ansible_lint # '503 Tasks that run when changed should likely be handlers'.
  # We use current_version_file['failed'] because we don't want to run this on creating container
  when: not ui_upgrade and current_version_file['failed'] == false

