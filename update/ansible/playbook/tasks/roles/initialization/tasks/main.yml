---
# This role contains tasks executed during initialization of PMM Server
- name: Determine type of upgrade
  set_fact:
    ui_upgrade: False
  when: ui_upgrade is undefined

- name: Get current version
  slurp:
    src: /srv/grafana/PERCONA_DASHBOARDS_VERSION
  register: current_version_file
  ignore_errors: True

- name: Get image version
  slurp:
    src: /usr/share/percona-dashboards/VERSION
  register: image_version_file

- name: Set current version if VERSION doesn't exist
  set_fact:
    pmm_current_version: "0.0"
  when: current_version_file['failed'] == true

- name: Setting current PMM version
  set_fact:
    pmm_current_version: "{{ current_version_file['content'] | b64decode | trim }}"
  when: current_version_file['failed'] != true

- name: Setting current PMM image version
  set_fact:
    pmm_image_version: "{{ image_version_file['content'] | b64decode | trim }}"

- name: Print current PMM and image versions
  debug:
    msg: "Current version: {{ pmm_current_version }} Image Version: {{ pmm_image_version }}"

# We use current_version_file['failed'] because we don't want to run this on creating container
# and we use pmm_current_version is version(pmm_image_version, '>=') to run it only if upgrade is required
- name: Determine type of upgrade
  set_fact:
    docker_upgrade: "{{ not ui_upgrade and current_version_file['failed'] != true and not pmm_current_version is version(pmm_image_version, '>=') }}"

- name: Print Docker upgrade fact
  debug:
    msg: "Docker upgrade: {{ docker_upgrade }}"

- name: Enable maintenance mode only for docker upgrade
  copy:
    src: maintenance.html
    dest: /usr/share/pmm-server/maintenance/
    mode: 0644
  when: docker_upgrade

- name: Clean yum metadata
  command: yum clean metadata
  become: true
  changed_when: True

- name: Update (both)
  block:
    # This will implicitly create /srv/clickhouse
    - name: Create clickhouse data directory
      file:
        path: "/srv/clickhouse/flags"
        state: directory
        owner: root
        group: pmm
        recurse: true

    - name: Create empty file to convert clickhouse databases from ordinary to atomic
      file:
        path: "/srv/clickhouse/flags/convert_ordinary_to_atomic"
        state: touch
        owner: root
        group: pmm

    - name: Upgrade dashboards
      include_role:
        name: dashboards_upgrade
  when: not pmm_current_version is version(pmm_image_version, '>=')

- name: Create backup directory
  file:
    path: /srv/backup
    state: directory

- name: Create grafana DB
  block:
    - name: Create grafana database in postgres
      postgresql_db:
        name: grafana
        state: present

    - name: Create grafana user in postgres
      postgresql_user:
        db: grafana
        name: grafana
        password: grafana
        priv: 'ALL'
        expires: infinity
        state: present
      when: not ansible_check_mode
  when: lookup('env','GF_DATABASE_URL') == '' and lookup('env','GF_DATABASE_HOST') == ''

- name: Upgrade grafana database (Get the latest schema)
  command: grafana cli --homepath=/usr/share/grafana admin data-migration encrypt-datasource-passwords
  changed_when: True
  when: lookup('env','PMM_TEST_HA_BOOTSTRAP') != '' and not pmm_current_version is version(pmm_image_version, '>=')

- name: Create a working directory for VictoriaMetrics
  file:
    path: /srv/victoriametrics/data 
    state: directory 
    owner: pmm 
    group: pmm

- name: Create an empty configuration file for VictoriaMetrics
  file: 
    path: /etc/victoriametrics-promscrape.yml 
    state: touch 
    owner: pmm 
    group: pmm

- name: Copy file with image version
  copy:
    src: /usr/share/percona-dashboards/VERSION
    dest: /srv/grafana/PERCONA_DASHBOARDS_VERSION
    owner: pmm
    group: pmm
    mode: 0666
    remote_src: yes
  when: not pmm_current_version is version(pmm_image_version, '>=')

- name: Wait for PMM to be ready
  ansible.builtin.uri:
    url: "http://127.0.0.1:7772/v1/readyz"
    status_code: 200
    method: GET
  retries: 120
  delay: 1
  when: docker_upgrade

- name: Disable maintenance mode
  file:
    state: absent
    path: /usr/share/pmm-server/maintenance/maintenance.html
