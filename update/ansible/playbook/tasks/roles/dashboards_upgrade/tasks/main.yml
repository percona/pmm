---
- name: Check that old plugin dir exists
  stat:
    path: /var/lib/grafana/plugins/
  register: old_plugin_dir_exist

- name: Copy plugins from old plugin directory
  block:
    - name: Find custom plugins in old plugin dir
      find:
        paths: /var/lib/grafana/plugins
        recurse: no
        file_type: directory
        excludes:
          - "*-???????"
          - pmm-app
      register: custom_plugins

    - name: Synchronization plugins (for versions before 2.22.0)
      synchronize:
        src: "{{ item['path'] }}"
        dest: "/srv/grafana/plugins/"
      loop: "{{ custom_plugins['files'] }}"

    - name: Find custom plugin in old plugin dir
      find:
        paths: /var/lib/grafana/plugins
        recurse: no
        file_type: directory
        excludes:
          - "*-???????"
          - pmm-app
  when: old_plugin_dir_exist.stat.exists

- name: Get plugin list
  register: plugin_list
  find:
    paths: /usr/share/percona-dashboards/panels/
    depth: 2
    file_type: directory

- name: Delete existing dist folder
  file:
    path: "/srv/grafana/plugins/{{ item['path'].split('/')[-1] }}"
    state: absent
  loop: "{{ plugin_list['files'] }}"

- name: Copy plugins to the plugin directory
  synchronize:
    src: /usr/share/percona-dashboards/panels/
    dest: /srv/grafana/plugins/

- name: Set permissions for the plugin directory
  file:
    path: "/srv/grafana/plugins"
    state: directory
    owner: grafana
    group: grafana
    mode: "0775"

- name: Check that the SQLite grafana database exists
  stat:
    path: /srv/grafana/grafana.db
  register: sqlite_grafana

- name: Remove old dashboards from SQLite
  block:
    - name: Restart grafana before deleting data EL7
      supervisorctl:
        name: grafana
        state: stopped
      become: true
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      ignore_errors: true

    - name: Restart grafana before deleting data EL9
      supervisorctl:
        name: grafana
        state: stopped
        supervisorctl_path: /usr/local/bin/supervisorctl
      become: true
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      ignore_errors: true
      # FIXME: we have a race condition here. We generate grafana supervisor config in pmm-managed and it doesn't exist at this stage

    - name: Remove old DBaaS dashboard (Before provisioning times)
      command: sqlite3 /srv/grafana/grafana.db -cmd ".timeout 60000" "DELETE FROM dashboard WHERE title = 'DBaaS' AND slug = 'dbaas';"
      changed_when: true

    - name: Remove old PMM Inventory (Before provisioning times)
      command: sqlite3 /srv/grafana/grafana.db -cmd ".timeout 60000" "DELETE FROM dashboard WHERE title = 'PMM Inventory' AND slug = 'pmm-inventory';"
      changed_when: true

    - name: Remove old PMM Add Instance dashboard (Before provisioning times)
      command: sqlite3 /srv/grafana/grafana.db -cmd ".timeout 60000" "DELETE FROM dashboard WHERE title = 'PMM Add Instance' AND slug = 'pmm-add-instance';"
      changed_when: true

    - name: Remove old PMM Database Checks dashboard (Before provisioning times)
      command: sqlite3 /srv/grafana/grafana.db -cmd ".timeout 60000" "DELETE FROM dashboard WHERE title = 'PMM Database Checks' AND slug = 'pmm-database-checks';"
      changed_when: true

    - name: Remove old PMM Settings dashboard (Before provisioning times)
      command: sqlite3 /srv/grafana/grafana.db -cmd ".timeout 60000" "DELETE FROM dashboard WHERE title = 'PMM Settings' AND slug = 'pmm-settings';"
      changed_when: true
  when: sqlite_grafana.stat.exists

- name: Remove the old clickhouse plugin
  shell: grafana cli --pluginsDir /srv/grafana/plugins plugins remove vertamedia-clickhouse-datasource || true
  when: not ansible_check_mode

- name: Restart grafana with new plugins EL7
  supervisorctl:
    name: grafana
    state: restarted
  become: true
  ignore_errors: true
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
  # TODO: fix the race condition.
  # We generate grafana supervisor config in pmm-managed and it may not exist at this stage

- name: Restart grafana with new plugins EL9
  supervisorctl:
    name: grafana
    state: restarted
    supervisorctl_path: /usr/local/bin/supervisorctl
  become: true
  when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
  ignore_errors: true
  # TODO: fix the race condition.
  # We generate grafana supervisor config in pmm-managed and it may not exist at this stage
