---
# This playbook contains tasks executed during PMM Server update.
- hosts: localhost
  become: true
  remote_user: root
  gather_facts: true

  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}

  vars:
    pmm_packages:
      - percona-victoriametrics
      - percona-qan-api2
      - percona-alertmanager
      - pmm-managed
      - pmm-update
      - dbaas-controller
      - dbaas-tools
      - pmm2-client
      - pmm-dump
      - vmproxy
      - grafana-db-migrator
  pre_tasks:
    - name: Check for updates of ansible-core package | EL9
      shell: yum list updates ansible-core | grep -q 'ansible-core' && echo 'Available' || echo 'Not Available'
      register: ansible_core_update
      when:
        - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
        - ansible_distribution_major_version == '9'

    - name: Log message if ansible-core package needs update | EL9
      debug:
        msg: "The ansible-core package needs update. Playbook will re-run to apply the changes."
      when:
        - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
        - ansible_distribution_major_version == '9'
        - ansible_core_update.stdout == "Available"

    - name: Remove ansible RPM if installed   | EL9
      when:
        - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
        - ansible_distribution_major_version == '9'
      yum:
        name: ansible
        state: absent
      ignore_errors: yes

    - name: Install ansible-core RPM          | EL9
      when:
        - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
        - ansible_distribution_major_version == '9'
        - not ansible_check_mode
      yum:
        name:
          - ansible-core
          - ansible-collection-community-general
          - ansible-collection-community-postgresql
          - ansible-collection-ansible-posix
        state: latest

    - name: detect /srv/pmm-distribution
      stat:
        path: /srv/pmm-distribution
      no_log: yes
      register: srv_pmm_distribution

    - name: detect containers
      set_fact:
        is_docker: '{{ lookup("file", "/srv/pmm-distribution") == "docker" }}'
      no_log: yes
      when: srv_pmm_distribution.stat.exists

    - name: force container
      set_fact:
        is_docker: True
      when: is_docker is undefined
  tasks:
    - name: Enable maintenance mode
      copy:
        src: maintenance.html
        dest: /usr/share/pmm-server/maintenance/
        mode: 0644

    - name: Remove percona-dashboard without architecture
      yum:
        name: percona-dashboards.*noarch
        state: absent

    # see https://jira.percona.com/browse/PMM-8492 for details about a issue
    - name: Delete experimental repo file in 2.16 version
      file:
        path: "/etc/yum.repos.d/percona-original-experimental.repo"
        state: absent
      register: experimental_repo_existed

    - name: Update percona-dashboards package
      yum:
        name:
          - percona-dashboards
          - percona-grafana
        state: latest

    - name: Cleanup yum metadata
      command: yum clean metadata
      register: yum_clean_result
      changed_when: "'Cleaning repos' in yum_clean_result.stdout"
      when: experimental_repo_existed.changed
      tags:
        - skip_ansible_lint # '503 Tasks that run when changed should likely be handlers'.
        # The handler looks bad in this case

    # TODO: join with the command above
    - name: Cleanup yum metadata
      command: yum clean metadata
      become: true
      tags:
        - skip_ansible_lint

    # Split download and update to produce a bit more of progress output.
    - name: Download pmm2 packages
      yum:
        name: "{{ pmm_packages }}"
        state: latest
        download_only: yes

    - name: Update pmm2 packages
      yum:
        name: "{{ pmm_packages }}"
        state: latest

    - name: Create supervisord dir
      file:
        path: /etc/supervisord.d/
        state: directory

    - name: Upgrade supervisor config
      copy:
        src: pmm.ini
        dest: /etc/supervisord.d/pmm.ini

    # restart pmm-managed-init and pmm-managed first as they may update supervisord configuration on start
    - name: Generate new supervisor config
      command: pmm-managed-init
      register: managed_init_result
      changed_when: True

    - name: Disable pmm-update-perform-init
      ini_file:
        path: /etc/supervisord.d/pmm.ini
        section: program:pmm-update-perform-init
        option: autostart
        value: "false"

    - name: Upgrade supervisord config
      copy:
        src: supervisord.ini
        dest: /etc/supervisord.d/supervisord.ini

    - name: Remove supervisord
      file:
        state: absent
        path: /etc/supervisord.d/supervisord.ini
      when: not is_docker

    - name: Stop systemd pmm-agent service, if running
      systemd:
        name: pmm-agent
        state: stopped
        enabled: no
      when: not is_docker

    - name: Create grafana config
      include_role:
        name: grafana

    - name: Install postgres
      include_role:
        name: postgres

    # Set forking type to 'simple'
    - name: Configure systemd
      when: not is_docker
      copy:
        src: supervisord.service
        dest: /usr/lib/systemd/system/supervisord.service
        mode: 0644

    - name: Remove old supervisord service configuration
      when: not is_docker
      file:
        path: /etc/systemd/system/supervisord.service
        state: absent

    # Start the services
    - name: Enable supervisord        | Make the service persist between reboots
      when: not is_docker
      systemd:
        name: supervisord
        enabled: yes

    - name: Supervisord start        | Start supervisord service for AMI/OVF
      when: not is_docker
      systemd:
        name: supervisord
        state: started # supervisord may already be running
        daemon_reload: yes

    - name: Check that supervisor socket exists
      stat:
        path: /var/run/supervisor/supervisor.sock
      register: is_supervisor_running

    - name: Supervisord start EL7         | Start supervisord for docker
      when: is_docker and not is_supervisor_running.stat.exists and ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      shell: supervisord -c /etc/supervisord.conf &

    - name: Supervisord start EL9        | Start supervisord for docker
      when: is_docker and not is_supervisor_running.stat.exists and (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      shell: /usr/local/bin/supervisord -c /etc/supervisord.conf &

    - name: Wait until postgres port is present before continuing
      wait_for:
        host: localhost
        port: 5432

    - name: Run initialization playbook
      include_role:
        name: initialization
      vars:
        ui_upgrade: True

    - name: Enable crond service
      when: not is_docker
      service:
        name: crond
        state: started
        enabled: yes

    - name: Increase number of open files for jobs
      when: not is_docker
      ini_file:
        dest: /etc/supervisord.conf
        section: supervisord
        option: minfds
        value: "800000"

    # See https://github.com/Supervisor/supervisor/issues/1264 for explanation
    # why we do reread + stop/remove/add instead of using supervisorctl Ansible module.

    - name: Reread supervisord configuration EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl reread
      register: reread_result
      changed_when: "'No config updates to processes' not in reread_result.stdout"

    - name: Reread supervisord configuration EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl reread
      become: true
      register: reread_result
      changed_when: "'No config updates to processes' not in reread_result.stdout"

    - name: Check reread results
      debug: var=reread_result.stdout_lines

    - name: Restart pmm-managed EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl {{ item }} pmm-managed
      become: true
      changed_when: true
      with_items: ["stop", "remove", "add"]

    - name: Restart pmm-managed EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl {{ item }} pmm-managed
      become: true
      changed_when: true
      with_items: ["stop", "remove", "add"]

    # give pmm-managed time to update supervisord configuration,
    # and give update UI time to catch up after pmm-managed restart
    - name: Wait for pmm-managed
      pause: seconds=10

    - name: Update system packages EL7
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == "7"
      yum:
        name: "*"
        state: latest
        security: yes
        exclude:
          - nginx*

    - name: Updating only select packages EL7
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == "7"
      yum:
        name: "{{ item }}"
        state: latest
      loop:
        - nss
        - tzdata
        - libssh2
        - sshpass
        - vi

    - name: Update system packages EL9
      when:
        - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
        - ansible_distribution_major_version == '9'
        - not ansible_check_mode
      yum:
        name: "*"
        state: latest
        exclude:
          - nginx*

    - name: Install nginx
      include_role:
        name: nginx

    - name: Install clickhouse
      include_role:
        name: clickhouse

    # https://jira.percona.com/browse/PMM-9298
    - name: Copy rezise-xfs file for lvm
      copy:
        src: resize-xfs-lvm
        dest: /var/lib/cloud/scripts/per-boot/resize-xfs
        mode: 0755
      when: not is_docker

    - name: Create change-admin-password command
      copy:
        src: change-admin-password
        dest: /usr/local/sbin/change-admin-password
        mode: 0755

    # https://jira.percona.com/browse/PMM-5271
    - name: Check volume size
      when: not is_docker
      replace:
        dest: /var/lib/cloud/scripts/per-boot/resize-xfs
        regexp: "set -o errexit"
        replace: ""

    - name: Reread supervisord configuration again EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl reread
      register: reread_result
      changed_when: "'No config updates to processes' not in reread_result.stdout"

    - name: Reread supervisord configuration again EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl reread
      register: reread_result
      changed_when: "'No config updates to processes' not in reread_result.stdout"

    - name: Check reread results
      debug: var=reread_result.stdout_lines

    - name: Restart services EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl {{ item.1 }} {{ item.0 }}
      become: true
      changed_when: true
      with_nested:
        - - alertmanager
          - nginx
          - grafana
          - qan-api2
          - pmm-agent
        - ["stop", "remove", "add"]

    - name: Restart services EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9' and is_docker
      command: /usr/local/bin/supervisorctl {{ item.1 }} {{ item.0 }}
      become: true
      changed_when: true
      with_nested:
        - - alertmanager
          - nginx
          - grafana
          - qan-api2
          - pmm-agent
        - ["stop", "remove", "add"]

    - name: Delete old grafana and yum-cron artifacts
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - /var/lib/grafana/plugins/
        - /usr/share/grafana/data/grafana.db
        - /etc/yum/yum-cron-hourly.conf
        - /etc/yum/yum-cron.conf

    - name: Check that the SQLite grafana database exists
      stat:
        path: /srv/grafana/grafana.db
      register: is_database_sqlite

    - name: Migrate Grafana database from SQLite to Postgresql
      include_role:
        name: sqlite-to-postgres
      when: is_database_sqlite.stat.exists
      tags:
        - skip_ansible_lint # '503 Tasks that run when changed should likely be handlers'.

    - name: Fix grafana fields type
      postgresql_query:
        db: grafana
        query: "{{ item }}"
      loop:
        - ALTER TABLE tag ALTER COLUMN key TYPE text;
        - ALTER TABLE tag ALTER COLUMN value TYPE text;
        - ALTER TABLE api_key ALTER COLUMN key TYPE text;
        - ALTER TABLE api_key ALTER COLUMN name TYPE text;
      when: not ansible_check_mode

    - name: Change default admin id
      postgresql_query:
        db: grafana
        query: UPDATE "user" SET id='1' WHERE login='admin';
      when: not ansible_check_mode

    # we need to put this step as one of the last steps, because it removes pmm.ini and /etc/alertmanager.yml
    - name: Remove old or redundant packages
      yum:
        state: absent
        name:
          - percona-qan-app # https://jira.percona.com/browse/PMM-6766
          - mariadb-libs # https://jira.percona.com/browse/PMM-5215
          - logrotate # https://jira.percona.com/browse/PMM-7627
          - pmm-server # https://jira.percona.com/browse/PMM-11239
          - screen
          - yum-cron

    # Regenerating pmm.ini and enabling pmm-update-perform-init
    - name: Generate new supervisor config
      command: pmm-managed-init
      register: managed_init_result
      changed_when: True

    - name: Reread pmm-update-perform-init supervisor config EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl reread
      register: reread_init__result
      changed_when: "'No config updates to processes' not in reread_init__result.stdout"

    - name: Reread pmm-update-perform-init supervisor config EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl reread
      register: reread_init__result
      changed_when: "'No config updates to processes' not in reread_init__result.stdout"

    # restarting pmm-managed to regenerate /etc/alertmanager.yml
    - name: Restart pmm-managed EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl {{ item }} pmm-managed
      become: true
      changed_when: true
      with_items: ["stop", "remove", "add"]

    - name: Restart pmm-managed EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl {{ item }} pmm-managed
      become: true
      changed_when: true
      with_items: ["stop", "remove", "add"]

    - name: Update/restart other services EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      command: supervisorctl update
      register: update_result
      changed_when: "'updated' in update_result.stdout"

    - name: Update/restart other services EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      command: /usr/local/bin/supervisorctl update
      register: update_result
      changed_when: "'updated' in update_result.stdout"

    - name: Print other services's logs
      debug: var=update_result.stdout_lines

    - name: Wait for PMM to be ready
      ansible.builtin.uri:
        url: "http://127.0.0.1:7772/v1/readyz"
        status_code: 200
        method: GET
      register: healthcheck
      until: healthcheck is not failed
      retries: 120
      delay: 1

    # SIGUSR2 is sent to supervisord by pmm-managed right before the update for logging to work correctly.
    # We use that fact to show what was restarted during the update.
    - name: Get supervisord logs EL7
      when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      shell: supervisorctl maintail -100000 | tac | awk '!flag; /received SIGUSR2/{flag = 1};' | tac
      register: maintail_result
      changed_when: False

    - name: Get supervisord logs EL9
      when: (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
      shell: /usr/local/bin/supervisorctl maintail -100000 | tac | awk '!flag; /received SIGUSR2/{flag = 1};' | tac
      register: maintail_result
      changed_when: False

    - name: Print supervisord logs
      debug: var=maintail_result.stdout_lines

    - name: Disable maintenance mode
      file:
        state: absent
        path: /usr/share/pmm-server/maintenance/maintenance.html

    - name: Cleanup yum cache
      file:
        state: absent
        path: /var/cache/yum


