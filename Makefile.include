# vim: ts=8:sw=8:ft=make:noai:noet
SWAGGER_UI_VERSION?=latest

.PHONY: default init release gen test clean all
default: help

help:                 ## Display this help message
	@echo "Please use \`make <target>\` where <target> is one of:"
	@grep -h '^[a-zA-Z]' $(MAKEFILE_LIST) | \
		awk -F ':.*?## ' 'NF==2 {printf "  %-26s%s\n", $$1, $$2}'
	@echo
	@echo Check the docker-compose.yml file to see which environment variables are available.

init:                 ## Install tools
	rm -rf bin/*
	cd tools && go generate -x -tags=tools

	# Install golangci-lint
	curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ./bin v1.55.2 # Version should match specified in CI

release:              ## Build release versions of all components
	make -C agent release
	make -C admin release
	make -C managed release
	make -C qan-api2 release

gen: clean            ## Generate files
	make gen-api
	make clean_swagger

	make -C agent gen
	make -C admin gen
	make -C managed gen

	make gen-mocks      ## Generate mocks

	make format
	make format ## TODO: One formatting run is not enough, figure out why.
	go install -v ./...

gen-mocks:
	find . -name mock_*.go -delete
	./bin/mockery --config .mockery.yaml

gen-api:            ## Generate PMM API
	# generated by descriptors target
	bin/buf breaking --against descriptor.bin api

	bin/buf generate -v api

	for API in api/agentlocal/v1 api/server/v1 api/inventory/v1 api/management/v1 api/actions/v1 api/advisors/v1 api/alerting/v1 api/backup/v1 api/dump/v1 api/management/v1/azure api/role/v1 api/qan/v1 api/management/v1/agent api/management/v1/node api/management/v1/service api/platform/v1 api/user/v1; do \
		set -x ; \
		bin/swagger mixin $$API/json/header.json $$API/*.swagger.json --output=$$API/json/$$(basename $$API).json --keep-spec-order; \
		bin/swagger flatten --with-flatten=expand --with-flatten=remove-unused $$API/json/$$(basename $$API).json --output=$$API/json/$$(basename $$API).json ; \
		bin/swagger validate $$API/json/$$(basename $$API).json ; \
		bin/swagger generate client --with-flatten=expand --with-flatten=remove-unused --spec=$$API/json/$$(basename $$API).json --target=$$API/json \
			--additional-initialism=aws \
			--additional-initialism=db \
			--additional-initialism=ok \
			--additional-initialism=pmm \
			--additional-initialism=psmdb \
			--additional-initialism=pxc \
			--additional-initialism=pt \
			--additional-initialism=qan \
			--additional-initialism=rds \
			--additional-initialism=sql \
			--additional-initialism=ha ; \
	done

	# generate public API spec, omit agentlocal and inventory (always private),
	# as well as a number of protos that are in beta (not v1 yet, they all go to a similar call below)
	bin/swagger mixin --output=api/swagger/swagger.json \
		api/swagger/header.json \
		api/server/v1/json/v1.json \
		api/user/v1/json/v1.json \
		api/management/v1/json/v1.json \
		api/actions/v1/json/v1.json \
		api/backup/v1/json/v1.json \
		api/advisors/v1/json/v1.json \
		api/alerting/v1/json/v1.json \
    api/qan/v1/json/v1.json
	bin/swagger validate api/swagger/swagger.json

	bin/swagger-order --output=api/swagger/swagger.json api/swagger/swagger.json

	# generate API spec with all PMM Server APIs (omit agentlocal)
	bin/swagger mixin --output=api/swagger/swagger-dev.json \
		api/swagger/header-dev.json \
		api/server/v1/json/v1.json \
		api/user/v1/json/v1.json \
		api/inventory/v1/json/v1.json \
		api/management/v1/json/v1.json \
		api/actions/v1/json/v1.json \
		api/alerting/v1/json/v1.json \
		api/advisors/v1/json/v1.json \
		api/backup/v1/json/v1.json \
		api/dump/v1/json/v1.json \
		api/management/v1/azure/json/azure.json \
		api/role/v1/json/v1.json \
		api/management/v1/agent/json/agent.json \
		api/management/v1/node/json/node.json \
		api/management/v1/service/json/service.json \
		api/qan/v1/json/v1.json \
		api/platform/v1/json/v1.json

	bin/swagger validate api/swagger/swagger-dev.json

	bin/swagger-order --output=api/swagger/swagger-dev.json api/swagger/swagger-dev.json

clean_swagger:
	find api -name '*.swagger.json' -print -delete


ifeq ($(shell test "${SWAGGER_UI_VERSION}" = "latest" && echo 1 || echo 0), 1)
get_swagger_version:
override SWAGGER_UI_VERSION = $(shell curl --silent --head https://github.com/swagger-api/swagger-ui/releases/latest | grep -E '^[lL]ocation' | sed 's;^.*/;;')
else
get_swagger_version:
endif

update-swagger: get_swagger_version               ## Update Swagger UI in api/swagger, use `SWAGGER_UI_VERSION=xxx make update-swagger` to choose a version other than latest
	curl --output /tmp/swagger.tar.gz -sSfL "https://github.com/swagger-api/swagger-ui/archive/refs/tags/${SWAGGER_UI_VERSION}.tar.gz"
	tar xf /tmp/swagger.tar.gz --transform 's;swagger-ui-.*/dist/;api/swagger/;g'
	rm -f api/swagger/.npmrc
	sed -i 's/url: ".*"/url: "\/swagger.json",\n    validatorUrl: "none"/' api/swagger/swagger-initializer.js

clean: clean_swagger  ## Remove generated files
	find api -name '*.pb.go' -print -delete
	find api -name '*.pb.gw.go' -print -delete
	find api -name '*.validate.go' -print -delete

	for API in api/agentlocal/v1 api/server/v1 api/inventory/v1 api/management/v1 api/actions/v1 api/alerting/v1 api/advisors/v1 api/backup/v1 api/dump/v1 api/role/v1 api/management/v1/agent api/management/v1/node api/management/v1/service api/qan/v1 api/platform/v1 ; do \
		rm -fr $$API/json/client $$API/json/models $$API/json/$$(basename $$API).json ; \
	done
	rm -f api/swagger/swagger.json api/swagger/swagger-dev.json

test-common:          ## Run tests from API (and other shared) packages only (i.e it ignores directories that are explicitly listed)
	go test $(shell go list ./... | grep -v -e admin -e agent -e managed -e api-tests -e qan-api2 -e update)

api-test:             ## Run API tests on dev env.
	go test -count=1 -race -p 1 -v ./api-tests/... -pmm.server-insecure-tls

check:                ## Run required checkers and linters
	bin/buf lint -v api
	LOG_LEVEL=error bin/golangci-lint run ; \
	bin/go-sumtype ./... ; \
	bin/go-consistent -pedantic ./...

check-license:          ## Run license header checks against source files
	bin/license-eye -c .licenserc.yaml header check

check-all: check-license check    ## Run golangci linter to check for changes against main
	bin/golangci-lint run -c=.golangci.yml --new-from-rev=main

FILES = $(shell find . -type f -name '*.go')

format:               ## Format source code
	bin/gofumpt -l -w $(FILES)
	bin/goimports -local github.com/percona/pmm -l -w $(FILES)
	bin/gci write --section Standard --section Default --section "Prefix(github.com/percona/pmm)" $(FILES)
	bin/buf format api -w

serve:                ## Serve API documentation with nginx
	nginx -p . -c api/nginx/nginx.conf

descriptors:          ## Update API compatibility descriptors
	#./prototool break descriptor-set . -o api/api.descriptor
	bin/buf build -o descriptor.bin --as-file-descriptor-set api
