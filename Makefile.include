# vim: ts=8:sw=8:ft=make:noai:noet
SWAGGER_UI_VERSION?=latest

.PHONY: default init release gen test clean all
default: help

help:                           ## Display this help message.
	@echo "Please use \`make <target>\` where <target> is one of:"
	@grep -h '^[a-zA-Z]' $(MAKEFILE_LIST) | \
		awk -F ':.*?## ' 'NF==2 {printf "  %-26s%s\n", $$1, $$2}'
	@echo
	@echo "To test DBaaS components with minikube:"
	@echo "Start minikube: minikube start --cpus=2 --nodes=3 --kubernetes-version=v1.20.0"
	@echo "ENABLE_DBAAS=1 NETWORK=minikube make env-up"


init:                 ## Install tools.
	rm -rf bin/*
	cd tools && go generate -x -tags=tools

	# Install golangci-lint
	curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ./bin v1.51.1 # Version should match specified in CI

	# Download third-party proto files
	$(eval GO_PROTO_VALIDATOR=$(shell go list -f '{{ .Version }}' -m github.com/mwitkow/go-proto-validators))
	curl --create-dirs -L https://raw.githubusercontent.com/mwitkow/go-proto-validators/$(GO_PROTO_VALIDATOR)/validator.proto -o ../third_party/github.com/mwitkow/go-proto-validators/validator.proto

release:              ## Build release versions of all components
	make -C agent release
	make -C admin release
	make -C managed release
	make -C qan-api2 release

gen:                 ## Generate files.
	make -C api gen
	make -C agent gen
	make -C admin gen
	make -C managed gen

	make format
	make format
	go install -v ./...


ifeq ($(shell test "${SWAGGER_UI_VERSION}" = "latest" && echo 1 || echo 0), 1)
get_swagger_version:
override SWAGGER_UI_VERSION = $(shell curl --silent --head https://github.com/swagger-api/swagger-ui/releases/latest | grep -E '^[lL]ocation' | sed 's;^.*/;;')
else
get_swagger_version:
endif

update-swagger: get_swagger_version               ## Update Swagger UI in api/swagger, use `SWAGGER_UI_VERSION=xxx make update-swagger` to choose a version other than latest.
	curl --output /tmp/swagger.tar.gz -sSfL "https://github.com/swagger-api/swagger-ui/archive/refs/tags/${SWAGGER_UI_VERSION}.tar.gz"
	tar xf /tmp/swagger.tar.gz --transform 's;swagger-ui-.*/dist/;api/swagger/;g'
	rm -f api/swagger/.npmrc
	sed -i 's/url: ".*"/url: "\/swagger.json",\n    validatorUrl: "none"/' api/swagger/swagger-initializer.js

test-common:          ## Run tests from API (and other shared) packages only (i.e it ignores directories that are explicitly listed).
	go test $(shell go list ./... | grep -v -e admin -e agent -e managed -e api-tests -e qan-api2 -e update)

api-test:             ## Run API tests on dev env. Use `PMM_KUBECONFIG=/path/to/kubeconfig.yaml make api-test` to run tests for DBaaS.
	go test -count=1 -race -p 1 -v ./api-tests/... -pmm.server-insecure-tls

check:                ## Run required checkers and linters.
	LOG_LEVEL=error bin/golangci-lint run
	bin/go-sumtype ./...
	bin/go-consistent -pedantic ./...

check-license:          ## Run license header checks against source files.
	bin/license-eye -c .licenserc.yaml header check

check-all: check-license check    ## Run golang ci linter to check new changes from main.
	bin/golangci-lint run -c=.golangci.yml --new-from-rev=main

FILES = $(shell find . -type f -name '*.go')

format:               ## Format source code.
	bin/gofumpt -l -w $(FILES)
	bin/goimports -local github.com/percona/pmm -l -w $(FILES)
	bin/gci write --section Standard --section Default --section "Prefix(github.com/percona/pmm)" $(FILES)




