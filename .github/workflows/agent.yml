name: 'Client: pmm-agent'

on:
  push:
    branches:
      - main
      - pmm-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:
    paths-ignore:
      - "admin/**"
      - "api-tests/**"
      - "cli-tests/**"
      - "docs/**"
      - "managed/**"
      - "qan-api2/**"
      - "update/**"
      - "vmproxy/**"

jobs:
  test:
    name: Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        images:
          - { mysql: 'mysql:5.6', mongo: 'mongo:4.2', postgres: 'postgres:10', pmm_server: 'percona/pmm-server:2.0.0' }
          - { mysql: 'mysql:5.7', mongo: 'mongo:4.4', postgres: 'postgres:11', pmm_server: 'percona/pmm-server:2.0.1' }
          - { mysql: 'mysql:8.0', mongo: 'mongo:4.4', postgres: 'postgres:12', pmm_server: 'percona/pmm-server:2.1.0' }
          - { mysql: 'mysql:8.0', mongo: 'mongo:4.4', postgres: 'postgres:13', pmm_server: 'percona/pmm-server:2.2.0' }

          # Percona + latest PMM Server release
          - { mysql: 'percona:5.6', mongo: 'percona/percona-server-mongodb:4.2', postgres: 'perconalab/percona-distribution-postgresql:11', pg_libs: 'pg_stat_statements,pg_stat_monitor', pmm_server: 'percona/pmm-server:2' }
          - { mysql: 'percona:5.7', mongo: 'percona/percona-server-mongodb:4.4', postgres: 'perconalab/percona-distribution-postgresql:12.8-pg_stat', pg_libs: 'pg_stat_statements,pg_stat_monitor', pmm_server: 'percona/pmm-server:2' }
          - { mysql: 'percona:8.0', mongo: 'percona/percona-server-mongodb:4.4', postgres: 'perconalab/percona-distribution-postgresql:13.5-pg_stat', pg_libs: 'pg_stat_statements,pg_stat_monitor', pmm_server: 'percona/pmm-server:2' }

          # MariaDB (only 3 latest GA versions)
          #   + older supported MongoDB versions
          #   + older supported PostgreSQL versions
          #   + dev-latest PMM Server
          # - MYSQL_IMAGE=mariadb:5.5
          # - MYSQL_IMAGE=mariadb:10.0
          # - MYSQL_IMAGE=mariadb:10.1

          - { mysql: 'mariadb:10.2', mongo: 'mongo:4.4',                          postgres: 'postgres:9.4', pmm_server: 'perconalab/pmm-server:dev-latest' }
          - { mysql: 'mariadb:10.3', mongo: 'percona/percona-server-mongodb:4.4', postgres: 'postgres:9.5', pmm_server: 'perconalab/pmm-server:dev-latest' }
          - { mysql: 'mariadb:10.4',                                              postgres: 'postgres:9.6', pmm_server: 'perconalab/pmm-server:dev-latest' }

    continue-on-error: true

    env:
      MYSQL_IMAGE: ${{ matrix.images.mysql }}
      MONGO_IMAGE: ${{ matrix.images.mongo }}
      POSTGRES_IMAGE: ${{ matrix.images.postgres }}
      PMM_SERVER_IMAGE: ${{ matrix.images.pmm_server }}
      PG_PRELOADED_LIBS: ${{ matrix.images.pg_libs }}

    defaults:
      run:
        working-directory: ${{ github.workspace }}/agent

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ github.workspace }}/go.mod
          cache: false

      - name: Enable Go build cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ github.ref }}-
            ${{ runner.os }}-go-build-

      - name: Enable Go modules cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-modules-

      - name: Download Go modules
        run: go mod download -x

      - name: Build and install
        run: make install

      - name: Docker-compose
        env:
          ENV_UP_FLAGS: "--detach"
        run: make env-up

      - name: Run tests
        run: make test-cover

      - name: Upload coverage results
        uses: codecov/codecov-action@v3
        with:
          file: cover.out
          flags: agent
          env_vars: MYSQL_IMAGE,MONGO_IMAGE,POSTGRES_IMAGE,PMM_SERVER_IMAGE
          fail_ci_if_error: false

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
