name: Managed
on:
  push:
    branches:
      - main
      - v3
      - pmm-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
    paths-ignore:
      - "documentation/**"

  pull_request:
    paths-ignore:
      - 'admin/**'
      - 'agent/**'
      - 'api-tests/**'
      - 'docs/**'
      - "documentation/**"
      - 'qan-api2/**'
      - 'update/**'
      - 'vmproxy/**'
      - "ui/**"

permissions: read-all

jobs:
  test:
    name: Managed tests
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    env:
      PMM_SERVER_IMAGE: perconalab/pmm-server:3-dev-latest
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      PMM_DEV_OAUTH_CLIENT_ID: ${{ secrets.OAUTH_PMM_CLIENT_ID }}
      PMM_DEV_OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_PMM_CLIENT_SECRET }}
      PMM_CONTAINER: ghcr.io/percona/pmm:3-dev-container

    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Enable Go build and module cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/go-build-cache
            ~/go-mod-cache
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: ${{ runner.os }}-go-              

      - name: Launch PMM Server
        run: |
          docker run -d \
            --platform linux/amd64 \
            --name pmm-server \
            --hostname pmm-server \
            --network default \
            -p 443:8443 \
            -e AWS_ACCESS_KEY=${AWS_ACCESS_KEY:-} \
            -e AWS_SECRET_KEY=${AWS_SECRET_KEY:-} \
            -e PMM_RELEASE_PATH=/root/go/bin \
            -e PMM_ENABLE_ACCESS_CONTROL=1 \
            -e PMM_ENABLE_TELEMETRY=0 \
            -e PMM_RELEASE_VERSION=3.0.0 \
            -e GOMODCACHE=/home/pmm/.cache/go/mod \
            -w /root/go/src/github.com/percona/pmm \
            -v ./:/root/go/src/github.com/percona/pmm \
            -v ~/go-mod-cache:/home/pmm/.cache/go/mod \
            -v ~/go-build-cache:/home/pmm/.cache/go-build \
            -v ./managed/data/advisors/:/usr/local/percona/advisors/ \
            -v ./managed/data/checks/:/usr/local/percona/checks/ \
            -v ./managed/data/alerting-templates/:/usr/local/percona/alerting-templates/ \
            -v ./Makefile.devcontainer:/root/go/src/github.com/percona/pmm/Makefile:ro \
            ${PMM_CONTAINER:-perconalab/pmm-server:3-dev-container}
          sleep 20
          docker exec -t pmm-server id
          docker logs pmm-server

      - name: Mark the root directory of pmm as safe
        run: docker exec -i -u root pmm-server git config --global --add safe.directory /root/go/src/github.com/percona/pmm

      - name: Rebuild the binaries
        run: docker exec -i -u root pmm-server make run-managed-ci run-agent run-vmproxy run-qan

      - name: Check the status of components
        continue-on-error: true
        run: docker exec -t pmm-server supervisorctl status

      - name: Refresh dnf cache for tests
        run: docker exec -i -u root pmm-server dnf --verbose info updates pmm-managed || echo '1'

      - name: Run tests
        run: docker exec -i -u root pmm-server make -C managed test-cover

      - name: Upload coverage results
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          files: managed/cover.out
          flags: managed
          env_vars: PMM_SERVER_IMAGE
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run debug commands
        if: ${{ always() }}
        run: |
          env | sort
          go env | sort
          git status
          docker exec pmm-server env | sort
          docker exec pmm-server go env | sort
          docker exec pmm-server supervisorctl status || true
          services=$(docker exec pmm-server supervisorctl status | awk '{print $1}')
          services=(`echo ${services}`)
          for service in "${services[@]}"; do
            if [ "$service" != "clickhouse" ]; then
              echo "Logs for $service:"
              docker exec pmm-server supervisorctl tail $service || true
            fi
          done
