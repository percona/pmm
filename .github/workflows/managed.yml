name: Managed
on:
  schedule:
    # run every Sunday to re-populate caches after they are cleaned on Saturday
    - cron: "0 12 * * 0"
  push:
    branches:
      - main
      - release-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    paths-ignore:
      - "admin/**"
      - "agent/**"

jobs:
  test:
    name: Test pmm-managed
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.18.x
        os: [ubuntu-latest]
        may-fail: [false]

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v
      PMM_SERVER_IMAGE: perconalab/pmm-server:dev-latest
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      OAUTH_PMM_CLIENT_ID: ${{ secrets.OAUTH_PMM_CLIENT_ID }}
      OAUTH_PMM_CLIENT_SECRET: ${{ secrets.OAUTH_PMM_CLIENT_SECRET }}
      GO_VERSION: ${{ matrix.go-version }}
      WORKING_DIR: ${{ github.workspace }}/src/github.com/percona/pmm

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v3
        with:
          fetch-depth: 1
          path: ${{ env.WORKING_DIR }}

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Download Go modules
        run: go mod download

      - name: Initialize CI environment
        run: make env-compose-up

      - name: Restore Go build cache
        continue-on-error: true
        run: docker cp ~/.cache/go-build pmm-managed-server:/root/.cache/go-build

      - name: Restore Go modules cache
        continue-on-error: true
        run: docker cp ~/go/pkg/mod pmm-managed-server:/root/go/pkg/mod

      - name: Setup dev-container
        run: docker exec -i --workdir=/root/go/src/github.com/percona/pmm pmm-managed-server .devcontainer/setup.py

      - name: Run tests
        run: docker exec -i --workdir=/root/go/src/github.com/percona/pmm/managed pmm-managed-server make test-all

      - name: Upload coverage results
        uses: percona-platform/codecov-action@v1
        with:
          file: cover.out
          flags: all,cover
          functionalities: fix
          env_vars: GO_VERSION,PMM_SERVER_IMAGE
          fail_ci_if_error: false

      - name: Upload coverage results
        uses: percona-platform/codecov-action@v1
        with:
          file: crosscover.out
          flags: all,crosscover
          functionalities: fix
          env_vars: GO_VERSION,PMM_SERVER_IMAGE
          fail_ci_if_error: false

      - name: Upload coverage results
        uses: percona-platform/codecov-action@v1
        with:
          file: race-crosscover.out
          flags: update,crosscover
          functionalities: fix
          env_vars: GO_VERSION,PMM_SERVER_IMAGE
          fail_ci_if_error: false

      - name: Cache
        run: |
          docker exec pmm-managed-server go clean -testcache
          docker exec --workdir=/root/go/src/github.com/percona/pmm/managed pmm-managed-server find . -type d -name fuzzdata -exec rm -r {} +
          rm -fr ~/.cache/go-build
          mkdir -p ~/.cache
          docker cp pmm-managed-server:/root/.cache/go-build ~/.cache/go-build

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
          kubectl version
