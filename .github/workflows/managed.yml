name: Managed
on:
  schedule:
    # run every Sunday to re-populate caches after they are cleaned on Saturday
    - cron: "0 12 * * 0"

  push:
    branches:
      - main
      - release-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:
    paths-ignore:
      - "admin/**"
      - "agent/**"
      - "docs/**"

  workflow_call:
    inputs:
      go-version:
        description: An array of Go versions to be tested against, in a format of json string.
        required: false
        type: string
        default: '["tip"]'

jobs:
  test:
    name: Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        use-cache: [false]
        go-version: ${{ fromJson(inputs.go-version || '["1.19.x"]') }}

    env:
      GO_VERSION: ${{ matrix.go-version }}
      PMM_SERVER_IMAGE: perconalab/pmm-server:dev-latest
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      OAUTH_PMM_CLIENT_ID: ${{ secrets.OAUTH_PMM_CLIENT_ID }}
      OAUTH_PMM_CLIENT_SECRET: ${{ secrets.OAUTH_PMM_CLIENT_SECRET }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Enable Go build cache
        if: matrix.use-cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-${{ github.ref }}-
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Enable Go modules cache
        if: matrix.use-cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-

      - name: Download Go modules
        if: matrix.use-cache
        run: |
          pushd tools && go mod download
          popd        && go mod download

      - name: Initialize CI environment
        run: make env-compose-up

      - name: Restore Go build cache
        if: matrix.use-cache
        continue-on-error: true
        run: docker cp ~/.cache/go-build pmm-managed-server:/root/.cache/go-build

      - name: Restore Go modules cache
        if: matrix.use-cache
        continue-on-error: true
        run: docker cp ~/go/pkg/mod pmm-managed-server:/root/go/pkg/mod

      - name: Run tests
        run: docker exec -i --workdir=/root/go/src/github.com/percona/pmm/managed pmm-managed-server make test-cover

      - name: Run PMM server update test
        run: docker exec -i --workdir=/root/go/src/github.com/percona/pmm/managed pmm-managed-server make test-update

      - name: Upload coverage results
        uses: codecov/codecov-action@v3
        with:
          file: managed/cover.out
          flags: managed
          env_vars: GO_VERSION,PMM_SERVER_IMAGE
          fail_ci_if_error: false

      - name: Cache
        if: matrix.use-cache
        run: |
          docker exec pmm-managed-server go clean -testcache
          docker exec --workdir=/root/go/src/github.com/percona/pmm/managed pmm-managed-server find . -type d -name fuzzdata -exec rm -r {} +
          rm -fr ~/.cache/go-build
          mkdir -p ~/.cache
          docker cp pmm-managed-server:/root/.cache/go-build ~/.cache/go-build

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
          kubectl version
