name: 'Client: pmm'

on:
  push:
    branches:
      - main
      - pmm-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:
    paths-ignore:
      - "agent/**"
      - "api-tests/**"
      - "docs/**"
      - "managed/**"
      - "qan-api2/**"
      - "update/**"
      - "vmproxy/**"

  workflow_call:
    inputs:
      go-version:
        description: An array of Go versions to be tested against, in a format of json string.
        required: false
        type: string
        default: '["tip"]'

jobs:
  test:
    name: Tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(inputs.go-version || '["1.20.x"]') }}

    env:
      GO_VERSION: ${{ matrix.go-version }}

    defaults:
      run:
        working-directory: ${{ github.workspace }}/admin

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go release
        if: env.GO_VERSION != 'tip'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Go tip
        if: env.GO_VERSION == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH
          echo "$GOBIN" >> $GITHUB_PATH

      - name: Enable Go modules cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-

      - name: Download Go modules
        run: go mod download

      - name: Build and install
        run: make install

      - name: Run tests
        run: make test-cover

      - name: Upload coverage results
        uses: codecov/codecov-action@v3
        with:
          file: cover.out
          flags: admin
          fail_ci_if_error: false

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  cli-test:
    name: CLI Tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(inputs.go-version || '["1.20.x"]') }}
        test-type: [ pmm-common, pmm-serv-install, pmm-serv-update, pmm-docker-test ]

    env:
      GO_VERSION: ${{ matrix.go-version }}

    defaults:
      run:
        working-directory: ${{ github.workspace }}/cli-tests

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go release
        if: env.GO_VERSION != 'tip'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Go tip
        if: env.GO_VERSION == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH
          echo "$GOBIN" >> $GITHUB_PATH

      - name: Enable Go modules cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-

      - name: Download Go modules
        run: go mod download

      - name: Build and install
        run: make -C ../admin install

      - name: Setup tools
        run: |
          sudo apt-get install -y wget jq

      - name: Remove docker for test
        if: ${{ matrix.test-type == 'pmm-docker-test' }}
        run: |
          dpkg -l | grep -i docker
          sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose-plugin || true
          sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce docker-compose-plugin

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install

      - name: Run "pmm" common tests
        if: ${{ matrix.test-type == 'pmm-common' }}
        run: npx playwright test tests/pmm-cli/pmm.spec.ts

      - name: Run "pmm server install" tests
        if: ${{ matrix.test-type == 'pmm-serv-install' }}
        run: npx playwright test tests/pmm-cli/server/install.spec.ts

      - name: Run "pmm server upgrade" tests
        if: ${{ matrix.test-type == 'pmm-serv-update' }}
        run: npx playwright test tests/pmm-cli/server/upgrade.spec.ts

      - name: Run specific docker  tests
        if: ${{ matrix.test-type == 'pmm-docker-test' }}
        run: npx playwright test tests/pmm-cli/server/docker-specific.spec.ts

      - name: Attach the report on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: "report-${{ matrix.go-version }}-${{ matrix.test-type }}"
          path: playwright-report

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          node --version
          pwd
          git status
