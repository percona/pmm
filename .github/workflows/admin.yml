name: 'Client: pmm and pmm-admin'

on:
  push:
    branches:
      - main
      - v3
      - pmm-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
    paths-ignore:
      - "documentation/**"

  pull_request:
    paths-ignore:
      - "agent/**"
      - "api-tests/**"
      - "docs/**"
      - "documentation/**"
      - "managed/**"
      - "qan-api2/**"
      - "update/**"
      - "vmproxy/**"
      - "ui/**"

permissions:
  contents: read

jobs:
  test:
    name: Tests
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: ${{ github.workspace }}/admin

    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go release
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: ${{ github.workspace }}/go.mod
          cache: false

      - name: Enable Go build cache
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ github.ref }}-
            ${{ runner.os }}-go-build-

      - name: Enable Go modules cache
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-modules-

      - name: Download Go modules
        run: go mod download -x

      - name: Build and install
        run: make install

      - name: Run tests
        run: make test-cover

      - name: Upload coverage results
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          file: cover.out
          flags: admin
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env | sort
          go env | sort
          git status

  cli-test:
    name: CLI Tests
    if: false
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        test-type: [ pmm-common, pmm-server-install, pmm-docker-test ]

    defaults:
      run:
        working-directory: ${{ github.workspace }}/cli-tests

    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go release
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: ${{ github.workspace }}/go.mod
          cache: false

      - name: Enable Go build cache
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ github.ref }}-
            ${{ runner.os }}-go-build-

      - name: Enable Go modules cache
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-modules-

      - name: Download Go modules
        run: go mod download -x

      - name: Build and install
        run: make -C ../admin install

      - name: Setup tools
        run: |
          sudo ln -sf /home/runner/go/bin/pmm /usr/bin
          sudo chown -R runner:docker /usr/bin/pmm

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install

      - name: Run "pmm" common tests
        if: ${{ matrix.test-type == 'pmm-common' }}
        run: npx playwright test tests/pmm-cli/pmm.spec.ts

      - name: Run "pmm server install" tests
        if: ${{ matrix.test-type == 'pmm-server-install' }}
        run: npx playwright test tests/pmm-cli/server/install.spec.ts

      - name: Run "pmm server upgrade" tests
        if: ${{ matrix.test-type == 'pmm-server-update' }}
        run: npx playwright test tests/pmm-cli/server/upgrade.spec.ts

      - name: Run specific docker tests
        if: ${{ matrix.test-type == 'pmm-docker-test' }}
        run: npx playwright test tests/pmm-cli/server/docker-specific.spec.ts

      - name: Attach the report on failure
        if: failure()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: "report-${{ matrix.go-version }}-${{ matrix.test-type }}"
          path: ${{ github.workspace }}/cli-tests/playwright-report/

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env | sort
          go env | sort
          git status
          node --version
          npx --version
          npx playwright --version
