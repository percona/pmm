name: Common

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:

  workflow_call:
    inputs:
      go-version:
        description: An array of Go versions to be tested against, in a format of json string.
        required: false
        type: string
        default: '["tip"]'

jobs:
  check:
    name: Checks
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(inputs.go-version || '["1.19.x"]') }}
        may-fail: [false]

    env:
      GO_VERSION: ${{ matrix.go-version }}

    steps:
      - name: Check out code
        uses: percona-platform/checkout@v3

      - name: Set up Go release
        if: env.GO_VERSION != 'tip'
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Go tip
        if: env.GO_VERSION == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-modules-

      - name: Download Go modules
        run: |
          pushd tools && go mod download
          popd        && go mod download

      - name: Install development tools
        run: make init

      - name: Format sources
        run: make format

      - name: Check build
        run: make release

      - name: Run check-license
        run: |
          # run license checker on configured files
          bin/license-eye -c .licenserc.yaml header check

      - name: Run go-sumtype
        run: bin/go-sumtype ./...

      - name: Run golangci-lint
        env:
          COMMAND: "bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number"
          REDIRECT: "| bin/reviewdog -f=golangci-lint -reporter=github-pr-review -fail-on-error=true"
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          if out=$( ${{ env.COMMAND }} ); exit_code=$?; [ $exit_code -ne 0 ]; then
            if [ $exit_code -gt 1 ] || ${{ github.event.pull_request == null }}; then
              echo "$out"
              exit $exit_code
            else
              echo "$out" ${{ env.REDIRECT }}
            fi
          else
            echo "$out"
          fi

      - name: Run go-consistent
        env:
          COMMAND: 'bin/go-consistent -pedantic -exclude "tests" ./...'
          REDIRECT: "| bin/reviewdog -f=go-consistent -reporter=github-pr-review -fail-on-error=true"
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          if out=$( ${{ env.COMMAND }} ); exit_code=$?; [ $exit_code -ne 0 ]; then
            if [ $exit_code -gt 1 ] || ${{ github.event.pull_request == null }}; then
              echo "$out"
              exit $exit_code
            else
              echo "$out" ${{ env.REDIRECT }}
            fi
          else
            echo "$out"
          fi

      - name: Run optional checks/linters
        env:
          COMMAND: "bin/golangci-lint run --out-format=line-number --issues-exit-code=0"
          REDIRECT: "| bin/reviewdog -f=golangci-lint -reporter=github-pr-review"
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          if out=$( ${{ env.COMMAND }} ); exit_code=$?; [ $exit_code -ne 0 ]; then
            if [ $exit_code -gt 1 ] || ${{ github.event.pull_request == null }}; then
              echo "$out"
              exit $exit_code
            else
              echo "$out" ${{ env.REDIRECT }}
            fi
          else
            echo "$out"
          fi

      - name: Test common API
        run: make test-common

      - name: Check that there are no source code changes
        run: |
          pushd tools && go mod tidy -v
          popd        && go mod tidy -v
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  merge-gatekeeper:
    needs: [check]
    name: Merge Gatekeeper
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    steps:
      - name: Run Merge Gatekeeper
        uses: upsidr/merge-gatekeeper@v1.1.1
        with:
          self: Merge Gatekeeper
          token: ${{ secrets.GITHUB_TOKEN }}
          interval: 45
          timeout: 1200
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

  workflow_success:
    needs: [merge-gatekeeper]
    name: Slack Notification success
    runs-on: ubuntu-22.04
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN_PMM_CI }}
      SLACK_CHANNEL: "pmm-ci"
      SLACK_USERNAME: "PR pipelines bot"
      SLACK_ICON_EMOJI: ":chestnut:"
      SLACK_COLOR: "#00FF00"
      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
      SLACK_MESSAGE: "${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"

    steps:
      - uses: percona-platform/checkout@v3
      - uses: percona-platform/setup-node@v3
      - name: Slack Notification
        uses: percona-platform/action-slack-notify@v2

  workflow_failure:
    if: ${{ failure() }}
    needs: [merge-gatekeeper]
    name: Slack Notification failure
    runs-on: ubuntu-22.04
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN_PMM_CI }}
      SLACK_CHANNEL: "pmm-ci"
      SLACK_USERNAME: "PR pipelines bot"
      SLACK_ICON_EMOJI: ":chestnut:"
      SLACK_COLOR: "#FF0000"
      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
      SLACK_MESSAGE: "Workflow failed: ${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"

    steps:
      - uses: percona-platform/checkout@v3
      - name: Slack Notification
        uses: percona-platform/action-slack-notify@v2
