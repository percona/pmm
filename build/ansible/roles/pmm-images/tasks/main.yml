---
- name: Install the GPG key for repo.percona.com
  rpm_key:
    state: present
    key: https://downloads.percona.com/downloads/RPM-GPG-KEY-percona

- name: Packages                   | Add PMM3 Server YUM repository for EL7
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"
  yum_repository:
    name: pmm-server
    description: PMM Server YUM repository - x86_64
    baseurl: https://repo.percona.com/pmm3-components/yum/{{ pmm_server_repo }}/7/RPMS/x86_64/
    gpgcheck: yes
    enabled: yes
    gpgkey: file:///etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY

- name: Packages                   | Add PMM3 Server YUM repository for EL9
  when:
    - (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
  yum_repository:
    name: pmm-server
    description: PMM Server YUM repository - x86_64
    baseurl: https://repo.percona.com/pmm3-components/yum/{{ pmm_server_repo }}/9/RPMS/x86_64/
    gpgcheck: yes
    enabled: yes
    gpgkey: file:///etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY

# local yum repo for building of pmm server docker image in autobuild jobs
- name: PMM                        | Add local YUM repository
  when: ansible_virtualization_type == "docker"
  yum_repository:
    name: local
    description: Local YUM repository - x86_64
    baseurl: file:///tmp/RPMS
    gpgcheck: no
    enabled: no

# we use it for pmm-client (TODO we'll need switch to pmm-client client repo)
# To workaround the package's incompatibility with RHEL9, we have to ignore errors :(
# Error: `Failed to validate GPG signature for percona-release-1.0-27.noarch`
# Despite the error, this will still install the repo and the GPG key
- name: Packages                   | Install percona-release rpm
  yum:
    name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
    state: installed
  ignore_errors: True

- name: Packages                   | Update OS EL7
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"
  yum:
    name: "*"
    state: latest
    exclude: "ansible*"
    disablerepo: percona-release-x86_64

- name: Packages                   | Update OS EL9
  when:
    - ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux'
    - ansible_distribution_major_version == '9'
  yum:
    name: "*"
    state: latest
    disablerepo: percona-release-x86_64

- name: Packages                   | Install OS tools for EL7
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"
  yum:
    name:
      - python2-pip
      - rsync

- name: Packages                   | Install OS tools for EL9
  when:
    - (ansible_distribution == 'OracleLinux' or ansible_distribution == 'AlmaLinux') and ansible_distribution_major_version == '9'
  yum:
    name:
      - python3-pip
      - python3.11-pip
      - python3.11-psycopg2
      - rsync
      - libsqlite3x-devel # package does not come pre-installed on EL9

- name: Create users for non-docker images          | Create users
  user:
    name: "pmm"
  when: ansible_virtualization_type != "docker"

- name: Create users and groups in docker container
  block:
    - name: Ensure groups exist with correct gid
      group:
        name: "{{ item.name }}"
        gid: "{{ item.gid }}"
        non_unique: true
      loop:
        - { name: pmm, gid: 1000 }
        - { name: nginx, gid: 999 }
        - { name: grafana, gid: 998 }
        - { name: clickhouse, gid: 997 }
        - { name: pmm-agent, gid: 996 }

    - name: Create users              | Create users
      user:
        name: "{{ item.name }}"
        uid: "{{ item.uid }}"
        home: "{{ item.home }}"
        comment: "{{ item.comment }}"
        shell: "{{ item.shell }}"
        group: "{{ item.group }}"
        non_unique: true
      loop:
        - { name: pmm, uid: 1000, comment: "PMM Server", shell: "/bin/false", home: "/home/pmm", group: pmm, }
        - { name: nginx, uid: 999, comment: "nginx user", shell: "/sbin/nologin", home: "/var/cache/nginx", group: nginx, }
        - { name: grafana, uid: 998, comment: "Grafana Dashboard", shell: "/sbin/nologin", home: "/etc/grafana", group: grafana, }
        - { name: clickhouse, uid: 997, comment: "Clickhouse server", shell: "/sbin/nologin", home: "/var/lib/clickhouse", group: clickhouse, }
        - { name: pmm-agent, uid: 996, comment: "pmm-agent", shell: "/bin/false", home: "/usr/local/percona/", group: pmm-agent, }
  when: ansible_virtualization_type == "docker"

- name: Create directories        | Create dirs
  file: path={{ item }} state=directory owner=pmm group=pmm
  with_items:
    - /srv/prometheus/data
    - /srv/prometheus/rules
    - /srv/alertmanager/data

- name: Create directories        | Create dirs
  file:
    path: /srv/logs
    state: directory
    owner: pmm
    group: pmm
    mode: "0775"

- name: Create dirs                | Create dirs
  when: ansible_virtualization_type == "docker"
  file: path={{ item }} state=directory
  with_items:
    - /var/lib/cloud/scripts/per-once
    - /var/lib/cloud/scripts/per-boot

- name: Install supervisord
  include_role:
    name: supervisord-init

- name: Install RPMs               | Install RPMs for PMM3 server
  yum:
    name:
      - percona-grafana
      - percona-victoriametrics
      - percona-qan-api2
      - percona-dashboards
      - percona-alertmanager
      - pmm-managed
      - pmm-update
      - grafana-db-migrator
      - pmm-dump
      - vmproxy
    state: installed
    # line below is sed'ed by build-server-docker script
    enablerepo: "pmm-server"

- name: PMM                        | Enable repo for pmm-client
  command: percona-release enable {{ pmm_client_repos }}

- name: Install RPMs               | Install pmm-client rpm
  yum:
    name:
      - pmm-client
    state: installed
    enablerepo: "{{ pmm_client_repo_name }}"

- name: Disable pmm-agent service | Disable pmm-agent
  when: ansible_virtualization_type != "docker"
  service: name=pmm-agent state=stopped enabled=no

- name: Create tmp dirs           | Create tmp dirs
  when: ansible_virtualization_type != "docker"
  command: /usr/bin/systemd-tmpfiles --create --remove --boot --exclude-prefix=/dev

- name: Copy grafana.ini file for the first run
  copy:
    src: grafana.ini
    dest: /etc/supervisord.d/grafana.ini
    mode: "0644"
