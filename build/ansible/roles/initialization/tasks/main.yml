---
# This role contains tasks executed during initialization of PMM Server

- name: Detect AMI distribution
  set_fact:
    pmm_distribution: "{{ lookup('file', '/srv/pmm-distribution', errors='ignore') | default('none', true) }}"

- name: Set is_ami fact
  set_fact:
    is_ami: "{{ pmm_distribution | trim == 'ami' }}"

- name: Get current PMM version (aka 'update from')
  set_fact:
    pmm_current_version: "{{ lookup('file', '/srv/grafana/PERCONA_DASHBOARDS_VERSION', errors='ignore') | default('0', true) }}"

- name: Get PMM image version for update
  set_fact:
    pmm_image_version: "{{ lookup('file', '/usr/share/percona-dashboards/VERSION', errors='strict') }}"

- name: Set need_initialization fact
  set_fact:
    need_initialization: "{{ pmm_current_version == '0' }}"

- name: Set need_upgrade fact
  set_fact:
    need_upgrade: "{{ pmm_current_version is version(pmm_image_version, '<') }}"

- name: Include AI chat variables
  include_vars: "{{ playbook_dir }}/roles/ai-chat/vars/main.yml"

- name: Print PMM distribution
  debug:
    msg: "PMM distribution: {{ pmm_distribution }}, Is AMI: {{ is_ami }}"

- name: Show PMM current and target image versions
  debug:
    msg: "Current version: {{ pmm_current_version }}, Image Version: {{ pmm_image_version }}"

- name: Print need_initialization fact
  debug:
    msg: "Need initialization: {{ need_initialization }}"

- name: Print need_upgrade fact
  debug:
    msg: "Need upgrade: {{ need_upgrade }}"

- name: Execute PMM upgrade & initialization tasks
  block: # when need_initialization or need_upgrade
  - name: Enable maintenance mode before upgrade
    copy:
      src: maintenance.html
      dest: /usr/share/pmm-server/maintenance/
      owner: pmm
      group: pmm
      mode: 0644

  - name: Wait for PostgreSQL to become responsive
    wait_for:
      host: 127.0.0.1
      port: 5432
      timeout: 150
    when: lookup('env','PMM_POSTGRES_ADDR') == '127.0.0.1:5432' and lookup('env','PMM_DISABLE_BUILTIN_POSTGRES') != '1'

  - name: Create Grafana DB
    block:
      - name: Create grafana database in postgres
        postgresql_db:
          name: grafana
          login_user: postgres
          state: present

      - name: Create grafana user in postgres
        postgresql_user:
          db: grafana
          name: grafana
          password: grafana
          priv: 'ALL'
          expires: infinity
          login_user: postgres
          state: present
        when: not ansible_check_mode
    when: lookup('env','GF_DATABASE_URL') == '' and lookup('env','GF_DATABASE_HOST') == '' and need_initialization

  - name: Create AI Chat DB
    block:
      - name: Create AI chat database user
        postgresql_user:
          name: ai_chat_user
          password: ai_chat_secure_password
          role_attr_flags: CREATEDB,LOGIN
          login_user: postgres
          state: present

      - name: Create AI chat database in postgres
        postgresql_db:
          name: ai_chat
          owner: ai_chat_user
          encoding: UTF8
          login_user: postgres
          state: present

      - name: Grant privileges to AI chat user
        postgresql_privs:
          database: ai_chat
          roles: ai_chat_user
          type: database
          privs: ALL
          login_user: postgres
          state: present
        when: not ansible_check_mode

  - name: Setup AI Chat authentication
    block:
      - name: Create AI chat data directory
        file:
          path: "{{ ai_chat_data_dir }}"
          state: directory
          owner: "{{ ai_chat_user }}"
          group: "{{ ai_chat_group }}"
          mode: '0755'

      - name: Check if BETTER_AUTH_SECRET already exists
        stat:
          path: "{{ ai_chat_data_dir }}/.auth_secret"
        register: auth_secret_file

      - name: Check if npx is available
        command: which npx
        register: npx_available
        ignore_errors: yes
        when: not auth_secret_file.stat.exists

      - name: Generate BETTER_AUTH_SECRET using better-auth CLI
        shell: npx @better-auth/cli@latest secret
        register: generated_auth_secret
        when: not auth_secret_file.stat.exists and npx_available.rc == 0

      - name: Read existing BETTER_AUTH_SECRET
        slurp:
          src: "{{ ai_chat_data_dir }}/.auth_secret"
        register: existing_auth_secret
        when: auth_secret_file.stat.exists

      - name: Set final auth secret variable
        set_fact:
          final_auth_secret: "{{ generated_auth_secret.stdout if not auth_secret_file.stat.exists else existing_auth_secret.content | b64decode | trim }}"

      - name: Store BETTER_AUTH_SECRET in file
        copy:
          content: "{{ generated_auth_secret.stdout }}"
          dest: "{{ ai_chat_data_dir }}/.auth_secret"
          owner: "{{ ai_chat_user }}"
          group: "{{ ai_chat_group }}"
          mode: '0600'
        when: not auth_secret_file.stat.exists

      - name: Update AI chat environment file with auth secret
        lineinfile:
          path: "{{ ai_chat_dir }}/mcp-client-chatbot/.env"
          regexp: '^BETTER_AUTH_SECRET='
          line: "BETTER_AUTH_SECRET={{ final_auth_secret }}"
          create: yes
          owner: "{{ ai_chat_user }}"
          group: "{{ ai_chat_group }}"
          mode: '0600'

      - name: Run AI chat database migrations
        command: pnpm db:migrate
        args:
          chdir: "{{ ai_chat_dir }}/mcp-client-chatbot"
        become_user: "{{ ai_chat_user }}"
        environment:
          POSTGRES_URL: "postgres://ai_chat_user:{{ ai_chat_db_password }}@localhost:5432/ai_chat"
          NODE_ENV: production
        ignore_errors: yes
    when: need_initialization

  - name: Upgrade/Install dashboards
    include_role:
      name: dashboards

  - name: Create a backup directory
    file:
      path: /srv/backup
      state: directory
      owner: pmm
      group: pmm
      mode: 0775
    when: need_upgrade

  # Note: we want to leave this for some time until we achieve stable builds
  - name: Output pmm-managed logs
    shell: sleep 10 && tail -n 300 /srv/logs/pmm-managed.log

  - name: Wait for PMM to be ready
    ansible.builtin.uri:
      url: "http://127.0.0.1:7772/v1/server/readyz"
      status_code: 200
      method: GET
    retries: 20
    delay: 5
    register: pmm_ready
    until: pmm_ready.status == 200
    ignore_errors: true

  - name: Initialize admin password for AMI if needed
    include_role:
      name: init-admin-password-ami
    when: need_initialization and is_ami
  when: need_initialization or need_upgrade

- name: Disable maintenance mode
  file:
    state: absent
    path: /usr/share/pmm-server/maintenance/maintenance.html

- name: Remove the file provisioned by 'getStatus'
  file:
    state: absent
    path: /srv/pmm-update.json
