---
# Post-build tasks for all PMM distributions (AMI/OVF/Docker/Digitalocean)
- hosts: all
  become: yes
  gather_facts: yes
  vars:
    pmm_server_distribution: "docker"  # Supported values: docker, ovf, ami, digitalocean

  tasks:
    - name: Create distribution file for PMM
      copy:
        content: "{{ pmm_server_distribution }}"
        dest: /srv/pmm-distribution
        owner: pmm
        group: pmm
        mode: '0644'

    - name: Verify distribution file exists and content is correct
      stat:
        path: /srv/pmm-distribution
      register: distro_file_stat

    - name: Fail if distribution file does not exist
      fail:
        msg: "/srv/pmm-distribution was not created."
      when: not distro_file_stat.stat.exists

    - name: Verify distribution file content
      shell: "cat /srv/pmm-distribution"
      register: distro_file_content
      changed_when: false

    - name: Fail if distribution file content is not as expected
      fail:
        msg: "Distribution file content ({{ distro_file_content.stdout }}) does not match expected ({{ pmm_server_distribution }})"
      when: distro_file_content.stdout != pmm_server_distribution

    - name: Set up pmm-agent
      command: >
        pmm-agent setup
        --config-file=/usr/local/percona/pmm/config/pmm-agent.yaml
        --skip-registration
        --id=pmm-server
        --server-address=127.0.0.1:8443
        --server-insecure-tls
      register: pmm_agent_setup
      changed_when: "'setup complete' in pmm_agent_setup.stdout"

    - name: Verify pmm-agent setup succeeded
      fail:
        msg: "pmm-agent setup did not complete as expected."
      when: "'setup complete' not in pmm_agent_setup.stdout"

    - name: Remove pmm-managed database from PostgreSQL
      postgresql_db:
        login_user: postgres
        name: pmm-managed
        force: true
        state: absent

    - name: Verify pmm-managed database removal
      command: psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='pmm-managed'"
      register: db_check
      changed_when: false
      failed_when: db_check.stdout|trim != ""

    - name: Remove pmm-managed role from PostgreSQL database
      postgresql_user:
        name: pmm-managed
        state: absent

    - name: Verify pmm-managed role removal
      command: psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='pmm-managed'"
      register: role_check
      changed_when: false
      failed_when: role_check.stdout|trim != ""

    - name: Stop supervisord service
      command: supervisorctl shutdown
      become: true
      become_user: pmm
      become_method: su
      register: supervisord_shutdown
      changed_when: supervisord_shutdown.rc == 0

    - name: Verify supervisord has stopped
      shell: "pgrep supervisord"
      register: supervisord_check
      changed_when: false
      failed_when: supervisord_check.rc == 0

    - name: Clean DNF cache using command
      command: dnf clean all
      register: dnf_clean_cmd
      changed_when: "'Cleaning' in dnf_clean_cmd.stdout"

    - name: Remove DNF cache directory
      file:
        state: absent
        path: /var/cache/dnf

    - name: Verify DNF cache directory is removed
      stat:
        path: /var/cache/dnf
      register: dnf_cache_stat
    - name: Fail if DNF cache directory still exists
      fail:
        msg: "/var/cache/dnf still exists!"
      when: dnf_cache_stat.stat.exists

    - name: Cleanup build logs and data
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /srv/logs
        - /var/log/dnf.log
        - /var/log/secure
        - /var/log/wtmp
        - /var/log/clickhouse-server
        - /var/log/nginx
        - /var/lib/pgsql
        - /srv/pmm-encryption.key
        - /var/cache/yum

    - name: Verify cleanup of build logs and data
      stat:
        path: "{{ item }}"
      register: cleanup_check
      loop:
        - /srv/logs
        - /var/log/dnf.log
        - /var/log/secure
        - /var/log/wtmp
        - /var/log/clickhouse-server
        - /var/log/nginx
        - /var/lib/pgsql
        - /srv/pmm-encryption.key
        - /var/cache/yum
      failed_when: cleanup_check.results | selectattr('stat.exists','equalto', true) | list | length > 0

    - name: Remove users created by installers
      user:
        name: "{{ item }}"
        state: absent
      loop:
        - postgres
        - clickhouse
        - nginx

    - name: Verify installer users are removed
      command: "getent passwd {{ item }}"
      register: user_check
      changed_when: false
      failed_when: user_check.rc == 0
      loop:
        - postgres
        - clickhouse
        - nginx

    - name: Clean Clickhouse directory
      shell: "find /srv/clickhouse -mindepth 1 -maxdepth 1 -print0 | xargs -0 rm -rf --"
      args:
        warn: false
      register: clickhouse_clean
      changed_when: clickhouse_clean.rc == 0

    - name: Verify Clickhouse directory is empty
      shell: "find /srv/clickhouse -mindepth 1 -maxdepth 1 | wc -l"
      register: clickhouse_contents
      changed_when: false
    - name: Fail if Clickhouse directory is not empty
      fail:
        msg: "/srv/clickhouse is not empty after cleanup."
      when: clickhouse_contents.stdout|int > 0

    - name: Remove '/srv/victoriametrics' directory if it exists
      file:
        path: /srv/victoriametrics
        state: absent
        owner: pmm
        group: pmm
        mode: '0775'

    - name: Create '/srv/victoriametrics' directory
      file:
        path: /srv/victoriametrics
        state: directory
        owner: pmm
        group: pmm
        mode: '0775'

    - name: Verify '/srv/victoriametrics' directory exists
      stat:
        path: /srv/victoriametrics
      register: vm_dir_stat
    - name: Fail if '/srv/victoriametrics' directory was not created
      fail:
        msg: "/srv/victoriametrics directory is missing!"
      when: not vm_dir_stat.stat.exists

    - name: Create '/srv/logs' directory
      file:
        path: /srv/logs
        state: directory
        owner: pmm
        group: pmm
        mode: '0775'

    - name: Verify '/srv/logs' directory exists
      stat:
        path: /srv/logs
      register: logs_dir_stat
    - name: Fail if '/srv/logs' directory is missing
      fail:
        msg: "/srv/logs directory is missing!"
      when: not logs_dir_stat.stat.exists

    - name: Change ownership of nginx directories
      file:
        path: /var/lib/nginx
        state: directory
        owner: pmm
        group: pmm
        recurse: yes

    - name: Verify ownership of /var/lib/nginx
      stat:
        path: /var/lib/nginx
      register: nginx_stat
    - name: Fail if /var/lib/nginx does not have the correct owner
      fail:
        msg: "/var/lib/nginx is not owned by pmm!"
      when: nginx_stat.stat.pw_name != "pmm"
