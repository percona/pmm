---
- name: "Provision Jenkins Agent for {{ cloud_provider | upper }}"
  hosts: default
  become: true
  vars:
    # Cloud provider detection (can be passed from Packer or environment)
    cloud_provider: "{{ lookup('env', 'CLOUD_PROVIDER') | default('aws') }}"

    # Common versions
    docker_compose_version: "2.26.1"
    kubectl_version: "1.29.2"
    doctl_version: "1.105.0"
    node_version: "22.x"
    goreleaser_version: "2.3.2"
    hcloud_cli_version: "1.51.0"

    # Cloud-specific variables
    cloud_users:
      aws: ec2-user
      hetzner: rocky

    epel_packages:
      aws: oracle-epel-release-el9
      hetzner: epel-release

    # Set the appropriate user based on cloud provider
    cloud_user: "{{ cloud_users[cloud_provider] | default('root') }}"

  tasks:
    - name: Detect vm architecture
      set_fact:
        # Alternative architecture name just because we never can have only one name in computers
        ansible_architecture_alt: "{% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}none{% endif %}"

    # ===== REPOSITORY SETUP =====
    - name: Add hashicorp repository (Hetzner)
      get_url:
        url: https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        dest: /etc/yum.repos.d/hashicorp.repo
      when: cloud_provider == 'hetzner'

    - name: Install EPEL repository
      dnf:
        name: "{{ epel_packages[cloud_provider] }}"
        state: latest
      when: cloud_provider in ['aws', 'hetzner']

    - name: Upgrade OS packages
      dnf:
        name: "*"
        state: latest

    - name: Add a repository for NodeJS
      shell: "curl -fsSL https://rpm.nodesource.com/setup_{{ node_version }} | bash -"

    # ===== DOCKER INSTALLATION =====
    - name: Add Docker repository
      command: dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

    - name: Install Docker packages
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest

    - name: Copy docker daemon config
      copy:
        src: daemon.json
        dest: /etc/docker/daemon.json

    - name: Enable Docker service
      systemd:
        name: docker.service
        state: started
        enabled: yes

    # ===== COMMON PACKAGES =====
    - name: Install common packages
      dnf:
        name:
          - git
          - jq
          - gettext
          - unzip
          - python3
          - svn # we use it in pmm-framework.sh
          - php # we use PHP in pmm-qa repo
          - php-mysqlnd
          - php-pdo
          - wget
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - perl
          - nodejs
          - java-17-openjdk-headless
        state: latest

    - name: Install bc (AWS/Hetzner only)
      dnf:
        name: bc
        state: latest
      when: cloud_provider in ['aws', 'hetzner']


    - name: Install chromium (x86_64 only)
      dnf:
        name: chromium
        state: latest
      when: ansible_architecture == 'x86_64'

    - name: Install XFS packages for Hetzner
      dnf:
        name:
          - xfsprogs
          - xfsdump
          - packer
        state: latest
      when: cloud_provider == 'hetzner'

    # ===== PYTHON AND ANSIBLE =====
    - name: Install pip3 and ansible (AWS/Hetzner)
      dnf:
        name:
          - python3-pip
          - ansible-core
          - glibc-langpack-en
        state: latest
      when: cloud_provider in ['aws', 'hetzner']


    - name: Install ansible collections (AWS/Hetzner)
      shell: "ansible-galaxy collection install {{ item }}"
      loop:
        - ansible.posix
        - community.general
        - community.postgresql
      when: cloud_provider in ['aws', 'hetzner']

    # ===== USER MANAGEMENT =====
    - name: Create cloud-specific user for Hetzner
      user:
        name: rocky
        groups: wheel
        append: yes
        state: present
      when: cloud_provider == 'hetzner'

    - name: Create virtualenv directory
      file:
        path: "/home/{{ cloud_user }}"
        state: directory
        owner: "{{ cloud_user }}"
        group: "{{ cloud_user }}"
        mode: "0755"
      when: cloud_user != 'root'

    - name: Install Python's virtualenv
      command: "python3 -m venv /home/{{ cloud_user }}/venv"

    - name: Set virtualenv ownership
      file:
        path: "/home/{{ cloud_user }}/venv"
        state: directory
        owner: "{{ cloud_user }}"
        group: "{{ cloud_user }}"
        recurse: yes
      when: cloud_user != 'root'

    - name: Install Python modules
      pip:
        name: "{{ item }}"
        virtualenv: "/home/{{ cloud_user }}/venv"
      loop:
        - pyaml==24.7.0
        - GitPython==3.1.43
        - PyGithub==2.3.0
        - python-digitalocean==1.17.0
        - docker==7.1.0
        - linode-cli==5.50.0

    - name: Install hcloud Python module (Hetzner)
      pip:
        name: hcloud==2.5.3
        virtualenv: "/home/{{ cloud_user }}/venv"
      when: cloud_provider == 'hetzner'

    # ===== DEVELOPMENT TOOLS =====
    - name: Install bats via npm (AWS/Hetzner)
      shell: "npm install -g bats"
      when: cloud_provider in ['aws', 'hetzner']

    - name: Install docker-compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: "u+x,g+x,o+x"

    - name: Install kubectl
      get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/{{ ansible_architecture_alt }}/kubectl"
        dest: /usr/local/bin/kubectl
        mode: "u+x,g+x,o+x"

    - name: Install lacework
      get_url:
        url: "https://github.com/lacework/lacework-vulnerability-scanner/releases/latest/download/lw-scanner-linux-{{ ansible_architecture_alt }}"
        dest: /usr/local/bin/lw-scanner
        mode: "u+x,g+x,o+x"

    - name: Install doctl client
      get_url:
        url: "https://github.com/digitalocean/doctl/releases/download/v{{ doctl_version }}/doctl-{{ doctl_version }}-linux-{{ ansible_architecture_alt }}.tar.gz"
        dest: /tmp/doctl.tar.gz

    - name: Unarchive doctl
      unarchive:
        src: /tmp/doctl.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: "u+x,g+x,o+x"
        group: "root"
        owner: "root"

    - name: Install Goreleaser (AWS/Hetzner, x86_64 only)
      dnf:
        name: "https://github.com/goreleaser/goreleaser/releases/download/v{{ goreleaser_version }}/goreleaser-{{ goreleaser_version }}-1.{{ ansible_architecture }}.rpm"
        state: present
        disable_gpg_check: yes
      when:
        - cloud_provider in ['aws', 'hetzner']
        - ansible_architecture == 'x86_64'

    - name: Install YQ
      get_url:
        url: "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_{{ ansible_architecture_alt if cloud_provider == 'hetzner' else 'amd64' }}"
        dest: /usr/bin/yq
        mode: "555"

    # ===== CLOUD-SPECIFIC TOOLS =====
    - name: Install hcloud CLI (Hetzner)
      block:
        - name: Download hcloud CLI
          get_url:
            url: "https://github.com/hetznercloud/cli/releases/download/v{{ hcloud_cli_version }}/hcloud-linux-{{ ansible_architecture_alt }}.tar.gz"
            dest: /tmp/hcloud.tar.gz

        - name: Unarchive hcloud CLI
          unarchive:
            src: /tmp/hcloud.tar.gz
            dest: /usr/local/bin
            remote_src: yes
            mode: "u+x,g+x,o+x"
            group: "root"
            owner: "root"
      when: cloud_provider == 'hetzner'


    # ===== AWS CLI (All providers) =====
    - name: Download and unarchive AWS installer
      unarchive:
        src: "https://awscli.amazonaws.com/awscli-exe-linux-{{ ansible_architecture }}.zip"
        dest: /tmp
        remote_src: yes

    - name: Run awscli installer
      shell: "/tmp/aws/install --update || /tmp/aws/install"

    # ===== DOCKER USER PERMISSIONS =====
    - name: Add cloud user to docker group
      user:
        name: "{{ cloud_user }}"
        groups:
          - docker
        append: yes
      when: cloud_user != 'root'

    # ===== DOCKER IMAGE CACHING =====
    - name: Pull and cache docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - debian:bookworm
        - ubuntu:jammy
        - ubuntu:noble
        - oraclelinux:9
        - public.ecr.aws/e7j3v3n0/rpmbuild:3
        - public.ecr.aws/e7j3v3n0/rpmbuild:3-ol8
      ignore_errors: yes # Some images may not be available for ARM

    # ===== KERNEL PARAMETERS =====
    - name: Turn off swap
      sysctl:
        name: vm.swappiness
        value: 0
        state: present

    - name: Increase dirty ratio
      sysctl:
        name: vm.dirty_ratio
        value: 80
        state: present

    - name: Decrease dirty_background_ratio
      sysctl:
        name: vm.dirty_background_ratio
        value: 5

    - name: Increase dirty_expire_centisecs
      sysctl:
        name: vm.dirty_expire_centisecs
        value: 12000 # 120 sec

    - name: Increase net.core.somaxconn
      sysctl:
        name: net.core.somaxconn
        value: 1024

    - name: Increase net.core.netdev_max_backlog
      sysctl:
        name: net.core.netdev_max_backlog
        value: 5000

    - name: Increase net.core.rmem_max
      sysctl:
        name: net.core.rmem_max
        value: 16777216

    - name: Increase net.core.wmem_max
      sysctl:
        name: net.core.wmem_max
        value: 16777216

    - name: Increase net.ipv4.tcp_wmem
      sysctl:
        name: net.ipv4.tcp_wmem
        value: 4096 12582912 16777216

    - name: Increase net.ipv4.tcp_rmem
      sysctl:
        name: net.ipv4.tcp_rmem
        value: 4096 12582912 16777216

    - name: Increase net.ipv4.tcp_max_syn_backlog
      sysctl:
        name: net.ipv4.tcp_max_syn_backlog
        value: 8192

    - name: Disable net.ipv4.tcp_slow_start_after_idle
      sysctl:
        name: net.ipv4.tcp_slow_start_after_idle
        value: 0

    - name: Enable net.ipv4.tcp_tw_reuse
      sysctl:
        name: net.ipv4.tcp_tw_reuse
        value: 1

    - name: Change net.ipv4.ip_local_port_range
      sysctl:
        name: net.ipv4.ip_local_port_range
        value: 10240 65535

    - name: Change TCP Congestion Control Algorithm
      sysctl:
        name: net.ipv4.tcp_congestion_control
        value: bbr

    - name: Change net.ipv4.tcp_syn_retries
      sysctl:
        name: net.ipv4.tcp_syn_retries
        value: 2

    - name: Change BBR algorithm
      sysctl:
        name: net.core.default_qdisc
        value: fq

    - name: Increase kernel.perf_event_max_stack (AWS/Hetzner)
      sysctl:
        name: kernel.perf_event_max_stack
        value: 1023
        ignoreerrors: yes
      when: cloud_provider in ['aws', 'hetzner']

    # ===== XFS HANDLING (Hetzner) =====
    - name: Handle XFS parameters (Hetzner)
      block:
        - name: Load XFS kernel module
          modprobe:
            name: xfs
            state: present
          ignore_errors: yes

        - name: Check if XFS is available
          stat:
            path: /proc/sys/fs/xfs/xfssyncd_centisecs
          register: xfs_param_check
          failed_when: false

        - name: Increase fs.xfs.xfssyncd_centisecs
          sysctl:
            name: fs.xfs.xfssyncd_centisecs
            value: 9000
            state: present
          when: xfs_param_check.stat.exists
          failed_when: false
      when: cloud_provider == 'hetzner'

    - name: Increase fs.xfs.xfssyncd_centisecs (AWS only)
      sysctl:
        name: fs.xfs.xfssyncd_centisecs
        value: 9000
      when: cloud_provider == 'aws'

    - name: Increase fs.inotify.max_user_watches
      sysctl:
        name: fs.inotify.max_user_watches
        value: 1048576

    # ===== FINAL CONFIGURATION =====
    - name: Add repo.ci.percona.com to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "10.30.6.9 repo.ci.percona.com"
        state: present

    # ===== CLEANUP =====
    - name: Remove temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/doctl.tar.gz
        - /tmp/hcloud.tar.gz
        - /tmp/aws
      ignore_errors: yes
