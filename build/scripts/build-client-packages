#!/bin/sh
# NOTE: this script must be executed in a container environment.

# Disable some shellcheck warnings - this is a script that runs in a controlled environment
# shellcheck disable=SC3043 # In POSIX sh, local is undefined.
# shellcheck disable=SC3044 # In POSIX sh, pushd is undefined.
# shellcheck disable=SC3009 # In POSIX sh, brace expansion is undefined.
# shellcheck disable=SC2035 # Use ./*glob* or -- *glob* so names with dashes won't become options.
# shellcheck disable=SC3020 # In POSIX sh, &> is undefined.

set -o errexit
set -o xtrace

usage () {
  cat <<EOF
Usage: $0 [OPTIONS]
    The following options may be given :
        --build_src_rpm     Build source RPM packages
        --build_rpm         Build RPM packages
        --build_source_deb  Build debian source packages
        --build_deb         Build debian packages
        --help)             Display this help
Example $0 --build_src_rpm --build_rpm
EOF

  exit 1
}

run() {
  for arg do
    case "$arg" in
      --build_src_rpm)
        echo "Building srpm packages..."
        build_srpm
        ;;
      --build_rpm)
        echo "Building rpm packages..."
        build_rpm
        ;;
      --build_source_deb=*)
        echo "Building source deb packages..."
        build_source_deb
        ;;
      --build_deb)
        echo "Building deb packages..."
        build_deb
        ;;
      --help) usage ;;
      *) usage ;;
    esac
  done
}

# Find the tarball and copy it to WORKDIR
get_tar(){
  local TARBALL_DIR="$1"
  local TARFILE=$(basename $(find "$CURDIR/$TARBALL_DIR" -name "${PACKAGE_NAME}*.tar.gz" | sort | tail -n1))
  if [ ! -f "$CURDIR/$TARBALL_DIR/$TARFILE" ]; then
    echo "Error: $TARBALL_DIR could not be found, exiting..."
    exit 1
  fi

  cp "$CURDIR/$TARBALL_DIR/$TARFILE" "$WORKDIR/$TARFILE"
  echo "$TARFILE"
}

get_deb_sources(){
  local param="$1"
  local FILE
  FILE=$(basename $(find "$CURDIR/source_deb" -name "${PACKAGE_NAME}*.$param" | sort | tail -n1))
  if [ -z "$FILE" ]; then
    echo "There is no source to build from"
    exit 1
  else
    cp "$CURDIR/source_deb/$FILE" "$WORKDIR/"
  fi
}

build_srpm(){
  local TARFILE NAME VERSION_TMP VERSION
  TARFILE=$(get_tar tarball)
  NAME=$(echo "${TARFILE}"| awk -F '-' '{print $1"-"$2}')
  VERSION_TMP=$(echo "${TARFILE}"| awk -F '-' '{print $3}')
  VERSION="${VERSION_TMP%.tar.gz}"

  local sudo_path=""
  if [ -e /usr/bin/sudo ]; then
    sudo_path=/usr/bin/sudo
  fi

  if ! command -v git &> /dev/null; then
    echo "Trying to install git..."
    $sudo_path dnf -y install git
  fi
  if ! command -v rpmbuild &> /dev/null; then
    echo "Trying to install rpm-build..."
    $sudo_path dnf -y install rpm-build
  fi

  cd $WORKDIR
  mkdir -vp rpmbuild/{SOURCES,SPECS,BUILD,SRPMS,RPMS}

  tar -C ${WORKDIR} -zxpf "${TARFILE}" "${NAME}-${VERSION}/rpm"

  cp "${WORKDIR}/${NAME}-${VERSION}"/rpm/*.spec "${WORKDIR}/rpmbuild/SPECS/"
  cp "${WORKDIR}/${TARFILE}" "${WORKDIR}/rpmbuild/SOURCES/"

  rpmbuild -bs \
    --define "_topdir ${WORKDIR}/rpmbuild" \
    --define "version $VERSION" \
    --define "release $RPM_RELEASE" \
    --define "dist %{nil}" \
    "rpmbuild/SPECS/${PACKAGE_NAME}.spec"

  mkdir -p "${CURDIR}/srpm"
  cp rpmbuild/SRPMS/*.src.rpm "${CURDIR}/srpm"
}

build_rpm(){
  local SRC_RPM RHEL
  SRC_RPM="$(basename $(find "$CURDIR/srpm" -name "${PACKAGE_NAME}*.src.rpm" | sort | tail -n1) || :)"
  RHEL="$(rpm --eval %rhel)"

  if [ -z "$SRC_RPM" ]; then
    echo "Error: no source RPM could be found, exiting..."
    echo "You can build source RPM using the parameter --build_src_rpm"
    exit 1
  fi

  cd $WORKDIR
  rm -fr rpmbuild
  mkdir -vp rpmbuild/{SOURCES,SPECS,BUILD,SRPMS,RPMS}
  cp "$CURDIR/srpm/$SRC_RPM" rpmbuild/SRPMS/

  if find "${CURDIR}/rpm" -name "${PACKAGE_NAME}-${PMM_VERSION}-*.rpm"; then
    # Remove older client rpm packages before building a new one
    rm -f "${CURDIR}/rpm/${PACKAGE_NAME}-${PMM_VERSION}-*.rpm"
  fi
  rpmbuild  --define "_topdir ${WORKDIR}/rpmbuild" \
            --define "version $PMM_VERSION" \
            --define "release $RPM_RELEASE" \
            --define "dist .el${RHEL}" \
            --rebuild "rpmbuild/SRPMS/$SRC_RPM"

  return_code=$?
  if [ "$return_code" -ne 0 ]; then
    echo "Error: rpmbuild exited with a non-zero return code '$return_code'"
    echo
    exit $return_code
  fi

  mkdir -p "${CURDIR}/rpm"
  cp rpmbuild/RPMS/*/*.rpm "${CURDIR}/rpm"
}

build_source_deb(){
  rm -rf pmm-client*
  rm -f *.dsc *.orig.tar.gz *.debian.tar.gz *.changes

  local TARFILE NAME VERSION_TMP VERSION NEWTAR
  TARFILE="$(get_tar tarball)"
  NAME="$(echo "${TARFILE}" | awk -F '-' '{print $1"-"$2}')"
  VERSION_TMP="$(echo "${TARFILE}" | awk -F '-' '{print $3}')"
  VERSION="${VERSION_TMP%.tar.gz}"

  rm -fr "${NAME}-${VERSION}"

  NEWTAR="${NAME}_${VERSION}.orig.tar.gz"
  mv "${TARFILE}" "${NEWTAR}"

  git clone "$REPO" "${NAME}-${VERSION}_all"
  pushd "${NAME}-${VERSION}_all"
    git fetch origin
    if [ -n "${BRANCH}" ]; then
      git reset --hard
      git clean -xdf
      git checkout ${BRANCH}
    fi
    REVISION=$(git rev-parse --short HEAD)
    mkdir distro
  popd

  tar xzf "${NEWTAR}"
  cd "${NAME}-${VERSION}"
  mv bin/* ../"${NAME}-${VERSION}"_all/distro/
  mv example.prom ../"${NAME}-${VERSION}"_all/distro/
  mv queries-mysqld.yml ../"${NAME}-${VERSION}"_all/distro/
  mv queries-mysqld-group-replication.yml ../"${NAME}-${VERSION}"_all/distro/
  mv example-queries-postgres.yml ../"${NAME}-${VERSION}"_all/distro/
  mv queries-postgres-uptime.yml ../"${NAME}-${VERSION}"_all/distro/
  mv queries-mr.yaml ../"${NAME}-${VERSION}"_all/distro/
  mv queries-lr.yaml ../"${NAME}-${VERSION}"_all/distro/
  mv debian ../"${NAME}-${VERSION}"_all/
  mv config/pmm-agent.service ../"${NAME}-${VERSION}"_all/debian/${PACKAGE_NAME}.pmm-agent.service
  cd ../

  rm -rf "${NAME}-${VERSION}"
  mv "${NAME}-${VERSION}"_all "${NAME}-${VERSION}"
  rm -rf *.tar.gz
  tar -zcvf "${NEWTAR}" "${NAME}-${VERSION}"
  cd "${NAME}-${VERSION}"
  sed -i "s/%{version}/$VERSION-$DEB_RELEASE/" debian/control

  cd debian
  echo "${NAME} (${VERSION}) unstable; urgency=low" >> changelog
  echo "  * Initial Release." >> changelog
  echo " -- Percona LLC <no-reply@percona.com> $(date -R)" >> changelog

  cd ../

  dch -D unstable --force-distribution -v "${VERSION}-${DEB_RELEASE}" "Update to new upstream release of PMM Client ${VERSION}-${DEB_RELEASE}"
  dpkg-buildpackage -S
  cd ../
  mkdir -p "$WORKDIR/source_deb"
  mkdir -p "$CURDIR/source_deb"
  cp *.diff.gz "$WORKDIR/source_deb"
  cp *_source.changes "$WORKDIR/source_deb"
  cp *.dsc "$WORKDIR/source_deb"
  cp *.orig.tar.gz "$WORKDIR/source_deb"
  cp *.diff.gz "$CURDIR/source_deb"
  cp *_source.changes "$CURDIR/source_deb"
  cp *.dsc "$CURDIR/source_deb"
  cp *.orig.tar.gz "$CURDIR/source_deb"
}

build_deb(){
  for file in 'dsc' 'orig.tar.gz' 'changes' 'diff.gz'; do
    get_deb_sources $file
  done

  cd $WORKDIR
  rm -fv *.deb
  local DEBIAN_VERSION DSC DIRNAME VERSION ARCH
  DEBIAN_VERSION="$(lsb_release -sc)"
  DSC=$(basename "$(find . -name '*.dsc' | sort | tail -n 1)")
  DIRNAME=$(echo "${DSC}" | sed -e 's:_:-:g' | awk -F'-' '{print $1"-"$2}')
  VERSION=$(echo "${DSC}" | sed -e 's:_:-:g' | awk -F'-' '{print $3}')
  ARCH=$(uname -m)
  echo "DEBIAN_VERSION=${DEBIAN_VERSION}" >> "$VERSION_FILE"
  echo "ARCH=${ARCH}" >> "$VERSION_FILE"
  #
  dpkg-source -x "${DSC}"
  cd "${DIRNAME}-${VERSION}"
  dch -b -m -D "$DEBIAN_VERSION" --force-distribution -v "${VERSION}-${DEB_RELEASE}.${DEBIAN_VERSION}" 'Update distribution'

  dpkg-buildpackage -rfakeroot -uc -us -b
  mkdir -p "$CURDIR/deb"
  cp $WORKDIR/*.deb "$CURDIR/deb"
}

main() {
  # CURDIR points to `/home/builder/build` inside the container, which is mapped to `pmm-submodules/build`
  CURDIR=$(pwd) 
  WORKDIR=/tmp/pmm
  PACKAGE_NAME=pmm-client
  VERSION_FILE=${CURDIR}/${PACKAGE_NAME}.properties
  RPM_RELEASE=${PMM_RELEASE:-1}
  DEB_RELEASE=${PMM_RELEASE:-1}
  REVISION=0
  BRANCH="v3"
  REPO="https://github.com/Percona-Lab/pmm-submodules.git"

  mkdir -p "$WORKDIR"

  run "$@"
}

main "$@"

# vim: expandtab shiftwidth=2 tabstop=2
