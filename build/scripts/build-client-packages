#!/bin/sh

set -o errexit
set -o xtrace

shell_quote_string() {
  echo "$1" | sed -e 's,\([^a-zA-Z0-9/_.=-]\),\\\1,g'
}

usage () {
  cat <<EOF
Usage: $0 [OPTIONS]
    The following options may be given :
        --build_src_rpm     Build RPM packages
        --build_source_deb  Build debian source packages
        --build_rpm         Build RPM packages
        --build_deb         Build debian packages
        --branch            Branch from which submodules should be taken (default v3)
        --help)             Display this help
Example $0 --build_src_rpm --build_rpm
EOF

  exit 1
}

append_arg_to_args () {
  args="$args "`shell_quote_string "$1"`
}

parse_arguments() {
  WORKDIR=/tmp/pmm
  for arg do
    case "$arg" in
      --build_src_rpm) SRPM=1 ;;
      --build_rpm) RPM=1 ;;
      --build_source_deb=*) SDEB=1 ;;
      --build_deb) DEB=1 ;;
      --help) usage ;;
      *) append_arg_to_args "$arg" ;;
    esac
  done
}

check_workdir(){
  if [ "$WORKDIR" = "$CURDIR" ]; then
    echo >&2 "Current directory cannot be used for building!"
    exit 1
  fi
  
  if ! test -d "$WORKDIR"; then
    mkdir -p "$WORKDIR"
  fi
}

get_system(){
  if [ -f /etc/redhat-release ]; then
    RHEL=$(rpm --eval %rhel)
    ARCH=$(echo $(uname -m) | sed -e 's:i686:i386:g')
    OS_NAME="el$RHEL"
    OS="rpm"
else
    ARCH=$(uname -m)
    OS_NAME="$(lsb_release -sc)"
    OS="deb"
  fi
}

get_tar(){
  local TARBALL=$1
  local TARFILE=$(basename $(find $WORKDIR/$TARBALL -name "${PACKAGE_NAME}*.tar.gz" | sort | tail -n1) || :)
  if [ -n $TARFILE ]; then
    cp $WORKDIR/$TARBALL/$TARFILE $WORKDIR/$TARFILE
    return
  fi

  TARFILE=$(basename $(find $CURDIR/$TARBALL -name "${PACKAGE_NAME}*.tar.gz" | sort | tail -n1) || :)
  if [ -n $TARFILE ]; then
    cp $CURDIR/$TARBALL/$TARFILE $WORKDIR/$TARFILE
    return
  fi

  echo "Error: $TARBALL could not be found, exiting..."
  exit 1
}

get_deb_sources(){
    local param=$1
    echo $param
    local FILE=$(basename $(find $WORKDIR/source_deb -name "${PACKAGE_NAME}*.$param" | sort | tail -n1) || :)
    if [ -z $FILE ]; then
        FILE=$(basename $(find $CURDIR/source_deb -name "${PACKAGE_NAME}*.$param" | sort | tail -n1) || :)
        if [ -z $FILE ]; then
            echo "There is no sources for build"
            exit 1
        else
            cp $CURDIR/source_deb/$FILE $WORKDIR/
        fi
    else
        cp $WORKDIR/source_deb/$FILE $WORKDIR/
    fi
    return
}

build_srpm(){
  if [ "$OS" = "deb" ]; then
    echo "Error: it is not possible to build source RPM on a debian based OS, exiting..."
    exit 1
  fi
  cd $WORKDIR
  get_tar "tarball"

  rm -fr rpmbuild
  ls | grep -v tar.gz | xargs rm -rf

  TARFILE=$(basename $(find . -name "${PACKAGE_NAME}-*.tar.gz" | sort | tail -n1))
  NAME=$(echo ${TARFILE}| awk -F '-' '{print $1"-"$2}')
  VERSION_TMP=$(echo ${TARFILE}| awk -F '-' '{print $3}')
  VERSION=${VERSION_TMP%.tar.gz}

  mkdir -vp rpmbuild/{SOURCES,SPECS,BUILD,SRPMS,RPMS}

  tar -C ${WORKDIR} -zxpf ${TARFILE} ${NAME}-${VERSION}/rpm

  cd ${WORKDIR}/rpmbuild/SPECS
  cp ${WORKDIR}/${NAME}-${VERSION}/rpm/*.spec .
  cp ${WORKDIR}/${TARFILE} ../SOURCES/
  cd ${WORKDIR}
  rpmbuild -bs \
    --define "_topdir ${WORKDIR}/rpmbuild" \
    --define "version $VERSION" \
    --define "release $RPM_RELEASE" \
    --define "dist %{nil}" \
    "rpmbuild/SPECS/${PACKAGE_NAME}.spec"

  mkdir -p ${WORKDIR}/srpm
  mkdir -p ${CURDIR}/srpm
  cp rpmbuild/SRPMS/*.src.rpm ${CURDIR}/srpm
  cp rpmbuild/SRPMS/*.src.rpm ${WORKDIR}/srpm
}

build_rpm(){
  if [ "$OS" = "deb" ]; then
    echo "It is not possible to build rpm here"
    exit 1
  fi

  SRC_RPM=$(basename $(find $WORKDIR/srpm -name "${PACKAGE_NAME}*.src.rpm" | sort | tail -n1) || :)
  if [ -z $SRC_RPM ]; then
    SRC_RPM=$(basename $(find $CURDIR/srpm -name "${PACKAGE_NAME}*.src.rpm" | sort | tail -n1) || :)
    if [ -z $SRC_RPM ]; then
      echo "There is no src rpm for build"
      echo "You can create it using key --build_src_rpm=1"
      exit 1
    else
      cp $CURDIR/srpm/$SRC_RPM $WORKDIR
    fi
  else
    cp $WORKDIR/srpm/$SRC_RPM $WORKDIR
  fi

  cd $WORKDIR
  rm -fr rpmbuild
  mkdir -vp rpmbuild/{SOURCES,SPECS,BUILD,SRPMS,RPMS}
  cp $SRC_RPM rpmbuild/SRPMS/
  if find "${CURDIR}/rpm" -name "${PACKAGE_NAME}-${pmm_version}-*.rpm"; then
    # Remove older client rpm packages before building a new one
    rm -f "${CURDIR}/rpm/${PACKAGE_NAME}-${pmm_version}-*.rpm"
  fi
  rpmbuild --define "_topdir ${WORKDIR}/rpmbuild" \
            --define "version $pmm_version" \
            --define "release $RPM_RELEASE" \
            --define "dist .$OS_NAME" \
            --rebuild rpmbuild/SRPMS/$SRC_RPM

  return_code=$?
  if [ "$return_code" -ne 0 ]; then
    echo "Error: rpmbuild exited with a non-zero return code '$return_code'\n"
    exit $return_code
  fi

  mkdir -p ${CURDIR}/rpm
  cp rpmbuild/RPMS/*/*.rpm ${CURDIR}/rpm
}

build_source_deb(){
  if [ "$OS" = "rpm" ]; then
    echo "It is not possible to build source deb here"
    exit 1
  fi
  rm -rf pmm-client*
  get_tar "tarball"
  rm -f *.dsc *.orig.tar.gz *.debian.tar.gz *.changes

  TARFILE=$(basename $(find . -name "${PACKAGE_NAME}-*.tar.gz" | sort | tail -n1))
  NAME=$(echo ${TARFILE}| awk -F '-' '{print $1"-"$2}')
  VERSION_TMP=$(echo ${TARFILE}| awk -F '-' '{print $3}')
  VERSION=${VERSION_TMP%.tar.gz}

  rm -fr ${NAME}-${VERSION}

  NEWTAR=${NAME}_${VERSION}.orig.tar.gz
  mv ${TARFILE} ${NEWTAR}

  git clone $REPO ${NAME}-${VERSION}_all
  pushd ${NAME}-${VERSION}_all
    git fetch origin
    if [ ! -z ${BRANCH} ]; then
      git reset --hard
      git clean -xdf
      git checkout ${BRANCH}
    fi
    REVISION=$(git rev-parse --short HEAD)
    mkdir distro
  popd

  tar xzf ${NEWTAR}
  cd ${NAME}-${VERSION}
  mv bin/* ../${NAME}-${VERSION}_all/distro/
  mv example.prom ../${NAME}-${VERSION}_all/distro/
  mv queries-mysqld.yml ../${NAME}-${VERSION}_all/distro/
  mv queries-mysqld-group-replication.yml ../${NAME}-${VERSION}_all/distro/
  mv example-queries-postgres.yml ../${NAME}-${VERSION}_all/distro/
  mv queries-postgres-uptime.yml ../${NAME}-${VERSION}_all/distro/
  mv queries-mr.yaml ../${NAME}-${VERSION}_all/distro/
  mv queries-lr.yaml ../${NAME}-${VERSION}_all/distro/
  mv debian ../${NAME}-${VERSION}_all/
  mv config/pmm-agent.service ../${NAME}-${VERSION}_all/debian/${PACKAGE_NAME}.pmm-agent.service
  cd ../

  rm -rf ${NAME}-${VERSION}
  mv ${NAME}-${VERSION}_all ${NAME}-${VERSION}
  rm -rf *.tar.gz
  tar -zcvf ${NEWTAR} ${NAME}-${VERSION}
  cd ${NAME}-${VERSION}
  sed -i "s/%{version}/$VERSION-$DEB_RELEASE/" debian/control

  cd debian
  echo "${NAME} (${VERSION}) unstable; urgency=low" >> changelog
  echo "  * Initial Release." >> changelog
  echo " -- Percona LLC <no-reply@percona.com> $(date -R)" >> changelog

  cd ../

  dch -D unstable --force-distribution -v "${VERSION}-${DEB_RELEASE}" "Update to new upstream release PMM-client ${VERSION}-${DEB_RELEASE}"
  dpkg-buildpackage -S
  cd ../
  mkdir -p $WORKDIR/source_deb
  mkdir -p $CURDIR/source_deb
  cp *.diff.gz $WORKDIR/source_deb
  cp *_source.changes $WORKDIR/source_deb
  cp *.dsc $WORKDIR/source_deb
  cp *.orig.tar.gz $WORKDIR/source_deb
  cp *.diff.gz $CURDIR/source_deb
  cp *_source.changes $CURDIR/source_deb
  cp *.dsc $CURDIR/source_deb
  cp *.orig.tar.gz $CURDIR/source_deb
}

build_deb(){
  if [ "$OS" = "rpm" ]; then
    echo "It is not possible to build deb here"
    exit 1
  fi
  for file in 'dsc' 'orig.tar.gz' 'changes' 'diff.gz'; do
    get_deb_sources $file
  done

  cd $WORKDIR
  rm -fv *.deb
  export DEBIAN_VERSION="$(lsb_release -sc)"
  DSC=$(basename $(find . -name '*.dsc' | sort | tail -n 1))
  DIRNAME=$(echo ${DSC} | sed -e 's:_:-:g' | awk -F'-' '{print $1"-"$2}')
  VERSION=$(echo ${DSC} | sed -e 's:_:-:g' | awk -F'-' '{print $3}')
  ARCH=$(uname -m)
  echo "DEBIAN_VERSION=${DEBIAN_VERSION}" >> $VERSION_FILE
  echo "ARCH=${ARCH}" >> $VERSION_FILE
  #
  dpkg-source -x ${DSC}
  cd ${DIRNAME}-${VERSION}
  dch -b -m -D "$DEBIAN_VERSION" --force-distribution -v "${VERSION}-${DEB_RELEASE}.${DEBIAN_VERSION}" 'Update distribution'

  dpkg-buildpackage -rfakeroot -uc -us -b
  mkdir -p $CURDIR/deb
  mkdir -p $WORKDIR/deb
  cp $WORKDIR/*.deb $WORKDIR/deb
  cp $WORKDIR/*.deb $CURDIR/deb
}

#main

CURDIR=$(pwd)
PACKAGE_NAME=pmm-client
VERSION_FILE=$CURDIR/pmm-client.properties
args=
WORKDIR=
SRPM=0
SDEB=0
RPM=0
DEB=0
OS_NAME=
ARCH=
OS=
RPM_RELEASE=1
DEB_RELEASE=1
REVISION=0
BRANCH="v3"
REPO="https://github.com/Percona-Lab/pmm-submodules.git"

if [ -n "$pmm_release" ]; then
  RPM_RELEASE="$RPM_RELEASE.$pmm_release"
  DEB_RELEASE="$DEB_RELEASE.$pmm_release"
fi

parse_arguments "$@"
get_system

check_workdir
if [ "$SRPM" != 0 ]; then
  echo "Building srpm packages..."
  build_srpm
fi
if [ "$SDEB" != 0 ]; then
  echo "Building source deb packages..."
  build_source_deb
fi
if [ "$RPM" != 0 ]; then
  echo "Building rpm packages..."
  build_rpm
fi
if [ "$DEB" != 0 ]; then
  echo "Building deb packages..."
  build_deb
fi

# vim: expandtab shiftwidth=2 tabstop=2
