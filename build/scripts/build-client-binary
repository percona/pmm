#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

# Important: `bin_dir` and `binary_dir` are different directories. `bin_dir` defines the directory for binary files 
# inside the container, while `binary_dir` defines the directory for binary files outside the container.

extract_source_tarball() {
    if [ ! -d "${source_dir}" ]; then
        mkdir -p $(dirname ${source_dir})
        tar -C $(dirname ${source_dir}) -zxpf ${source_tarball}
    fi
}

gobuild_component() {
    local component=$1
    local parent_component=${2:-$component}
    local extract_path=${3:-"github.com/percona/$parent_component"}
    local component_path=$4
    local result_file=${5:-bin/$(basename ${component_path:-$extract_path})}
    local volume_mounts="-v ${tmp_dir}:/home/builder/tmp"
    local src_dir=/home/builder/tmp/source/pmm-client-${pmm_version}
    local bin_dir=/home/builder/tmp/binary/pmm-client-${pmm_version}
    local archive=$(ls ${source_dir} | grep -e "${parent_component}-\w*\.tar\.gz" | head -n1)
    local build_command

    if [ "$(uname -o)" = "Darwin" ]; then
      local GOARCH=$(uname -m)
    fi

    if [ -d "${root_dir}/go-build" ]; then
        volume_mounts+=" -v ${root_dir}/go-build:/home/builder/.cache/go-build"
    fi
    if [ -d "${root_dir}/go-path" ]; then
        volume_mounts+=" -v ${root_dir}/go-path:/home/builder/go/pkg/mod"
    fi

    if [ ${component} = 'azure_metrics_exporter' ]; then
        result_file=${result_file/_metrics/}
    fi

    if [ -x "${binary_dir}/${result_file}" ]; then
        echo Skipping the build...
        return
    fi
    if [[ ${component} =~ pmm-admin|pmm-agent ]]; then
        build_command="cd /tmp/go/src/${extract_path}/${component_path} && make release"
    elif [ ${component} = 'mongodb_exporter' ]; then
        build_command="cd /tmp/go/src/${extract_path} && make build"
    elif [[ ${component} =~ node_exporter|mysqld_exporter|proxysql_exporter|rds_exporter|postgres_exporter|azure_metrics_exporter ]]; then
        build_command="cd /tmp/go/src/${extract_path} && make release"
    elif [ ${component} = 'percona-toolkit' ]; then
        build_command="cd /tmp/go/src/${extract_path}/${component_path} && go build -o ${bin_dir}/${result_file} ."
    else
        build_command="cd /tmp/go/src/${extract_path}/${component_path} && go build -o ${bin_dir}/${result_file} ."
    fi

    docker run --rm \
      --platform=${platform}
      ${volume_mounts} \
      ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace
        export GOOS=${GOOS:-linux}
        export GOARCH=${GOARCH:-amd64}
        export CGO_ENABLED=0
        export GO111MODULE=auto
        export GOPATH=/tmp/go
        export GOMODCACHE=/home/builder/go/pkg/mod

        # Setting variable for 'make release'
        export PMM_RELEASE_VERSION=${full_pmm_version}
        export PMM_RELEASE_TIMESTAMP=$(date '+%s')
        export PMM_RELEASE_BRANCH=""
        sudo chown -R builder:builder /home/builder/tmp

        export PMM_RELEASE_PATH=${bin_dir}/bin
        if [ "${component}" = vmagent ]; then
            export PMM_RELEASE_FULLCOMMIT=${vmagent_commit_hash}
        else
            export PMM_RELEASE_FULLCOMMIT=$(git -C sources/${parent_component}/src/${extract_path} rev-parse HEAD)
        fi

        mkdir -p ${bin_dir}/bin
        mkdir -p /tmp/go/src/${extract_path}

        tar -C /tmp/go/src/${extract_path} --strip-components=1 -zxpf ${src_dir}/${archive}

        ${build_command}

        # sudo chown -R $(id -u):$(id -g) /home/builder/tmp
    "
}

copy_component() {
    local component=$1
    local component_path=$2
    local component_dest=${3:-$component_path}
    local component_dir=${tmp_dir}/source/${component}
    local archive=$(ls ${source_dir}/${component}-*.tar.gz | head -n1) # temporary hack for pmm repo

    if [ ! -d "${component_dir}" ]; then
        mkdir -p ${component_dir}
        tar -C ${component_dir} \
            --strip-components=1 \
            -zxpf "$archive"
    fi

    cp -r ${component_dir}/${component_path} ${binary_dir}/${component_dest}
}

main() {
    echo -----------------------------------------
    echo "Building PMM Client binary files..."
    echo -----------------------------------------

    extract_source_tarball

    gobuild_component "vmagent" "" "github.com/VictoriaMetrics/VictoriaMetrics" "app/vmagent"
    gobuild_component "node_exporter" "" "github.com/prometheus/node_exporter"
    gobuild_component "mysqld_exporter"
    gobuild_component "postgres_exporter" "" "" "cmd/postgres_exporter"
    gobuild_component "mongodb_exporter"
    gobuild_component "proxysql_exporter"
    gobuild_component "rds_exporter"
    gobuild_component "azure_metrics_exporter"
    gobuild_component "pmm-admin" "pmm" "" "admin"
    gobuild_component "pmm-agent" "pmm" "" "agent"

    echo ${pmm_version} > ${binary_dir}/VERSION

    copy_component "pmm" "build/packages/rpm/client" "rpm"
    copy_component "pmm" "build/packages/config" "config"
    copy_component "pmm" "build/packages/deb" "debian"
    copy_component "pmm" "build/scripts/install_tarball" "install_tarball"
    copy_component "node_exporter" "example.prom"
    copy_component "mysqld_exporter" "queries-mysqld.yml"
    copy_component "mysqld_exporter" "queries-mysqld-group-replication.yml"
    copy_component "postgres_exporter" "example-queries-postgres.yml"
    copy_component "postgres_exporter" "queries-postgres-uptime.yml"
    copy_component "postgres_exporter" "queries-mr.yaml"
    copy_component "postgres_exporter" "queries-lr.yaml"
    copy_component "percona-toolkit" "bin/pt-summary"
    copy_component "percona-toolkit" "bin/pt-mysql-summary"

    gobuild_component "percona-toolkit" "" "github.com/percona/percona-toolkit" "src/go/pt-mongodb-summary"
    gobuild_component "percona-toolkit" "" "github.com/percona/percona-toolkit" "src/go/pt-pg-summary"

    rm -rf ${binary_tarball}
    mkdir -p $(dirname ${binary_tarball}) || :
    
    # Removes pmm binary (aka CLI) in case this is not a PR build - such as RC/GA build
    if [[ "$(basename ${root_dir})" != pmm-submodules_PR-* ]]; then
        rm -f "${binary_dir}/bin/pmm"
    fi

    tar -C $(dirname ${binary_dir}) -zcpf ${binary_tarball} $(basename ${binary_dir})
}

main

# vim: expandtab shiftwidth=4 tabstop=4
