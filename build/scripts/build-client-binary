#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

extract_source_tarball() {
    if [ ! -d "${source_dir}" ]; then
        mkdir -p $(dirname ${source_dir})
        tar -C $(dirname ${source_dir}) -zxpf ${source_tarball}
    fi
}

gobuild_component() {
    local component=$1
    local parent_component=${2:-$component}
    local extract_path=${3:-"github.com/percona/$parent_component"}
    local component_path=$4
    local result_file=${5:-bin/$(basename ${component_path:-$extract_path})}

    if [ ${component} = 'azure_metrics_exporter' ]; then
        result_file=${result_file/_metrics/}
    fi

    if [ -x "${binary_dir}/${result_file}" ]; then
        echo skip build
        return
    fi
    if [ ${component} = 'pmm-admin' -o ${component} = 'pmm-agent' ]; then
        build_command="cd /tmp/go/src/${extract_path}/${component_path} && make release"
    elif [ ${component} = 'mongodb_exporter' ]; then
        build_command="cd /tmp/go/src/${extract_path} && make build"
    elif [ ${component} = 'node_exporter' ] || [ ${component} = 'mysqld_exporter' ] || \
         [ ${component} = 'proxysql_exporter' ] || [ ${component} = 'rds_exporter' ] || \
         [ ${component} = 'postgres_exporter' ] || [ ${component} = 'azure_metrics_exporter' ]; then
        build_command="cd /tmp/go/src/${extract_path} && make release"
    elif [ ${component} = 'percona-toolkit' ]; then
        build_command="cd /tmp/go/src/${extract_path}/${component_path} && go build -o \${binary_dir}/${result_file} ."
    else
        build_command="go build -o \${binary_dir}/${result_file} ./src/${extract_path}/${component_path}"
    fi
    docker run --rm -v ${tmp_dir}:/home/builder/tmp ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace
        export GOOS=${GOOS:-linux}
        export GOARCH=${GOARCH:-amd64}
        export CGO_ENABLED=0
        export GO111MODULE=auto

        # for 'make release'
        export PMM_RELEASE_VERSION=${full_pmm_version}
        export PMM_RELEASE_TIMESTAMP=$(date '+%s')
        export PMM_RELEASE_FULLCOMMIT=$(cd sources/${parent_component}/src/${extract_path} && git rev-parse HEAD)
        export COMPONENT_VERSION=$(cd sources/${parent_component}/src/${extract_path} && git describe --abbrev=0 --always)
        export COMPONENT_BRANCH=$(cd sources/${parent_component}/src/${extract_path} && git describe --always --contains --all)
        export PMM_RELEASE_BRANCH=""
        sudo chown -R builder:builder /home/builder/tmp

        source_dir=/home/builder/tmp/source/pmm-client-${pmm_version}
        binary_dir=/home/builder/tmp/binary/pmm-client-${pmm_version}
        export PMM_RELEASE_PATH=\${binary_dir}/bin

        mkdir -p \$binary_dir/bin

        mkdir -p /tmp/go/src/${extract_path}
        archive=$(ls ${source_dir} | grep -e "${parent_component}-\w*\.tar\.gz")
        tar -C /tmp/go/src/${extract_path} --strip-components=1 -zxpf \${source_dir}/\$archive
        pushd /tmp/go
            export GOPATH=\$(pwd -P)
            ${build_command}
        popd
        sudo chown -R $(id -u):$(id -g) /home/builder/tmp
    "
}

copy_component() {
    local component=$1
    local component_path=$2
    local component_dest=${3:-$component_path}
    local component_dir=${tmp_dir}/source/${component}
    local archive=$(ls ${source_dir}/${component}-*.tar.gz | head -n1) # temporary hack for pmm repo

    if [ ! -d "${component_dir}" ]; then
        mkdir -p ${component_dir}
        tar \
            -C ${component_dir} \
            --strip-components=1 \
            -zxpf "$archive"
    fi

    cp -r ${component_dir}/${component_path} ${binary_dir}/${component_dest}
}

main() {
    extract_source_tarball

    gobuild_component "vmagent" "" "github.com/VictoriaMetrics/VictoriaMetrics" "app/vmagent"
    gobuild_component "node_exporter" "" "github.com/prometheus/node_exporter"
    gobuild_component "mysqld_exporter"
    gobuild_component "postgres_exporter" "" "" "cmd/postgres_exporter"
    gobuild_component "mongodb_exporter"
    gobuild_component "proxysql_exporter"
    gobuild_component "rds_exporter"
    gobuild_component "azure_metrics_exporter"
    gobuild_component "clickhouse_exporter" "" "github.com/Percona-Lab/clickhouse_exporter"

    gobuild_component "pmm-admin" "pmm" "" "admin"
    gobuild_component "pmm-agent" "pmm" "" "agent"

    echo ${version} > ${binary_dir}/VERSION

    copy_component "pmm" "build/packages/rpm/client" "rpm"
    copy_component "pmm" "build/packages/config" "config"
    copy_component "pmm" "build/packages/deb" "debian"
    copy_component "pmm" "build/scripts/install_tarball" "install_tarball"
    copy_component "node_exporter" "example.prom"
    copy_component "mysqld_exporter" "queries-mysqld.yml"
    copy_component "mysqld_exporter" "queries-mysqld-group-replication.yml"
    copy_component "postgres_exporter" "example-queries-postgres.yml"
    copy_component "postgres_exporter" "queries-postgres-uptime.yml"
    copy_component "postgres_exporter" "queries.yaml"

    copy_component "percona-toolkit" "bin/pt-summary"
    copy_component "percona-toolkit" "bin/pt-mysql-summary"
    gobuild_component "percona-toolkit" "" "github.com/percona/percona-toolkit" "src/go/pt-mongodb-summary"
    gobuild_component "percona-toolkit" "" "github.com/percona/percona-toolkit" "src/go/pt-pg-summary"

    rm -rf ${binary_tarball}
    mkdir -p $(dirname ${binary_tarball}) || :
    
    # Removes pmm binary in case this is not a PR build - such as RC/GA build
    if [[ "$(basename ${root_dir})" != pmm-submodules_PR-* ]]; then
        rm -f "${binary_dir}/bin/pmm"
    fi

    tar -C $(dirname ${binary_dir}) -zcpf ${binary_tarball} $(basename ${binary_dir})
}

main
exit 0

# vim: expandtab shiftwidth=4 tabstop=4
