#!/bin/bash

. $(dirname $0)/vars

get_rpm_version() {
  local spec_name=$1

  local rpm_version=$(
    docker run --rm \
      --platform=${platform} \
      -v ${rpmbuild_dir}:/home/builder/rpm/SOURCES \
      ${rpmbuild_docker_image} sh -c "
        rpmspec -q --qf '%{version}-%{release}\n' SOURCES/${spec_name}.spec \
            | sed -re 's/\.[0-9]{10}\././' | head -1
      "
  )

  # return version
  echo "${rpm_version}"
}

get_shasum256() {
  local DIR=${1:-}
  if [ ! -d "$DIR" ]; then
    echo -e "Error: directory '$1' does not exist, exiting..."
    exit 1
  fi

  find "$DIR" -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | cut -d " " -f1 | cut -c 1-8
}

is_build_needed() {
  local spec_name=$1
  local rpm_version=$2
  local packages=

  # Structure of S3 build cache
  # s3://pmm-build-cache/PR-BUILDS/9 - el9
  # s3://pmm-build-cache/RELEASE/9 - el9

  mkdir -p ${rpms_dir}/${spec_name}-${rpm_version}/${arch}

  if command -v aws &> /dev/null && [ -n "${CI:-}" ]; then
    aws s3 sync \
        --region us-east-2 \
        --no-sign-request \
        --no-progress \
        s3://pmm-build-cache/${s3_cache_dir}/${rpmbuild_dist}/${spec_name}-${rpm_version} \
        ${rpms_dir}/${spec_name}-${rpm_version}/${arch}  || :
  fi

  packages=$(find ${rpms_dir}/${spec_name}-${rpm_version}/${arch} -type f -name "*-${rpm_version}.${arch}.rpm" | wc -l)

  # return result as true (0) or false (>0)
  [[ ${packages// /} == 0 ]]
}

# prepare_spec() patches the spec file to provide the actual commit hash and version, and 
# substitutes the source URL with the local file path. It also archives the source code 
# from the given submodule to the working directory, and saves it as a tarball for `rpmbuild`
# which it will use to build SRPMs and RPMs.
prepare_spec() {
  local spec_name=$1
  local repo_name=$2
  local spec_file=${rpmbuild_dir}/${spec_name}.spec
  local full_commit=

  mkdir -p ${rpms_dir} ${rpmbuild_dir} 2>/dev/null || :
  cp ${rpmspec_dir}/${spec_name}.spec ${spec_file}
  if [ ! -d "${root_dir}/sources/${repo_name}" ]; then
    # Exit if the repo is not located in pmm-submodules, e.g. VictoriaMetrics or Nomad,
    # as they do not have a spec file.
    return
  fi
  if [ ! -f "${spec_file}" ]; then
    echo "Error: the spec file '${spec_file}' could not be found."
    exit 1
  fi
  
  local git_dir=$(dirname $(find "${root_dir}/sources/${repo_name}" -name .git | head -1))
  if [ "${spec_name}" = "pmm-ui" ]; then
    full_commit=$(get_shasum256 "${git_dir}/ui")
  else
    full_commit=$(git -C "${git_dir}" rev-parse HEAD)
  fi

  local short_commit=${full_commit:0:7}
  local tar_archive=${rpmbuild_dir}/${repo_name}-${short_commit}.tar.gz

  if [ -z "$git_dir" ]; then
    echo "Fatal: unable to find the .git file/directory for ${spec_file}"
    exit 1
  fi

  sed -i -e "s/global commit.*/global commit ${full_commit}/" ${spec_file}

  if [ "${spec_name}" != "grafana" ]; then
    sed -i -e "s/Version:.*/Version: ${pmm_version}/" ${spec_file}
  fi

  if [ -z "${full_pmm_version}" ]; then
    echo "Fatal: 'full_pmm_version' is not specified, exiting..."
    exit 1
  fi
  sed -i -e "s/%define full_pmm_version.*/%define full_pmm_version ${full_pmm_version}/" ${spec_file}

  if [ "${spec_name}" != "victoriametrics" ]; then
    # Substitute the https source by pointing to the repo on the filesystem
    sed -i -e "s;\(Source0:[[:space:]]*\)http.*;\1${tar_archive};" ${spec_file}
  fi

  if [ -f "${tar_archive}" ]; then
    echo "Info: ${tar_archive} already exists, skip archiving..."
    return
  fi

  git -C "${git_dir}" archive \
      --format=tar.gz \
      --prefix="${repo_name}-${full_commit}/" \
      -o "${tar_archive}" \
      "$(git -C "${git_dir}" rev-parse HEAD)"
}

build() {
  local spec_name=$1
  local repo_name=${2:-$1}

  prepare_spec "${spec_name}" "${repo_name}"

  local rpm_version=$(get_rpm_version "${spec_name}")

  if ! is_build_needed "${spec_name}" "${rpm_version}"; then
      echo "Using cached rpm artefacts for ${spec_name}-${rpm_version}."
      return
  fi

  echo -------------------------------------------------------
  echo "Building PMM Server RPM for ${spec_name} component..."
  echo -------------------------------------------------------

  local volume_mounts="-v ${rpmbuild_dir}:/home/builder/rpm/SOURCES -v ${rpms_dir}:/home/builder/rpm/RPMS"
  volume_mounts+=" -v pmm-dnf:/var/cache/dnf"
  volume_mounts+=" -v pmm-yarn:/home/builder/.cache/yarn"
  volume_mounts+=" -v pmm-gomod:/home/builder/go/pkg/mod"
  volume_mounts+=" -v pmm-gobuild:/home/builder/.cache/go-build"

  echo "Start building Server RPMs..."
  echo "repo_name: ${repo_name}"
  echo "spec_name: ${spec_name}"
  echo "rpm_verison: ${rpm_version}"

  docker run --rm --platform=${platform} ${volume_mounts} ${rpmbuild_docker_image} sh -c "
    set -o errexit
    set -o xtrace

    sudo chown -R builder:builder /home/builder/rpm/RPMS /home/builder/rpm/SOURCES

    rm -rf /home/builder/rpm/RPMS/${spec_name}-*

    printf '[local]\nname=local\nbaseurl=file:///home/builder/rpm/RPMS\ngpgcheck=0\nenabled=1\n' \
      | sudo tee /etc/yum.repos.d/local.repo

    until /usr/bin/createrepo_c --update /home/builder/rpm/RPMS; do
      echo Waiting for createrepo_c to finish...
      sleep 1
    done

    # Only grafana spec needs to install build dependencies
    if [[ ${spec_name} =~ ^grafana$ ]]; then
      sudo yum-builddep -y SOURCES/${spec_name}.spec
    fi

    spectool -C SOURCES -g SOURCES/${spec_name}.spec
    rpmbuild  --define '_rpmdir %{_topdir}/RPMS/${spec_name}-${rpm_version}' \
              --define 'dist .${rpmbuild_dist}' \
              --define 'debug_package %{nil}' \
              -bb SOURCES/${spec_name}.spec \
              --rmspec

    rm -f SOURCES/${spec_name}.spec*
  "

  if command -v aws &> /dev/null && [ -n "${CI:-}" ]; then
    aws s3 sync \
        --region us-east-2 \
        --no-progress \
        ${rpms_dir}/${spec_name}-${rpm_version}/${arch} \
        s3://pmm-build-cache/${s3_cache_dir}/${rpmbuild_dist}/${spec_name}-${rpm_version} \
        || :
  fi

  echo "Finished building Server RPMs, spec_name: ${spec_name}.spec, repo_name: ${repo_name}"
  echo
}

build "$@"

# vim: expandtab shiftwidth=2 tabstop=2
