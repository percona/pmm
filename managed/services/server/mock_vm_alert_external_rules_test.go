// Code generated by mockery. DO NOT EDIT.

package server

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockVmAlertExternalRules is an autogenerated mock type for the vmAlertExternalRules type
type mockVmAlertExternalRules struct {
	mock.Mock
}

// ReadRules provides a mock function with given fields:
func (_m *mockVmAlertExternalRules) ReadRules() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadRules")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRulesFile provides a mock function with given fields:
func (_m *mockVmAlertExternalRules) RemoveRulesFile() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveRulesFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRules provides a mock function with given fields: ctx, rules
func (_m *mockVmAlertExternalRules) ValidateRules(ctx context.Context, rules string) error {
	ret := _m.Called(ctx, rules)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, rules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRules provides a mock function with given fields: rules
func (_m *mockVmAlertExternalRules) WriteRules(rules string) error {
	ret := _m.Called(rules)

	if len(ret) == 0 {
		panic("no return value specified for WriteRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(rules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockVmAlertExternalRules creates a new instance of mockVmAlertExternalRules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockVmAlertExternalRules(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockVmAlertExternalRules {
	mock := &mockVmAlertExternalRules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
