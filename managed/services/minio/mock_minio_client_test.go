// Code generated by mockery v1.0.0. DO NOT EDIT.

package minio

import (
	context "context"

	"github.com/minio/minio-go/v7"
	mock "github.com/stretchr/testify/mock"
)

// mockMinioClient is an autogenerated mock type for the minioClient type
type mockMinioClient struct {
	mock.Mock
}

// ListObjects provides a mock function with given fields: ctx, bucketName, opts
func (_m *mockMinioClient) ListObjects(ctx context.Context, bucketName string, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	ret := _m.Called(ctx, bucketName, opts)

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.ListObjectsOptions) <-chan minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// StatObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *mockMinioClient) StatObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
