// Code generated by mockery. DO NOT EDIT.

package alerting

import (
	context "context"

	gapi "github.com/grafana/grafana-api-golang-client"
	mock "github.com/stretchr/testify/mock"

	services "github.com/percona/pmm/managed/services"
)

// mockGrafanaClient is an autogenerated mock type for the grafanaClient type
type mockGrafanaClient struct {
	mock.Mock
}

// CreateAlertRule provides a mock function with given fields: ctx, folderUID, groupName, interval, rule
func (_m *mockGrafanaClient) CreateAlertRule(ctx context.Context, folderUID string, groupName string, interval string, rule *services.Rule) error {
	ret := _m.Called(ctx, folderUID, groupName, interval, rule)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *services.Rule) error); ok {
		r0 = rf(ctx, folderUID, groupName, interval, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDatasourceUIDByID provides a mock function with given fields: ctx, id
func (_m *mockGrafanaClient) GetDatasourceUIDByID(ctx context.Context, id int64) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasourceUIDByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolderByUID provides a mock function with given fields: ctx, uid
func (_m *mockGrafanaClient) GetFolderByUID(ctx context.Context, uid string) (*gapi.Folder, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetFolderByUID")
	}

	var r0 *gapi.Folder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gapi.Folder, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gapi.Folder); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gapi.Folder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockGrafanaClient creates a new instance of mockGrafanaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGrafanaClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockGrafanaClient {
	mock := &mockGrafanaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
