// Code generated by mockery. DO NOT EDIT.

package management

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockAuthProvider is an autogenerated mock type for the authProvider type
type mockAuthProvider struct {
	mock.Mock
}

// CreateServiceAccount provides a mock function with given fields: ctx, noneName, reregister
func (_m *mockAuthProvider) CreateServiceAccount(ctx context.Context, noneName string, reregister bool) (int, string, error) {
	ret := _m.Called(ctx, noneName, reregister)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (int, string, error)); ok {
		return rf(ctx, noneName, reregister)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) int); ok {
		r0 = rf(ctx, noneName, reregister)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) string); ok {
		r1 = rf(ctx, noneName, reregister)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, noneName, reregister)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteServiceAccount provides a mock function with given fields: ctx, noneName, force
func (_m *mockAuthProvider) DeleteServiceAccount(ctx context.Context, noneName string, force bool) (string, error) {
	ret := _m.Called(ctx, noneName, force)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (string, error)); ok {
		return rf(ctx, noneName, force)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, noneName, force)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, noneName, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockAuthProvider creates a new instance of mockAuthProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthProvider(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockAuthProvider {
	mock := &mockAuthProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
