// Code generated by mockery. DO NOT EDIT.

package management

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockGrafanaClient is an autogenerated mock type for the grafanaClient type
type mockGrafanaClient struct {
	mock.Mock
}

// CreateAnnotation provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *mockGrafanaClient) CreateAnnotation(_a0 context.Context, _a1 []string, _a2 time.Time, _a3 string, _a4 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnnotation")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Time, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Time, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, time.Time, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockGrafanaClient creates a new instance of mockGrafanaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGrafanaClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockGrafanaClient {
	mock := &mockGrafanaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
