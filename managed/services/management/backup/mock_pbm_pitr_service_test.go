// Code generated by mockery v1.0.0. DO NOT EDIT.

package backup

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	models "github.com/percona/pmm/managed/models"
	"github.com/percona/pmm/managed/services/backup"
)

// mockPbmPITRService is an autogenerated mock type for the pbmPITRService type
type mockPbmPITRService struct {
	mock.Mock
}

// DeletePITRChunks provides a mock function with given fields: ctx, location, artifact, until
func (_m *mockPbmPITRService) DeletePITRChunks(ctx context.Context, location *models.BackupLocation, artifact *models.Artifact, until *time.Time) error {
	ret := _m.Called(ctx, location, artifact, until)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.BackupLocation, *models.Artifact, *time.Time) error); ok {
		r0 = rf(ctx, location, artifact, until)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPITRTimeranges provides a mock function with given fields: ctx, location, artifact
func (_m *mockPbmPITRService) ListPITRTimeranges(ctx context.Context, location *models.BackupLocation, artifact *models.Artifact) ([]backup.Timeline, error) {
	ret := _m.Called(ctx, location, artifact)

	var r0 []backup.Timeline
	if rf, ok := ret.Get(0).(func(context.Context, *models.BackupLocation, *models.Artifact) []backup.Timeline); ok {
		r0 = rf(ctx, location, artifact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]backup.Timeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.BackupLocation, *models.Artifact) error); ok {
		r1 = rf(ctx, location, artifact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
