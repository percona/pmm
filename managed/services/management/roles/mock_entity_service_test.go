// Code generated by mockery v1.0.0. DO NOT EDIT.

package roles

import (
	models "github.com/percona/pmm/managed/models"
	mock "github.com/stretchr/testify/mock"

	reform "gopkg.in/reform.v1"
)

// MockEntityService is an autogenerated mock type for the EntityService type
type MockEntityService struct {
	mock.Mock
}

// AssignRoles provides a mock function with given fields: tx, entityID, roleIDs
func (_m *MockEntityService) AssignRoles(tx *reform.TX, entityID int, roleIDs []int) error {
	ret := _m.Called(tx, entityID, roleIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*reform.TX, int, []int) error); ok {
		r0 = rf(tx, entityID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeforeDeleteRole provides a mock function with given fields: tx, roleID, newRoleID
func (_m *MockEntityService) BeforeDeleteRole(tx *reform.TX, roleID int, newRoleID int) error {
	ret := _m.Called(tx, roleID, newRoleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*reform.TX, int, int) error); ok {
		r0 = rf(tx, roleID, newRoleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntityRoles provides a mock function with given fields: q, entityID
func (_m *MockEntityService) GetEntityRoles(q *reform.Querier, entityID int) ([]models.Role, error) {
	ret := _m.Called(q, entityID)

	var r0 []models.Role
	if rf, ok := ret.Get(0).(func(*reform.Querier, int) []models.Role); ok {
		r0 = rf(q, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*reform.Querier, int) error); ok {
		r1 = rf(q, entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveEntityRoles provides a mock function with given fields: tx, entityID
func (_m *MockEntityService) RemoveEntityRoles(tx *reform.TX, entityID int) error {
	ret := _m.Called(tx, entityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*reform.TX, int) error); ok {
		r0 = rf(tx, entityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
