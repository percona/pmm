// Code generated by mockery. DO NOT EDIT.

package telemetry

import (
	context "context"

	pmmv1 "github.com/percona-platform/saas/gen/telemetry/events/pmm"
	mock "github.com/stretchr/testify/mock"
)

// mockDataSource is an autogenerated mock type for the DataSource type
type mockDataSource struct {
	mock.Mock
}

// Dispose provides a mock function with given fields: ctx
func (_m *mockDataSource) Dispose(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enabled provides a mock function with given fields:
func (_m *mockDataSource) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FetchMetrics provides a mock function with given fields: ctx, config
func (_m *mockDataSource) FetchMetrics(ctx context.Context, config Config) ([]*pmmv1.ServerMetric_Metric, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for FetchMetrics")
	}

	var r0 []*pmmv1.ServerMetric_Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Config) ([]*pmmv1.ServerMetric_Metric, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Config) []*pmmv1.ServerMetric_Metric); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pmmv1.ServerMetric_Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Config) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx
func (_m *mockDataSource) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockDataSource creates a new instance of mockDataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataSource(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockDataSource {
	mock := &mockDataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
