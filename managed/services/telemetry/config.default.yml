telemetry:
  # PMM - generic information
  - id: PMMServerIAEnabled
    source: PMMDB_SELECT
    query: (CASE WHEN alerting->'disabled' = 'false' THEN '1' ELSE '0' END) AS ia_enabled FROM settings s, jsonb_extract_path(s.settings, 'alerting') AS alerting
    summary: "PMM Server Integration Alerting feature enabled/disabled"
    data:
      - metric_name: "pmm_server_ia_enabled"
        column: "ia_enabled"

  - id: PMMServerAlertsFire
    source: VM
    query: max_over_time(grafana_alerting_alerts{state="alerting"}[24h])
    summary: "Maximum number of active concurrent alerts in the last 24 hours"
    data:
      - metric_name: "pmm_server_alerts_firing_max_24h"
        value: 1

  - id: PMMServerAlertRulesNumber
    source: VM
    query: grafana_alerting_schedule_alert_rules
    summary: "Number of Alerts configured"
    data:
      - metric_name: "pmm_server_alert_rules_number"
        value: 1

  - id: PMMServerSTTEnabled
    source: PMMDB_SELECT
    query: (CASE WHEN stt->'stt_disabled' = 'false' THEN '1' ELSE '0' END) AS stt_enabled FROM settings s, jsonb_extract_path(s.settings, 'sass') AS stt
    summary: "PMM Server Security Thread Tool feature enabled/disabled"
    data:
      - metric_name: "pmm_server_stt_enabled"
        column: "stt_enabled"

  - id: PMMServerAdvisorsDisabled
    source: PMMDB_SELECT
    query: (CASE WHEN stt->'stt_disabled' = 'true' THEN '1' ELSE '0' END) AS advisors_disabled FROM settings s, jsonb_extract_path(s.settings, 'sass') AS stt
    summary: "PMM Advisors Disabled"
    data:
      - metric_name: "pmm_server_advisors_disabled"
        column: "advisors_disabled"

  - id: PMMServerBackupManagementEnabled
    source: PMMDB_SELECT
    query: (CASE WHEN backup_management->'disabled' = 'false' THEN '1' ELSE '0' END) AS backup_management_enabled FROM settings s, jsonb_extract_path(s.settings, 'backup_management') AS backup_management
    summary: "PMM Server Backup Management feature enabled"
    data:
      - metric_name: "pmm_server_backup_management_enabled"
        column: "backup_management_enabled"

  - id: PMMServerAccessControlEnabled
    source: PMMDB_SELECT
    query: (CASE WHEN access_control->'enabled' = 'true' THEN '1' ELSE '0' END) AS access_control_enabled FROM settings s, jsonb_extract_path(s.settings, 'access_control') AS access_control
    summary: "PMM Server Access Control feature enabled/disabled"
    data:
      - metric_name: "pmm_server_access_control_enabled"
        column: "access_control_enabled"

  - id: PMMServerUpdatesDisabled
    source: PMMDB_SELECT
    query: (CASE WHEN updates->'disabled' = 'true' THEN '1' ELSE '0' END) AS updates_disabled FROM settings s, jsonb_extract_path(s.settings, 'updates') AS updates
    summary: "PMM Server Check Updates feature disabled"
    data:
      - metric_name: "pmm_server_updates_disabled"
        column: "updates_disabled"

  # Services Information
  - id: MySQLVersion
    source: VM
    query: mysql_version_info{service_type="mysql"}
    summary: "Detailed information about version and comment of monitored MySQL services"
    data:
      - metric_name: "mysql_version"
        label: "version"
      - metric_name: "mysql_version_comment"
        label: "version_comment"

  - id: MySQLPlugins
    source: VM
    query: mysql_plugin
    transform:
      type: JSON
      metric: mysql_plugins
    summary: "Plugins on the MySQL instance"
    data:
      - metric_name: "1"
        label: "library"
      - metric_name: "2"
        label: "license"
      - metric_name: "3"
        label: "name"
      - metric_name: "4"
        label: "status"
      - metric_name: "5"
        label: "type"

  - id: MySQLEngineRocksDBCount
    source: VM
    query: count({__name__="mysql_global_variables_rocksdb_block_cache_size"})
    summary: "Number of monitored MySQL services with RocksDB Engine"
    data:
      - metric_name: "mysql_rocksdb_count"
        value: 1

  - id: MySQLInnodbBufferPoolSize
    source: VM
    query: mysql_global_variables_innodb_buffer_pool_size
    summary: "InnoDB buffer pool size"
    data:
      - metric_name: "mysql_global_variables_innodb_buffer_pool_size"
        value: 1

  - id: MySQLAvgThreadsRunning
    source: VM
    query: avg by (service) (avg_over_time(mysql_global_status_threads_running[1d]))
    summary: "Average number of running threads for last day"
    data:
      - metric_name: "mysql_global_status_threads_running"
        value: 1

  - id: MySQLAvgQueriesRunning
    source: VM
    query: avg by (service_name) (rate(mysql_global_status_commands_total{command=~"select|delete|update|insert"}[1d]))
    summary: "Average number of running queries"
    data:
      - metric_name: "mysql_global_status_queries_running"
        value: 1

  - id: MySQLInnodbSpaceUsed
    source: VM
    query: sum(count(mysql_info_schema_table_version{engine="InnoDB"}) by (schema,table) * sum (mysql_info_schema_table_size{component=~"data_length|index_length"}) by (schema,table))
    summary: "Data usage of MySQL"
    data:
      - metric_name: "mysql_innodb_space_used"
        value: 1

  - id: MongoDBVersion
    source: VM
    query: mongodb_version_info{service_type="mongodb"}
    summary: "Monitored MongoDB services version"
    data:
      - metric_name: "mongodb_version"
        label: "mongodb"

  - id: MongoDBExporterMetricsGeneralStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="general"}
    summary: "Runtime for general collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_general"
        value: 1

  - id: MongoDBExporterMetricsDiagnosticDataStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="diagnostic_data"}
    summary: "Runtime for diagnostic data collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_diagnostic_data"
        value: 1

  - id: MongoDBExporterMetricsCollectionStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="collstats"}
    summary: "Runtime for collection statistics collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_collstats"
        value: 1

  - id: MongoDBExporterMetricsDBStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="dbstats"}
    summary: "Runtime for database statistics collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_dbstats"
        value: 1

  - id: MongoDBExporterMetricsIndexStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="indexstats"}
    summary: "Runtime for index statistics collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_indexstats"
        value: 1

  - id: MongoDBExporterMetricsTopStats
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="top"}
    summary: "Runtime for top metrics collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_top"
        value: 1

  - id: MongoDBExporterMetricsReplicationStatus
    source: VM
    query: collector_scrape_time_ms{exporter="mongodb",collector="replset_status"}
    summary: "Runtime for replication status collector of MongoDB exporter"
    data:
      - metric_name: "mongodb_collector_scrape_time_replset_status"
        value: 1

  - id: MongoDBEdition
    source: VM
    query: mongodb_version_info{service_type="mongodb"}
    summary: "Monitored MongoDB edition"
    data:
      - metric_name: "mongodb_edition"
        label: "edition"
      - metric_name: "mongodb_vendor"
        label: "vendor"

  - id: MongoDBMembersCountByReplicaSet
    source: VM
    # use group operator to remove duplicated labels, because several mongo instances
    # could be connected to PMM and send own metric `mongodb_members_id` which will be duplicated
    query: count(group(mongodb_members_id) by (member_idx, rs_nm)) by (rs_nm)
    summary: "Returns number of members in MongoDB replica set"
    data:
      - metric_name: "mongodb_replicaset_members_count"
        value: 1

  - id: MongoDBArbitersCountByReplicaSet
    source: VM
    query: count(group(mongodb_members_id{member_state="ARBITER"}) by (member_idx, rs_nm)) by (rs_nm)
    summary: "Returns number of arbiters in MongoDB replica set"
    data:
      - metric_name: "mongodb_replicaset_arbiters_count"
        value: 1

  - id: MongoDBShardsCount
    source: VM
    # group by mongo instances by cluster label, return mongodb_mongos_sharding_shards_total value if it's sharded and 0 if it's not
    query: (group(mongodb_up{cluster!=""}) by (cluster)) * on(cluster) group_left(cluster) mongodb_mongos_sharding_shards_total OR on (cluster) (group(mongodb_up{cluster!=""}) by (cluster)) - 1
    summary: "Returns number of shards in MongoDB cluster. If cluster is not sharded it returns 0"
    data:
      - metric_name: "mongodb_shards_count_in_cluster"
        value: 1

  - id: MongoDBEngineType # check for inmemory engine type
    source: VM
    query: mongodb_mongod_storage_engine
    summary: "Returns used engine type for MongoDB"
    data:
      - metric_name: "mongodb_storage_engine_type"
        label: engine

  - id: MongoDBIsEncryptionAtRestEnabled
    source: VM
    query: (group(mongodb_up) by (service_name)) * on(service_name) group_left(service_name) mongodb_security_encryption_enabled OR (group(mongodb_up) by (service_name)) - 1
    summary: "Returns 1 if encryption at rest is enabled on the mongo instance, otherwise returns 0"
    data:
      - metric_name: "mongodb_encryption_at_rest_enabled"
        value: 1

  - id: MongoDBEncryptionType
    source: VM
    query: mongodb_security_encryption_enabled
    summary: "Returns the type of how encryption at rest was enabled (using local file, kmip or vault)"
    data:
      - metric_name: "mongodb_encryption_at_rest_type"
        label: type

  - id: PMMPostgresDBVersion
    source: VM
    query: pg_static{service_name="pmm-server-postgresql", service_type="postgresql"}
    summary: "PostgreSQL version inside PMM server"
    data:
      - metric_name: "pmm_server_postgresql_version"
        label: "short_version"

  - id: PostgresDBVersion
    source: VM
    query: pg_static{service_name!="pmm-server-postgresql", service_type="postgresql"}
    summary: "Monitored PostgreSQL services version"
    data:
      - metric_name: "postgresql_version"
        label: "short_version"

  - id: PostgresDBInstalledExtensions
    source: VM
    query: pg_extensions{service_name!="pmm-server-postgresql"}
    transform:
      type: JSON
      metric: postgresql_installed_extensions
    summary: "Installed extensions on the PostgresSQL instance"
    data:
      - metric_name: "1"
        label: "name"
      - metric_name: "2"
        label: "version"
      - metric_name: "3"
        label: "relocatable"
      - metric_name: "4"
        label: "service_id"

  - id: PostgresDBAvailableExtensions
    source: VM
    query: pg_available_extensions{service_name!="pmm-server-postgresql"}
    transform:
      type: JSON
      metric: postgresql_available_extensions
    summary: "Available extensions on the PostgresSQL instance"
    data:
      - metric_name: "1"
        label: "name"
      - metric_name: "2"
        label: "default_version"
      - metric_name: "3"
        label: "installed_version"
      - metric_name: "4"
        label: "service_id"

  - id: HAProxyVersion
    source: VM
    query: haproxy_process_build_info
    summary: "Monitored HAProxy services version"
    data:
      - metric_name: "haproxy_version"
        label: "version"

  - id: ProxysqlVersion
    source: VM
    query: proxysql_info
    summary: "Monitored ProxySQL services version"
    data:
      - metric_name: "proxysql_version"
        label: "version"

  #
  - id: GrafanaStatTotalUsers
    source: VM
    query: grafana_stat_total_users
    summary: "Total Grafana users"
    data:
      - metric_name: "pmm_server_grafana_stat_total_users"
        value: 1

  # PMM - Usage
  - id: GrafanaStatMonthlyActiveUsers
    source: VM
    query: grafana_stat_active_users
    summary: "Monthly active users"
    data:
      - metric_name: "pmm_server_grafana_stat_active_users"
        value: 1

  - id: GrafanaStatDailyActiveUsers
    source: GRAFANADB_SELECT
    query: count(*) AS count FROM public.user WHERE last_seen_at > now() - interval '1 day'
    summary: "Daily active users"
    data:
      - metric_name: "pmm_server_grafana_stat_daily_active_users"
        column: "count"

  - id: GrafanaStatTotalOrgs
    source: VM
    query: grafana_stat_total_orgs
    summary: "Total Grafana organisations"
    data:
      - metric_name: "pmm_server_grafana_stat_total_orgs"
        value: 1

  - id: GrafanaStatTotalsAnnotations
    source: VM
    query: grafana_stat_totals_annotations
    summary: "Grafana annotation count"
    data:
      - metric_name: "pmm_server_grafana_stat_totals_annotations"
        value: 1

  - id: PMMDataRetentionPeriod
    source: PMMDB_SELECT
    query: data_retention FROM settings s, jsonb_extract_path(s.settings, 'data_retention') AS data_retention
    summary: "Data retention period"
    data:
      - metric_name: "pmm_server_data_retention_period"
        column: "data_retention"

  # PMM - Usage
  - id: PMMUsageNodesCount
    source: PMMDB_SELECT
    query: count(*) AS nodes_count FROM nodes where node_name != 'pmm-server'
    summary: "Monitored nodes count"
    data:
      - metric_name: "pmm_server_usage_nodes_count"
        column: "nodes_count"

  - id: PMMUsageServicesCount
    source: PMMDB_SELECT
    query: count(*) AS services_count FROM services where node_id != 'pmm-server'
    summary: "Monitored services count"
    data:
      - metric_name: "pmm_server_usage_services_count"
        column: "services_count"

  - id: PMMUsageEnvironmentsCount
    source: PMMDB_SELECT
    query: count(distinct environment) as environments_count from services where environment != ''
    summary: "Monitored environments count"
    data:
      - metric_name: "pmm_server_usage_environments_count"
        column: "environments_count"

  - id: PMMUsagePerconaRolesCount
    source: PMMDB_SELECT
    query: count(*) as roles_count from roles
    summary: "Percona roles count"
    data:
      - metric_name: "pmm_server_percona_roles_count"
        column: "roles_count"

  - id: PMMUsageClustersCount
    source: PMMDB_SELECT
    query: count(distinct cluster) as clusters_count from services where cluster != '';
    summary: "Monitored clusters count"
    data:
      - metric_name: "pmm_server_usage_clusters_count"
        column: "clusters_count"

  # Nodes information - v2
  - id: NodesInfoPMMAgentV2
    source: PMMDB_SELECT
    query: a.version, a.agent_type, COALESCE(a.runs_on_node_id, aa.runs_on_node_id) AS runs_on_node_id FROM agents a LEFT JOIN agents aa ON a.pmm_agent_id = aa.agent_id
    summary: "Agents version"
    transform:
      type: JSON
      metric: pmm_server_agents_version
    data:
      - metric_name: "1"
        column: "agent_type"
      - metric_name: "2"
        column: "runs_on_node_id"
      - metric_name: "3"
        column: "version"

  # Nodes information
  - id: NodesInfoPMMAgentEmbedded
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'pmm-agent' and runs_on_node_id = 'pmm-server'
    summary: "Agents version PMM_AGENT running on PMM server"
    data:
      - metric_name: "pmm_server_pmm_agent_version"
        column: "version"

  - id: NodesInfoPMMAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'pmm-agent' and runs_on_node_id != 'pmm-server'
    summary: "Agents version PMM_AGENT"
    data:
      - metric_name: "pmm_client_pmm_agent_version"
        column: "version"

  - id: NodesInfoVMAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'vmagent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version VM_AGENT"
    data:
      - metric_name: "pmm_client_vm_agent_version"
        column: "version"

  - id: NodesInfoNodeExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'node_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version NODE_EXPORTER"
    data:
      - metric_name: "pmm_client_node_exporter_version"
        column: "version"

  - id: NodesInfoMysqldExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'mysqld_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version MYSQLD_EXPORTER"
    data:
      - metric_name: "pmm_client_mysqld_exporter_version"
        column: "version"

  - id: NodesInfoMongodbExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'mongodb_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version MONGODB_EXPORTER"
    data:
      - metric_name: "pmm_client_mongodb_exporter_version"
        column: "version"

  - id: NodesInfoPostgresExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'postgres_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version POSTGRES_EXPORTER"
    data:
      - metric_name: "pmm_client_postgres_exporter_version"
        column: "version"

  - id: NodesInfoProxysqlExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'proxysql_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version PROXYSQL_EXPORTER"
    data:
      - metric_name: "pmm_client_proxysql_exporter_version"
        column: "version"

  - id: NodesInfoQANMysqlPerfschemaAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'qan-mysql-perfschema-agent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version QAN_MYSQL_PERFSCHEMA_AGENT"
    data:
      - metric_name: "pmm_client_qan_mysql_perfschema_agent_version"
        column: "version"

  - id: NodesInfoQANMysqlSlowlogAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'qan-mysql-slowlog-agent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version QAN_MYSQL_SLOWLOG_AGENT"
    data:
      - metric_name: "pmm_client_qan_mysql_slowlog_agent_version"
        column: "version"

  - id: NodesInfoQANMongodbProfilerAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'qan-mongodb-profiler-agent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version QAN_MONGODB_PROFILER_AGENT"
    data:
      - metric_name: "pmm_client_qan_mongodb_profiler_agent_version"
        column: "version"

  - id: NodesInfoQANPostgresqlPgstatementsAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'qan-postgresql-pgstatements-agent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version QAN_POSTGRESQL_PGSTATEMENTS_AGENT"
    data:
      - metric_name: "pmm_client_qan_postgresql_pgstatements_agent_version"
        column: "version"

  - id: NodesInfoQANPostgresqlPgstatmonitorAgent
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'qan-postgresql-pgstatmonitor-agent' and pmm_agent_id != 'pmm-server'
    summary: "Agents version QAN_POSTGRESQL_PGSTATMONITOR_AGENT"
    data:
      - metric_name: "pmm_client_qan_postgresql_pgstatmonitor_agent_version"
        column: "version"

  - id: NodesInfoRDSExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'rds_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version RDS_EXPORTER"
    data:
      - metric_name: "pmm_client_rds_exporter_version"
        column: "version"

  - id: NodesInfoExternalExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'external-exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version EXTERNAL_EXPORTER"
    data:
      - metric_name: "pmm_client_external_exporter_version"
        column: "version"

  - id: NodesInfoAzureDatabaseExporter
    source: PMMDB_SELECT
    query: version FROM agents WHERE agent_type = 'azure_database_exporter' and pmm_agent_id != 'pmm-server'
    summary: "Agents version AZURE_DATABASE_EXPORTER"
    data:
      - metric_name: "pmm_client_azure_database_exporter_version"
        column: "version"

  - id: PMMNodesInfoNodeType
    source: PMMDB_SELECT
    query: node_type FROM nodes WHERE node_name = 'pmm-server'
    summary: "PMM Node type"
    data:
      - metric_name: "pmm_server_node_type"
        column: "node_type"

  - id: NodesInfoNodeType
    source: PMMDB_SELECT
    query: node_type FROM nodes WHERE node_name != 'pmm-server'
    summary: "Node type"
    data:
      - metric_name: "pmm_client_node_type"
        column: "node_type"

  - id: PMMNodeCPUUsage
    source: VM
    query: clamp_max(sum by () ((avg by (mode) (  (clamp_max(rate(node_cpu_seconds_total{node_name=~"pmm-server",mode!="idle",mode!="iowait"}[5m]),1)) or  (clamp_max(irate(node_cpu_seconds_total{node_name=~"pmm-server",mode!="idle",mode!="iowait"}[5m]),1)) )) *100 or  sum by () (avg_over_time(node_cpu_average{node_name=~"pmm-server",mode!="total",mode!="idle"}[5m]) or   avg_over_time(node_cpu_average{node_name=~"pmm-server",mode!="total",mode!="idle"}[5m])) unless   (avg_over_time(node_cpu_average{node_name=~"pmm-server",mode="total",job="rds-basic"}[5m]) or  avg_over_time(node_cpu_average{node_name=~"pmm-server",mode="total",job="rds-basic"}[5m]))   ),100)
    summary: "PMM node CPU Usage"
    data:
      - metric_name: "pmm_server_node_cpu_usage"
        value: 1

  - id: PMMNodeCPUArchitecture
    source: VM
    query: node_uname_info
    summary: "PMM node CPU Architecture"
    data:
      - metric_name: "pmm_server_node_cpu_architecture"
        label: "machine"

  - id: PMMNodeCPUCoreCount
    source: VM
    query: sum by (value) (count by(cpu) (node_cpu_seconds_total{mode="idle",node_id="pmm-server"}))
    summary: "PMM node CPU core count"
    data:
      - metric_name: "pmm_server_node_cpu_core_count"
        value: 1

  - id: PMMNodeMemorySize
    source: VM
    query: avg by (node_name) (avg_over_time(node_memory_MemTotal_bytes{node_name=~"pmm-server"}[5m]) or avg_over_time(node_memory_MemTotal_bytes{node_name=~"pmm-server"}[5m]))
    summary: "PMM node memory size"
    data:
      - metric_name: "pmm_server_node_memory_size"
        value: 1

  - id: PMMNodeMemoryUsage
    source: VM
    query: clamp_min(avg by (node_name) (((avg_over_time(node_memory_MemTotal_bytes{node_name=~"pmm-server"}[5m]) or avg_over_time(node_memory_MemTotal_bytes{node_name=~"pmm-server"}[5m])) - ((avg_over_time(node_memory_MemFree_bytes{node_name=~"pmm-server"}[5m]) or avg_over_time(node_memory_MemFree_bytes{node_name=~"pmm-server"}[5m]))+(avg_over_time(node_memory_Buffers_bytes{node_name=~"pmm-server"}[5m]) or avg_over_time(node_memory_Buffers_bytes{node_name=~"pmm-server"}[5m]))+(avg_over_time(node_memory_Cached_bytes{node_name=~"pmm-server"}[5m]) or avg_over_time(node_memory_Cached_bytes{node_name=~"pmm-server"}[5m]))))),0)
    summary: "PMM node memory usage"
    data:
      - metric_name: "pmm_server_node_memory_usage"
        value: 1

  - id: PMMNodeDiskCapacity
    source: VM
    query: sum(sum(avg(node_filesystem_size_bytes{node_name=~"pmm-server",fstype=~"(ext.|xfs|vfat|)"}) without (mountpoint)) without (device,fstype))
    summary: "PMM node disk capacity"
    data:
      - metric_name: "pmm_server_node_disk_capacity"
        value: 1

  - id: PMMNodeOSName
    source: VM
    query: node_uname_info{node_id=~"pmm-server"}
    summary: "PMM node OS name"
    data:
      - metric_name: "pmm_server_node_os_name"
        label: "sysname"

  - id: PMMNodeOSVersion
    source: VM
    query: node_uname_info{node_id=~"pmm-server"}
    summary: "PMM node OS version"
    data:
      - metric_name: "pmm_server_node_os_version"
        label: "release"

  - id: PMMOSNameAndVersion
    source: VM
    query: node_os_info{node_id=~"pmm-server"}
    summary: "PMM node OS name and version"
    data:
      - metric_name: "pmm_server_node_os_pretty_name_and_version"
        label: "pretty_name"

  # Advisor
  - id: AdvisorChecksAvailable
    source: VM
    query: pmm_managed_advisor_checks_available
    transform:
      type: JSON
      metric: "advisor_checks_available"
    summary: "Advisor - number of available advisor checks in PMM"
    data:
      - metric_name: 1
        label: "check_name"
      - metric_name: 2
        value: 1

  - id: AdvisorChecksExecuted
    source: VM
    query: pmm_managed_advisor_checks_executed_total
    transform:
      type: JSON
      metric: "advisor_checks_executed_total"
    summary: "Advisor - total number of executed checks per name"
    data:
      - metric_name: 1
        label: "check_name"
      - metric_name: 2
        value: 1

  - id: AdvisorCheckInsights
    source: VM
    query: pmm_managed_advisor_check_insights
    transform:
      type: JSON
      metric: "advisor_check_insights"
    summary: "Advisor - number of advisor insights per name"
    data:
      - metric_name: 1
        label: "check_name"
      - metric_name: 2
        value: 1

  - id: AdvisorsChecksExecutionTime
    source: VM
    query: pmm_managed_advisor_check_execution_time_seconds
    summary: "Advisor - Time taken for advisor checks to execute"
    transform:
      type: JSON
      metric: "advisor_check_execution_time_seconds"
    data:
      - metric_name: 1
        label: "check_name"
      - metric_name: 2
        value: 1

  - id: AdvisorsChecksDisabled
    source: PMMDB_SELECT
    query: settings->'sass'->'disabled_stt_checks' as disabled_checks from settings;
    summary: "Advisor - Checks that are disabled on the PMM instance"
    transform:
      type: JSON
      metric: "advisor_checks_disabled"
    data:
      - metric_name: "advisor_checks_disabled"
        column: "disabled_checks"
      - metric_name: 2
        value: 1

  #Grafana
  - id: GrafanaUsersCount
    source: GRAFANADB_SELECT
    query: count(*) AS count FROM public.user
    summary: "Grafana Users Count"
    data:
      - metric_name: "grafana_users_count"
        column: "count"

  - id: GrafanaDarkThemeUsersCount
    source: GRAFANADB_SELECT
    query: count(u.id) as count from public.user u left join preferences p on p.user_id = u.id where p.theme = 'dark'
    summary: "Grafana Dark Theme Users Count"
    data:
      - metric_name: "grafana_dark_theme_users_count"
        column: "count"

  - id: GrafanaLightThemeUsersCount
    source: GRAFANADB_SELECT
    query: count(u.id) as count from public.user u left join preferences p on p.user_id = u.id where p.theme = 'light'
    summary: "Grafana Light Theme Users Count"
    data:
      - metric_name: "grafana_light_theme_users_count"
        column: "count"

  - id: GrafanaDefaultThemeUsersCount
    source: GRAFANADB_SELECT
    query: count(u.id) as count from public.user u left join preferences p on p.user_id = u.id where p.theme = '' or p.theme is null
    summary: "Grafana Default Theme Users Count"
    data:
      - metric_name: "grafana_default_theme_users_count"
        column: "count"

  - id: GrafanaCustomDashboardsCount
    source: GRAFANADB_SELECT
    query: count(*) as count from dashboard where created_by != -1 and is_folder = false
    summary: "Grafana Custom Dashboards Count"
    data:
      - metric_name: "grafana_custom_dashboards_count"
        column: "count"

  - id: GrafanaCustomDashboardsPerPillar
    source: GRAFANADB_SELECT
    query: inn.title as pillar, count(d.title) as count from dashboard d left join dashboard inn ON d.folder_id = inn.id where d.created_by != -1 and d.is_folder = false group by inn.title
    summary: "Grafana Custom Dashboards Count By Pillar"
    transform:
      type: JSON
      metric: grafana_custom_dashboards_pillar_combined
    data:
      - metric_name: "pillar"
        column: "pillar"
      - metric_name: "count"
        column: "count"

  # API usage
  - id: APIUsageMetrics
    source: VM
    query: pmm_grpc_server_msg_received_total
    transform:
      type: JSON
      metric: pmm_server_api_usage
    summary: "PMM Server API usage"
    data:
      - metric_name: "1"
        label: "caller_origin" # internal / external
      - metric_name: "2"
        label: "grpc_method"
      - metric_name: "3"
        label: "grpc_service"
      - metric_name: "4"
        label: "grpc_type"
      - metric_name: "5" # pmm-managed / qan-api2
        label: "job"
      - metric_name: "6"
        value: 1

  # Backup Management information
  - id: BackupManagementStorageTypes
    source: PMMDB_SELECT
    query: type AS storage_type, count(*) AS count FROM backup_locations GROUP BY type
    transform:
      type: JSON
      metric: backup_management_storage_types
    summary: "How many storages configured by types"
    data:
      - metric_name: "1"
        column: "storage_type"
      - metric_name: "2"
        column: "count"

  - id: BackupManagementScheduledTasks
    source: PMMDB_SELECT
    query: type AS task_type, count(*) AS count FROM scheduled_tasks GROUP BY task_type
    transform:
      type: JSON
      metric: backup_management_scheduled_tasks
    summary: "How many backup tasks scheduled by types"
    data:
      - metric_name: "1"
        column: "task_type"
      - metric_name: "2"
        column: "count"

  - id: BackupManagementJobsPerformed
    source: PMMDB_SELECT
    query: >
      j.type bm_job_type,
      	coalesce(j.mod, 'N/A') bm_backup_mode,
      	coalesce(j.dm, 'N/A') bm_data_model,
      	coalesce(a_backup.type, 'N/A') bm_job_run_type,
      	j.job_status bm_job_status,
      	coalesce(bl_backup.type, bl_restore.type, 'N/A') bm_location_type,
      	count(*) count
      from (select type,
      			"data"->"type"->>'mode' mod,
      			"data"->"type"->>'data_model' dm,
      			"data"->"type"->>'artifact_id' artifact_id,
      			"data"->"type"->>'restore_id' restore_id,
      			case error when '' then 'success' else 'failed' end job_status
      		from jobs
      		where created_at BETWEEN NOW() - INTERVAL '24 HOURS' AND NOW()
      			group by type, mod, dm, artifact_id, restore_id, job_status) j
      left join artifacts a_backup
      	on a_backup.id = j.artifact_id
      left join backup_locations bl_backup
      	on bl_backup.id = a_backup.location_id
      left join restore_history rh
      	on rh.id = j.restore_id
      left join artifacts a_restore
      	on a_restore.id = rh.artifact_id
      left join backup_locations bl_restore
      	on bl_restore.id = a_restore.location_id
      group by
      	bm_job_type,
      	bm_backup_mode,
      	bm_data_model,
      	bm_job_run_type,
      	bm_job_status,
      	bm_location_type
    transform:
      type: JSON
      metric: backup_management_jobs_performed
    summary: "Backup/restore jobs sliced by different parameters"
    data:
      - metric_name: "1"
        column: "bm_job_type"
      - metric_name: "2"
        column: "bm_backup_mode"
      - metric_name: "3"
        column: "bm_data_model"
      - metric_name: "4"
        column: "bm_job_run_type"
      - metric_name: "5"
        column: "bm_job_status"
      - metric_name: "6"
        column: "bm_location_type"
      - metric_name: "7"
        column: "count"

  # PMM-Dump information
  - id: PMMDumpsPerformed
    source: PMMDB_SELECT
    query: >
      status,
      ARRAY_LENGTH(service_names,1) as services_count,
      end_time - start_time as timerange,
      ignore_load,
      export_qan,
      count(*)
      from dumps
      where created_at BETWEEN NOW() - INTERVAL '24 HOURS' AND NOW()
      group by status, services_count, timerange, ignore_load, export_qan;

    transform:
      type: JSON
      metric: pmm_dumps_performed
    summary: "How many PMM dumps were created"
    data:
      - metric_name: "1"
        column: "status"
      - metric_name: "2"
        column: "services_count"
      - metric_name: "3"
        column: "timerange"
      - metric_name: "4"
        column: "ignore_load"
      - metric_name: "5"
        column: "export_qan"
      - metric_name: "6"
        column: "count"

  - id: PXCClusterNodesCount
    source: VM
    query: (min by (wsrep_cluster_state_uuid) (mysql_global_status_wsrep_cluster_size * on (service_id) group_left(wsrep_cluster_state_uuid) mysql_galera_status_info))
    summary: "Number of nodes for PXC cluster"
    data:
      - metric_name: "pxc_cluster_nodes_count"
        value: 1

  # UI Events
  - id: UIEvents
    summary: "UI Events"
    extension: UIEventsExtension

  - id: PostgresDBCount
    source: VM
    query: count by (service_id) (pg_stat_database_tup_fetched{service_name!="pmm-server-postgresql", datname!~"template.*|postgres", datid!="0"})
    summary: "Number of databases monitored per PostgreSQL server"
    data:
      - metric_name: "postgresql_db_count"
        value: 1

  - id: PMMServerHAEnabled
    source: ENV_VARS
    summary: "Use of HA feature"
    data:
      - metric_name: "pmm_server_ha_enable"
        column: "PERCONA_TEST_HA_ENABLE"

  - id: PMMServerHAUseOfDBs
    source: ENV_VARS
    transform:
      type: StripValues
    summary: "Use of External DBs"
    data:
      - metric_name: "pmm_server_ha_clickhouse_address"
        column: "PERCONA_TEST_PMM_CLICKHOUSE_ADDR"
      - metric_name: "pmm_server_ha_postgres_address"
        column: "PERCONA_TEST_POSTGRES_ADDR"
      - metric_name: "pmm_server_ha_vm_url"
        column: "PMM_VM_URL"
