// Code generated by mockery v1.0.0. DO NOT EDIT.

package backup

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	models "github.com/percona/pmm/managed/models"
)

// mockJobsService is an autogenerated mock type for the jobsService type
type mockJobsService struct {
	mock.Mock
}

// StartMongoDBBackupJob provides a mock function with given fields: jobID, pmmAgentID, timeout, name, dbConfig, mode, dataModel, locationConfig
func (_m *mockJobsService) StartMongoDBBackupJob(jobID string, pmmAgentID string, timeout time.Duration, name string, dbConfig *models.DBConfig, mode models.BackupMode, dataModel models.DataModel, locationConfig *models.BackupLocationConfig) error {
	ret := _m.Called(jobID, pmmAgentID, timeout, name, dbConfig, mode, dataModel, locationConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, string, *models.DBConfig, models.BackupMode, models.DataModel, *models.BackupLocationConfig) error); ok {
		r0 = rf(jobID, pmmAgentID, timeout, name, dbConfig, mode, dataModel, locationConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMongoDBRestoreBackupJob provides a mock function with given fields: jobID, pmmAgentID, timeout, name, dbConfig, dataModel, locationConfig, pitrTimestamp
func (_m *mockJobsService) StartMongoDBRestoreBackupJob(jobID string, pmmAgentID string, timeout time.Duration, name string, dbConfig *models.DBConfig, dataModel models.DataModel, locationConfig *models.BackupLocationConfig, pitrTimestamp time.Time) error {
	ret := _m.Called(jobID, pmmAgentID, timeout, name, dbConfig, dataModel, locationConfig, pitrTimestamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, string, *models.DBConfig, models.DataModel, *models.BackupLocationConfig, time.Time) error); ok {
		r0 = rf(jobID, pmmAgentID, timeout, name, dbConfig, dataModel, locationConfig, pitrTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMySQLBackupJob provides a mock function with given fields: jobID, pmmAgentID, timeout, name, dbConfig, locationConfig
func (_m *mockJobsService) StartMySQLBackupJob(jobID string, pmmAgentID string, timeout time.Duration, name string, dbConfig *models.DBConfig, locationConfig *models.BackupLocationConfig) error {
	ret := _m.Called(jobID, pmmAgentID, timeout, name, dbConfig, locationConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, string, *models.DBConfig, *models.BackupLocationConfig) error); ok {
		r0 = rf(jobID, pmmAgentID, timeout, name, dbConfig, locationConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMySQLRestoreBackupJob provides a mock function with given fields: jobID, pmmAgentID, serviceID, timeout, name, locationConfig
func (_m *mockJobsService) StartMySQLRestoreBackupJob(jobID string, pmmAgentID string, serviceID string, timeout time.Duration, name string, locationConfig *models.BackupLocationConfig) error {
	ret := _m.Called(jobID, pmmAgentID, serviceID, timeout, name, locationConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration, string, *models.BackupLocationConfig) error); ok {
		r0 = rf(jobID, pmmAgentID, serviceID, timeout, name, locationConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopJob provides a mock function with given fields: jobID
func (_m *mockJobsService) StopJob(jobID string) error {
	ret := _m.Called(jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
