// Code generated by mockery v1.0.0. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	minio "github.com/percona/pmm/managed/services/minio"
)

// mockStoragePath is an autogenerated mock type for the storagePath type
type mockStoragePath struct {
	mock.Mock
}

// FileStat provides a mock function with given fields: ctx, bucketName, name
func (_m *mockStoragePath) FileStat(ctx context.Context, bucketName string, name string) (minio.FileInfo, error) {
	ret := _m.Called(ctx, bucketName, name)

	var r0 minio.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string) minio.FileInfo); ok {
		r0 = rf(ctx, bucketName, name)
	} else {
		r0 = ret.Get(0).(minio.FileInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, bucketName, prefix, suffix
func (_m *mockStoragePath) List(ctx context.Context, bucketName string, prefix string, suffix string) ([]minio.FileInfo, error) {
	ret := _m.Called(ctx, bucketName, prefix, suffix)

	var r0 []minio.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []minio.FileInfo); ok {
		r0 = rf(ctx, bucketName, prefix, suffix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]minio.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, bucketName, prefix, suffix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
