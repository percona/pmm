// Code generated by mockery. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockCompatibilityService is an autogenerated mock type for the compatibilityService type
type mockCompatibilityService struct {
	mock.Mock
}

// CheckArtifactCompatibility provides a mock function with given fields: artifactID, targetDBVersion
func (_m *mockCompatibilityService) CheckArtifactCompatibility(artifactID string, targetDBVersion string) error {
	ret := _m.Called(artifactID, targetDBVersion)

	if len(ret) == 0 {
		panic("no return value specified for CheckArtifactCompatibility")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(artifactID, targetDBVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckSoftwareCompatibilityForService provides a mock function with given fields: ctx, serviceID
func (_m *mockCompatibilityService) CheckSoftwareCompatibilityForService(ctx context.Context, serviceID string) (string, error) {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for CheckSoftwareCompatibilityForService")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockCompatibilityService creates a new instance of mockCompatibilityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCompatibilityService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockCompatibilityService {
	mock := &mockCompatibilityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
