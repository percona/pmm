// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type jobTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *jobTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("jobs").
func (v *jobTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *jobTableType) Columns() []string {
	return []string{
		"id",
		"pmm_agent_id",
		"type",
		"data",
		"timeout",
		"retries",
		"interval",
		"done",
		"error",
		"result",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *jobTableType) NewStruct() reform.Struct {
	return new(Job)
}

// NewRecord makes a new record for that table.
func (v *jobTableType) NewRecord() reform.Record {
	return new(Job)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *jobTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// JobTable represents jobs view or table in SQL database.
var JobTable = &jobTableType{
	s: parse.StructInfo{
		Type:    "Job",
		SQLName: "jobs",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "PMMAgentID", Type: "string", Column: "pmm_agent_id"},
			{Name: "Type", Type: "JobType", Column: "type"},
			{Name: "Data", Type: "*JobData", Column: "data"},
			{Name: "Timeout", Type: "time.Duration", Column: "timeout"},
			{Name: "Retries", Type: "uint32", Column: "retries"},
			{Name: "Interval", Type: "time.Duration", Column: "interval"},
			{Name: "Done", Type: "bool", Column: "done"},
			{Name: "Error", Type: "string", Column: "error"},
			{Name: "Result", Type: "*JobResult", Column: "result"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Job).Values(),
}

// String returns a string representation of this struct or record.
func (s Job) String() string {
	res := make([]string, 12)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "PMMAgentID: " + reform.Inspect(s.PMMAgentID, true)
	res[2] = "Type: " + reform.Inspect(s.Type, true)
	res[3] = "Data: " + reform.Inspect(s.Data, true)
	res[4] = "Timeout: " + reform.Inspect(s.Timeout, true)
	res[5] = "Retries: " + reform.Inspect(s.Retries, true)
	res[6] = "Interval: " + reform.Inspect(s.Interval, true)
	res[7] = "Done: " + reform.Inspect(s.Done, true)
	res[8] = "Error: " + reform.Inspect(s.Error, true)
	res[9] = "Result: " + reform.Inspect(s.Result, true)
	res[10] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[11] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Job) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.PMMAgentID,
		s.Type,
		s.Data,
		s.Timeout,
		s.Retries,
		s.Interval,
		s.Done,
		s.Error,
		s.Result,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Job) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.PMMAgentID,
		&s.Type,
		&s.Data,
		&s.Timeout,
		&s.Retries,
		&s.Interval,
		&s.Done,
		&s.Error,
		&s.Result,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Job) View() reform.View {
	return JobTable
}

// Table returns Table object for that record.
func (s *Job) Table() reform.Table {
	return JobTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Job) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Job) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Job) HasPK() bool {
	return s.ID != JobTable.z[JobTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Job) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = JobTable
	_ reform.Struct = (*Job)(nil)
	_ reform.Table  = JobTable
	_ reform.Record = (*Job)(nil)
	_ fmt.Stringer  = (*Job)(nil)
)

type jobLogViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *jobLogViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("job_logs").
func (v *jobLogViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *jobLogViewType) Columns() []string {
	return []string{
		"job_id",
		"chunk_id",
		"data",
		"last_chunk",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *jobLogViewType) NewStruct() reform.Struct {
	return new(JobLog)
}

// JobLogView represents job_logs view or table in SQL database.
var JobLogView = &jobLogViewType{
	s: parse.StructInfo{
		Type:    "JobLog",
		SQLName: "job_logs",
		Fields: []parse.FieldInfo{
			{Name: "JobID", Type: "string", Column: "job_id"},
			{Name: "ChunkID", Type: "int", Column: "chunk_id"},
			{Name: "Data", Type: "string", Column: "data"},
			{Name: "LastChunk", Type: "bool", Column: "last_chunk"},
		},
		PKFieldIndex: -1,
	},
	z: new(JobLog).Values(),
}

// String returns a string representation of this struct or record.
func (s JobLog) String() string {
	res := make([]string, 4)
	res[0] = "JobID: " + reform.Inspect(s.JobID, true)
	res[1] = "ChunkID: " + reform.Inspect(s.ChunkID, true)
	res[2] = "Data: " + reform.Inspect(s.Data, true)
	res[3] = "LastChunk: " + reform.Inspect(s.LastChunk, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *JobLog) Values() []interface{} {
	return []interface{}{
		s.JobID,
		s.ChunkID,
		s.Data,
		s.LastChunk,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *JobLog) Pointers() []interface{} {
	return []interface{}{
		&s.JobID,
		&s.ChunkID,
		&s.Data,
		&s.LastChunk,
	}
}

// View returns View object for that struct.
func (s *JobLog) View() reform.View {
	return JobLogView
}

// check interfaces
var (
	_ reform.View   = JobLogView
	_ reform.Struct = (*JobLog)(nil)
	_ fmt.Stringer  = (*JobLog)(nil)
)

func init() {
	parse.AssertUpToDate(&JobTable.s, new(Job))
	parse.AssertUpToDate(&JobLogView.s, new(JobLog))
}
