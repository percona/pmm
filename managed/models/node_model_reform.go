// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type nodeTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *nodeTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *nodeTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *nodeTableType) Columns() []string {
	return []string{
		"node_id",
		"node_type",
		"node_name",
		"machine_id",
		"distro",
		"node_model",
		"az",
		"custom_labels",
		"address",
		"created_at",
		"updated_at",
		"container_id",
		"container_name",
		"region",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *nodeTableType) NewStruct() reform.Struct {
	return new(Node)
}

// NewRecord makes a new record for that table.
func (v *nodeTableType) NewRecord() reform.Record {
	return new(Node)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *nodeTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// NodeTable represents nodes view or table in SQL database.
var NodeTable = &nodeTableType{
	s: parse.StructInfo{
		Type:    "Node",
		SQLName: "nodes",
		Fields: []parse.FieldInfo{
			{Name: "NodeID", Type: "string", Column: "node_id"},
			{Name: "NodeType", Type: "NodeType", Column: "node_type"},
			{Name: "NodeName", Type: "string", Column: "node_name"},
			{Name: "MachineID", Type: "*string", Column: "machine_id"},
			{Name: "Distro", Type: "string", Column: "distro"},
			{Name: "NodeModel", Type: "string", Column: "node_model"},
			{Name: "AZ", Type: "string", Column: "az"},
			{Name: "CustomLabels", Type: "[]uint8", Column: "custom_labels"},
			{Name: "Address", Type: "string", Column: "address"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
			{Name: "ContainerID", Type: "*string", Column: "container_id"},
			{Name: "ContainerName", Type: "*string", Column: "container_name"},
			{Name: "Region", Type: "*string", Column: "region"},
		},
		PKFieldIndex: 0,
	},
	z: new(Node).Values(),
}

// String returns a string representation of this struct or record.
func (s Node) String() string {
	res := make([]string, 14)
	res[0] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[1] = "NodeType: " + reform.Inspect(s.NodeType, true)
	res[2] = "NodeName: " + reform.Inspect(s.NodeName, true)
	res[3] = "MachineID: " + reform.Inspect(s.MachineID, true)
	res[4] = "Distro: " + reform.Inspect(s.Distro, true)
	res[5] = "NodeModel: " + reform.Inspect(s.NodeModel, true)
	res[6] = "AZ: " + reform.Inspect(s.AZ, true)
	res[7] = "CustomLabels: " + reform.Inspect(s.CustomLabels, true)
	res[8] = "Address: " + reform.Inspect(s.Address, true)
	res[9] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[10] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[11] = "ContainerID: " + reform.Inspect(s.ContainerID, true)
	res[12] = "ContainerName: " + reform.Inspect(s.ContainerName, true)
	res[13] = "Region: " + reform.Inspect(s.Region, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Node) Values() []interface{} {
	return []interface{}{
		s.NodeID,
		s.NodeType,
		s.NodeName,
		s.MachineID,
		s.Distro,
		s.NodeModel,
		s.AZ,
		s.CustomLabels,
		s.Address,
		s.CreatedAt,
		s.UpdatedAt,
		s.ContainerID,
		s.ContainerName,
		s.Region,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Node) Pointers() []interface{} {
	return []interface{}{
		&s.NodeID,
		&s.NodeType,
		&s.NodeName,
		&s.MachineID,
		&s.Distro,
		&s.NodeModel,
		&s.AZ,
		&s.CustomLabels,
		&s.Address,
		&s.CreatedAt,
		&s.UpdatedAt,
		&s.ContainerID,
		&s.ContainerName,
		&s.Region,
	}
}

// View returns View object for that struct.
func (s *Node) View() reform.View {
	return NodeTable
}

// Table returns Table object for that record.
func (s *Node) Table() reform.Table {
	return NodeTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Node) PKValue() interface{} {
	return s.NodeID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Node) PKPointer() interface{} {
	return &s.NodeID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Node) HasPK() bool {
	return s.NodeID != NodeTable.z[NodeTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.NodeID = pk.
func (s *Node) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = NodeTable
	_ reform.Struct = (*Node)(nil)
	_ reform.Table  = NodeTable
	_ reform.Record = (*Node)(nil)
	_ fmt.Stringer  = (*Node)(nil)
)

func init() {
	parse.AssertUpToDate(&NodeTable.s, new(Node))
}
