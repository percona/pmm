// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type scheduledTaskTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *scheduledTaskTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("scheduled_tasks").
func (v *scheduledTaskTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *scheduledTaskTableType) Columns() []string {
	return []string{
		"id",
		"cron_expression",
		"disabled",
		"start_at",
		"last_run",
		"next_run",
		"type",
		"data",
		"running",
		"error",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *scheduledTaskTableType) NewStruct() reform.Struct {
	return new(ScheduledTask)
}

// NewRecord makes a new record for that table.
func (v *scheduledTaskTableType) NewRecord() reform.Record {
	return new(ScheduledTask)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *scheduledTaskTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ScheduledTaskTable represents scheduled_tasks view or table in SQL database.
var ScheduledTaskTable = &scheduledTaskTableType{
	s: parse.StructInfo{
		Type:    "ScheduledTask",
		SQLName: "scheduled_tasks",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "CronExpression", Type: "string", Column: "cron_expression"},
			{Name: "Disabled", Type: "bool", Column: "disabled"},
			{Name: "StartAt", Type: "time.Time", Column: "start_at"},
			{Name: "LastRun", Type: "time.Time", Column: "last_run"},
			{Name: "NextRun", Type: "time.Time", Column: "next_run"},
			{Name: "Type", Type: "ScheduledTaskType", Column: "type"},
			{Name: "Data", Type: "*ScheduledTaskData", Column: "data"},
			{Name: "Running", Type: "bool", Column: "running"},
			{Name: "Error", Type: "string", Column: "error"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(ScheduledTask).Values(),
}

// String returns a string representation of this struct or record.
func (s ScheduledTask) String() string {
	res := make([]string, 12)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "CronExpression: " + reform.Inspect(s.CronExpression, true)
	res[2] = "Disabled: " + reform.Inspect(s.Disabled, true)
	res[3] = "StartAt: " + reform.Inspect(s.StartAt, true)
	res[4] = "LastRun: " + reform.Inspect(s.LastRun, true)
	res[5] = "NextRun: " + reform.Inspect(s.NextRun, true)
	res[6] = "Type: " + reform.Inspect(s.Type, true)
	res[7] = "Data: " + reform.Inspect(s.Data, true)
	res[8] = "Running: " + reform.Inspect(s.Running, true)
	res[9] = "Error: " + reform.Inspect(s.Error, true)
	res[10] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[11] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ScheduledTask) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.CronExpression,
		s.Disabled,
		s.StartAt,
		s.LastRun,
		s.NextRun,
		s.Type,
		s.Data,
		s.Running,
		s.Error,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ScheduledTask) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.CronExpression,
		&s.Disabled,
		&s.StartAt,
		&s.LastRun,
		&s.NextRun,
		&s.Type,
		&s.Data,
		&s.Running,
		&s.Error,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *ScheduledTask) View() reform.View {
	return ScheduledTaskTable
}

// Table returns Table object for that record.
func (s *ScheduledTask) Table() reform.Table {
	return ScheduledTaskTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ScheduledTask) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ScheduledTask) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ScheduledTask) HasPK() bool {
	return s.ID != ScheduledTaskTable.z[ScheduledTaskTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ScheduledTask) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ScheduledTaskTable
	_ reform.Struct = (*ScheduledTask)(nil)
	_ reform.Table  = ScheduledTaskTable
	_ reform.Record = (*ScheduledTask)(nil)
	_ fmt.Stringer  = (*ScheduledTask)(nil)
)

func init() {
	parse.AssertUpToDate(&ScheduledTaskTable.s, new(ScheduledTask))
}
