---
checks:
  - version: 2
    name: mysql_version_eol_57
    summary: End Of Life server version (5.7).
    description: Check if server version is EOL
    interval: standard
    advisor: configuration_version
    #author: The Grinch
    family: MYSQL
    queries:
      - type: MYSQL_SELECT
        query: " @@version version,@@hostname service,@@version_comment as comment, @@basedir as basedir,@@datadir as datadir, datediff('2023-10-23',date(now())) as days;"
    script: |
      def check_eol(doc,read_url,context):
          for row in doc:
            version = row["version"]
            service = row["service"]
            comment = row["comment"].lower()
            basedir = row["basedir"]
            datadir = row["datadir"]
            days = row["days"]

            format_version_num = context.get("format_version_num", fail)
            parse_version = context.get("parse_version", fail)
            is_mysql, is_percona_server, is_percona_xdb_cluster, is_mariadb, is_rds, is_aurora = False, False, False, False, False, False
            is_mysql = 'mysql' in comment
            is_percona_server = 'percona server' in comment
            is_percona_xdb_cluster = 'percona xtradb cluster' in comment
            is_mariadb = 'mariadb' in comment
            is_rds = 'rdsdbbin' in basedir
            if not is_rds :
                is_rds = 'rdsdbdata' in datadir
            parsed_version = parse_version(version)
            version_minor = parsed_version["minor"]
            version_major = parsed_version["major"]

            if is_mysql or is_percona_server or is_percona_xdb_cluster :
               if version_major == 5 and version_minor == 7 :
                   severity = "warning"
                   description = "You are running a server version({}) that is declared to be EOL in {} days".format(version, days)
                   if days < 30 and days > 0 :
                      severity = "error"
                   if days < 0 :
                      severity = "error"
                      description = "You are running a server version({}) that is already EOL and not supported.".format(version)

                   return {
                     "summary": "End Of Life server version",
                     "description": "{} . Current setting: {} {} ;".format(description,version,comment),
                     "severity": "{}".format(severity),
                     "read_more_url": read_url.format("mysql_version_eol_57"),
                     "labels": {
                        "mysql_version": "{}".format(version),
                         "service": "{}".format(service),
                        }
                   }
      def check_context(docs, context):
          # we first define some global variables
          read_url = "https://docs.percona.com/percona-platform/advisors/checks/{}.html"
          results = []
          result1 = check_eol(docs[0],read_url,context)
          if result1 :
            results.append(result1)

          return results
