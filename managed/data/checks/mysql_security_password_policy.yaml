---
checks:
  - version: 2
    name: mysql_security_password_policy
    summary: MySQL security check for password
    description: This check for password policy.
    interval: standard
    advisor: security_configuration
    #author: The Grinch
    family: MYSQL
    queries:
      - type: MYSQL_SELECT
        query: " @@version version,@@hostname service,VARIABLE_VALUE as status, (select CASE VARIABLE_VALUE WHEN 'MEDIUM' then 0 WHEN 'STRONG' THEN 0 WHEN 'LOW' THEN 1 END)as found  from performance_schema.global_variables where VARIABLE_NAME like 'validate_password_policy';"
    script: |
      def check_pw_policy(doc,read_url):
          for row in doc:
            version = row["version"]
            service = row["service"]
            status = row["status"]
            found = row["found"]

            if found > 0 :
               return {
                 "summary": "MySQL security check for password",
                 "description": "Password Policy is not set as best practice, the level is not restrictive enough. Policy level = {} ;".format(status),
                 "severity": "warning",
                 "read_more_url": read_url.format("validate-password-policy"),
                 "labels": {
                    "mysql_version": "{}".format(version),
                     "service": "{}".format(service),
                    }
               }

      def check_context(docs, context):
          # we first define some global variables
          read_url = "https://docs.percona.com/percona-platform/advisors/checks/{}.html"
          results = []

          result1 = check_pw_policy(docs[0],read_url)
          if result1:
            results.append(result1)

          return results
