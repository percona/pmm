---
checks:
  - version: 2
    name: mongodb_connection_sudden_spike
    summary: MongoDB - sudden increase in connection count
    description: This check returns a warning if there is an increase in the number of connections that is higher than 50% of the most recent or normal number of connections.
    interval: standard
    family: MONGODB
    advisor: configuration_connection
    #author: Parag Bhayani
    queries:
      - type: METRICS_RANGE
        query: avg by (node_name) (mongodb_connections{state="current", node_name=~"{{.NodeName}}"})
        parameters:
          range: 24h
          step: 15m
    script: |
      read_url = "https://docs.percona.com/percona-platform/advisors/checks/{}.html"

      def check(docs):
          #Gathering initial connection count.
          prev_conn = int(docs[0][0]["values"][0][1])
          results = []
          connections = []
          cnt = 0
          current_conn = []
          previous_conn = []
          actual_perc = []

          #checking connection count and evaluating sudden spike in connections.
          for type in docs[0][0]["values"]:
              connections.append(type[1])
              curr_conn = int(type[1])
              diff = int(type[1]) - int(prev_conn)
              thres = 0.5 * int(prev_conn)
              if diff > thres:
                  act_perc = int((int(diff) * 100) / int(prev_conn))
                  actual_perc.append(act_perc)
                  current_conn.append(curr_conn)
                  previous_conn.append(prev_conn)
                  cnt = int(cnt) + 1

              prev_conn = int(type[1])

          if cnt > 0:
              return({
                  "summary": "MongoDB sudden spike(> 50%) in connections than the usual count in last 24hrs",
                  "description": "In the last 24 hours, we observed that there were {} times that a sudden spike (> 50%) in the number of connections occurred that was higher than the most recent or normal number of connections. This increase could indicate or cause performance issues unless your overall system is designed to handle spikes of this type. Please check for any changes that may have occurred during that time span to cause this. Here are the stats respectively - Spiked Connections - {}, Previous Connections - {}, Percentage of Spike - {} ".format(cnt, current_conn, previous_conn, actual_perc),
                  "read_more_url": read_url.format("mongodb-connection-spike"),
                  "severity": "warning",
                  "labels": {},
              })

      def check_context(docs, context):
          results = []
          check_result = check(docs)
          if check_result:
              results.append(check_result)
          return results
