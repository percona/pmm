// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package perfschema

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type eventsStatementsSummaryByDigestViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *eventsStatementsSummaryByDigestViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("events_statements_summary_by_digest").
func (v *eventsStatementsSummaryByDigestViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventsStatementsSummaryByDigestViewType) Columns() []string {
	return []string{
		"SCHEMA_NAME",
		"DIGEST",
		"DIGEST_TEXT",
		"COUNT_STAR",
		"SUM_TIMER_WAIT",
		"MIN_TIMER_WAIT",
		"AVG_TIMER_WAIT",
		"MAX_TIMER_WAIT",
		"SUM_LOCK_TIME",
		"SUM_ERRORS",
		"SUM_WARNINGS",
		"SUM_ROWS_AFFECTED",
		"SUM_ROWS_SENT",
		"SUM_ROWS_EXAMINED",
		"SUM_CREATED_TMP_DISK_TABLES",
		"SUM_CREATED_TMP_TABLES",
		"SUM_SELECT_FULL_JOIN",
		"SUM_SELECT_FULL_RANGE_JOIN",
		"SUM_SELECT_RANGE",
		"SUM_SELECT_RANGE_CHECK",
		"SUM_SELECT_SCAN",
		"SUM_SORT_MERGE_PASSES",
		"SUM_SORT_RANGE",
		"SUM_SORT_ROWS",
		"SUM_SORT_SCAN",
		"SUM_NO_INDEX_USED",
		"SUM_NO_GOOD_INDEX_USED",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *eventsStatementsSummaryByDigestViewType) NewStruct() reform.Struct {
	return new(eventsStatementsSummaryByDigest)
}

// eventsStatementsSummaryByDigestView represents events_statements_summary_by_digest view or table in SQL database.
var eventsStatementsSummaryByDigestView = &eventsStatementsSummaryByDigestViewType{
	s: parse.StructInfo{
		Type:      "eventsStatementsSummaryByDigest",
		SQLSchema: "performance_schema",
		SQLName:   "events_statements_summary_by_digest",
		Fields: []parse.FieldInfo{
			{Name: "SchemaName", Type: "*string", Column: "SCHEMA_NAME"},
			{Name: "Digest", Type: "*string", Column: "DIGEST"},
			{Name: "DigestText", Type: "*string", Column: "DIGEST_TEXT"},
			{Name: "CountStar", Type: "uint64", Column: "COUNT_STAR"},
			{Name: "SumTimerWait", Type: "uint64", Column: "SUM_TIMER_WAIT"},
			{Name: "MinTimerWait", Type: "uint64", Column: "MIN_TIMER_WAIT"},
			{Name: "AvgTimerWait", Type: "uint64", Column: "AVG_TIMER_WAIT"},
			{Name: "MaxTimerWait", Type: "uint64", Column: "MAX_TIMER_WAIT"},
			{Name: "SumLockTime", Type: "uint64", Column: "SUM_LOCK_TIME"},
			{Name: "SumErrors", Type: "uint64", Column: "SUM_ERRORS"},
			{Name: "SumWarnings", Type: "uint64", Column: "SUM_WARNINGS"},
			{Name: "SumRowsAffected", Type: "uint64", Column: "SUM_ROWS_AFFECTED"},
			{Name: "SumRowsSent", Type: "uint64", Column: "SUM_ROWS_SENT"},
			{Name: "SumRowsExamined", Type: "uint64", Column: "SUM_ROWS_EXAMINED"},
			{Name: "SumCreatedTmpDiskTables", Type: "uint64", Column: "SUM_CREATED_TMP_DISK_TABLES"},
			{Name: "SumCreatedTmpTables", Type: "uint64", Column: "SUM_CREATED_TMP_TABLES"},
			{Name: "SumSelectFullJoin", Type: "uint64", Column: "SUM_SELECT_FULL_JOIN"},
			{Name: "SumSelectFullRangeJoin", Type: "uint64", Column: "SUM_SELECT_FULL_RANGE_JOIN"},
			{Name: "SumSelectRange", Type: "uint64", Column: "SUM_SELECT_RANGE"},
			{Name: "SumSelectRangeCheck", Type: "uint64", Column: "SUM_SELECT_RANGE_CHECK"},
			{Name: "SumSelectScan", Type: "uint64", Column: "SUM_SELECT_SCAN"},
			{Name: "SumSortMergePasses", Type: "uint64", Column: "SUM_SORT_MERGE_PASSES"},
			{Name: "SumSortRange", Type: "uint64", Column: "SUM_SORT_RANGE"},
			{Name: "SumSortRows", Type: "uint64", Column: "SUM_SORT_ROWS"},
			{Name: "SumSortScan", Type: "uint64", Column: "SUM_SORT_SCAN"},
			{Name: "SumNoIndexUsed", Type: "uint64", Column: "SUM_NO_INDEX_USED"},
			{Name: "SumNoGoodIndexUsed", Type: "uint64", Column: "SUM_NO_GOOD_INDEX_USED"},
		},
		PKFieldIndex: -1,
	},
	z: new(eventsStatementsSummaryByDigest).Values(),
}

// String returns a string representation of this struct or record.
func (s eventsStatementsSummaryByDigest) String() string {
	res := make([]string, 27)
	res[0] = "SchemaName: " + reform.Inspect(s.SchemaName, true)
	res[1] = "Digest: " + reform.Inspect(s.Digest, true)
	res[2] = "DigestText: " + reform.Inspect(s.DigestText, true)
	res[3] = "CountStar: " + reform.Inspect(s.CountStar, true)
	res[4] = "SumTimerWait: " + reform.Inspect(s.SumTimerWait, true)
	res[5] = "MinTimerWait: " + reform.Inspect(s.MinTimerWait, true)
	res[6] = "AvgTimerWait: " + reform.Inspect(s.AvgTimerWait, true)
	res[7] = "MaxTimerWait: " + reform.Inspect(s.MaxTimerWait, true)
	res[8] = "SumLockTime: " + reform.Inspect(s.SumLockTime, true)
	res[9] = "SumErrors: " + reform.Inspect(s.SumErrors, true)
	res[10] = "SumWarnings: " + reform.Inspect(s.SumWarnings, true)
	res[11] = "SumRowsAffected: " + reform.Inspect(s.SumRowsAffected, true)
	res[12] = "SumRowsSent: " + reform.Inspect(s.SumRowsSent, true)
	res[13] = "SumRowsExamined: " + reform.Inspect(s.SumRowsExamined, true)
	res[14] = "SumCreatedTmpDiskTables: " + reform.Inspect(s.SumCreatedTmpDiskTables, true)
	res[15] = "SumCreatedTmpTables: " + reform.Inspect(s.SumCreatedTmpTables, true)
	res[16] = "SumSelectFullJoin: " + reform.Inspect(s.SumSelectFullJoin, true)
	res[17] = "SumSelectFullRangeJoin: " + reform.Inspect(s.SumSelectFullRangeJoin, true)
	res[18] = "SumSelectRange: " + reform.Inspect(s.SumSelectRange, true)
	res[19] = "SumSelectRangeCheck: " + reform.Inspect(s.SumSelectRangeCheck, true)
	res[20] = "SumSelectScan: " + reform.Inspect(s.SumSelectScan, true)
	res[21] = "SumSortMergePasses: " + reform.Inspect(s.SumSortMergePasses, true)
	res[22] = "SumSortRange: " + reform.Inspect(s.SumSortRange, true)
	res[23] = "SumSortRows: " + reform.Inspect(s.SumSortRows, true)
	res[24] = "SumSortScan: " + reform.Inspect(s.SumSortScan, true)
	res[25] = "SumNoIndexUsed: " + reform.Inspect(s.SumNoIndexUsed, true)
	res[26] = "SumNoGoodIndexUsed: " + reform.Inspect(s.SumNoGoodIndexUsed, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigest) Values() []interface{} {
	return []interface{}{
		s.SchemaName,
		s.Digest,
		s.DigestText,
		s.CountStar,
		s.SumTimerWait,
		s.MinTimerWait,
		s.AvgTimerWait,
		s.MaxTimerWait,
		s.SumLockTime,
		s.SumErrors,
		s.SumWarnings,
		s.SumRowsAffected,
		s.SumRowsSent,
		s.SumRowsExamined,
		s.SumCreatedTmpDiskTables,
		s.SumCreatedTmpTables,
		s.SumSelectFullJoin,
		s.SumSelectFullRangeJoin,
		s.SumSelectRange,
		s.SumSelectRangeCheck,
		s.SumSelectScan,
		s.SumSortMergePasses,
		s.SumSortRange,
		s.SumSortRows,
		s.SumSortScan,
		s.SumNoIndexUsed,
		s.SumNoGoodIndexUsed,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigest) Pointers() []interface{} {
	return []interface{}{
		&s.SchemaName,
		&s.Digest,
		&s.DigestText,
		&s.CountStar,
		&s.SumTimerWait,
		&s.MinTimerWait,
		&s.AvgTimerWait,
		&s.MaxTimerWait,
		&s.SumLockTime,
		&s.SumErrors,
		&s.SumWarnings,
		&s.SumRowsAffected,
		&s.SumRowsSent,
		&s.SumRowsExamined,
		&s.SumCreatedTmpDiskTables,
		&s.SumCreatedTmpTables,
		&s.SumSelectFullJoin,
		&s.SumSelectFullRangeJoin,
		&s.SumSelectRange,
		&s.SumSelectRangeCheck,
		&s.SumSelectScan,
		&s.SumSortMergePasses,
		&s.SumSortRange,
		&s.SumSortRows,
		&s.SumSortScan,
		&s.SumNoIndexUsed,
		&s.SumNoGoodIndexUsed,
	}
}

// View returns View object for that struct.
func (s *eventsStatementsSummaryByDigest) View() reform.View {
	return eventsStatementsSummaryByDigestView
}

// check interfaces
var (
	_ reform.View   = eventsStatementsSummaryByDigestView
	_ reform.Struct = (*eventsStatementsSummaryByDigest)(nil)
	_ fmt.Stringer  = (*eventsStatementsSummaryByDigest)(nil)
)

type eventsStatementsSummaryByDigestExamplesViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *eventsStatementsSummaryByDigestExamplesViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("events_statements_summary_by_digest").
func (v *eventsStatementsSummaryByDigestExamplesViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventsStatementsSummaryByDigestExamplesViewType) Columns() []string {
	return []string{
		"QUERY_SAMPLE_TEXT",
		"DIGEST",
		"SCHEMA_NAME",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *eventsStatementsSummaryByDigestExamplesViewType) NewStruct() reform.Struct {
	return new(eventsStatementsSummaryByDigestExamples)
}

// eventsStatementsSummaryByDigestExamplesView represents events_statements_summary_by_digest view or table in SQL database.
var eventsStatementsSummaryByDigestExamplesView = &eventsStatementsSummaryByDigestExamplesViewType{
	s: parse.StructInfo{
		Type:      "eventsStatementsSummaryByDigestExamples",
		SQLSchema: "performance_schema",
		SQLName:   "events_statements_summary_by_digest",
		Fields: []parse.FieldInfo{
			{Name: "SQLText", Type: "*string", Column: "QUERY_SAMPLE_TEXT"},
			{Name: "Digest", Type: "*string", Column: "DIGEST"},
			{Name: "CurrentSchema", Type: "*string", Column: "SCHEMA_NAME"},
		},
		PKFieldIndex: -1,
	},
	z: new(eventsStatementsSummaryByDigestExamples).Values(),
}

// String returns a string representation of this struct or record.
func (s eventsStatementsSummaryByDigestExamples) String() string {
	res := make([]string, 3)
	res[0] = "SQLText: " + reform.Inspect(s.SQLText, true)
	res[1] = "Digest: " + reform.Inspect(s.Digest, true)
	res[2] = "CurrentSchema: " + reform.Inspect(s.CurrentSchema, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigestExamples) Values() []interface{} {
	return []interface{}{
		s.SQLText,
		s.Digest,
		s.CurrentSchema,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigestExamples) Pointers() []interface{} {
	return []interface{}{
		&s.SQLText,
		&s.Digest,
		&s.CurrentSchema,
	}
}

// View returns View object for that struct.
func (s *eventsStatementsSummaryByDigestExamples) View() reform.View {
	return eventsStatementsSummaryByDigestExamplesView
}

// check interfaces
var (
	_ reform.View   = eventsStatementsSummaryByDigestExamplesView
	_ reform.Struct = (*eventsStatementsSummaryByDigestExamples)(nil)
	_ fmt.Stringer  = (*eventsStatementsSummaryByDigestExamples)(nil)
)

type eventsStatementsHistoryViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *eventsStatementsHistoryViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("events_statements_history").
func (v *eventsStatementsHistoryViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventsStatementsHistoryViewType) Columns() []string {
	return []string{
		"SQL_TEXT",
		"DIGEST",
		"CURRENT_SCHEMA",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *eventsStatementsHistoryViewType) NewStruct() reform.Struct {
	return new(eventsStatementsHistory)
}

// eventsStatementsHistoryView represents events_statements_history view or table in SQL database.
var eventsStatementsHistoryView = &eventsStatementsHistoryViewType{
	s: parse.StructInfo{
		Type:      "eventsStatementsHistory",
		SQLSchema: "performance_schema",
		SQLName:   "events_statements_history",
		Fields: []parse.FieldInfo{
			{Name: "SQLText", Type: "*string", Column: "SQL_TEXT"},
			{Name: "Digest", Type: "*string", Column: "DIGEST"},
			{Name: "CurrentSchema", Type: "*string", Column: "CURRENT_SCHEMA"},
		},
		PKFieldIndex: -1,
	},
	z: new(eventsStatementsHistory).Values(),
}

// String returns a string representation of this struct or record.
func (s eventsStatementsHistory) String() string {
	res := make([]string, 3)
	res[0] = "SQLText: " + reform.Inspect(s.SQLText, true)
	res[1] = "Digest: " + reform.Inspect(s.Digest, true)
	res[2] = "CurrentSchema: " + reform.Inspect(s.CurrentSchema, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsHistory) Values() []interface{} {
	return []interface{}{
		s.SQLText,
		s.Digest,
		s.CurrentSchema,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsHistory) Pointers() []interface{} {
	return []interface{}{
		&s.SQLText,
		&s.Digest,
		&s.CurrentSchema,
	}
}

// View returns View object for that struct.
func (s *eventsStatementsHistory) View() reform.View {
	return eventsStatementsHistoryView
}

// check interfaces
var (
	_ reform.View   = eventsStatementsHistoryView
	_ reform.Struct = (*eventsStatementsHistory)(nil)
	_ fmt.Stringer  = (*eventsStatementsHistory)(nil)
)

type setupConsumersViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *setupConsumersViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("setup_consumers").
func (v *setupConsumersViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *setupConsumersViewType) Columns() []string {
	return []string{
		"NAME",
		"ENABLED",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *setupConsumersViewType) NewStruct() reform.Struct {
	return new(setupConsumers)
}

// setupConsumersView represents setup_consumers view or table in SQL database.
var setupConsumersView = &setupConsumersViewType{
	s: parse.StructInfo{
		Type:      "setupConsumers",
		SQLSchema: "performance_schema",
		SQLName:   "setup_consumers",
		Fields: []parse.FieldInfo{
			{Name: "Name", Type: "string", Column: "NAME"},
			{Name: "Enabled", Type: "string", Column: "ENABLED"},
		},
		PKFieldIndex: -1,
	},
	z: new(setupConsumers).Values(),
}

// String returns a string representation of this struct or record.
func (s setupConsumers) String() string {
	res := make([]string, 2)
	res[0] = "Name: " + reform.Inspect(s.Name, true)
	res[1] = "Enabled: " + reform.Inspect(s.Enabled, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *setupConsumers) Values() []interface{} {
	return []interface{}{
		s.Name,
		s.Enabled,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *setupConsumers) Pointers() []interface{} {
	return []interface{}{
		&s.Name,
		&s.Enabled,
	}
}

// View returns View object for that struct.
func (s *setupConsumers) View() reform.View {
	return setupConsumersView
}

// check interfaces
var (
	_ reform.View   = setupConsumersView
	_ reform.Struct = (*setupConsumers)(nil)
	_ fmt.Stringer  = (*setupConsumers)(nil)
)

type setupInstrumentsViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *setupInstrumentsViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("setup_instruments").
func (v *setupInstrumentsViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *setupInstrumentsViewType) Columns() []string {
	return []string{
		"NAME",
		"ENABLED",
		"TIMED",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *setupInstrumentsViewType) NewStruct() reform.Struct {
	return new(setupInstruments)
}

// setupInstrumentsView represents setup_instruments view or table in SQL database.
var setupInstrumentsView = &setupInstrumentsViewType{
	s: parse.StructInfo{
		Type:      "setupInstruments",
		SQLSchema: "performance_schema",
		SQLName:   "setup_instruments",
		Fields: []parse.FieldInfo{
			{Name: "Name", Type: "string", Column: "NAME"},
			{Name: "Enabled", Type: "string", Column: "ENABLED"},
			{Name: "Timed", Type: "*string", Column: "TIMED"},
		},
		PKFieldIndex: -1,
	},
	z: new(setupInstruments).Values(),
}

// String returns a string representation of this struct or record.
func (s setupInstruments) String() string {
	res := make([]string, 3)
	res[0] = "Name: " + reform.Inspect(s.Name, true)
	res[1] = "Enabled: " + reform.Inspect(s.Enabled, true)
	res[2] = "Timed: " + reform.Inspect(s.Timed, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *setupInstruments) Values() []interface{} {
	return []interface{}{
		s.Name,
		s.Enabled,
		s.Timed,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *setupInstruments) Pointers() []interface{} {
	return []interface{}{
		&s.Name,
		&s.Enabled,
		&s.Timed,
	}
}

// View returns View object for that struct.
func (s *setupInstruments) View() reform.View {
	return setupInstrumentsView
}

// check interfaces
var (
	_ reform.View   = setupInstrumentsView
	_ reform.Struct = (*setupInstruments)(nil)
	_ fmt.Stringer  = (*setupInstruments)(nil)
)

func init() {
	parse.AssertUpToDate(&eventsStatementsSummaryByDigestView.s, new(eventsStatementsSummaryByDigest))
	parse.AssertUpToDate(&eventsStatementsSummaryByDigestExamplesView.s, new(eventsStatementsSummaryByDigestExamples))
	parse.AssertUpToDate(&eventsStatementsHistoryView.s, new(eventsStatementsHistory))
	parse.AssertUpToDate(&setupConsumersView.s, new(setupConsumers))
	parse.AssertUpToDate(&setupInstrumentsView.s, new(setupInstruments))
}
