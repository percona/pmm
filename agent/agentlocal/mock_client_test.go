// Code generated by mockery. DO NOT EDIT.

package agentlocal

import (
	time "time"

	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"

	agentv1 "github.com/percona/pmm/api/agent/v1"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// Collect provides a mock function with given fields: _a0
func (_m *mockClient) Collect(_a0 chan<- prometheus.Metric) {
	_m.Called(_a0)
}

// Describe provides a mock function with given fields: _a0
func (_m *mockClient) Describe(_a0 chan<- *prometheus.Desc) {
	_m.Called(_a0)
}

// GetConnectionUpTime provides a mock function with given fields:
func (_m *mockClient) GetConnectionUpTime() float32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionUpTime")
	}

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// GetNetworkInformation provides a mock function with given fields:
func (_m *mockClient) GetNetworkInformation() (time.Duration, time.Duration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInformation")
	}

	var r0 time.Duration
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func() (time.Duration, time.Duration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetServerConnectMetadata provides a mock function with given fields:
func (_m *mockClient) GetServerConnectMetadata() *agentv1.ServerConnectMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerConnectMetadata")
	}

	var r0 *agentv1.ServerConnectMetadata
	if rf, ok := ret.Get(0).(func() *agentv1.ServerConnectMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentv1.ServerConnectMetadata)
		}
	}

	return r0
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
